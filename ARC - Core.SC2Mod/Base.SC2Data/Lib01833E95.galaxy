include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC_h"
include "LibCOMI_h"
include "LibCOUI_h"
include "LibCOMU_h"
include "LibA8FDA37D_h"
include "Lib860A1A1F_h"

include "Lib01833E95_h"

//--------------------------------------------------------------------------------------------------
// Library: Additional Features
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib01833E95_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libA8FDA37D_InitVariables();
    lib860A1A1F_InitVariables();
}

// Variable Initialization
bool lib01833E95_InitVariables_completed = false;

void lib01833E95_InitVariables () {
    int init_i;
    int init_j;

    if (lib01833E95_InitVariables_completed) {
        return;
    }

    lib01833E95_InitVariables_completed = true;

    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib01833E95_gv_aF_TopBarIcons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib01833E95_gv_aF_TopBarIconsDialog = c_invalidDialogId;
    lib01833E95_gv_aF_ScoreButton = c_invalidDialogControlId;
    lib01833E95_gv_aF_Score_KillGraph = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib01833E95_gv_aF_Score_PieCharts[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib01833E95_gv_aF_Score_FinalButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib01833E95_gv_aF_Score_FinalButtonLabel[init_i] = c_invalidDialogControlId;
    }
    lib01833E95_gv_aF_KillNumbers = c_invalidDialogId;
    lib01833E95_gv_aF_SlimUI_PlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib01833E95_gv_aF_TopbarButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib01833E95_gv_tW_Color = StringExternal("Param/Value/lib_01833E95_ECB680DD");
    lib01833E95_gv_tW_PlayerUG = PlayerGroupEmpty();
    lib01833E95_gv_tW_JoinedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib01833E95_gv_tW_MaxUsersSaved; init_i += 1) {
        lib01833E95_gv_tW_Users[init_i].lv_pUser = "";
    }
    for (init_i = 0; init_i <= lib01833E95_gv_tW_MaxUsersSaved; init_i += 1) {
        lib01833E95_gv_tW_UserDiedLog[init_i].lv_pUser = "";
    }
    lib01833E95_gv_tW_Timer = TimerCreate();
    lib01833E95_gv_tW_MaxUnitsSpawn = 30;
    lib01833E95_gv_tW_MaxUnitsHeroicSpawn = 5;
    lib01833E95_gv_tW_KillTimer = TimerCreate();
}

// Functions
void lib01833E95_gf_AF_SetTychusSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance) {
    // Variable Declarations
    string lv_abilIndex;
    string lv_abil;
    string lv_button;
    string lv_replaceTarget;
    string lv_replaceTargetTop;
    int lv_replacePlayer;
    unitgroup lv_structureGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilIndex = IntToString((lp_squadIndex + 1));
    lv_abil = UserDataGetGameLink(libCOMI_gv_cM_Tychus_UserTypeHeroList, lp_squadInstance, "Active Abil", 1);
    lv_button = UserDataGetGameLink(libCOMI_gv_cM_Tychus_UserTypeHeroList, lp_squadInstance, "Active Button", 1);
    lv_replaceTarget = (libCOUI_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex);
    lv_replaceTargetTop = (libCOUI_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex + "Top");
    lv_replacePlayer = UnitGetOwner(lp_unit);
    lv_structureGroup = UnitGroup(UserDataGetUnit("XAC_TechTychusSquad", lp_squadInstance, "EquipmentStructure", 1), UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    if (((lp_squadIndex < 0) || (lp_squadIndex >= libCOUI_gv_cUC_TYCHUS_MAX_SQUAD_SIZE))) {
        return ;
    }
    libCOMI_gf_ButtonReplacement(lv_replacePlayer, (lv_replaceTarget), lv_button);
    CatalogLinkReplace(lv_replacePlayer, c_gameCatalogAbil, lv_replaceTarget, (lv_abil));
    UserDataSetInt("XAC_TechTychusSquad", lp_squadInstance, "Squad Slot", 1, lp_squadIndex);
    libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], lp_unit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadUnitTargets[lp_squadIndex], lp_unit, PlayerGroupAll());
    if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_TychusSquadEquipmentStructureTargets[lp_squadIndex], UnitGroupUnit(lv_structureGroup, 1), PlayerGroupAll());
    }

    PortraitSetModel(PortraitGetTriggerControl(libCOUI_gv_cU_TychusSquadPortraits[lp_squadIndex]), UserDataGetModel("XAC_TechTychusSquad", lp_squadInstance, "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCOUI_gv_cU_TychusSquadPortraits[lp_squadIndex]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_TychusSquadPortraitsStatic[lp_squadIndex], UserDataGetImagePath("XAC_TechTychusSquad", lp_squadInstance, "2D Portrait", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "UnitState", (lp_squadInstance));
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "AvailabilityState", "Available");
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
}

string lib01833E95_gf_AF_GetTychusSquadInstance (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto71A14BF3_userType;
    int auto71A14BF3_i;

    // Variable Initialization

    // Implementation
    auto71A14BF3_userType = "XAC_TechTychusSquad";
    auto71A14BF3_i = 1;
    for ( ; auto71A14BF3_i <= UserDataInstanceCount(auto71A14BF3_userType) ; auto71A14BF3_i += 1 ) {
        lv_instance = UserDataInstance(auto71A14BF3_userType, auto71A14BF3_i);
        if ((UnitGetType(lp_unit) == UserDataGetUnit("XAC_TechTychusSquad", lv_instance, "Unit Type", 1))) {
            return lv_instance;
        }

    }
    return null;
}

int lib01833E95_gf_AF_GetTychusSquadIndex () {
    // Variable Declarations
    int lv_currentindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentindex = libCOUI_gv_cU_TychusSquadNextIndex;

    // Implementation
    return lv_currentindex;
}

void lib01833E95_gf_AF_Tychus_InitHeroTechLimit (int lp_pPlayer) {
    // Variable Declarations
    int lv_vAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vAmount = 5000;

    // Implementation
    TechTreeSetProduceCap(lp_pPlayer, "Alias_TychusUniqueUnit", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusCoop", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusReaper", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusWarhound", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusFirebat", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusHERC", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusMarauder", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusGhost", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusSpectre", c_techCatUnit, lv_vAmount);
    TechTreeSetProduceCap(lp_pPlayer, "TychusMedic", c_techCatUnit, lv_vAmount);
}

text lib01833E95_gf_CU_PrestigeBriefFormatTooltip (int lp_player) {
    // Variable Declarations
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_face = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_ActiveCommanderForPlayer4(lp_player), libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player));

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_01833E95_AC625CFD", "A", libCOOC_gf_CC_CommanderName(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_01833E95_AC625CFD", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_01833E95_AC625CFD", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_01833E95_AC625CFD");
}

trigger auto_lib01833E95_gf_AF_MutatorIconsCreate_Trigger = null;
int auto_lib01833E95_gf_AF_MutatorIconsCreate_lp_pDialog;

void lib01833E95_gf_AF_MutatorIconsCreate (int lp_pDialog) {
    auto_lib01833E95_gf_AF_MutatorIconsCreate_lp_pDialog = lp_pDialog;

    if (auto_lib01833E95_gf_AF_MutatorIconsCreate_Trigger == null) {
        auto_lib01833E95_gf_AF_MutatorIconsCreate_Trigger = TriggerCreate("auto_lib01833E95_gf_AF_MutatorIconsCreate_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_AF_MutatorIconsCreate_Trigger, false, false);
}

bool auto_lib01833E95_gf_AF_MutatorIconsCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_lib01833E95_gf_AF_MutatorIconsCreate_lp_pDialog;

    int init_i;

    // Variable Declarations
    string lv_vIndexMutator;
    int[21] lv_vMutatorPanels;
    int lv_vA;
    int lv_vB;

    // Automatic Variable Declarations
    int auto14EA5E41_ai;
    int auto14EA5E41_ae;
    int auto8478BD0A_ae;
    const int auto8478BD0A_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vMutatorPanels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    Wait(1.5, c_timeGame);
    auto14EA5E41_ai = 1;
    auto14EA5E41_ae = UserDataInstanceCount("Mutators")+1;
    while (auto14EA5E41_ai < auto14EA5E41_ae) {
        lv_vIndexMutator = UserDataInstance("Mutators", auto14EA5E41_ai);
        auto14EA5E41_ai = auto14EA5E41_ai+1;
        if ((libCOMU_gf_MutatorIsEnabled(lv_vIndexMutator) == true)) {
            lv_vA += 1;
            DialogControlCreateFromTemplate(lp_pDialog, c_triggerControlTypePanel, "Coop_MutatorList/MutatorSmallListItemTemplate");
            lv_vMutatorPanels[lv_vA] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MutatorIcon");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMU_gf_CT_MutatorIcon(lv_vIndexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_01833E95_548E90B6", "NAME", libCOMU_gf_CT_MutatorName(lv_vIndexMutator));
            TextExpressionSetToken("Param/Expression/lib_01833E95_548E90B6", "DESCRIPTION", libCOMU_gf_CT_MutatorDescription(lv_vIndexMutator));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_01833E95_548E90B6"), PlayerGroupAll());
        }

    }
    auto8478BD0A_ae = lv_vA;
    lv_vB = 1;
    for ( ; ( (auto8478BD0A_ai >= 0 && lv_vB <= auto8478BD0A_ae) || (auto8478BD0A_ai < 0 && lv_vB >= auto8478BD0A_ae) ) ; lv_vB += auto8478BD0A_ai ) {
        DialogControlSetPosition(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), c_anchorTop, FixedToInt((70* (IntToFixed(lv_vB)  - 0.5 - (IntToFixed(lv_vA)/2)))), 165);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 1.5, 15.0);
        DialogControlSetVisible(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), true);
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_lib01833E95_gf_AF_MasteryInfoCreate_Trigger = null;
int auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pDialog;
int auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pPlayer;

void lib01833E95_gf_AF_MasteryInfoCreate (int lp_pDialog, int lp_pPlayer) {
    auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pDialog = lp_pDialog;
    auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pPlayer = lp_pPlayer;

    if (auto_lib01833E95_gf_AF_MasteryInfoCreate_Trigger == null) {
        auto_lib01833E95_gf_AF_MasteryInfoCreate_Trigger = TriggerCreate("auto_lib01833E95_gf_AF_MasteryInfoCreate_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_AF_MasteryInfoCreate_Trigger, false, false);
}

bool auto_lib01833E95_gf_AF_MasteryInfoCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pDialog;
    int lp_pPlayer = auto_lib01833E95_gf_AF_MasteryInfoCreate_lp_pPlayer;

    int init_i;

    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int[7] lv_vMasteryLabel;
    int lv_vIndex;
    int lv_vOffsetX;
    int lv_vAnchor;
    int lv_vB;
    string lv_button;
    text lv_vText;
    int lv_vPrestigeIndex;
    int lv_vPrestigeLabel;

    // Automatic Variable Declarations
    int autoE9FD5354_ai;
    int autoE9FD5354_ae;
    int autoE9FD5354_ac;
    int autoC0C042D2_ae;
    const int autoC0C042D2_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_vMasteryLabel[init_i] = c_invalidDialogControlId;
    }
    lv_vOffsetX = 440;
    lv_vAnchor = c_anchorBottomLeft;
    lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[1];
    lv_vPrestigeLabel = c_invalidDialogControlId;

    // Implementation
    Wait(1.5, c_timeGame);
    if ((lp_pPlayer == 2)) {
        lv_vAnchor = c_anchorBottom;
        lv_vOffsetX = 500;
        lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[2];
    }

    lv_button = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_ActiveCommanderForPlayer4(lp_pPlayer), lv_vPrestigeIndex);
    lv_vText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", lp_pPlayer));
    libNtve_gf_CreateDialogItemLabel(lp_pDialog, 500, 50, lv_vAnchor, lv_vOffsetX, 0, lv_vText, ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vPrestigeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PrestigeScore", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib01833E95_gf_CU_PrestigeBriefFormatTooltip(lp_pPlayer), PlayerGroupAll());
    autoE9FD5354_ai = 0;
    autoE9FD5354_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoE9FD5354_ai < autoE9FD5354_ae) {
        autoE9FD5354_ai = autoE9FD5354_ai+1;
        autoE9FD5354_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoE9FD5354_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoE9FD5354_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoE9FD5354_ai);
            if ((libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade) >= 1)) {
                TextExpressionSetToken("Param/Expression/lib_01833E95_BE6088B8", "A", libA8FDA37D_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade));
                TextExpressionSetToken("Param/Expression/lib_01833E95_BE6088B8", "B", IntToText(libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade)));
                libNtve_gf_CreateDialogItemLabel(lp_pDialog, 600, 50, lv_vAnchor, 0, 0, TextExpressionAssemble("Param/Expression/lib_01833E95_BE6088B8"), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
                lv_vMasteryLabel[lv_vIndex] = DialogControlLastCreated();
                lv_vIndex += 1;
            }

        }    
    }
    DialogControlSetPosition(lv_vPrestigeLabel, PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * lv_vIndex + 30));
    DialogControlFadeTransparency(lv_vPrestigeLabel, PlayerGroupAll(), 1.5, 20.0);
    Wait(0.5, c_timeGame);
    autoC0C042D2_ae = lv_vIndex;
    lv_vB = 0;
    for ( ; ( (autoC0C042D2_ai >= 0 && lv_vB <= autoC0C042D2_ae) || (autoC0C042D2_ai < 0 && lv_vB >= autoC0C042D2_ae) ) ; lv_vB += autoC0C042D2_ai ) {
        DialogControlSetPosition(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * (lv_vIndex - lv_vB ) - 10));
        DialogControlFadeTransparency(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), 1.5, 20.0);
        Wait(0.5, c_timeGame);
    }
    return true;
}

void lib01833E95_gf_AF_AttachTextTagImage (unit lp_pUnit, string lp_pImageName, int lp_pHeight, int lp_pWidth) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeStructure) == true) || (UnitTypeTestFlag(UnitGetType(lp_pUnit), c_unitFlagMissile) == true) || (UnitGetType(lp_pUnit) == "SpiderMine") || (UnitGetType(lp_pUnit) == "SpiderMineBurrowed") || (UnitGetType(lp_pUnit) == "HHMagneticMine_SpawnerUnit") || (UnitGetType(lp_pUnit) == "HHMagneticMineWeapon") || (UnitGetType(lp_pUnit) == "HHMagneticMine") || (UnitGetType(lp_pUnit) == "HHMagneticMinePrep") || (UnitGetType(lp_pUnit) == "BiomassPickup") || (UnitGetType(lp_pUnit) == "EssencePickup") || (UnitGetType(lp_pUnit) == "HHScrapPickup") || (UnitGetType(lp_pUnit) == "ShadowCloudEpilogue01") || (UnitGetType(lp_pUnit) == "ForceField") || (UnitGetType(lp_pUnit) == "DummyUnit") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDropLT1") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDrop1") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDrop2") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDrop3") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDrop4") || (UnitGetType(lp_pUnit) == "KerriganVoidCoopEconDrop5") || (UnitGetType(lp_pUnit) == "Banshee_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "ProgressBarDummy") || (UnitGetType(lp_pUnit) == "ProgressBarWideDummy") || (UnitGetType(lp_pUnit) == "ProgressBarWideDummy") || (UnitGetType(lp_pUnit) == "SIStukovRallyBeaconPsiEmitterPoint") || (UnitGetType(lp_pUnit) == "NovaPsiEmitter") || (UnitGetType(lp_pUnit) == "FenixClolarionInterceptor") || (UnitGetType(lp_pUnit) == "Interceptor") || (UnitGetType(lp_pUnit) == "InterceptorAiur") || (UnitGetType(lp_pUnit) == "SS_Interceptor") || (UnitGetType(lp_pUnit) == "Ghost_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Goliath_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Hellbat_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Raven_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "HHBattlecruiser_SpawnerUnit") || (UnitGetType(lp_pUnit) == "HHMagneticMine_SpawnerUnit") || (UnitGetType(lp_pUnit) == "HHRaven_SpawnerUnit") || (UnitGetType(lp_pUnit) == "HHViking_SpawnerUnit") || (UnitGetType(lp_pUnit) == "HHWraith_SpawnerUnit") || (UnitGetType(lp_pUnit) == "Liberator_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Marauder_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Marine_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "Medivac_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "SiegeTank_BlackOpsSpawnerUnit") || (UnitGetType(lp_pUnit) == "HHReaperFlyPrecursor") || (UnitGetType(lp_pUnit) == "HHReaperPrecursor") || (UnitGetType(lp_pUnit) == "LocustMPPrecursor") || (UnitGetType(lp_pUnit) == "TychusOdinPrecursor") || (UnitGetType(lp_pUnit) == "HHD8CenterCluster") || (UnitGetType(lp_pUnit) == "HHD8SingleCluster") || (UnitGetType(lp_pUnit) == "HHD8CenterCluster") || (UnitGetType(lp_pUnit) == "HHD8ClusterBomb") || (UnitGetType(lp_pUnit) == "HotSRaptorPlaceholder") || (UnitGetType(lp_pUnit) == "ZeratulPhaseCannonPlaceholder") || (UnitGetType(lp_pUnit) == "CreepTumorStukov") || (UnitGetType(lp_pUnit) == "DrakkenLaserDrill") || (UnitGetType(lp_pUnit) == "SOAPylonPowerAllyUnit") || (UnitGetType(lp_pUnit) == "SOAPylonPowerUnit") || (UnitGetType(lp_pUnit) == "Larva") || (UnitGetType(lp_pUnit) == "DehakaLarva") || (UnitGetType(lp_pUnit) == "MegalithCutter") || (UnitGetType(lp_pUnit) == "ZeratulStalkerGhost"))) {
        return ;
    }

    if (((libHots_gf_TextTagForUnit(lp_pUnit, lib01833E95_gv_aF_Meme_TextTagIndex) == c_textTagNone) || (TextTagVisible(libHots_gf_TextTagForUnit(lp_pUnit, lib01833E95_gv_aF_Meme_TextTagIndex), 1) == false))) {
        TextExpressionSetToken("Param/Expression/lib_01833E95_227AC619", "A", StringToText(lp_pImageName));
        TextExpressionSetToken("Param/Expression/lib_01833E95_227AC619", "B", IntToText(lp_pHeight));
        TextExpressionSetToken("Param/Expression/lib_01833E95_227AC619", "C", IntToText(lp_pWidth));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_01833E95_227AC619"), 60, UnitGetPosition(lp_pUnit), 0.0, true, true, PlayerGroupAll());
        if ((lib01833E95_gf_AF_UnitHasHead(lp_pUnit) == false)) {
            TextTagAttachToUnitPoint(TextTagLastCreated(), lp_pUnit, "Ref_Overhead", 0, 0);
        }
        else {
            TextTagAttachToUnitPoint(TextTagLastCreated(), lp_pUnit, "Ref_Head", 0, 0);
        }
        libHots_gf_StoreTextTagForUnit(lp_pUnit, lib01833E95_gv_aF_Meme_TextTagIndex, TextTagLastCreated());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_01833E95_3EA2D7C8", "A", StringToText(lp_pImageName));
        TextExpressionSetToken("Param/Expression/lib_01833E95_3EA2D7C8", "B", IntToText(lp_pHeight));
        TextExpressionSetToken("Param/Expression/lib_01833E95_3EA2D7C8", "C", IntToText(lp_pWidth));
        TextTagSetText(libHots_gf_TextTagForUnit(lp_pUnit, lib01833E95_gv_aF_Meme_TextTagIndex), TextExpressionAssemble("Param/Expression/lib_01833E95_3EA2D7C8"));
    }
}

bool lib01833E95_gf_AF_UnitHasHead (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_pUnit) == "ThorAP") || (UnitGetType(lp_pUnit) == "Thor") || (UnitGetType(lp_pUnit) == "Mothership") || (UnitGetType(lp_pUnit) == "MothershipAiur06") || (UnitGetType(lp_pUnit) == "SOAMothershipv4") || (UnitGetType(lp_pUnit) == "Leviathan") || (UnitGetType(lp_pUnit) == "HotSLeviathan") || (UnitGetType(lp_pUnit) == "Goliath") || (UnitGetType(lp_pUnit) == "Goliath_BlackOps") || (UnitGetType(lp_pUnit) == "InfestedAbomination") || (UnitGetType(lp_pUnit) == "InfestedAbominationBurrowed") || (UnitGetType(lp_pUnit) == "VoidRay") || (UnitGetType(lp_pUnit) == "Sentry") || (UnitGetType(lp_pUnit) == "Wraith") || (UnitGetType(lp_pUnit) == "HHWraith") || (UnitGetType(lp_pUnit) == "TerranDropPod") || (UnitGetType(lp_pUnit) == "ZergDropPodLarge") || (UnitGetType(lp_pUnit) == "HHWidowMine") || (UnitGetType(lp_pUnit) == "HHWidowMineBurrowed") || (UnitGetType(lp_pUnit) == "DehakaSwarmHost") || (UnitGetType(lp_pUnit) == "DehakaSwarmHostBurrowed") || (UnitGetType(lp_pUnit) == "NovaBoombot") || (UnitGetType(lp_pUnit) == "NovaBoombotBurrowed") || (UnitGetType(lp_pUnit) == "DehakaPrimalSwarmHost") || (UnitGetType(lp_pUnit) == "DehakaPrimalSwarmHostBurrowed") || (UnitGetType(lp_pUnit) == "SwarmHostMP") || (UnitGetType(lp_pUnit) == "SwarmHostBurrowedMP") || (UnitGetType(lp_pUnit) == "DehakaGuardian") || (UnitGetType(lp_pUnit) == "Guardian") || (UnitGetType(lp_pUnit) == "GuardianMP") || (UnitGetType(lp_pUnit) == "Disruptor") || (UnitGetType(lp_pUnit) == "ZeratulDisruptor") || (UnitGetType(lp_pUnit) == "ZeratulObserver") || (UnitGetType(lp_pUnit) == "ZeratulObserverSiegeMode") || (UnitGetType(lp_pUnit) == "XelNagaConstruct") || (UnitGetType(lp_pUnit) == "ZeratulXelNagaConstruct") || (UnitGetType(lp_pUnit) == "ZeratulXelNagaConstructCyan") || (UnitGetType(lp_pUnit) == "Observer") || (UnitGetType(lp_pUnit) == "ObserverSiegeMode") || (UnitGetType(lp_pUnit) == "Viper") || (UnitGetType(lp_pUnit) == "Devourer") || (UnitGetType(lp_pUnit) == "Scout") || (UnitGetType(lp_pUnit) == "FenixMojoScout") || (UnitGetType(lp_pUnit) == "FenixArbiter") || (UnitGetType(lp_pUnit) == "FenixDragoon") || (UnitGetType(lp_pUnit) == "SILiberator") || (UnitGetType(lp_pUnit) == "LiberatorSkinPreview") || (UnitGetType(lp_pUnit) == "Liberator") || (UnitGetType(lp_pUnit) == "LiberatorAG") || (UnitGetType(lp_pUnit) == "Liberator_BlackOps") || (UnitGetType(lp_pUnit) == "LiberatorAG_BlackOps") || (UnitGetType(lp_pUnit) == "SIQueen") || (UnitGetType(lp_pUnit) == "HellbatBlackOps") || (UnitGetType(lp_pUnit) == "HHHellionTank") || (UnitGetType(lp_pUnit) == "HellionTank") || (UnitGetType(lp_pUnit) == "Hercules") || (UnitGetType(lp_pUnit) == "Probe") || (UnitGetType(lp_pUnit) == "FenixProbiusProbe") || (UnitGetType(lp_pUnit) == "Tempest") || (UnitGetType(lp_pUnit) == "Dragoon") || (UnitGetType(lp_pUnit) == "ZagaraVoidCoop") || (UnitGetType(lp_pUnit) == "ZagaraVoidCoopBurrowed") || (UnitGetType(lp_pUnit) == "Odin") || (UnitGetType(lp_pUnit) == "TychusOdin") || (UnitGetType(lp_pUnit) == "OdinMKII") || (UnitGetType(lp_pUnit) == "Scourge") || (UnitGetType(lp_pUnit) == "TychusWarhound") || (UnitGetType(lp_pUnit) == "TychusFirebat") || (UnitGetType(lp_pUnit) == "TychusHERC") || (UnitGetType(lp_pUnit) == "K5Kerrigan") || (UnitGetType(lp_pUnit) == "K5KerriganBurrowed") || (UnitGetType(lp_pUnit) == "BroodlingEscort") || (UnitGetType(lp_pUnit) == "VoidRayShakuras") || (UnitGetType(lp_pUnit) == "Mohandar") || (UnitGetType(lp_pUnit) == "ZeratulSummonVoidRay") || (UnitGetType(lp_pUnit) == "VoidRayTaldarim") || (UnitGetType(lp_pUnit) == "Oracle") || (UnitGetType(lp_pUnit) == "CorsairMP") || (UnitGetType(lp_pUnit) == "Monitor") || (UnitGetType(lp_pUnit) == "ZeratulSentry") || (UnitGetType(lp_pUnit) == "ZeratulXelNagaConstruct") || (UnitGetType(lp_pUnit) == "ZeratulXelNagaConstructCyan") || (UnitGetType(lp_pUnit) == "HHMagneticMine") || (UnitGetType(lp_pUnit) == "HHMagneticMinePrep"))) {
        return false;
    }
    else {
        return true;
    }
}

void lib01833E95_gf_InitBlizzconChallenge () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib01833E95_gt_AF_BlizzconChallengeInit, true, false);
}

unit lib01833E95_gf_CM_PlayerGetGlobalCaster (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_GlobalCasterUnit[lp_player];
}

unit lib01833E95_gf_AF_GetHeroUnit (int lp_pPlayer) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gv_cM_HeroUnit[lp_pPlayer];

    // Implementation
    return lv_vUnit;
}

string lib01833E95_gf_AF_GetAbility (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string auto215C5E90_val;
    int auto448FCD15_val;
    int auto0EC3AAA4_val;
    int auto387A0995_val;
    int autoAA01CE13_val;
    int autoC7FB60F1_val;
    int auto2B6943F8_val;
    int auto28E9090C_val;
    int auto858AA747_val;
    int auto2ADA6B10_val;
    int auto2C09A3CB_val;
    int auto56FDE091_val;
    int autoFFA20321_val;
    int autoC7697159_val;
    int auto27E918B9_val;
    int auto4B5B2EC0_val;
    int auto3A2AC3DE_val;
    int auto9A886EF6_val;
    int autoF64582F8_val;
    int auto2A715934_val;

    // Implementation
    auto215C5E90_val = libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto215C5E90_val == "Mengsk") {
        auto448FCD15_val = lp_pButtonIndex;
        if (auto448FCD15_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto448FCD15_val == 1) {
            return "ArtilleryMengskGlobalExperimentalStrike";
        }
        else if (auto448FCD15_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto448FCD15_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Vorazun") {
        auto0EC3AAA4_val = lp_pButtonIndex;
        if (auto0EC3AAA4_val == 0) {
            return "SOADarkPylon";
        }
        else if (auto0EC3AAA4_val == 1) {
            return "VoidSentryBlackHole";
        }
        else if (auto0EC3AAA4_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (auto0EC3AAA4_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Raynor") {
        auto387A0995_val = lp_pButtonIndex;
        if (auto387A0995_val == 0) {
            return "VoidCoopSummonHyperion";
        }
        else if (auto387A0995_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Abathur") {
        autoAA01CE13_val = lp_pButtonIndex;
        if (autoAA01CE13_val == 0) {
            return "SpawnToxicNest";
        }
        else if (autoAA01CE13_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Alarak") {
        autoC7FB60F1_val = lp_pButtonIndex;
        if (autoC7FB60F1_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (autoC7FB60F1_val == 1) {
            return "AlarakACSummonDeathfleetTarget";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Artanis") {
        auto2B6943F8_val = lp_pButtonIndex;
        if (auto2B6943F8_val == 0) {
        }
        else if (auto2B6943F8_val == 1) {
            return "SOAOrbitalStrikeActivate";
        }
        else if (auto2B6943F8_val == 2) {
            return "SoASuperShield";
        }
        else if (auto2B6943F8_val == 3) {
            return "SOAStrafeAttackActivate";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Dehaka") {
        auto28E9090C_val = lp_pButtonIndex;
        if (auto28E9090C_val == 0) {
            return "DehakaNydusDestroyerTopBar";
        }
        else if (auto28E9090C_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (auto28E9090C_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (auto28E9090C_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Fenix") {
        auto858AA747_val = lp_pButtonIndex;
        if (auto858AA747_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto858AA747_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto858AA747_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Horner") {
        auto2ADA6B10_val = lp_pButtonIndex;
        if (auto2ADA6B10_val == 0) {
            return "HHTrainTopBar";
        }
        else if (auto2ADA6B10_val == 1) {
            return "HHBomberPlatformAreaBombTopBarOrder";
        }
        else if (auto2ADA6B10_val == 2) {
            return "HHSummonMercenarySpaceStation";
        }
        else if (auto2ADA6B10_val == 3) {
            return "HornerAirFleetActivate";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Karax") {
        auto2C09A3CB_val = lp_pButtonIndex;
        if (auto2C09A3CB_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (auto2C09A3CB_val == 1) {
            return "SOAThermalLanceActivate";
        }
        else if (auto2C09A3CB_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (auto2C09A3CB_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Kerrigan") {
        auto56FDE091_val = lp_pButtonIndex;
        if (auto56FDE091_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (auto56FDE091_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Nova") {
        autoFFA20321_val = lp_pButtonIndex;
        if (autoFFA20321_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (autoFFA20321_val == 1) {
            return "NovaGriffinTransportLoadUnits";
        }
        else if (autoFFA20321_val == 2) {
            return "NovaGriffinBombingRunActivate";
        }
        else if (autoFFA20321_val == 3) {
        }
        else if (autoFFA20321_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Stukov") {
        autoC7697159_val = lp_pButtonIndex;
        if (autoC7697159_val == 0) {
        }
        else if (autoC7697159_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (autoC7697159_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (autoC7697159_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Swann") {
        auto27E918B9_val = lp_pButtonIndex;
        if (auto27E918B9_val == 0) {
        }
        else if (auto27E918B9_val == 1) {
            return "DrakkenLaserDrillConcentratedBeamIssueOrder";
        }
        else if (auto27E918B9_val == 2) {
            return "DrakkenLaserDrillPulseCannonIssueOrder";
        }
        else if (auto27E918B9_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Tychus") {
        auto4B5B2EC0_val = lp_pButtonIndex;
        if (auto4B5B2EC0_val == 0) {
            return "TychusMedicTransportLoadUnits";
        }
        else if (auto4B5B2EC0_val == 1) {
            return "TychusCalldownOdinTargeted";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Zagara") {
        auto3A2AC3DE_val = lp_pButtonIndex;
        if (auto3A2AC3DE_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (auto3A2AC3DE_val == 1) {
            return "ZagaraVoidCoopMassRoachDrop";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Zeratul") {
        auto9A886EF6_val = lp_pButtonIndex;
        if (auto9A886EF6_val == 0) {
            return "ZeratulTopBarWarpTrain";
        }
        else if (auto9A886EF6_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarWarpTrain";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarBuild";
            }

        }
        else if (auto9A886EF6_val == 3) {
            return "ZeratulTopBarUltimateWarpTrain";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Stetmann") {
        autoF64582F8_val = lp_pButtonIndex;
        if (autoF64582F8_val == 0) {
            return "DeployPowerTowerStetmann";
        }
        else {
        }
    }
    else if (auto215C5E90_val == "Mengsk") {
        auto2A715934_val = lp_pButtonIndex;
        if (auto2A715934_val == 0) {
        }
        else if (auto2A715934_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto2A715934_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto2A715934_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else {
    }
    return null;
}

fixed lib01833E95_gf_AF_GetCooldown (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vCooldown;
    fixed lv_vCooldownCurrent;

    // Automatic Variable Declarations
    string auto7CFFD8E4_val;
    int auto715E8C08_val;
    int auto5EF8787D_val;
    int autoBFA3A030_val;
    int autoF1483B01_val;
    int auto8349DA38_val;
    int auto82682118_val;
    int autoB9CC4599_val;
    int auto5AC802A7_val;
    int auto3FC907EA_val;
    int auto76BAA2CA_val;
    int auto286E250D_val;
    int auto04EA899B_val;
    int auto3D119534_val;
    int autoDCADD04D_val;
    int auto64113502_val;
    unitgroup auto84B8A4D6_g;
    int auto84B8A4D6_u;
    unit auto84B8A4D6_var;
    int auto1F390ABC_val;
    int autoD54B4D31_val;
    int auto21D28270_val;

    // Variable Initialization

    // Implementation
    auto7CFFD8E4_val = libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto7CFFD8E4_val == "Mengsk") {
        auto715E8C08_val = lp_pButtonIndex;
        if (auto715E8C08_val == 0) {
            return UnitAbilityGetChargeRegen(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "BunkerDepotMengskDrop", "Abil/BunkerDepotDropMengsk");
        }
        else if (auto715E8C08_val == 1) {
            return GameGetCooldown("\"Abil/ArtilleryMengskExperimentalStrike\"");
        }
        else if (auto715E8C08_val == 2) {
            return UnitGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "Abil/MengskZergCooldown");
        }
        else if (auto715E8C08_val == 3) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NuclearAnnihilationMengsk", "Abil/NuclearAnnihilationMengsk");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Vorazun") {
        auto5EF8787D_val = lp_pButtonIndex;
        if (auto5EF8787D_val == 0) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOADarkPylon", "Abil/SOADarkPylon");
        }
        else if (auto5EF8787D_val == 2) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        }
        else if (auto5EF8787D_val == 3) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOATimeFreeze", "Abil/SOATimeFreeze");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Raynor") {
        autoBFA3A030_val = lp_pButtonIndex;
        if (autoBFA3A030_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/VoidCoopSummonHyperion");
        }
        else if (autoBFA3A030_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/BansheeAirstrike");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Abathur") {
        autoF1483B01_val = lp_pButtonIndex;
        if (autoF1483B01_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/ToxicNestBuild");
        }
        else if (autoF1483B01_val == 1) {
            return UnitAbilityGetChargeRegen(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "AbathurMend", "Abil/AbathurMend");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Alarak") {
        auto8349DA38_val = lp_pButtonIndex;
        if (auto8349DA38_val == 0) {
            return UnitAbilityGetChargeRegen(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        }
        else if (auto8349DA38_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/AlarakACSummonDeathfleetTarget");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Artanis") {
        auto82682118_val = lp_pButtonIndex;
        if (auto82682118_val == 0) {
        }
        else if (auto82682118_val == 1) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        }
        else if (auto82682118_val == 2) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SoASuperShield", "Abil/SoASuperShield");
        }
        else if (auto82682118_val == 3) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAStrafeAttack", "Abil/SOAStrafeAttack");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Dehaka") {
        autoB9CC4599_val = lp_pButtonIndex;
        if (autoB9CC4599_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
        }
        else if (autoB9CC4599_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaGlevigTopBar");
        }
        else if (autoB9CC4599_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaMurvarTopBar");
        }
        else if (autoB9CC4599_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaDakrunTopBar");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Fenix") {
        auto5AC802A7_val = lp_pButtonIndex;
        if (auto5AC802A7_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenix");
        }
        else if (auto5AC802A7_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixDragoon");
        }
        else if (auto5AC802A7_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixArbiter");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Horner") {
        auto3FC907EA_val = lp_pButtonIndex;
        if (auto3FC907EA_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/HHTrainTopBar");
        }
        else if (auto3FC907EA_val == 1) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer");
        }
        else if (auto3FC907EA_val == 2) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "HornerAirFleetActivate", "Abil/HornerAirFleetActivate");
        }
        else if (auto3FC907EA_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/HHSummonMercenarySpaceStation");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Karax") {
        auto76BAA2CA_val = lp_pButtonIndex;
        if (auto76BAA2CA_val == 1) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        }
        else if (auto76BAA2CA_val == 2) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        }
        else if (auto76BAA2CA_val == 3) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SOAPurifierBeam", "Abil/SOAPurifierBeam");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Kerrigan") {
        auto286E250D_val = lp_pButtonIndex;
        if (auto286E250D_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopEconDrop");
        }
        else if (auto286E250D_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopCrushingGripWave");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Nova") {
        auto04EA899B_val = lp_pButtonIndex;
        if (auto04EA899B_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/NovaDefensiveMatrixDrone");
        }
        else if (auto04EA899B_val == 1) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        }
        else if (auto04EA899B_val == 2) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
        }
        else if (auto04EA899B_val == 3) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "NovaReviveInstantBuyback", "Abil/NovaReviveInstantBuyback");
        }
        else if (auto04EA899B_val == 4) {
            return GameGetChargeRegen("Unit/NovaDecoy");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Stukov") {
        auto3D119534_val = lp_pButtonIndex;
        if (auto3D119534_val == 1) {
            return UnitAbilityGetChargeRegen(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        }
        else if (auto3D119534_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonApocalisk");
        }
        else if (auto3D119534_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonAleksander");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Swann") {
        autoDCADD04D_val = lp_pButtonIndex;
        if (autoDCADD04D_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillBFG");
        }
        else if (autoDCADD04D_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillNuke");
        }
        else if (autoDCADD04D_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/SpecialDelivery");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Tychus") {
        auto64113502_val = lp_pButtonIndex;
        if (auto64113502_val == 0) {
            lv_vCooldown = 300.0;
            auto84B8A4D6_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto84B8A4D6_u = UnitGroupCount(auto84B8A4D6_g, c_unitCountAll);
            for (;; auto84B8A4D6_u -= 1) {
                auto84B8A4D6_var = UnitGroupUnitFromEnd(auto84B8A4D6_g, auto84B8A4D6_u);
                if (auto84B8A4D6_var == null) { break; }
                lv_vCooldownCurrent = UnitAbilityGetCooldown(auto84B8A4D6_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits");
                if ((lv_vCooldownCurrent == 0.0)) {
                    return lv_vCooldownCurrent;
                }
                else {
                    if ((lv_vCooldownCurrent < lv_vCooldown)) {
                        lv_vCooldown = lv_vCooldownCurrent;
                    }

                }
            }
            return lv_vCooldown;
        }
        else if (auto64113502_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/TychusCalldownOdinTargeted");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Zagara") {
        auto1F390ABC_val = lp_pButtonIndex;
        if (auto1F390ABC_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopMassFrenzy");
        }
        else if (auto1F390ABC_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopInfestedPods");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Zeratul") {
        autoD54B4D31_val = lp_pButtonIndex;
        if (autoD54B4D31_val == 0) {
            return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulTopBarWarpTrain");
        }
        else if (autoD54B4D31_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulMapWideStasis");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulSuppressionCrystal");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return (UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeRegenLeft) / 16.0);
            }

        }
        else if (autoD54B4D31_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulTopBarUltimateWarpTrain");
        }
        else {
        }
    }
    else if (auto7CFFD8E4_val == "Stetmann") {
        auto21D28270_val = lp_pButtonIndex;
        if (auto21D28270_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DeployPowerTowerStetmann");
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

fixed lib01833E95_gf_AF_GetCharges (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vA;

    // Automatic Variable Declarations
    string auto9F01D04F_val;
    int auto93FB2C36_val;
    int auto4977C529_val;
    int auto61FB9530_val;
    int autoB499E784_val;
    int autoB4792AA0_val;
    int autoDB884E6B_val;
    int auto3754A40B_val;
    int auto6B85B27B_val;
    unitgroup auto8F35D88C_g;
    int auto8F35D88C_u;
    unit auto8F35D88C_var;
    int autoFEABFE0B_val;
    int auto61E0E11F_val;

    // Variable Initialization

    // Implementation
    auto9F01D04F_val = libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto9F01D04F_val == "Mengsk") {
        auto93FB2C36_val = lp_pButtonIndex;
        if (auto93FB2C36_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Abathur") {
        auto4977C529_val = lp_pButtonIndex;
        if (auto4977C529_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft);
        }
        else if (auto4977C529_val == 1) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("AbathurMend", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Alarak") {
        auto61FB9530_val = lp_pButtonIndex;
        if (auto61FB9530_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Dehaka") {
        autoB499E784_val = lp_pButtonIndex;
        if (autoB499E784_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Horner") {
        autoB4792AA0_val = lp_pButtonIndex;
        if (autoB4792AA0_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else if (autoB4792AA0_val == 1) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Nova") {
        autoDB884E6B_val = lp_pButtonIndex;
        if (autoDB884E6B_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilChargeCountLeft);
        }
        else if (autoDB884E6B_val == 4) {
            return UnitAbilityChargeInfo(lib01833E95_gf_AF_GetHeroUnit(lp_pPlayer), AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Stukov") {
        auto3754A40B_val = lp_pButtonIndex;
        if (auto3754A40B_val == 1) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Tychus") {
        auto6B85B27B_val = lp_pButtonIndex;
        if (auto6B85B27B_val == 0) {
            auto8F35D88C_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto8F35D88C_u = UnitGroupCount(auto8F35D88C_g, c_unitCountAll);
            for (;; auto8F35D88C_u -= 1) {
                auto8F35D88C_var = UnitGroupUnitFromEnd(auto8F35D88C_g, auto8F35D88C_u);
                if (auto8F35D88C_var == null) { break; }
                if ((UnitAbilityGetCooldown(auto8F35D88C_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits") == 0.0)) {
                    lv_vA += 1.0;
                }

            }
            return lv_vA;
        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Zeratul") {
        autoFEABFE0B_val = lp_pButtonIndex;
        if (autoFEABFE0B_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeCountLeft);
            }

        }
        else {
        }
    }
    else if (auto9F01D04F_val == "Stetmann") {
        auto61E0E11F_val = lp_pButtonIndex;
        if (auto61E0E11F_val == 0) {
            return UnitAbilityChargeInfo(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

string lib01833E95_gf_AF_GetButtonText (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string autoC96AC200_val;
    int auto2B6F3755_val;
    int auto551DA047_val;
    int autoA1D7868B_val;
    int autoAE0BC101_val;
    int auto6E555352_val;
    int auto999BA787_val;
    int auto1D4B6DBD_val;
    int autoBE3610B7_val;
    int autoCA493A70_val;
    int auto1BE1E0DD_val;
    int auto619FEB6D_val;
    int auto04CC3BD5_val;
    int auto76D1F590_val;
    int autoDC1D1393_val;
    int autoC46ADBFC_val;
    int auto3FF8C388_val;
    int autoBCAF44B1_val;
    int auto8BFBC328_val;

    // Implementation
    autoC96AC200_val = libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (autoC96AC200_val == "Mengsk") {
        auto2B6F3755_val = lp_pButtonIndex;
        if (auto2B6F3755_val == 0) {
            return "Button/Name/BunkerDepotMengskDrop";
        }
        else if (auto2B6F3755_val == 1) {
            return "Button/Name/ArtilleryMengskExperimentalStrike";
        }
        else if (auto2B6F3755_val == 2) {
            return "Button/Name/MengskZergCalldown";
        }
        else if (auto2B6F3755_val == 3) {
            return "Button/Name/NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Vorazun") {
        auto551DA047_val = lp_pButtonIndex;
        if (auto551DA047_val == 0) {
            return "Button/Name/SOADarkPylon";
        }
        else if (auto551DA047_val == 1) {
            return "Button/Name/SOAVorazunBlackHole";
        }
        else if (auto551DA047_val == 2) {
            return "Button/Name/SOAShadowGuardCalldown";
        }
        else if (auto551DA047_val == 3) {
            return "Button/Name/SOATimeFreeze";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Raynor") {
        autoA1D7868B_val = lp_pButtonIndex;
        if (autoA1D7868B_val == 0) {
            return "Button/Name/SummonHyperionVoid";
        }
        else if (autoA1D7868B_val == 1) {
            return "Button/Name/BansheeAirstrike";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Abathur") {
        autoAE0BC101_val = lp_pButtonIndex;
        if (autoAE0BC101_val == 0) {
            return "Button/Name/SpawnToxicNest";
        }
        else if (autoAE0BC101_val == 1) {
            return "Button/Name/AbathurMend";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Alarak") {
        auto6E555352_val = lp_pButtonIndex;
        if (auto6E555352_val == 0) {
            return "Button/Name/AlarakStructureOvercharge";
        }
        else if (auto6E555352_val == 1) {
            return "Button/Name/AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Artanis") {
        auto999BA787_val = lp_pButtonIndex;
        if (auto999BA787_val == 0) {
            return "Button/Name/SOAPylonPower";
        }
        else if (auto999BA787_val == 1) {
            return "Button/Name/SOAOrbitalStrike";
        }
        else if (auto999BA787_val == 2) {
            return "Button/Name/SOASuperShield";
        }
        else if (auto999BA787_val == 3) {
            return "Button/Name/SOAStrafeAttack";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Dehaka") {
        auto1D4B6DBD_val = lp_pButtonIndex;
        if (auto1D4B6DBD_val == 0) {
            return "Button/Name/DehakaNydusDestroyerTopBar";
        }
        else if (auto1D4B6DBD_val == 1) {
            return "Button/Name/DehakaGlevigTopBar";
        }
        else if (auto1D4B6DBD_val == 2) {
            return "Button/Name/DehakaMurvarTopBar";
        }
        else if (auto1D4B6DBD_val == 3) {
            return "Button/Name/DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Fenix") {
        autoBE3610B7_val = lp_pButtonIndex;
        if (autoBE3610B7_val == 0) {
            return "Button/Name/SOASummonFenix";
        }
        else if (autoBE3610B7_val == 1) {
            return "Button/Name/SOASummonFenixDragoon";
        }
        else if (autoBE3610B7_val == 2) {
            return "Button/Name/SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Horner") {
        autoCA493A70_val = lp_pButtonIndex;
        if (autoCA493A70_val == 0) {
            return "Button/Name/HHMagneticMines";
        }
        else if (autoCA493A70_val == 1) {
            return "Button/Name/HHBomberAreaBombTopBar";
        }
        else if (autoCA493A70_val == 2) {
            return "Button/Name/UnlockHHAirFleet";
        }
        else if (autoCA493A70_val == 3) {
            return "Button/Name/HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Karax") {
        auto1BE1E0DD_val = lp_pButtonIndex;
        if (auto1BE1E0DD_val == 0) {
            return "Button/Name/SOAOrbitalStrikeKarax";
        }
        else if (auto1BE1E0DD_val == 1) {
            return "Button/Name/SOAThermalLance";
        }
        else if (auto1BE1E0DD_val == 2) {
            return "Button/Name/SOAMapWideChrono";
        }
        else if (auto1BE1E0DD_val == 3) {
            return "Button/Name/SOAPurifierBeam";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Kerrigan") {
        auto619FEB6D_val = lp_pButtonIndex;
        if (auto619FEB6D_val == 0) {
            return "Button/Name/KerriganVoidCoopEconDrop";
        }
        else if (auto619FEB6D_val == 1) {
            return "Button/Name/KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Nova") {
        auto04CC3BD5_val = lp_pButtonIndex;
        if (auto04CC3BD5_val == 0) {
            return "Button/Name/NovaDefensiveMatrixDrone";
        }
        else if (auto04CC3BD5_val == 1) {
            return "Button/Name/NovaGriffinBombingRun";
        }
        else if (auto04CC3BD5_val == 2) {
            return "Button/Name/NovaGriffinTransportUnits";
        }
        else if (auto04CC3BD5_val == 3) {
            return "Button/Name/NovaReviveInstantBuyback";
        }
        else if (auto04CC3BD5_val == 4) {
            return "Button/Name/NovaUnitNuke";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Stukov") {
        auto76D1F590_val = lp_pButtonIndex;
        if (auto76D1F590_val == 0) {
            return "Button/Name/SIStukovPlaceHordeRallyTopBar";
        }
        else if (auto76D1F590_val == 1) {
            return "Button/Name/SIStukovInfestStructure";
        }
        else if (auto76D1F590_val == 2) {
            return "Button/Name/StukovSummonApocalisk";
        }
        else if (auto76D1F590_val == 3) {
            return "Button/Name/StukovSummonAleksander";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Swann") {
        autoDC1D1393_val = lp_pButtonIndex;
        if (autoDC1D1393_val == 1) {
            return "Button/Name/DrakkenLaserDrillBFGIO";
        }
        else if (autoDC1D1393_val == 2) {
            return "Button/Name/DrakkenLaserDrillPulseCannonIO";
        }
        else if (autoDC1D1393_val == 3) {
            return "Button/Name/SpecialDelivery";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Tychus") {
        autoC46ADBFC_val = lp_pButtonIndex;
        if (autoC46ADBFC_val == 0) {
            return "Button/Name/TychusMedicTransportUnitsTopBar";
        }
        else if (autoC46ADBFC_val == 1) {
            return "Button/Name/TychusCalldownOdin";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Zagara") {
        auto3FF8C388_val = lp_pButtonIndex;
        if (auto3FF8C388_val == 0) {
            return "Button/Name/ZagaraVoidCoopMassFrenzy";
        }
        else if (auto3FF8C388_val == 1) {
            return "Button/Name/MassRoachDrop";
        }
        else {
        }
    }
    else if (autoC96AC200_val == "Zeratul") {
        autoBCAF44B1_val = lp_pButtonIndex;
        if (autoBCAF44B1_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0C";
            }

        }
        else if (autoBCAF44B1_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1C";
            }

        }
        else if (autoBCAF44B1_val == 2) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulStructureBarrierChose";
            }

        }
        else if (autoBCAF44B1_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (autoC96AC200_val == "Stetmann") {
        auto8BFBC328_val = lp_pButtonIndex;
        if (auto8BFBC328_val == 0) {
            return "Button/Name/PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return "";
}

bool lib01833E95_gf_AF_AbilityHasCooldownAndEnergyCost (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAThermalLanceActivate") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SoASuperShield") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAOrbitalStrikeActivate") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOADarkPylon") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAShadowGuardCalldown") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel1") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel2") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel3") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel4") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "NuclearAnnihilationMengsk") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "ArtilleryMengskGlobalExperimentalStrike") && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "BunkerDepotMengskDrop")) {
        return false;
    }
    else {
        return true;
    }
}

bool lib01833E95_gf_AF_AbilityIsAvailable (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitAbilityCheck(lib01833E95_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex), false) == true) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaNydusDestroyerTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaGlevigTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Murvar[lp_pPlayer] == false) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaMurvarTopBar")) || ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Dakrun[lp_pPlayer] == false) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaDakrunTopBar")) || ((UnitGroupCount(UnitGroup("HHBomberPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "HHBomberPlatformAreaBombTopBarOrder")) || ((UnitGroupCount(UnitGroup("NovaReviveBeacon", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 1) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "NovaReviveInstantBuyback")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillBFG", c_techCountQueuedOrBetter) != 1) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillConcentratedBeamIssueOrder")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillNuke", c_techCountQueuedOrBetter) != 1) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillPulseCannonIssueOrder")) || ((UnitGroupCount(UnitGroup("TychusMedivacPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "TychusMedicTransportLoadUnits")) || ((UnitGroupCount(UnitGroup("ArtilleryMengsk", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (lib01833E95_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "ArtilleryMengskGlobalExperimentalStrike")))) {
        return false;
    }
    else {
        return true;
    }
}

fixed lib01833E95_gf_AF_EnergyCostofAbility (string lp_pAbility) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pAbility == "SOADarkPylon")) {
        return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SOADarkPylon", "InfoArray[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", c_playerAny);
    }
    else {
        return libNtve_gf_CostOfAbility(lp_pAbility, "Energy");
    }
}

string lib01833E95_gf_AF_GetButton (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string auto6368DC6E_val;
    int auto4CA54704_val;
    int auto6ABC2E48_val;
    int auto336A31B9_val;
    int auto6F6D81DC_val;
    int autoF9C7E625_val;
    int autoCADB8241_val;
    int autoC74D3827_val;
    int auto22616C6F_val;
    int auto96FD8BB8_val;
    int auto0CE34649_val;
    int autoB3B7ADB7_val;
    int auto207EAB87_val;
    int auto9363C0BC_val;
    int auto28CAD21C_val;
    int auto85E1D946_val;
    int auto36336FE5_val;
    int autoE26031FF_val;
    int auto0BB3523E_val;

    // Implementation
    auto6368DC6E_val = libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto6368DC6E_val == "Mengsk") {
        auto4CA54704_val = lp_pButtonIndex;
        if (auto4CA54704_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto4CA54704_val == 1) {
            return "ArtilleryMengskExperimentalStrike";
        }
        else if (auto4CA54704_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto4CA54704_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Vorazun") {
        auto6ABC2E48_val = lp_pButtonIndex;
        if (auto6ABC2E48_val == 0) {
            return "SOADarkPylon";
        }
        else if (auto6ABC2E48_val == 1) {
            return "SOAVorazunBlackHole";
        }
        else if (auto6ABC2E48_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (auto6ABC2E48_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Raynor") {
        auto336A31B9_val = lp_pButtonIndex;
        if (auto336A31B9_val == 0) {
            return "SummonHyperionVoid";
        }
        else if (auto336A31B9_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Abathur") {
        auto6F6D81DC_val = lp_pButtonIndex;
        if (auto6F6D81DC_val == 0) {
            return "SpawnToxicNest";
        }
        else if (auto6F6D81DC_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Alarak") {
        autoF9C7E625_val = lp_pButtonIndex;
        if (autoF9C7E625_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (autoF9C7E625_val == 1) {
            return "AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Artanis") {
        autoCADB8241_val = lp_pButtonIndex;
        if (autoCADB8241_val == 0) {
            return "SOAPylonPower";
        }
        else if (autoCADB8241_val == 1) {
            return "SOAOrbitalStrike";
        }
        else if (autoCADB8241_val == 2) {
            return "SOASuperShield";
        }
        else if (autoCADB8241_val == 3) {
            return "SOAStrafeAttack";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Dehaka") {
        autoC74D3827_val = lp_pButtonIndex;
        if (autoC74D3827_val == 0) {
            return "DehakaNydusDestroyerTopBarPassive";
        }
        else if (autoC74D3827_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (autoC74D3827_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (autoC74D3827_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Fenix") {
        auto22616C6F_val = lp_pButtonIndex;
        if (auto22616C6F_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto22616C6F_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto22616C6F_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Horner") {
        auto96FD8BB8_val = lp_pButtonIndex;
        if (auto96FD8BB8_val == 0) {
            return "HHMagneticMines";
        }
        else if (auto96FD8BB8_val == 1) {
            return "HHBomberAreaBombTopBar";
        }
        else if (auto96FD8BB8_val == 2) {
            return "HornerAirFleet";
        }
        else if (auto96FD8BB8_val == 3) {
            return "HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Karax") {
        auto0CE34649_val = lp_pButtonIndex;
        if (auto0CE34649_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (auto0CE34649_val == 1) {
            return "SOAThermalLance";
        }
        else if (auto0CE34649_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (auto0CE34649_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Kerrigan") {
        autoB3B7ADB7_val = lp_pButtonIndex;
        if (autoB3B7ADB7_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (autoB3B7ADB7_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Nova") {
        auto207EAB87_val = lp_pButtonIndex;
        if (auto207EAB87_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (auto207EAB87_val == 1) {
            return "NovaGriffinBombingRun";
        }
        else if (auto207EAB87_val == 2) {
            return "NovaGriffinTransportUnits";
        }
        else if (auto207EAB87_val == 3) {
            return "NovaReviveInstantBuyback";
        }
        else if (auto207EAB87_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Stukov") {
        auto9363C0BC_val = lp_pButtonIndex;
        if (auto9363C0BC_val == 0) {
            return "SIStukovPlaceHordeRallyTopBar";
        }
        else if (auto9363C0BC_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto9363C0BC_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto9363C0BC_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Swann") {
        auto28CAD21C_val = lp_pButtonIndex;
        if (auto28CAD21C_val == 1) {
            return "DrakkenLaserDrillBFGIO";
        }
        else if (auto28CAD21C_val == 2) {
            return "DrakkenLaserDrillPulseCannonIO";
        }
        else if (auto28CAD21C_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Tychus") {
        auto85E1D946_val = lp_pButtonIndex;
        if (auto85E1D946_val == 0) {
            return "TychusMedicTransportUnitsTopBar";
        }
        else if (auto85E1D946_val == 1) {
            return "TychusCalldownOdin";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Zagara") {
        auto36336FE5_val = lp_pButtonIndex;
        if (auto36336FE5_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (auto36336FE5_val == 1) {
            return "MassRoachDrop";
        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Zeratul") {
        autoE26031FF_val = lp_pButtonIndex;
        if (autoE26031FF_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonKarass";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonMohandar";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonDarkArchon";
            }

        }
        else if (autoE26031FF_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSuppressionCrystal";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulKhaydarinMonolith";
            }

        }
        else if (autoE26031FF_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (auto6368DC6E_val == "Stetmann") {
        auto0BB3523E_val = lp_pButtonIndex;
        if (auto0BB3523E_val == 0) {
            return "PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return null;
}

void lib01833E95_gf_TW_AssignUnit (unit lp_pUnit, string lp_pString) {
    // Variable Declarations
    fixed lv_vRadius;
    bool lv_vUnitAssigned;
    text lv_vText;
    int lv_vWaitingListNumber;

    // Automatic Variable Declarations
    const int autoE0263430_ae = lib01833E95_gv_tW_MaxUsersSaved;
    int autoE0263430_var;
    const int auto56EA7609_ae = lib01833E95_gv_tW_MaxUsersSaved;
    int auto56EA7609_var;

    // Variable Initialization
    TextExpressionSetToken("Param/Expression/lib_01833E95_9EA90BD2", "C", StringExternal("Param/Value/lib_01833E95_159E8D00"));
    TextExpressionSetToken("Param/Expression/lib_01833E95_9EA90BD2", "A", StringToText(lp_pString));
    TextExpressionSetToken("Param/Expression/lib_01833E95_9EA90BD2", "B", UnitGetName(lp_pUnit));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_01833E95_9EA90BD2");

    // Implementation
    autoE0263430_var = 1;
    for ( ; autoE0263430_var <= autoE0263430_ae; autoE0263430_var += 1 ) {
        if ((lib01833E95_gv_tW_Users[autoE0263430_var].lv_pUser == lp_pString)) {
            lv_vUnitAssigned = true;
            if ((UnitIsAlive(lib01833E95_gv_tW_Users[autoE0263430_var].lv_pCurrentUnit) == true)) {
                lib01833E95_gf_TW_DeassignUnit(lib01833E95_gv_tW_Users[autoE0263430_var].lv_pCurrentUnit, autoE0263430_var);
                TextExpressionSetToken("Param/Expression/lib_01833E95_138525E0", "C", StringExternal("Param/Value/lib_01833E95_19AD03DD"));
                TextExpressionSetToken("Param/Expression/lib_01833E95_138525E0", "A", StringToText(lp_pString));
                TextExpressionSetToken("Param/Expression/lib_01833E95_138525E0", "B", UnitGetName(lp_pUnit));
                lv_vText = TextExpressionAssemble("Param/Expression/lib_01833E95_138525E0");
            }

            lib01833E95_gv_tW_Users[autoE0263430_var].lv_pCurrentUnit = lp_pUnit;
            lib01833E95_gv_tW_Users[autoE0263430_var].lv_pStartingKills = libNtve_gf_UnitGetPropertyKills(lp_pUnit, c_unitPropCurrent);
            lib01833E95_gv_tW_Users[autoE0263430_var].lv_pKillStack -= libNtve_gf_UnitGetPropertyKills(lp_pUnit, c_unitPropCurrent);
            break;
        }

    }
    if ((lv_vUnitAssigned == false)) {
        auto56EA7609_var = 1;
        for ( ; auto56EA7609_var <= auto56EA7609_ae; auto56EA7609_var += 1 ) {
            if ((lib01833E95_gv_tW_Users[auto56EA7609_var].lv_pUser == "")) {
                lib01833E95_gv_tW_Users[auto56EA7609_var].lv_pCurrentUnit = lp_pUnit;
                lib01833E95_gv_tW_Users[auto56EA7609_var].lv_pUser = lp_pString;
                lib01833E95_gv_tW_Users[auto56EA7609_var].lv_pStartingKills = libNtve_gf_UnitGetPropertyKills(lp_pUnit, c_unitPropCurrent);
                lib01833E95_gv_tW_Users[auto56EA7609_var].lv_pKillStack -= libNtve_gf_UnitGetPropertyKills(lp_pUnit, c_unitPropCurrent);
                break;
            }

        }
    }

    UnitGroupAdd(lib01833E95_gv_tW_JoinedUnits, lp_pUnit);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_vText);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lp_pUnit), 2.0, libA8FDA37D_gf_UT_HexToColor("#000000"));
    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), 1, libNtve_ge_PlayerRelation_Enemy) == true)) {
        TextExpressionSetToken("Param/Expression/lib_01833E95_97B5EC48", "A", StringToText(lp_pString));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_01833E95_97B5EC48"), 30, UnitGetPosition(lp_pUnit), 2.3, true, false, PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_01833E95_018840FB", "A", StringToText(lp_pString));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_01833E95_018840FB"), 30, UnitGetPosition(lp_pUnit), 2.3, true, false, PlayerGroupAll());
    }
    TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.3);
    libHots_gf_StoreTextTagForUnit(lp_pUnit, 1, TextTagLastCreated());
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create GlazeFenixChampionUnit");
    if ((UnitGetType(lp_pUnit) != "FenixKaldalisZealot") && (UnitGetType(lp_pUnit) != "FenixTalisAdept") && (UnitGetType(lp_pUnit) != "FenixTaldarinImmortal") && (UnitGetType(lp_pUnit) != "FenixWarbringerColossus") && (UnitGetType(lp_pUnit) != "FenixMojoScout") && (UnitGetType(lp_pUnit) != "FenixClolarionCarrier")) {
        lv_vRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_pUnit), "Radius", UnitGetOwner(lp_pUnit));
        if ((lv_vRadius <= 0.38)) {
            libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create JoinedPlayerSmall");
        }
        else if ((lv_vRadius < 0.9)) {
            libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create JoinedPlayerMedium");
        }
        else if (((UnitGetType(lp_pUnit) == "GaryStetmann") || (UnitGetType(lp_pUnit) == "SuperGaryStetmann"))) {
            libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create JoinedPlayerBigRotated");
        }
        else if (((StringContains((UnitGetType(lp_pUnit)), "mothership", c_stringAnywhere, c_stringNoCase) == true) || (UnitGetType(lp_pUnit) == "SelendisCoop"))) {
            libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create JoinedPlayerHugeRotated");
        }
        else if (true) {
            libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create JoinedPlayerBig");
        }
    }

    lv_vWaitingListNumber = lib01833E95_gf_TW_NextInWaitingList(1);
    if ((lv_vWaitingListNumber != -1)) {
        lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber] = null;
        lib01833E95_gv_tW_WaitingListPlayer[lv_vWaitingListNumber] = 0;
    }

    lv_vWaitingListNumber = lib01833E95_gf_TW_NextInWaitingList(2);
    if ((lv_vWaitingListNumber != -1)) {
        lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber] = null;
        lib01833E95_gv_tW_WaitingListPlayer[lv_vWaitingListNumber] = 0;
    }

}

void lib01833E95_gf_TW_DeassignUnit (unit lp_pUnit, int lp_pNumber) {
    // Automatic Variable Declarations
    // Implementation
    lib01833E95_gv_tW_Users[lp_pNumber].lv_pKillStack += libNtve_gf_UnitGetPropertyKills(lp_pUnit, c_unitPropCurrent);
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_pUnit, 1));
    UnitGroupRemove(lib01833E95_gv_tW_JoinedUnits, lp_pUnit);
    UnitBehaviorAddPlayer(lp_pUnit, "RemoveTW", 1, 1);
}

int lib01833E95_gf_TW_NextInWaitingList (int lp_pPlayer) {
    // Automatic Variable Declarations
    const int autoC7A39885_ae = lib01833E95_gv_tW_WaitingListLength;
    int autoC7A39885_var;

    // Implementation
    autoC7A39885_var = 0;
    for ( ; autoC7A39885_var <= autoC7A39885_ae; autoC7A39885_var += 1 ) {
        if ((lib01833E95_gv_tW_WaitingListPlayer[autoC7A39885_var] == lp_pPlayer)) {
            return autoC7A39885_var;
        }

    }
    return -1;
}

text lib01833E95_gf_TW_GetUserScore () {
    // Variable Declarations
    text lv_vText;
    int lv_vA;

    // Automatic Variable Declarations
    const int autoB95BAF75_ae = lib01833E95_gv_tW_MaxUsersSaved;
    const int autoB95BAF75_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vA = 1;
    for ( ; ( (autoB95BAF75_ai >= 0 && lv_vA <= autoB95BAF75_ae) || (autoB95BAF75_ai < 0 && lv_vA >= autoB95BAF75_ae) ) ; lv_vA += autoB95BAF75_ai ) {
        if ((lib01833E95_gv_tW_Users[lv_vA].lv_pUser != "")) {
            TextExpressionSetToken("Param/Expression/lib_01833E95_035ADCFB", "A", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_01833E95_035ADCFB", "B", StringToText(lib01833E95_gv_tW_Users[lv_vA].lv_pUser));
            TextExpressionSetToken("Param/Expression/lib_01833E95_035ADCFB", "C", StringToText(libA8FDA37D_gf_UT_AddStringsInfront(3, "  ", IntToFixed((lib01833E95_gv_tW_Users[lv_vA].lv_pKillStack+libNtve_gf_UnitGetPropertyKills(lib01833E95_gv_tW_Users[lv_vA].lv_pCurrentUnit, c_unitPropCurrent))), 0)));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_01833E95_035ADCFB");
        }

    }
    return lv_vText;
}

point lib01833E95_gf_TW_RandomWaveSpawnPoint () {
    // Variable Declarations
    point lv_vPoint;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto3C090EE6_n = 1000;
    int auto3C090EE6_i;

    // Variable Initialization

    // Implementation
    for (auto3C090EE6_i = 1; auto3C090EE6_i <= auto3C090EE6_n; auto3C090EE6_i += 1) {
        lv_vIter += 1;
        lv_vPoint = RegionRandomPoint(RegionPlayableMap());
        if ((PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) > 50.0) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) > 50.0) && (UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(lv_vPoint, libNtve_gf_ArithmeticRealClamp((30 - (lv_vIter/20)), 0.0, 30.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            return lv_vPoint;
        }

    }
    return PlayerStartLocation(3);
}

void lib01833E95_gf_TW_SetUp (int lp_pPlayer, bank lp_pBank) {
    // Automatic Variable Declarations
    // Implementation
    lib01833E95_gv_tW_Bank[lp_pPlayer] = lp_pBank;
    BankSectionRemove(lp_pBank, lib01833E95_gv_tW_CommandSection);
    BankSectionCreate(lp_pBank, lib01833E95_gv_tW_CommandSection);
    BankSectionRemove(lp_pBank, "GameKills");
    BankSectionRemove(lp_pBank, "UnitDeaths");
    BankSectionRemove(lp_pBank, "ExecutedCommands");
    BankSectionCreate(lp_pBank, "NewGame");
    BankSave(lp_pBank);
    libA8FDA37D_gf_UT_HotkeyLoad(lp_pBank, lp_pPlayer);
    TimerStart(lib01833E95_gv_tW_Timer, 60.0, false, c_timeReal);
    TimerStart(lib01833E95_gv_tW_KillTimer, 10.0, false, c_timeReal);
    PlayerGroupAdd(libA8FDA37D_gv_uT_PlayersWithNumbers, 1);
    PlayerGroupAdd(libA8FDA37D_gv_uT_PlayersWithNumbers, 2);
}

void lib01833E95_gf_TW_ActionCycle (int lp_pPlayer) {
    // Variable Declarations
    string lv_vString;
    string lv_vKeyName;
    int lv_vInterval;
    int lv_vSymbolPosition;
    int lv_vPlayer;
    string lv_vViewer;
    fixed lv_vCooldownRemaining;
    int lv_vidx;
    int lv_vNumberOfKills;
    int lv_vPreviousNumberOfKills;
    int lv_vCommandNumber;
    bool lv_vBankWrittenTo;
    string lv_vInitString;

    // Automatic Variable Declarations
    int auto26FD74E3_ae;
    int auto26FD74E3_var;
    string auto3EE37557_val;
    const int auto8B2D516C_ae = lib01833E95_gv_tW_MaxUsersSaved;
    const int auto8B2D516C_ai = 1;
    const int auto367ED53B_ae = lib01833E95_gv_tW_MaxUsersSaved;
    const int auto367ED53B_ai = 1;

    // Variable Initialization
    lv_vString = "";
    lv_vKeyName = "";
    lv_vInterval = 3;
    lv_vViewer = "";
    lv_vInitString = "(Twitch) <c val=\"45e6ff\">";

    // Implementation
    if ((BankKeyCount(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection) >= 1)) {
        lib01833E95_gv_tW_TwitchIntegrationActive = true;
        auto26FD74E3_ae = (BankKeyCount(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection)-1);
        auto26FD74E3_var = 0;
        for ( ; auto26FD74E3_var <= auto26FD74E3_ae; auto26FD74E3_var += 1 ) {
            lv_vKeyName = BankKeyName(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection, auto26FD74E3_var);
            lv_vCommandNumber = StringToInt(StringWord(lv_vKeyName, 2));
            BankValueSetFromInt(lib01833E95_gv_tW_Bank[lp_pPlayer], "ExecutedCommands", IntToString(lv_vCommandNumber), 0);
            lv_vBankWrittenTo = true;
            if ((DataTableValueExists(true, ("ExecutedCommands_" + IntToString(lv_vCommandNumber))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_01833E95_40233F3E", "A", IntToText(lv_vCommandNumber));
                TextExpressionSetToken("Param/Expression/lib_01833E95_40233F3E", "B", StringToText(lv_vKeyName));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_01833E95_40233F3E"), false);
                continue;
            }

            DataTableSetInt(true, ("ExecutedCommands_" + IntToString(lv_vCommandNumber)), 1);
            lv_vString = BankValueGetAsString(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection, lv_vKeyName);
            lv_vSymbolPosition = StringFind(lv_vKeyName, "#", c_stringCase);
            lv_vSymbolPosition += 1;
            lv_vViewer = StringSub(lv_vKeyName, lv_vSymbolPosition, StringLength(lv_vKeyName));
            TextExpressionSetToken("Param/Expression/lib_01833E95_99D2D06C", "A", StringToText(lv_vKeyName));
            TextExpressionSetToken("Param/Expression/lib_01833E95_99D2D06C", "B", StringToText(lv_vString));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_01833E95_99D2D06C"), false);
            auto3EE37557_val = StringWord(lv_vKeyName, 1);
            if (auto3EE37557_val == "mutator") {
                lib01833E95_gf_TW_EnableMutatorfromString(StringCase(lv_vString, false), lv_vViewer);
            }
            else if (auto3EE37557_val == "wave") {
                lib01833E95_gf_TW_SendWave(lv_vViewer, lp_pPlayer, lv_vString);
            }
            else if (auto3EE37557_val == "message") {
                libA8FDA37D_gf_UT_PostStringWithIcons((lv_vInitString + lv_vString + "</c>"));
            }
            else if (auto3EE37557_val == "spawn") {
                lib01833E95_gf_TW_SpawnUnitsfromString(lv_vString, lp_pPlayer, lv_vViewer);
            }
            else if (auto3EE37557_val == "resources") {
                lib01833E95_gf_TW_GiveResourcesfromString(lv_vString, lp_pPlayer, lv_vViewer);
            }
            else if (auto3EE37557_val == "meme") {
                TriggerExecute(lib01833E95_gt_AF_Meme_Init, true, false);
            }
            else if (auto3EE37557_val == "join") {
                lv_vPlayer = StringToInt(lv_vString);
                if ((lv_vPlayer == 2)) {
                    lib01833E95_gf_TW_JointheArmyfromString(lv_vViewer, libA8FDA37D_gf_UT_OtherPlayer(lp_pPlayer));
                    TextExpressionSetToken("Param/Expression/lib_01833E95_20C2261E", "B", StringToText(StringSub(lv_vString, 1, lv_vSymbolPosition)));
                    TextExpressionSetToken("Param/Expression/lib_01833E95_20C2261E", "A", IntToText(libA8FDA37D_gf_UT_OtherPlayer(lp_pPlayer)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_01833E95_20C2261E"), false);
                }
                else {
                    lib01833E95_gf_TW_JointheArmyfromString(lv_vViewer, lp_pPlayer);
                    TextExpressionSetToken("Param/Expression/lib_01833E95_D56DA9EE", "B", StringToText(StringSub(lv_vString, 1, lv_vSymbolPosition)));
                    TextExpressionSetToken("Param/Expression/lib_01833E95_D56DA9EE", "A", IntToText(lp_pPlayer));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_01833E95_D56DA9EE"), false);
                }
            }
            else {
            }
        }
        BankSectionRemove(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection);
        BankSectionCreate(lib01833E95_gv_tW_Bank[lp_pPlayer], lib01833E95_gv_tW_CommandSection);
    }

    if ((TimerGetRemaining(lib01833E95_gv_tW_KillTimer) <= 0.0)) {
        TimerStart(lib01833E95_gv_tW_KillTimer, 60.0, false, c_timeReal);
        if ((libA8FDA37D_gf_UT_HotkeyStore(lib01833E95_gv_tW_Bank[lp_pPlayer], lp_pPlayer) == true)) {
            lv_vBankWrittenTo = true;
        }

        lv_vidx = 1;
        for ( ; ( (auto8B2D516C_ai >= 0 && lv_vidx <= auto8B2D516C_ae) || (auto8B2D516C_ai < 0 && lv_vidx >= auto8B2D516C_ae) ) ; lv_vidx += auto8B2D516C_ai ) {
            lv_vNumberOfKills = (lib01833E95_gv_tW_Users[lv_vidx].lv_pKillStack+libNtve_gf_UnitGetPropertyKills(lib01833E95_gv_tW_Users[lv_vidx].lv_pCurrentUnit, c_unitPropCurrent));
            lv_vPreviousNumberOfKills = BankValueGetAsInt(lib01833E95_gv_tW_Bank[lp_pPlayer], "GameKills", lib01833E95_gv_tW_Users[lv_vidx].lv_pUser);
            if ((lv_vNumberOfKills > lv_vPreviousNumberOfKills)) {
                lv_vBankWrittenTo = true;
                BankValueSetFromInt(lib01833E95_gv_tW_Bank[lp_pPlayer], "GameKills", lib01833E95_gv_tW_Users[lv_vidx].lv_pUser, lv_vNumberOfKills);
                BankValueSetFromInt(lib01833E95_gv_tW_Bank[lp_pPlayer], "TotalKills", lib01833E95_gv_tW_Users[lv_vidx].lv_pUser, (BankValueGetAsInt(lib01833E95_gv_tW_Bank[lp_pPlayer], "TotalKills", lib01833E95_gv_tW_Users[lv_vidx].lv_pUser)+lv_vNumberOfKills-lv_vPreviousNumberOfKills));
            }

        }
    }

    if ((BankKeyCount(lib01833E95_gv_tW_Bank[lp_pPlayer], "UnitDeaths") > 20)) {
        lv_vBankWrittenTo = true;
        BankSectionRemove(BankLastCreated(), "UnitDeaths");
    }

    lv_vidx = 1;
    for ( ; ( (auto367ED53B_ai >= 0 && lv_vidx <= auto367ED53B_ae) || (auto367ED53B_ai < 0 && lv_vidx >= auto367ED53B_ae) ) ; lv_vidx += auto367ED53B_ai ) {
        if ((lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pUser != "")) {
            lv_vBankWrittenTo = true;
            BankValueSetFromText(BankLastCreated(), "UnitDeaths", (lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pUser + "///" + IntToString(lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pKills)), UnitTypeGetName(lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pUnitType));
            lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pUser = "";
            lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pUnitType = null;
            lib01833E95_gv_tW_UserDiedLog[lv_vidx].lv_pKills = 0;
        }

    }
    if ((lv_vBankWrittenTo == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_01833E95_40341B00"), false);
        BankSave(lib01833E95_gv_tW_Bank[lp_pPlayer]);
    }

    if ((lib01833E95_gv_tW_TwitchIntegrationActive == false) && (TimerGetRemaining(lib01833E95_gv_tW_Timer) <= 1)) {
        lv_vInterval = 15;
    }
    else if ((lib01833E95_gv_tW_TwitchIntegrationActive == true)) {
        lv_vInterval = 1;
    }
    Wait(lv_vInterval, c_timeGame);
}

trigger auto_lib01833E95_gf_TW_SpawnUnitsfromString_Trigger = null;
string auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pUnitSpawnCommand;
int auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pPlayer;
string auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pViever;

void lib01833E95_gf_TW_SpawnUnitsfromString (string lp_pUnitSpawnCommand, int lp_pPlayer, string lp_pViever) {
    auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pUnitSpawnCommand = lp_pUnitSpawnCommand;
    auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pPlayer = lp_pPlayer;
    auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pViever = lp_pViever;

    if (auto_lib01833E95_gf_TW_SpawnUnitsfromString_Trigger == null) {
        auto_lib01833E95_gf_TW_SpawnUnitsfromString_Trigger = TriggerCreate("auto_lib01833E95_gf_TW_SpawnUnitsfromString_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_TW_SpawnUnitsfromString_Trigger, false, false);
}

bool auto_lib01833E95_gf_TW_SpawnUnitsfromString_TriggerFunc (bool testConds, bool runActions) {
    string lp_pUnitSpawnCommand = auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pUnitSpawnCommand;
    int lp_pPlayer = auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pPlayer;
    string lp_pViever = auto_lib01833E95_gf_TW_SpawnUnitsfromString_lp_pViever;

    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;
    int lv_vCamPlayer;
    point lv_vPoint;
    string lv_vUnit;

    // Automatic Variable Declarations
    int auto8FAE76C0_val;

    // Variable Initialization
    lv_vAmount = StringToInt(StringWord(lp_pUnitSpawnCommand, 2));
    lv_vPlayer = StringToInt(StringWord(lp_pUnitSpawnCommand, 3));
    lv_vCamPlayer = lp_pPlayer;
    lv_vUnit = UnitTypeFromString(StringWord(lp_pUnitSpawnCommand, 1));

    // Implementation
    if ((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, 0) == false)) {
        return true;
    }

    while (!((GameGetMissionTime() >= 1))) {
        Wait(1.0, c_timeGame);
    }
    if (((StringContains(lp_pUnitSpawnCommand, " cam2", c_stringAnywhere, c_stringNoCase) == true) || (lv_vPlayer == 2))) {
        lv_vCamPlayer = libA8FDA37D_gf_UT_OtherPlayer(lp_pPlayer);
    }

    if ((UnitTypeTestAttribute(lv_vUnit, c_unitAttributeHeroic) == true)) {
        if ((lv_vAmount > lib01833E95_gv_tW_MaxUnitsHeroicSpawn)) {
            TextExpressionSetToken("Param/Expression/lib_01833E95_EDD4E0F5", "A", IntToText(lib01833E95_gv_tW_MaxUnitsHeroicSpawn));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_EDD4E0F5"));
            lv_vAmount = libNtve_gf_ArithmeticIntClamp(lv_vAmount, 1, lib01833E95_gv_tW_MaxUnitsHeroicSpawn);
        }

    }
    else {
        if ((lv_vAmount > lib01833E95_gv_tW_MaxUnitsSpawn)) {
            TextExpressionSetToken("Param/Expression/lib_01833E95_E1979F4F", "A", IntToText(lib01833E95_gv_tW_MaxUnitsSpawn));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_E1979F4F"));
            lv_vAmount = libNtve_gf_ArithmeticIntClamp(lv_vAmount, 1, lib01833E95_gv_tW_MaxUnitsSpawn);
        }

    }
    lv_vAmount = libNtve_gf_ArithmeticIntClamp(lv_vAmount, 1, lib01833E95_gv_tW_MaxUnitsSpawn);
    if (((StringWord(lp_pUnitSpawnCommand, 3) == "") || (StringWord(lp_pUnitSpawnCommand, 3) == "join") || (StringWord(lp_pUnitSpawnCommand, 3) == null) || (StringContains(StringWord(lp_pUnitSpawnCommand, 3), "cam", c_stringAnywhere, c_stringNoCase) == true))) {
        lv_vPlayer = lp_pPlayer;
    }

    auto8FAE76C0_val = lv_vPlayer;
    if (auto8FAE76C0_val == 1) {
        lv_vPlayer = lp_pPlayer;
    }
    else if (auto8FAE76C0_val == 2) {
        lv_vPlayer = libA8FDA37D_gf_UT_OtherPlayer(lp_pPlayer);
    }
    else {
    }
    if ((StringContains(lp_pUnitSpawnCommand, " rand", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_vPoint = lib01833E95_gf_TW_RandomWaveSpawnPoint();
    }
    else {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_vUnit, "PlaneArray[" + IntToString(c_planeGround) + "]", c_playerAny) == "1")) {
            lv_vPoint = libA8FDA37D_gf_UT_FindPointWithPathingTo(CameraGetTarget(lv_vCamPlayer), PlayerStartLocation(lv_vCamPlayer));
        }
        else {
            lv_vPoint = CameraGetTarget(lv_vCamPlayer);
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, lv_vUnit, 0, lv_vPlayer, lv_vPoint);
    TextExpressionSetToken("Param/Expression/lib_01833E95_B2A5DE35", "D", StringToText(lp_pViever));
    TextExpressionSetToken("Param/Expression/lib_01833E95_B2A5DE35", "B", IntToText(lv_vAmount));
    TextExpressionSetToken("Param/Expression/lib_01833E95_B2A5DE35", "A", UnitGetName(UnitLastCreated()));
    TextExpressionSetToken("Param/Expression/lib_01833E95_B2A5DE35", "C", PlayerName(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_B2A5DE35"));
    if ((StringContains(lp_pUnitSpawnCommand, " rand", c_stringAnywhere, c_stringNoCase) == true)) {
        AIAttackWaveUseGroup(lv_vPlayer, UnitLastCreatedGroup());
        if ((StringContains(lp_pUnitSpawnCommand, " cam2", c_stringAnywhere, c_stringNoCase) == true)) {
            AIAttackWaveSetTargetPoint(lv_vPlayer, PlayerStartLocation(2));
        }
        else {
            AIAttackWaveSetTargetPoint(lv_vPlayer, PlayerStartLocation(1));
        }
        AIAttackWaveSend(lv_vPlayer, 0, true);
    }

    if ((UnitGroupCount(UnitLastCreatedGroup(), c_unitCountAlive) <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_01833E95_AD05CFD8", "A", StringToText(lp_pUnitSpawnCommand));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_AD05CFD8"));
    }
    else {
        if ((StringContains(lp_pUnitSpawnCommand, " join", c_stringAnywhere, c_stringNoCase) == true)) {
            lib01833E95_gf_TW_AssignUnit(UnitGroupRandomUnit(UnitLastCreatedGroup(), c_unitCountAlive), lp_pViever);
        }

        libA8FDA37D_gf_UT_Cheat();
    }
    return true;
}

trigger auto_lib01833E95_gf_TW_GiveResourcesfromString_Trigger = null;
string auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pResourceCommand;
int auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pPlayer;
string auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pViever;

void lib01833E95_gf_TW_GiveResourcesfromString (string lp_pResourceCommand, int lp_pPlayer, string lp_pViever) {
    auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pResourceCommand = lp_pResourceCommand;
    auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pPlayer = lp_pPlayer;
    auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pViever = lp_pViever;

    if (auto_lib01833E95_gf_TW_GiveResourcesfromString_Trigger == null) {
        auto_lib01833E95_gf_TW_GiveResourcesfromString_Trigger = TriggerCreate("auto_lib01833E95_gf_TW_GiveResourcesfromString_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_TW_GiveResourcesfromString_Trigger, false, false);
}

bool auto_lib01833E95_gf_TW_GiveResourcesfromString_TriggerFunc (bool testConds, bool runActions) {
    string lp_pResourceCommand = auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pResourceCommand;
    int lp_pPlayer = auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pPlayer;
    string lp_pViever = auto_lib01833E95_gf_TW_GiveResourcesfromString_lp_pViever;

    // Variable Declarations
    int lv_vMinerals;
    int lv_vVespene;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMinerals = StringToInt(StringWord(lp_pResourceCommand, 1));
    lv_vVespene = StringToInt(StringWord(lp_pResourceCommand, 2));
    lv_vPlayer = StringToInt(StringWord(lp_pResourceCommand, 3));

    // Implementation
    if ((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, 0) == false)) {
        return true;
    }

    while (!((GameGetMissionTime() >= 1))) {
        Wait(1.0, c_timeGame);
    }
    libA8FDA37D_gf_UT_Cheat();
    if ((lv_vPlayer != 2)) {
        lv_vPlayer = lp_pPlayer;
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropMinerals, c_playerPropOperAdd, lv_vMinerals);
    if ((lv_vVespene != 0)) {
        PlayerModifyPropertyInt(lv_vPlayer, c_playerPropVespene, c_playerPropOperAdd, lv_vVespene);
        TextExpressionSetToken("Param/Expression/lib_01833E95_BEDA444F", "C", StringToText(lp_pViever));
        TextExpressionSetToken("Param/Expression/lib_01833E95_BEDA444F", "A", IntToText(lv_vMinerals));
        TextExpressionSetToken("Param/Expression/lib_01833E95_BEDA444F", "B", IntToText(lv_vVespene));
        TextExpressionSetToken("Param/Expression/lib_01833E95_BEDA444F", "D", PlayerName(lv_vPlayer));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_BEDA444F"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_01833E95_17379381", "B", StringToText(lp_pViever));
        TextExpressionSetToken("Param/Expression/lib_01833E95_17379381", "A", IntToText(lv_vMinerals));
        TextExpressionSetToken("Param/Expression/lib_01833E95_17379381", "C", PlayerName(lv_vPlayer));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_17379381"));
    }
    return true;
}

trigger auto_lib01833E95_gf_TW_EnableMutatorfromString_Trigger = null;
string auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pMutatorName;
string auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pViever;

void lib01833E95_gf_TW_EnableMutatorfromString (string lp_pMutatorName, string lp_pViever) {
    auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pMutatorName = lp_pMutatorName;
    auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pViever = lp_pViever;

    if (auto_lib01833E95_gf_TW_EnableMutatorfromString_Trigger == null) {
        auto_lib01833E95_gf_TW_EnableMutatorfromString_Trigger = TriggerCreate("auto_lib01833E95_gf_TW_EnableMutatorfromString_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_TW_EnableMutatorfromString_Trigger, false, false);
}

bool auto_lib01833E95_gf_TW_EnableMutatorfromString_TriggerFunc (bool testConds, bool runActions) {
    string lp_pMutatorName = auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pMutatorName;
    string lp_pViever = auto_lib01833E95_gf_TW_EnableMutatorfromString_lp_pViever;

    // Variable Declarations
    bool lv_vNotificationEnable;
    bool lv_vSuccessfullySpawned;
    bool lv_vEnable;
    string lv_vMutatorName;
    int lv_vMutatorDuration;

    // Automatic Variable Declarations
    string auto03B20992_val;

    // Variable Initialization
    lv_vNotificationEnable = true;
    lv_vSuccessfullySpawned = true;
    lv_vEnable = true;
    lv_vMutatorName = lp_pMutatorName;
    lv_vMutatorDuration = 300;

    // Implementation
    if ((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, 0) == false)) {
        return true;
    }

    while (!((GameGetMissionTime() >= 1))) {
        Wait(1.0, c_timeGame);
    }
    if ((StringContains(lp_pMutatorName, "disable", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_vEnable = false;
        lv_vMutatorName = StringReplaceWord(lp_pMutatorName, " disable", "", c_stringReplaceAll, c_stringNoCase);
    }

    auto03B20992_val = lv_vMutatorName;
    if (auto03B20992_val == "afraid of the dark") {
        lib860A1A1F_gf_MM_EnableMutator("UberDarkness", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "aggressive deployment") {
        lib860A1A1F_gf_MM_EnableMutator("DropPods", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "alien incubation") {
        lib860A1A1F_gf_MM_EnableMutator("SpawnBroodlings", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "avenger") {
        lib860A1A1F_gf_MM_EnableMutator("Avenger", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "barrier") {
        lib860A1A1F_gf_MM_EnableMutator("Barrier", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "black death") {
        lib860A1A1F_gf_MM_EnableMutator("Plague", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "blizzard") {
        lib860A1A1F_gf_MM_EnableMutator("Blizzard", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "bloodlust") {
        lib860A1A1F_gf_MM_EnableMutator("Bloodlust", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "boom bots") {
        lib860A1A1F_gf_MM_EnableMutator("BoomBots", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "concussive attacks") {
        lib860A1A1F_gf_MM_EnableMutator("ConcussiveAttacks", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "dark mirror") {
        lib860A1A1F_gf_MM_EnableMutator("DarkMirror", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "darkness") {
        lib860A1A1F_gf_MM_EnableMutator("BlackFog", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "diffusion") {
        lib860A1A1F_gf_MM_EnableMutator("DamageBounce", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "double-edged") {
        lib860A1A1F_gf_MM_EnableMutator("DamageReflect", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "eminent domain") {
        lib860A1A1F_gf_MM_EnableMutator("StructureSteal", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "endurance") {
        lib860A1A1F_gf_MM_EnableMutator("Endurance", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "evasive maneuvers") {
        lib860A1A1F_gf_MM_EnableMutator("SideStep", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "fatal attraction") {
        lib860A1A1F_gf_MM_EnableMutator("DeathPull", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "fear") {
        lib860A1A1F_gf_MM_EnableMutator("Fear", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "fireworks") {
        lib860A1A1F_gf_MM_EnableMutator("Fireworks", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "gift exchange") {
        lib860A1A1F_gf_MM_EnableMutator("GiftFight", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "going nuclear") {
        lib860A1A1F_gf_MM_EnableMutator("Nukes", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "great wall") {
        lib860A1A1F_gf_MM_EnableMutator("GreatWall", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "hardened will") {
        lib860A1A1F_gf_MM_EnableMutator("HardenedWill", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "heroes from the storm") {
        lib860A1A1F_gf_MM_EnableMutator("HeroesFromTheStorm", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "i collect, i change") {
        lib860A1A1F_gf_MM_EnableMutator("ICollectIChange", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "infestation station") {
        lib860A1A1F_gf_MM_EnableMutator("InfestationStation", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "inspiration") {
        lib860A1A1F_gf_MM_EnableMutator("Inspiration", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "just die!") {
        lib860A1A1F_gf_MM_EnableMutator("JustDie", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "kill bots") {
        lib860A1A1F_gf_MM_EnableMutator("KillBots", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "laser drill") {
        lib860A1A1F_gf_MM_EnableMutator("LaserDrill", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "lava burst") {
        lib860A1A1F_gf_MM_EnableMutator("LavaBurst", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "level playing field") {
        lib860A1A1F_gf_MM_EnableMutator("LevelPlayingField", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "life leech") {
        lib860A1A1F_gf_MM_EnableMutator("LifeLeech", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "long range") {
        lib860A1A1F_gf_MM_EnableMutator("LongRange", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "lucky envelopes") {
        lib860A1A1F_gf_MM_EnableMutator("RedEnvelopes", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "mag-nificent") {
        lib860A1A1F_gf_MM_EnableMutator("Magnificent", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "matryoshka") {
        lib860A1A1F_gf_MM_EnableMutator("Matryoshka", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "micro transactions") {
        lib860A1A1F_gf_MM_EnableMutator("OrderCosts", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "mineral shields") {
        lib860A1A1F_gf_MM_EnableMutator("Entomb", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "minesweeper") {
        lib860A1A1F_gf_MM_EnableMutator("SpiderMines", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "missile command") {
        lib860A1A1F_gf_MM_EnableMutator("MissileBarrage", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "moment of silence") {
        lib860A1A1F_gf_MM_EnableMutator("MomentOfSilence", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "mothership") {
        lib860A1A1F_gf_MM_EnableMutator("Mothership", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "mutually assured destruction") {
        lib860A1A1F_gf_MM_EnableMutator("HybridNuke", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "naughty list") {
        lib860A1A1F_gf_MM_EnableMutator("KillKarma", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "necronomicon") {
        lib860A1A1F_gf_MM_EnableMutator("Necronomicon", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "nuclear mines") {
        lib860A1A1F_gf_MM_EnableMutator("NuclearMines", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "orbital strike") {
        lib860A1A1F_gf_MM_EnableMutator("OrbitalStrike", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "outbreak") {
        lib860A1A1F_gf_MM_EnableMutator("InfestedTerranSpawner", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "photon overload") {
        lib860A1A1F_gf_MM_EnableMutator("PhotonOverload", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "polarity") {
        lib860A1A1F_gf_MM_EnableMutator("Polarity", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "power overwhelming") {
        lib860A1A1F_gf_MM_EnableMutator("OopsAllCasters", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "propagators") {
        lib860A1A1F_gf_MM_EnableMutator("Propagate", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "purifier beam") {
        lib860A1A1F_gf_MM_EnableMutator("PurifierBeam", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "repulsive field") {
        lib860A1A1F_gf_MM_EnableMutator("RepulsiveField", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "rip field generators") {
        lib860A1A1F_gf_MM_EnableMutator("RipFieldGenerators", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "scorched earth") {
        lib860A1A1F_gf_MM_EnableMutator("FireFight", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "self destruction") {
        lib860A1A1F_gf_MM_EnableMutator("DeathAOE", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "shapeshifters") {
        lib860A1A1F_gf_MM_EnableMutator("Shapeshifters", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "sharing is caring") {
        lib860A1A1F_gf_MM_EnableMutator("SharedSupply", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "shortsighted") {
        lib860A1A1F_gf_MM_EnableMutator("ReducedVision", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "slim pickings") {
        lib860A1A1F_gf_MM_EnableMutator("NoResources", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "speed freaks") {
        lib860A1A1F_gf_MM_EnableMutator("UnitSpeed", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "supreme commander") {
        lib860A1A1F_gf_MM_EnableMutator("SupremeCommander", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "temporal field") {
        lib860A1A1F_gf_MM_EnableMutator("TemporalField", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "the mist") {
        lib860A1A1F_gf_MM_EnableMutator("TheMist", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "the usual suspects") {
        lib860A1A1F_gf_MM_EnableMutator("TheUsualSuspects", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "time warp") {
        lib860A1A1F_gf_MM_EnableMutator("TimeWarp", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "transmutation") {
        lib860A1A1F_gf_MM_EnableMutator("Evolve", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "trick or treat") {
        lib860A1A1F_gf_MM_EnableMutator("TrickOrTreat", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "turkey shoot") {
        lib860A1A1F_gf_MM_EnableMutator("FoodHunt", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "twister") {
        lib860A1A1F_gf_MM_EnableMutator("Tornadoes", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "vertigo") {
        lib860A1A1F_gf_MM_EnableMutator("Vertigo", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "void reanimators") {
        lib860A1A1F_gf_MM_EnableMutator("Reanimators", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "void rifts") {
        lib860A1A1F_gf_MM_EnableMutator("VoidRifts", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "walking infested") {
        lib860A1A1F_gf_MM_EnableMutator("WalkingInfested", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else if (auto03B20992_val == "we move unseen") {
        lib860A1A1F_gf_MM_EnableMutator("AllEnemiesCloaked", lv_vNotificationEnable, lv_vEnable, lv_vMutatorDuration);
    }
    else {
        lv_vSuccessfullySpawned = false;
        TextExpressionSetToken("Param/Expression/lib_01833E95_16EACD17", "A", StringToText(lv_vMutatorName));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_16EACD17"));
    }
    if ((lv_vSuccessfullySpawned == true)) {
        if ((lv_vEnable == true)) {
            TextExpressionSetToken("Param/Expression/lib_01833E95_D5FD8F1B", "B", StringToText(lp_pViever));
            TextExpressionSetToken("Param/Expression/lib_01833E95_D5FD8F1B", "A", StringToText(lv_vMutatorName));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_D5FD8F1B"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_01833E95_209D8856", "B", StringToText(lp_pViever));
            TextExpressionSetToken("Param/Expression/lib_01833E95_209D8856", "A", StringToText(lv_vMutatorName));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_209D8856"));
        }
    }

    return true;
}

trigger auto_lib01833E95_gf_TW_JointheArmyfromString_Trigger = null;
string auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pViever;
int auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pPlayer;

void lib01833E95_gf_TW_JointheArmyfromString (string lp_pViever, int lp_pPlayer) {
    auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pViever = lp_pViever;
    auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pPlayer = lp_pPlayer;

    if (auto_lib01833E95_gf_TW_JointheArmyfromString_Trigger == null) {
        auto_lib01833E95_gf_TW_JointheArmyfromString_Trigger = TriggerCreate("auto_lib01833E95_gf_TW_JointheArmyfromString_TriggerFunc");
    }

    TriggerExecute(auto_lib01833E95_gf_TW_JointheArmyfromString_Trigger, false, false);
}

bool auto_lib01833E95_gf_TW_JointheArmyfromString_TriggerFunc (bool testConds, bool runActions) {
    string lp_pViever = auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pViever;
    int lp_pPlayer = auto_lib01833E95_gf_TW_JointheArmyfromString_lp_pPlayer;

    // Variable Declarations
    unitgroup lv_vUG;
    unitgroup lv_vQualityUnits;

    // Automatic Variable Declarations
    unitgroup autoA35F98C1_g;
    int autoA35F98C1_u;
    unit autoA35F98C1_var;
    const int autoE6DB1722_ae = lib01833E95_gv_tW_WaitingListLength;
    int autoE6DB1722_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();
    lv_vQualityUnits = UnitGroupEmpty();

    // Implementation
    if ((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, 0) == false)) {
        return true;
    }

    while (!((GameGetMissionTime() >= 1))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(lib01833E95_gt_TW_UnitDies, true);
    PlayerGroupAdd(lib01833E95_gv_tW_PlayerUG, lp_pPlayer);
    lv_vUG = UnitGroup(null, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoA35F98C1_g = lv_vUG;
    autoA35F98C1_u = UnitGroupCount(autoA35F98C1_g, c_unitCountAll);
    for (;; autoA35F98C1_u -= 1) {
        autoA35F98C1_var = UnitGroupUnitFromEnd(autoA35F98C1_g, autoA35F98C1_u);
        if (autoA35F98C1_var == null) { break; }
        if (((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, autoA35F98C1_var) == true) || (UnitWeaponCount(autoA35F98C1_var) < 1))) {
            UnitGroupRemove(lv_vUG, autoA35F98C1_var);
        }
        else {
            if (((UnitGetPropertyFixed(autoA35F98C1_var, c_unitPropVitality, c_unitPropCurrent) >= 300.0) || (UnitTypeTestAttribute(UnitGetType(autoA35F98C1_var), c_unitAttributeHeroic) == true))) {
                UnitGroupAdd(lv_vQualityUnits, autoA35F98C1_var);
            }

        }
    }
    if ((UnitGroupCount(lv_vQualityUnits, c_unitCountAlive) >= 1)) {
        lib01833E95_gf_TW_AssignUnit(UnitGroupRandomUnit(lv_vQualityUnits, c_unitCountAlive), lp_pViever);
    }
    else if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 1)) {
        lib01833E95_gf_TW_AssignUnit(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive), lp_pViever);
    }
    else if (true) {
        autoE6DB1722_var = 0;
        for ( ; autoE6DB1722_var <= autoE6DB1722_ae; autoE6DB1722_var += 1 ) {
            if ((lib01833E95_gv_tW_WaitingListName[autoE6DB1722_var] == null)) {
                lib01833E95_gv_tW_WaitingListName[autoE6DB1722_var] = lp_pViever;
                lib01833E95_gv_tW_WaitingListPlayer[autoE6DB1722_var] = lp_pPlayer;
                TriggerEnable(lib01833E95_gt_TW_UnitCreated, true);
                TriggerEnable(lib01833E95_gt_TW_UnitRevived, true);
                TriggerEnable(lib01833E95_gt_TW_UnitOwnerChanges, true);
                break;
            }

        }
    }
    return true;
}

void lib01833E95_gf_TW_SendWave (string lp_pViever, int lp_pPlayer, string lp_pMessage) {
    // Variable Declarations
    int lv_viSize;
    int lv_viTech;
    int lv_vTech;
    int lv_vSize;
    int lv_vCamPlayer;
    int lv_vPlayer;
    point lv_vSpawnPoint;

    // Automatic Variable Declarations
    string auto85EEFFE1_val;
    string auto77990237_val;
    const int autoB56703D8_ae = 4;
    const int autoB56703D8_ai = 1;

    // Variable Initialization
    lv_viSize = StringToInt(StringWord(lp_pMessage, 1));
    lv_viTech = StringToInt(StringWord(lp_pMessage, 2));
    lv_vCamPlayer = lp_pPlayer;

    // Implementation
    if ((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, 0) == false)) {
        return ;
    }

    while (!((GameGetMissionTime() >= 1))) {
        Wait(1.0, c_timeGame);
    }
    lv_vSpawnPoint = lib01833E95_gf_TW_RandomWaveSpawnPoint();
    if ((StringContains(lp_pMessage, "cam1", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_vCamPlayer = lp_pPlayer;
        lv_vSpawnPoint = libA8FDA37D_gf_UT_FindPointWithPathingTo(CameraGetTarget(lv_vCamPlayer), PlayerStartLocation(lv_vCamPlayer));
    }
    else if ((StringContains(lp_pMessage, "cam2", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_vCamPlayer = libA8FDA37D_gf_UT_OtherPlayer(lp_pPlayer);
        lv_vSpawnPoint = libA8FDA37D_gf_UT_FindPointWithPathingTo(CameraGetTarget(lv_vCamPlayer), PlayerStartLocation(lv_vCamPlayer));
    }
    if ((lv_viTech <= 0)) {
        lv_viTech = lv_viSize;
    }

    auto85EEFFE1_val = IntToString(lv_viSize);
    if (auto85EEFFE1_val == "1") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (auto85EEFFE1_val == "2") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (auto85EEFFE1_val == "3") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (auto85EEFFE1_val == "4") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (auto85EEFFE1_val == "5") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (auto85EEFFE1_val == "6") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else if (auto85EEFFE1_val == "7") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    else {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    auto77990237_val = IntToString(lv_viTech);
    if (auto77990237_val == "1") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto77990237_val == "2") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto77990237_val == "3") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto77990237_val == "4") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto77990237_val == "5") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (auto77990237_val == "6") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else if (auto77990237_val == "7") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    TextExpressionSetToken("Param/Expression/lib_01833E95_79D8B1F1", "B", StringToText(lp_pViever));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_79D8B1F1"));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(3, 4, lv_vSize, lv_vTech, lv_vSpawnPoint, true);
    lv_vPlayer = 3;
    for ( ; ( (autoB56703D8_ai >= 0 && lv_vPlayer <= autoB56703D8_ae) || (autoB56703D8_ai < 0 && lv_vPlayer >= autoB56703D8_ae) ) ; lv_vPlayer += autoB56703D8_ai ) {
        AIAttackWaveUseGroup(lv_vPlayer, libCOMI_gf_LastCreatedCoopAttackForce());
        AIAttackWaveSetGatherPoint(lv_vPlayer, UnitGroupCenterOfGroup(libCOMI_gf_LastCreatedCoopAttackForce()));
        AIAttackWaveSetTargetPoint(lv_vPlayer, PlayerStartLocation(lv_vCamPlayer));
        AIAttackWaveSend(lv_vPlayer, 0, false);
    }
    libA8FDA37D_gf_UT_Cheat();
}

int lib01833E95_gf_K2_GetKaraxPlayer () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_ActiveCommanderForPlayer(1) == "ProtossKarax")) {
        return 1;
    }

    if ((libCOOC_gf_ActiveCommanderForPlayer(2) == "ProtossKarax")) {
        return 2;
    }

    return 0;
}

void lib01833E95_gf_K2_MasteryNameFix (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_masteryIndex;

    // Automatic Variable Declarations
    int autoC3482BEE_ai;
    int autoC3482BEE_ae;
    int autoC3482BEE_ac;

    // Variable Initialization

    // Implementation
    autoC3482BEE_ai = 0;
    autoC3482BEE_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoC3482BEE_ai < autoC3482BEE_ae) {
        autoC3482BEE_ai = autoC3482BEE_ai+1;
        autoC3482BEE_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoC3482BEE_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoC3482BEE_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoC3482BEE_ai);
            lv_masteryIndex = libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade);
            if ((lv_masteryIndex == 0)) {
                TextExpressionSetToken("Param/Expression/lib_01833E95_06555F02", "A", StringToText((lv_indexMasteryUpgrade)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_01833E95_06555F02"), false);
                continue;
            }

            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], lib01833E95_gf_K2_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], lib01833E95_gf_K2_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
        }    
    }
}

text lib01833E95_gf_K2_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", 1), "Name", 1));
}

text lib01833E95_gf_K2_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", 1), "Tooltip", 1));
}

bool lib01833E95_gf_AF_MyAcc (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_pPlayer) == "1-S2-1-10315136") || (PlayerHandle(lp_pPlayer) == "1-S2-1-4189373") || (PlayerHandle(lp_pPlayer) == "1-S2-1-8646440") || (PlayerHandle(lp_pPlayer) == "2-S2-1-7503439") || (GameIsOnline() == false))) {
        return true;
    }
    else {
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: AF_Init
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_tooltip;
    int lv_dimensionsX;
    int lv_dimensionsY;
    int lv_imageDimensionsX;
    int lv_imageDimensionsY;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto7754F187_ae = 2;
    int auto7754F187_var;
    const int auto45741050_ae = 3;
    const int auto45741050_ai = 1;

    // Variable Initialization
    lv_tooltip = StringExternal("Param/Value/lib_01833E95_D5F2727F");
    lv_dimensionsX = 40;
    lv_dimensionsY = 25;
    lv_imageDimensionsX = 30;
    lv_imageDimensionsY = 13;
    lv_offsetY = 17;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_B2F8B4FA"));
    TriggerEnable(lib01833E95_gt_AF_ButtonClicked, true);
    TriggerEnable(lib01833E95_gt_AF_HeroPurchased, true);
    auto7754F187_var = 1;
    for ( ; auto7754F187_var <= auto7754F187_ae; auto7754F187_var += 1 ) {
        if ((TechTreeUpgradeCount(auto7754F187_var, "TychusCommander", c_techCountCompleteOnly) >= 1)) {
            lib01833E95_gv_aF_TychusPlayer = auto7754F187_var;
            break;
        }

    }
    DialogCreate(500, 500, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib01833E95_gv_aF_TopBarIconsDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lib01833E95_gv_aF_TychusPlayer), true);
    lv_i = 1;
    for ( ; ( (auto45741050_ai >= 0 && lv_i <= auto45741050_ae) || (auto45741050_ai < 0 && lv_i >= auto45741050_ae) ) ; lv_i += auto45741050_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_dimensionsX, lv_dimensionsY, c_anchorTop, ((92 * (lv_i - 1)) + 7), lv_offsetY, lv_tooltip, StringToText(""), "");
        lib01833E95_gv_aF_TopBarIcons[lv_i][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageDimensionsX, lv_imageDimensionsY, c_anchorTopLeft, 0, 0, StringToText(""), "Tychus_SwitchOutlaw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib01833E95_gv_aF_TopBarIcons[lv_i][1] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib01833E95_gv_aF_TopBarIcons[lv_i][0], c_anchorCenter, 0, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    TriggerExecute(lib01833E95_gt_AF_HeroPurchased, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Init_Init () {
    lib01833E95_gt_AF_Init = TriggerCreate("lib01833E95_gt_AF_Init_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_Init, c_playerAny, "-tychui", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_ButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firsthero;
    unit lv_hero;
    string lv_squadinstance;
    int lv_squadindex;
    int lv_a;

    // Automatic Variable Declarations
    int autoE6354593_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib01833E95_gv_aF_TopBarIcons[1][0]) || (EventDialogControl() == lib01833E95_gv_aF_TopBarIcons[2][0]) || (EventDialogControl() == lib01833E95_gv_aF_TopBarIcons[3][0])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE6354593_val = EventDialogControl();
    if (autoE6354593_val == lib01833E95_gv_aF_TopBarIcons[1][0]) {
        lv_a = 1;
    }
    else if (autoE6354593_val == lib01833E95_gv_aF_TopBarIcons[2][0]) {
        lv_a = 2;
    }
    else if (autoE6354593_val == lib01833E95_gv_aF_TopBarIcons[3][0]) {
        lv_a = 3;
    }
    else {
    }
    lv_firsthero = libCOUI_gv_cU_TychusSquadHeroes[lv_a];
    lv_squadinstance = lib01833E95_gf_AF_GetTychusSquadInstance(lv_firsthero);
    lv_squadindex = (lv_a + 1);
    lib01833E95_gf_AF_SetTychusSquadMember(lv_firsthero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_firsthero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_firsthero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_firsthero, "TychusHeroSubGroup", lv_firsthero, lv_squadindex);
    lv_hero = libCOUI_gv_cU_TychusSquadHeroes[(lv_a + 1)];
    lv_squadinstance = lib01833E95_gf_AF_GetTychusSquadInstance(lv_hero);
    lv_squadindex = lv_a;
    lib01833E95_gf_AF_SetTychusSquadMember(lv_hero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_hero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_hero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_hero, "TychusHeroSubGroup", lv_hero, lv_squadindex);
    libCOUI_gv_cU_TychusSquadHeroes[lv_a] = lv_hero;
    libCOUI_gv_cU_TychusSquadHeroes[(lv_a + 1)] = lv_firsthero;
    if ((UnitIsAlive(lv_firsthero) == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[(lv_a + 1)], PlayerGroupAll(), "DeathState", "Dead");
    }

    if ((UnitIsAlive(lv_hero) == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_a], PlayerGroupAll(), "DeathState", "Dead");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_ButtonClicked_Init () {
    lib01833E95_gt_AF_ButtonClicked = TriggerCreate("lib01833E95_gt_AF_ButtonClicked_Func");
    TriggerEnable(lib01833E95_gt_AF_ButtonClicked, false);
    TriggerAddEventDialogControl(lib01833E95_gt_AF_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_HeroPurchased
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_HeroPurchased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoAE8C3919_ae;
    int autoAE8C3919_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    lv_index = (lib01833E95_gf_AF_GetTychusSquadIndex() - 2);
    if ((((lv_index >= 1) && (lv_index <= 3)) == true)) {
        autoAE8C3919_ae = lv_index;
        autoAE8C3919_var = 1;
        for ( ; autoAE8C3919_var <= autoAE8C3919_ae; autoAE8C3919_var += 1 ) {
            if ((DialogControlIsVisible(lib01833E95_gv_aF_TopBarIcons[autoAE8C3919_var][0], lib01833E95_gv_aF_TychusPlayer) == false)) {
                DialogControlSetVisible(lib01833E95_gv_aF_TopBarIcons[autoAE8C3919_var][0], PlayerGroupSingle(lib01833E95_gv_aF_TychusPlayer), true);
                DialogControlSetVisible(lib01833E95_gv_aF_TopBarIcons[autoAE8C3919_var][1], PlayerGroupSingle(lib01833E95_gv_aF_TychusPlayer), true);
                DialogControlFadeTransparency(lib01833E95_gv_aF_TopBarIcons[autoAE8C3919_var][1], PlayerGroupAll(), 0.0, 100.0);
                Wait(0.0, c_timeReal);
                DialogControlFadeTransparency(lib01833E95_gv_aF_TopBarIcons[autoAE8C3919_var][1], PlayerGroupAll(), 0.7, 40.0);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_HeroPurchased_Init () {
    lib01833E95_gt_AF_HeroPurchased = TriggerCreate("lib01833E95_gt_AF_HeroPurchased_Func");
    TriggerEnable(lib01833E95_gt_AF_HeroPurchased, false);
    libCOMI_gf_TychusHeroEvent(lib01833E95_gt_AF_HeroPurchased, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_EnableHeroicUnload
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_EnableHeroicUnload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0)) == false)) {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0), true);
        TriggerEnable(lib01833E95_gt_AF_UnloadHeroic, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_D84D2A6B"));
    }
    else {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("DummyUnloadAbil", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_96256ABE"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_EnableHeroicUnload_Init () {
    lib01833E95_gt_AF_EnableHeroicUnload = TriggerCreate("lib01833E95_gt_AF_EnableHeroicUnload_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_EnableHeroicUnload, c_playerAny, "-unload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_UnloadHeroic
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_UnloadHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_vOrder;

    // Automatic Variable Declarations
    int auto8599BE5C_ae;
    int auto8599BE5C_var;

    // Variable Initialization
    lv_vOrder = Order(AbilityCommand("NydusCanalTransport", 3));

    // Actions
    if (!runActions) {
        return true;
    }

    auto8599BE5C_ae = UnitCargoValue(EventUnit(), c_unitCargoUnitCount);
    auto8599BE5C_var = 1;
    for ( ; auto8599BE5C_var <= auto8599BE5C_ae; auto8599BE5C_var += 1 ) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitCargo(EventUnit(), auto8599BE5C_var)), c_unitAttributeHeroic) == true)) {
            OrderSetTargetPassenger(lv_vOrder, UnitCargo(EventUnit(), auto8599BE5C_var));
            UnitIssueOrder(EventUnit(), lv_vOrder, c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_UnloadHeroic_Init () {
    lib01833E95_gt_AF_UnloadHeroic = TriggerCreate("lib01833E95_gt_AF_UnloadHeroic_Func");
    TriggerEnable(lib01833E95_gt_AF_UnloadHeroic, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_AF_UnloadHeroic, null, AbilityCommand("DummyUnloadAbil", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Outlaws
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Outlaws_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto25B325F4_ae = 6;
    int auto25B325F4_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib01833E95_gt_AF_OutlawDeath, true);
    TriggerEnable(lib01833E95_gt_AF_OutlawPurchase, true);
    lib01833E95_gf_AF_Tychus_InitHeroTechLimit(EventPlayer());
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Button.Requirements", EventPlayer(), "");
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Charge.CountUse", EventPlayer(), "0");
    auto25B325F4_var = 0;
    for ( ; auto25B325F4_var <= auto25B325F4_ae; auto25B325F4_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Charge.HideCount", EventPlayer(), "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Charge.HideCount", EventPlayer(), "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Charge.HideCount", EventPlayer(), "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Button.Requirements", EventPlayer(), "");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Charge.CountUse", EventPlayer(), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Button.Requirements", EventPlayer(), "");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(auto25B325F4_var) + "].Charge.CountUse", EventPlayer(), "0");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Outlaws_Init () {
    lib01833E95_gt_AF_Outlaws = TriggerCreate("lib01833E95_gt_AF_Outlaws_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_Outlaws, c_playerAny, "-outlaws", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_OutlawDeath
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_OutlawDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vINT;
    unit lv_vUnit;
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gf_EventTychusHero();
    lv_squadInstance = libCOMI_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("XAC_TechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeReal);
    if ((UnitGroupCount(UnitGroup(UnitGetType(lv_vUnit), UnitGetOwner(lv_vUnit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
        DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "TrainingState", "NotTraining");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_OutlawDeath_Init () {
    lib01833E95_gt_AF_OutlawDeath = TriggerCreate("lib01833E95_gt_AF_OutlawDeath_Func");
    TriggerEnable(lib01833E95_gt_AF_OutlawDeath, false);
    libCOMI_gf_TychusHeroEvent(lib01833E95_gt_AF_OutlawDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_OutlawPurchase
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_OutlawPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadInstance = libCOMI_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("XAC_TechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_OutlawPurchase_Init () {
    lib01833E95_gt_AF_OutlawPurchase = TriggerCreate("lib01833E95_gt_AF_OutlawPurchase_Func");
    TriggerEnable(lib01833E95_gt_AF_OutlawPurchase, false);
    libCOMI_gf_TychusHeroEvent(lib01833E95_gt_AF_OutlawPurchase, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vBackgroundDialogPanel;
    string lv_vCommander;
    string lv_vCommander2;

    // Automatic Variable Declarations
    playergroup auto44F7F734_g;
    int auto44F7F734_var;

    // Variable Initialization
    lv_vBackgroundDialogPanel = c_invalidDialogControlId;
    lv_vCommander = libA8FDA37D_gf_ActiveCommanderForPlayer3(1);
    lv_vCommander2 = libA8FDA37D_gf_ActiveCommanderForPlayer3(2);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_AbortMission, false);
    Wait(0.0, c_timeReal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), false);
    auto44F7F734_g = libCOMI_gv_vU_AlliedCommanders;
    auto44F7F734_var = -1;
    while (true) {
        auto44F7F734_var = PlayerGroupNextPlayer(auto44F7F734_g, auto44F7F734_var);
        if (auto44F7F734_var < 0) { break; }
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[auto44F7F734_var], PlayerGroupSingle(auto44F7F734_var), false);
    }
    TriggerEnable(libA8FDA37D_gt_UT_Graph_Timer, false);
    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(0, 1);
    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(0, 2);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOOC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryUI, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    UnitPauseAll(true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 550);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 50, c_anchorTop, 0, 90, GameMapName(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_MapTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_EnemyCompName", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 15.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 300, c_anchorTopRight, 20, 0, lib01833E95_gf_TW_GetUserScore(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TW_UserKills", PlayerGroupAll());
    lib01833E95_gf_AF_MutatorIconsCreate(DialogLastCreated());
    lib01833E95_gf_AF_MasteryInfoCreate(DialogLastCreated(), 1);
    lib01833E95_gf_AF_MasteryInfoCreate(DialogLastCreated(), 2);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_ScoreBackground/Scorebackgrond");
    lv_vBackgroundDialogPanel = DialogControlLastCreated();
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_Image");
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageLeft");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libA8FDA37D_gf_UT_CommanderLoadingImage(lv_vCommander), PlayerGroupAll());
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageRight");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libA8FDA37D_gf_UT_CommanderLoadingImage(lv_vCommander2), PlayerGroupAll());
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 1.5, 0.0);
    if ((libA8FDA37D_gv_uT_CheatUsed == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 40, 30, c_anchorTopRight, 5, 5, StringExternal("Param/Value/lib_01833E95_EB7DDE7F"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_01833E95_EA3A1C88"), PlayerGroupAll());
    }

    Wait(1.5, c_timeGame);
    TriggerExecute(lib01833E95_gt_AF_Score_GraphsandCharts, true, false);
    TriggerExecute(lib01833E95_gt_AF_Score_SwitchButtonCreate, true, false);
    TriggerExecute(lib01833E95_gt_AF_Score_QuitButtonCreate, true, false);
    TriggerExecute(lib01833E95_gt_AF_Score_MissionsButtonCreate, true, false);
    TriggerExecute(libCOUI_gt_CreateMissionsDialog, true, false);
    DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_Init () {
    lib01833E95_gt_AF_Score = TriggerCreate("lib01833E95_gt_AF_Score_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Graphs and Charts
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_GraphsandCharts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vIndex;
    string[11] lv_vUnitTemp;
    int[11] lv_vDamageTemp;
    int lv_vTotalDamage;

    // Automatic Variable Declarations
    const int auto8309909D_ae = 2;
    int auto8309909D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph"));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib01833E95_gv_aF_Score_KillGraph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/FullBackground"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/CloseImage"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/InnerBackground"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/LeftAxisImage"));
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/RightAxisImage"));
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    auto8309909D_var = 1;
    for ( ; auto8309909D_var <= auto8309909D_ae; auto8309909D_var += 1 ) {
        libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(4, auto8309909D_var);
    }
    libA8FDA37D_gf_UT_CreatePieChartfromDamageLog(1, -350, 75, c_anchorCenter, 0);
    lib01833E95_gv_aF_Score_PieCharts[1] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libA8FDA37D_gf_UT_CreatePieChartfromDamageLog(2, 350, 75, c_anchorCenter, 8);
    lib01833E95_gv_aF_Score_PieCharts[2] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib01833E95_gv_aF_KillNumbers = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_GraphsandCharts_Init () {
    lib01833E95_gt_AF_Score_GraphsandCharts = TriggerCreate("lib01833E95_gt_AF_Score_GraphsandCharts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_SwitchButtonCreate
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_SwitchButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 80, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_01833E95_663F0AA5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    lib01833E95_gv_aF_Score_FinalButtonLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib01833E95_gv_aF_Score_FinalButton[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_01833E95_1165C31E"), PlayerGroupAll());
    TriggerEnable(lib01833E95_gt_AF_Score_FinalButtonClicked, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_SwitchButtonCreate_Init () {
    lib01833E95_gt_AF_Score_SwitchButtonCreate = TriggerCreate("lib01833E95_gt_AF_Score_SwitchButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_MissionsButtonCreate
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_MissionsButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 900, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/lib_01833E95_B6258ECB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    lib01833E95_gv_aF_Score_FinalButtonLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    lib01833E95_gv_aF_Score_FinalButton[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_01833E95_2FB071AC"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_MissionsButtonCreate_Init () {
    lib01833E95_gt_AF_Score_MissionsButtonCreate = TriggerCreate("lib01833E95_gt_AF_Score_MissionsButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_QuitButtonCreate
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_QuitButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 50, c_anchorBottomRight, 75, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/lib_01833E95_5D768E4F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    lib01833E95_gv_aF_Score_FinalButtonLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib01833E95_gv_aF_Score_FinalButton[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_01833E95_C47ED71E"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_QuitButtonCreate_Init () {
    lib01833E95_gt_AF_Score_QuitButtonCreate = TriggerCreate("lib01833E95_gt_AF_Score_QuitButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Final Button Clicked
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Score_FinalButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7F4CAE9C_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib01833E95_gv_aF_Score_FinalButton[0]) || (EventDialogControl() == lib01833E95_gv_aF_Score_FinalButton[1]) || (EventDialogControl() == lib01833E95_gv_aF_Score_FinalButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7F4CAE9C_val = EventDialogControl();
    if (auto7F4CAE9C_val == lib01833E95_gv_aF_Score_FinalButton[0]) {
        if ((lib01833E95_gv_aF_Score_GraphVisible[EventPlayer()] == true)) {
            DialogControlFadeTransparency(lib01833E95_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 100.0);
            Wait(0.5, c_timeGame);
            DialogSetVisible(lib01833E95_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(lib01833E95_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), true);
            lib01833E95_gv_aF_Score_GraphVisible[EventPlayer()] = false;
        }
        else {
            DialogSetVisible(lib01833E95_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(lib01833E95_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlFadeTransparency(lib01833E95_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 0.0);
            lib01833E95_gv_aF_Score_GraphVisible[EventPlayer()] = true;
        }
    }
    else if (auto7F4CAE9C_val == lib01833E95_gv_aF_Score_FinalButton[1]) {
        SoundPlayForPlayer(SoundLink("UI_Void_Error_Back", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        GameOver(EventPlayer(), libCOMI_gv_cM_EndMissionResult[EventPlayer()], false, true);
    }
    else if (auto7F4CAE9C_val == lib01833E95_gv_aF_Score_FinalButton[2]) {
        if ((DialogIsVisible(libCOUI_gv_selectMissionDialogBig, EventPlayer()) == true)) {
            DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Score_FinalButtonClicked_Init () {
    lib01833E95_gt_AF_Score_FinalButtonClicked = TriggerCreate("lib01833E95_gt_AF_Score_FinalButtonClicked_Func");
    TriggerEnable(lib01833E95_gt_AF_Score_FinalButtonClicked, false);
    TriggerAddEventDialogControl(lib01833E95_gt_AF_Score_FinalButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MissionEnds
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_MissionEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib01833E95_gv_aF_MissionTime = GameGetMissionTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_MissionEnds_Init () {
    lib01833E95_gt_AF_MissionEnds = TriggerCreate("lib01833E95_gt_AF_MissionEnds_Func");
    TriggerAddEventGeneric(lib01833E95_gt_AF_MissionEnds, "UT_MissionEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Init
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto75749737_g;
    int auto75749737_u;
    unit auto75749737_var;
    unitgroup autoD131B165_g;
    int autoD131B165_u;
    unit autoD131B165_var;
    unitgroup auto013297D5_g;
    int auto013297D5_u;
    unit auto013297D5_var;
    unitgroup auto74F30D31_g;
    int auto74F30D31_u;
    unit auto74F30D31_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib01833E95_gv_aF_MemeActive == true)) {
        lib01833E95_gv_aF_MemeActive = false;
        TriggerEnable(lib01833E95_gt_AF_Meme_OwnerChanged, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitCreated, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitDeselected, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitSelected, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitRemoved, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitDies, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_Nuke, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitRevived, false);
        TriggerEnable(lib01833E95_gt_AF_Meme_PartsPickedUp, false);
        auto74F30D31_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0), 0);
        auto74F30D31_u = UnitGroupCount(auto74F30D31_g, c_unitCountAll);
        for (;; auto74F30D31_u -= 1) {
            auto74F30D31_var = UnitGroupUnitFromEnd(auto74F30D31_g, auto74F30D31_u);
            if (auto74F30D31_var == null) { break; }
            TextTagDestroy(libHots_gf_TextTagForUnit(auto74F30D31_var, lib01833E95_gv_aF_Meme_TextTagIndex));
        }
    }
    else {
        lib01833E95_gv_aF_MemeActive = true;
        auto75749737_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto75749737_u = UnitGroupCount(auto75749737_g, c_unitCountAll);
        for (;; auto75749737_u -= 1) {
            auto75749737_var = UnitGroupUnitFromEnd(auto75749737_g, auto75749737_u);
            if (auto75749737_var == null) { break; }
            lib01833E95_gf_AF_AttachTextTagImage(auto75749737_var, lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
        }
        autoD131B165_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD131B165_u = UnitGroupCount(autoD131B165_g, c_unitCountAll);
        for (;; autoD131B165_u -= 1) {
            autoD131B165_var = UnitGroupUnitFromEnd(autoD131B165_g, autoD131B165_u);
            if (autoD131B165_var == null) { break; }
            lib01833E95_gf_AF_AttachTextTagImage(autoD131B165_var, lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
        }
        auto013297D5_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto013297D5_u = UnitGroupCount(auto013297D5_g, c_unitCountAll);
        for (;; auto013297D5_u -= 1) {
            auto013297D5_var = UnitGroupUnitFromEnd(auto013297D5_g, auto013297D5_u);
            if (auto013297D5_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideUnitTransport(auto013297D5_var) == true)) {
                lib01833E95_gf_AF_AttachTextTagImage(auto013297D5_var, lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
            }

        }
        TriggerEnable(lib01833E95_gt_AF_Meme_OwnerChanged, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitCreated, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitDeselected, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitSelected, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitRemoved, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitDies, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_Nuke, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_UnitRevived, true);
        TriggerEnable(lib01833E95_gt_AF_Meme_PartsPickedUp, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_Init_Init () {
    lib01833E95_gt_AF_Meme_Init = TriggerCreate("lib01833E95_gt_AF_Meme_Init_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_Meme_Init, c_playerAny, "-meme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Selected
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "AweMeme") == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(0.0, 0.3), c_timeGame);
    lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_PlayerSelected, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitSelected_Init () {
    lib01833E95_gt_AF_Meme_UnitSelected = TriggerCreate("lib01833E95_gt_AF_Meme_UnitSelected_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitSelected, false);
    TriggerAddEventUnitSelected(lib01833E95_gt_AF_Meme_UnitSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Deselected
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitDeselected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "AweMeme") == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(0.0, 0.3), c_timeGame);
    lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitDeselected_Init () {
    lib01833E95_gt_AF_Meme_UnitDeselected = TriggerCreate("lib01833E95_gt_AF_Meme_UnitDeselected_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitDeselected, false);
    TriggerAddEventUnitSelected(lib01833E95_gt_AF_Meme_UnitDeselected, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), lib01833E95_gv_aF_Meme_TextTagIndex));
    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(libNtve_gf_KillingUnit()), 1, libNtve_ge_PlayerRelation_Enemy) == true)) {
        lib01833E95_gf_AF_AttachTextTagImage(libNtve_gf_KillingUnit(), "m_lul", lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitDies_Init () {
    lib01833E95_gt_AF_Meme_UnitDies = TriggerCreate("lib01833E95_gt_AF_Meme_UnitDies_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitDies, false);
    TriggerAddEventUnitDied(lib01833E95_gt_AF_Meme_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Removed
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitRemoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), lib01833E95_gv_aF_Meme_TextTagIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitRemoved_Init () {
    lib01833E95_gt_AF_Meme_UnitRemoved = TriggerCreate("lib01833E95_gt_AF_Meme_UnitRemoved_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitRemoved, false);
    TriggerAddEventUnitRemoved(lib01833E95_gt_AF_Meme_UnitRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Created
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitCreatedUnit()), 1, libNtve_ge_PlayerRelation_Ally) == true)) {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnitCreatedUnit(), lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    else {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnitCreatedUnit(), lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitCreated_Init () {
    lib01833E95_gt_AF_Meme_UnitCreated = TriggerCreate("lib01833E95_gt_AF_Meme_UnitCreated_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitCreated, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_AF_Meme_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Unit Revived
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), 1, libNtve_ge_PlayerRelation_Ally) == true)) {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    else {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_UnitRevived_Init () {
    lib01833E95_gt_AF_Meme_UnitRevived = TriggerCreate("lib01833E95_gt_AF_Meme_UnitRevived_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_UnitRevived, false);
    TriggerAddEventUnitRevive(lib01833E95_gt_AF_Meme_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Owner Changed
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_OwnerChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), 1, libNtve_ge_PlayerRelation_Ally) == true)) {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    else {
        lib01833E95_gf_AF_AttachTextTagImage(EventUnit(), lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_OwnerChanged_Init () {
    lib01833E95_gt_AF_Meme_OwnerChanged = TriggerCreate("lib01833E95_gt_AF_Meme_OwnerChanged_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_OwnerChanged, false);
    TriggerAddEventUnitChangeOwner(lib01833E95_gt_AF_Meme_OwnerChanged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_PartsPickedUp
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_PartsPickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), lib01833E95_gv_aF_Meme_TextTagIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_PartsPickedUp_Init () {
    lib01833E95_gt_AF_Meme_PartsPickedUp = TriggerCreate("lib01833E95_gt_AF_Meme_PartsPickedUp_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_PartsPickedUp, false);
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_PartsPickedUp, c_playerAny, "PartsPickupSet3");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_PartsPickedUp, c_playerAny, "PartsPickupSet");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_PartsPickedUp, c_playerAny, "PartsPickupSet2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Meme_Nuke
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Meme_Nuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    unitgroup auto0DBA72F8_g;
    int auto0DBA72F8_u;
    unit auto0DBA72F8_var;
    unitgroup autoDEAAACED_g;
    int autoDEAAACED_u;
    unit autoDEAAACED_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroup(null, c_playerAny, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DBA72F8_g = lv_vUG;
    auto0DBA72F8_u = UnitGroupCount(auto0DBA72F8_g, c_unitCountAll);
    for (;; auto0DBA72F8_u -= 1) {
        auto0DBA72F8_var = UnitGroupUnitFromEnd(auto0DBA72F8_g, auto0DBA72F8_u);
        if (auto0DBA72F8_var == null) { break; }
        lib01833E95_gf_AF_AttachTextTagImage(auto0DBA72F8_var, "m_mog", lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
        UnitBehaviorAddPlayer(auto0DBA72F8_var, "AweMeme", 1, 1);
    }
    Wait(10.0, c_timeGame);
    autoDEAAACED_g = lv_vUG;
    autoDEAAACED_u = UnitGroupCount(autoDEAAACED_g, c_unitCountAll);
    for (;; autoDEAAACED_u -= 1) {
        autoDEAAACED_var = UnitGroupUnitFromEnd(autoDEAAACED_g, autoDEAAACED_u);
        if (autoDEAAACED_var == null) { break; }
        UnitBehaviorRemovePlayer(autoDEAAACED_var, "AweMeme", 1, 1);
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(autoDEAAACED_var), 1, libNtve_ge_PlayerRelation_Ally) == true)) {
            lib01833E95_gf_AF_AttachTextTagImage(autoDEAAACED_var, lib01833E95_gv_aF_Meme_PlayerNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
        }
        else {
            lib01833E95_gf_AF_AttachTextTagImage(autoDEAAACED_var, lib01833E95_gv_aF_Meme_EnemyNormal, lib01833E95_gv_aF_Meme_Size, lib01833E95_gv_aF_Meme_Size);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Meme_Nuke_Init () {
    lib01833E95_gt_AF_Meme_Nuke = TriggerCreate("lib01833E95_gt_AF_Meme_Nuke_Func");
    TriggerEnable(lib01833E95_gt_AF_Meme_Nuke, false);
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "HybridNukeDetonate");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "HybridNukeDetonateSmall");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "CODPayloadNukeDetonate");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "NukePersistent");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "MutatorAmonNovaNukePersistent");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "DrakkenLaserDrillNukeCP");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "OdinNukePersistent");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "NovaCoopCasterNukePersistent");
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_AF_Meme_Nuke, c_playerAny, "HHMercenarySpaceStationSuicideNukeSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Blizzcon Challenge Init
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_BlizzconChallengeInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexChallenge;
    int lv_challengeIndex;
    int lv_challengeCount;

    // Automatic Variable Declarations
    int autoB26E162F_ae;
    const int autoB26E162F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    autoB26E162F_ae = UserDataInstanceCount("MutatorChallenges");
    lv_challengeIndex = 1;
    for ( ; ( (autoB26E162F_ai >= 0 && lv_challengeIndex <= autoB26E162F_ae) || (autoB26E162F_ai < 0 && lv_challengeIndex >= autoB26E162F_ae) ) ; lv_challengeIndex += autoB26E162F_ai ) {
        lv_indexChallenge = UserDataInstance("MutatorChallenges", lv_challengeIndex);
        if ((libCOOC_gf_CC_CurrentMap() == UserDataGetGameLink("MutatorChallenges", lv_indexChallenge, "Map", 1))) {
            lv_challengeCount += 1;
        }

    }
    lv_challengeCount += 1;
    DialogControlAddItem(libCOUI_gv_cU_CommanderMutatorChallengePulldown, PlayerGroupAll(), UserDataGetText("MutatorChallenges", "BlizzCon Challenge", "Name", 1));
    libCOUI_gv_cU_CommanderMutatorChallengeList[lv_challengeCount] = "BlizzCon Challenge";
    while (!((GameIsMissionTimePaused() == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMU_gf_MutatorIsEnabled("BlizzConChallenge") == true)) {
        TriggerExecute(lib01833E95_gt_AF_BlizzconChallengeExecute, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_BlizzconChallengeInit_Init () {
    lib01833E95_gt_AF_BlizzconChallengeInit = TriggerCreate("lib01833E95_gt_AF_BlizzconChallengeInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Blizzcon Challenge Execute
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_BlizzconChallengeExecute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 30.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("PurifierBeam", true, true, 0);
    while (!((GameGetMissionTime() >= 180.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("OopsAllCasters", true, true, 0);
    while (!((GameGetMissionTime() >= 300.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("UnitSpeed", true, true, 0);
    while (!((GameGetMissionTime() >= 420.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("SpawnBroodlings", true, true, 0);
    while (!((GameGetMissionTime() >= 600.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("Blizzard", true, true, 0);
    while (!((GameGetMissionTime() >= 780.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("MissileBarrage", true, true, 0);
    while (!((GameGetMissionTime() >= 900.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("Avenger", true, true, 0);
    while (!((GameGetMissionTime() >= 1080.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("VoidRifts", true, true, 0);
    while (!((GameGetMissionTime() >= 1260.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("Polarity", true, true, 0);
    while (!((GameGetMissionTime() >= 1440.0))) {
        Wait(1.0, c_timeGame);
    }
    lib860A1A1F_gf_MM_EnableMutator("Nukes", true, true, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_BlizzconChallengeExecute_Init () {
    lib01833E95_gt_AF_BlizzconChallengeExecute = TriggerCreate("lib01833E95_gt_AF_BlizzconChallengeExecute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_SlimUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        if ((PlayerGroupHasPlayer(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
            PlayerGroupAdd(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(lib01833E95_gt_AF_SlimUI_Delayed, true);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_4A42AC17"));
        }
        else {
            PlayerGroupRemove(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(lib01833E95_gt_AF_SlimUI_Delayed, false);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_F0A17729"));
        }
    }
    else {
        if ((GameGetMissionTime() < 5.0)) {
            PlayerGroupAdd(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_E0B2C35F"));
            TriggerExecute(lib01833E95_gt_AF_SlimUI_Delayed, true, false);
        }
        else {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
            if ((PlayerGroupHasPlayer(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
                PlayerGroupAdd(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, false);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_On");
            }
            else {
                PlayerGroupRemove(lib01833E95_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, true);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_Off");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_SlimUI_Init () {
    lib01833E95_gt_AF_SlimUI = TriggerCreate("lib01833E95_gt_AF_SlimUI_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_SlimUI, c_playerAny, "-slim", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI_Delayed
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_SlimUI_Delayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 5.0))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(lib01833E95_gv_aF_SlimUI_PlayerGroup, c_syncFrameTypeConsolePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), lib01833E95_gv_aF_SlimUI_PlayerGroup, "SlimUI_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_SlimUI_Delayed_Init () {
    lib01833E95_gt_AF_SlimUI_Delayed = TriggerCreate("lib01833E95_gt_AF_SlimUI_Delayed_Func");
    TriggerEnable(lib01833E95_gt_AF_SlimUI_Delayed, false);
    libCOUI_gf_CU_CommanderClosed(lib01833E95_gt_AF_SlimUI_Delayed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Notifications Enable/Disable
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_TopBarNotificationsEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib01833E95_gt_AF_TopBarClicked) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_FB9995AD"));
        TriggerEnable(lib01833E95_gt_AF_TopBarClicked, true);
        TriggerEnable(lib01833E95_gt_AF_MouseEntersTopBar, true);
        TriggerEnable(lib01833E95_gt_AF_MouseExitsTopBar, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_BA3DA0B9"));
        TriggerEnable(lib01833E95_gt_AF_TopBarClicked, false);
        TriggerEnable(lib01833E95_gt_AF_MouseEntersTopBar, false);
        TriggerEnable(lib01833E95_gt_AF_MouseExitsTopBar, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_TopBarNotificationsEnableDisable_Init () {
    lib01833E95_gt_AF_TopBarNotificationsEnableDisable = TriggerCreate("lib01833E95_gt_AF_TopBarNotificationsEnableDisable_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_TopBarNotificationsEnableDisable, c_playerAny, "-topbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Notifications Initialization
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_TopBarNotificationsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vButton;

    // Automatic Variable Declarations
    playergroup autoA6ABD559_g;
    const int auto0924317E_ae = 4;
    const int auto0924317E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    autoA6ABD559_g = PlayerGroupActive();
    lv_vPlayer = -1;
    while (true) {
        lv_vPlayer = PlayerGroupNextPlayer(autoA6ABD559_g, lv_vPlayer);
        if (lv_vPlayer < 0) { break; }
        if (((libA8FDA37D_gf_ActiveCommanderForPlayer3(lv_vPlayer) == "Zagara") || (libA8FDA37D_gf_ActiveCommanderForPlayer3(lv_vPlayer) == "Kerrigan"))) {
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton12");
            lib01833E95_gv_aF_TopbarButton[0][lv_vPlayer] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
            lib01833E95_gv_aF_TopbarButton[1][lv_vPlayer] = DialogControlLastCreated();
        }
        else {
            lv_vButton = 0;
            for ( ; ( (auto0924317E_ai >= 0 && lv_vButton <= auto0924317E_ae) || (auto0924317E_ai < 0 && lv_vButton >= auto0924317E_ae) ) ; lv_vButton += auto0924317E_ai ) {
                DialogControlHookup(libCOUI_gv_cU_GPCmdPanel[lv_vPlayer], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_vButton));
                lib01833E95_gv_aF_TopbarButton[lv_vButton][lv_vPlayer] = DialogControlLastCreated();
            }
            if ((libA8FDA37D_gf_ActiveCommanderForPlayer3(lv_vPlayer) == "Nova")) {
                DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
                lib01833E95_gv_aF_TopbarButton[4][lv_vPlayer] = DialogControlLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_TopBarNotificationsInitialization_Init () {
    lib01833E95_gt_AF_TopBarNotificationsInitialization = TriggerCreate("lib01833E95_gt_AF_TopBarNotificationsInitialization_Func");
    libCOUI_gf_CU_CommanderClosed(lib01833E95_gt_AF_TopBarNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Clicked
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_TopBarClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vButtonIndex;
    soundlink lv_vSound;
    text lv_vColor;
    text lv_vColorReady;

    // Automatic Variable Declarations
    int autoBE1531A5_val;

    // Variable Initialization
    lv_vSound = SoundLink("UI_CampaignHintNotify", -1);
    lv_vColor = StringExternal("Param/Value/lib_01833E95_1AC3095C");
    lv_vColorReady = StringExternal("Param/Value/lib_01833E95_4301E3E3");

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == lib01833E95_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBE1531A5_val = EventDialogControl();
    if (autoBE1531A5_val == lib01833E95_gv_aF_TopbarButton[0][EventPlayer()]) {
        lv_vButtonIndex = 0;
    }
    else if (autoBE1531A5_val == lib01833E95_gv_aF_TopbarButton[1][EventPlayer()]) {
        lv_vButtonIndex = 1;
    }
    else if (autoBE1531A5_val == lib01833E95_gv_aF_TopbarButton[2][EventPlayer()]) {
        lv_vButtonIndex = 2;
    }
    else if (autoBE1531A5_val == lib01833E95_gv_aF_TopbarButton[3][EventPlayer()]) {
        lv_vButtonIndex = 3;
    }
    else if (autoBE1531A5_val == lib01833E95_gv_aF_TopbarButton[4][EventPlayer()]) {
        lv_vButtonIndex = 4;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    if (((lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex) == "") || (((libA8FDA37D_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Zagara") || (libA8FDA37D_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Kerrigan")) && (UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != lib01833E95_gf_AF_GetHeroUnit(EventPlayer()))) || ((libA8FDA37D_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Nova") && (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[4][EventPlayer()]) && ((UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != lib01833E95_gf_AF_GetHeroUnit(EventPlayer())) || (UnitHasBehavior2(lib01833E95_gf_AF_GetHeroUnit(EventPlayer()), "NovaCombatSuit") == true))))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((lib01833E95_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex) == null)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else if ((lib01833E95_gf_AF_AbilityIsAvailable(EventPlayer(), lv_vButtonIndex) == false)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_01833E95_DBB3B91A", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_01833E95_DBB3B91A", "B", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_DBB3B91A"));
    }
    else if ((lib01833E95_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_01833E95_D13134EB", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_01833E95_D13134EB", "B", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_01833E95_D13134EB", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_01833E95_D13134EB", "A", FixedToText(lib01833E95_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_D13134EB"));
    }
    else if ((((lib01833E95_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == false) && (lib01833E95_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0)) || ((lib01833E95_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == true) && (lib01833E95_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0) && (lib01833E95_gf_AF_EnergyCostofAbility(lib01833E95_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))))) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_01833E95_14DF4029", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_01833E95_14DF4029", "B", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_14DF4029"));
    }
    else if ((lib01833E95_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_01833E95_8F41CE72", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_01833E95_8F41CE72", "B", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_01833E95_8F41CE72", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_01833E95_8F41CE72", "A", FixedToText(lib01833E95_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_8F41CE72"));
    }
    else if (true) {
        if ((lib01833E95_gf_AF_EnergyCostofAbility(lib01833E95_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))) {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_01833E95_CE486DDE", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_01833E95_CE486DDE", "C", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_01833E95_CE486DDE", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_01833E95_CE486DDE", "A", FixedToText(UnitGetPropertyFixed(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_CE486DDE"));
        }
        else {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_01833E95_7A176CFE", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_01833E95_7A176CFE", "C", StringExternal(lib01833E95_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_01833E95_7A176CFE", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_01833E95_7A176CFE", "A", FixedToText(UnitGetPropertyFixed(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_7A176CFE"));
        }
    }
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_TopBarClicked_Init () {
    lib01833E95_gt_AF_TopBarClicked = TriggerCreate("lib01833E95_gt_AF_TopBarClicked_Func");
    TriggerEnable(lib01833E95_gt_AF_TopBarClicked, false);
    TriggerAddEventDialogControl(lib01833E95_gt_AF_TopBarClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseEntersTopBar
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_MouseEntersTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib01833E95_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_MouseEntersTopBar_Init () {
    lib01833E95_gt_AF_MouseEntersTopBar = TriggerCreate("lib01833E95_gt_AF_MouseEntersTopBar_Func");
    TriggerEnable(lib01833E95_gt_AF_MouseEntersTopBar, false);
    TriggerAddEventDialogControl(lib01833E95_gt_AF_MouseEntersTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseExitsTopBar
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_MouseExitsTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib01833E95_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == lib01833E95_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_MouseExitsTopBar_Init () {
    lib01833E95_gt_AF_MouseExitsTopBar = TriggerCreate("lib01833E95_gt_AF_MouseExitsTopBar_Func");
    TriggerEnable(lib01833E95_gt_AF_MouseExitsTopBar, false);
    TriggerAddEventDialogControl(lib01833E95_gt_AF_MouseExitsTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Nikara
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_Nikara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vNikaraUG;

    // Automatic Variable Declarations
    unitgroup autoF09FBE96_g;
    int autoF09FBE96_u;
    unit autoF09FBE96_var;
    unitgroup autoF2E371EA_g;
    int autoF2E371EA_u;
    unit autoF2E371EA_var;

    // Variable Initialization
    lv_vNikaraUG = UnitGroup("TychusMedic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib01833E95_gt_AF_GiveNikaraWeaponRevived) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_43799861"));
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 1, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 2, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 1, "8");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 2, "8");
        TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponRevived, true);
        TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponCreated, true);
        autoF2E371EA_g = lv_vNikaraUG;
        autoF2E371EA_u = UnitGroupCount(autoF2E371EA_g, c_unitCountAll);
        for (;; autoF2E371EA_u -= 1) {
            autoF2E371EA_var = UnitGroupUnitFromEnd(autoF2E371EA_g, autoF2E371EA_u);
            if (autoF2E371EA_var == null) { break; }
            if ((UnitHasBehavior2(autoF2E371EA_var, "NikaraFakeWeaponControl") == false) && ((UnitGetOwner(autoF2E371EA_var) == 1) || (UnitGetOwner(autoF2E371EA_var) == 2))) {
                UnitBehaviorAddPlayer(autoF2E371EA_var, "NikaraFakeWeaponControl", 1, 1);
                UnitWeaponAdd(autoF2E371EA_var, "NikaraFakeWeapon", null);
            }

        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_9F6DC9B0"));
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 1, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacHealPlusMech", "AutoCastRange", 2, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 1, "6");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusMedivacDoubleHealPlusMech", "AutoCastRange", 2, "6");
        TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponRevived, false);
        TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponCreated, false);
        autoF09FBE96_g = lv_vNikaraUG;
        autoF09FBE96_u = UnitGroupCount(autoF09FBE96_g, c_unitCountAll);
        for (;; autoF09FBE96_u -= 1) {
            autoF09FBE96_var = UnitGroupUnitFromEnd(autoF09FBE96_g, autoF09FBE96_u);
            if (autoF09FBE96_var == null) { break; }
            if ((UnitHasBehavior2(autoF09FBE96_var, "NikaraFakeWeaponControl") == true) && ((UnitGetOwner(autoF09FBE96_var) == 1) || (UnitGetOwner(autoF09FBE96_var) == 2))) {
                UnitBehaviorRemovePlayer(autoF09FBE96_var, "NikaraFakeWeaponControl", 1, 1);
                UnitWeaponRemove(autoF09FBE96_var, "NikaraFakeWeapon");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_Nikara_Init () {
    lib01833E95_gt_AF_Nikara = TriggerCreate("lib01833E95_gt_AF_Nikara_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_Nikara, c_playerAny, "-nikara", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_GiveNikaraWeaponRevived
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_GiveNikaraWeaponRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusMedic"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NikaraFakeWeaponControl") == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "NikaraFakeWeaponControl", 1, 1);
    UnitWeaponAdd(EventUnit(), "NikaraFakeWeapon", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_GiveNikaraWeaponRevived_Init () {
    lib01833E95_gt_AF_GiveNikaraWeaponRevived = TriggerCreate("lib01833E95_gt_AF_GiveNikaraWeaponRevived_Func");
    TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponRevived, false);
    TriggerAddEventUnitRevive(lib01833E95_gt_AF_GiveNikaraWeaponRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_GiveNikaraWeaponCreated
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_GiveNikaraWeaponCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TychusMedic"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitCreatedUnit(), "NikaraFakeWeaponControl") == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "NikaraFakeWeaponControl", 1, 1);
    UnitWeaponAdd(EventUnitCreatedUnit(), "NikaraFakeWeapon", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_GiveNikaraWeaponCreated_Init () {
    lib01833E95_gt_AF_GiveNikaraWeaponCreated = TriggerCreate("lib01833E95_gt_AF_GiveNikaraWeaponCreated_Func");
    TriggerEnable(lib01833E95_gt_AF_GiveNikaraWeaponCreated, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_AF_GiveNikaraWeaponCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_UnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vPlayer;
    int lv_vPlayerIndex;
    int lv_vOwner;
    int lv_vA;

    // Automatic Variable Declarations
    const int auto8DB59F46_ae = lib01833E95_gv_tW_MaxUsersSaved;
    int auto8DB59F46_var;
    const int auto6D37186E_ae = lib01833E95_gv_tW_MaxUsersSaved;
    const int auto6D37186E_ai = 1;

    // Variable Initialization
    lv_vPlayer = "";
    lv_vOwner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib01833E95_gv_tW_JoinedUnits, EventUnit());
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    auto8DB59F46_var = 1;
    for ( ; auto8DB59F46_var <= auto8DB59F46_ae; auto8DB59F46_var += 1 ) {
        if ((lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pCurrentUnit == EventUnit())) {
            TextExpressionSetToken("Param/Expression/lib_01833E95_6FFC59E8", "A", StringToText(lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pUser));
            TextExpressionSetToken("Param/Expression/lib_01833E95_6FFC59E8", "B", UnitGetName(EventUnit()));
            TextExpressionSetToken("Param/Expression/lib_01833E95_6FFC59E8", "C", IntToText((libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent)-lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pStartingKills)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_6FFC59E8"));
            lv_vA = 1;
            for ( ; ( (auto6D37186E_ai >= 0 && lv_vA <= auto6D37186E_ae) || (auto6D37186E_ai < 0 && lv_vA >= auto6D37186E_ae) ) ; lv_vA += auto6D37186E_ai ) {
                if ((lib01833E95_gv_tW_UserDiedLog[lv_vA].lv_pUser == "")) {
                    lib01833E95_gv_tW_UserDiedLog[lv_vA].lv_pUser = lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pUser;
                    lib01833E95_gv_tW_UserDiedLog[lv_vA].lv_pUnitType = UnitGetType(EventUnit());
                    lib01833E95_gv_tW_UserDiedLog[lv_vA].lv_pKills = (libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent)-lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pStartingKills);
                    break;
                }

            }
            lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pCurrentUnit = null;
            lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pStartingKills = 0;
            lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pKillStack += libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
            lv_vPlayer = lib01833E95_gv_tW_Users[auto8DB59F46_var].lv_pUser;
            lv_vPlayerIndex = auto8DB59F46_var;
            break;
        }

    }
    Wait(10.0, c_timeGame);
    if ((lib01833E95_gv_tW_Users[lv_vPlayerIndex].lv_pCurrentUnit == null)) {
        lib01833E95_gf_TW_JointheArmyfromString(lv_vPlayer, lv_vOwner);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_UnitDies_Init () {
    lib01833E95_gt_TW_UnitDies = TriggerCreate("lib01833E95_gt_TW_UnitDies_Func");
    TriggerEnable(lib01833E95_gt_TW_UnitDies, false);
    TriggerAddEventUnitDied(lib01833E95_gt_TW_UnitDies, null);
    TriggerAddEventUnitRemoved(lib01833E95_gt_TW_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Unit Created
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vWaitingListNumber;
    int lv_vOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOwner = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib01833E95_gv_tW_PlayerUG, lv_vOwner) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }

        if (!((UnitWeaponCount(EventUnitCreatedUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, EventUnitCreatedUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vWaitingListNumber = lib01833E95_gf_TW_NextInWaitingList(lv_vOwner);
    if ((lv_vWaitingListNumber >= 0)) {
        lib01833E95_gf_TW_AssignUnit(EventUnitCreatedUnit(), lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber]);
        lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber] = null;
        lib01833E95_gv_tW_WaitingListPlayer[lv_vWaitingListNumber] = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_UnitCreated_Init () {
    lib01833E95_gt_TW_UnitCreated = TriggerCreate("lib01833E95_gt_TW_UnitCreated_Func");
    TriggerEnable(lib01833E95_gt_TW_UnitCreated, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_TW_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Unit Revived
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_UnitRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vWaitingListNumber;
    int lv_vOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOwner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib01833E95_gv_tW_PlayerUG, lv_vOwner) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, EventUnit()) == false))) {
            return false;
        }

        if (!((UnitWeaponCount(EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vWaitingListNumber = lib01833E95_gf_TW_NextInWaitingList(lv_vOwner);
    if ((lv_vWaitingListNumber >= 0)) {
        lib01833E95_gf_TW_AssignUnit(EventUnit(), lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber]);
        lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber] = null;
        lib01833E95_gv_tW_WaitingListPlayer[lv_vWaitingListNumber] = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_UnitRevived_Init () {
    lib01833E95_gt_TW_UnitRevived = TriggerCreate("lib01833E95_gt_TW_UnitRevived_Func");
    TriggerEnable(lib01833E95_gt_TW_UnitRevived, false);
    TriggerAddEventUnitRevive(lib01833E95_gt_TW_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Unit OwnerChanges
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_UnitOwnerChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vWaitingListNumber;
    int lv_vOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOwner = EventUnitOwnerNew();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib01833E95_gv_tW_PlayerUG, lv_vOwner) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, EventUnit()) == false))) {
            return false;
        }

        if (!((UnitWeaponCount(EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vWaitingListNumber = lib01833E95_gf_TW_NextInWaitingList(lv_vOwner);
    if ((lv_vWaitingListNumber >= 0)) {
        lib01833E95_gf_TW_AssignUnit(EventUnit(), lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber]);
        lib01833E95_gv_tW_WaitingListName[lv_vWaitingListNumber] = null;
        lib01833E95_gv_tW_WaitingListPlayer[lv_vWaitingListNumber] = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_UnitOwnerChanges_Init () {
    lib01833E95_gt_TW_UnitOwnerChanges = TriggerCreate("lib01833E95_gt_TW_UnitOwnerChanges_Func");
    TriggerEnable(lib01833E95_gt_TW_UnitOwnerChanges, false);
    TriggerAddEventUnitChangeOwner(lib01833E95_gt_TW_UnitOwnerChanges, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Numbers
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_Numbers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib01833E95_gt_TW_NumbersDamage) == false)) {
        TriggerEnable(lib01833E95_gt_TW_NumbersDamage, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_0CAD1F6D"));
    }
    else {
        TriggerEnable(lib01833E95_gt_TW_NumbersDamage, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_128DA887"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_Numbers_Init () {
    lib01833E95_gt_TW_Numbers = TriggerCreate("lib01833E95_gt_TW_Numbers_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_TW_Numbers, c_playerAny, "-dnumbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib01833E95_gv_tW_JoinedUnits, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libA8FDA37D_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libA8FDA37D_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_NumbersDamage_Init () {
    lib01833E95_gt_TW_NumbersDamage = TriggerCreate("lib01833E95_gt_TW_NumbersDamage_Func");
    TriggerEnable(lib01833E95_gt_TW_NumbersDamage, false);
    TriggerAddEventUnitDamaged(lib01833E95_gt_TW_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_SpawnLimit
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_SpawnLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNewAmount = StringToInt(StringWord(EventChatMessage(false), 2));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "heroic")) {
        lib01833E95_gv_tW_MaxUnitsHeroicSpawn = lv_vNewAmount;
        TextExpressionSetToken("Param/Expression/lib_01833E95_5D38E75B", "A", IntToText(lv_vNewAmount));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_5D38E75B"));
    }
    else {
        lib01833E95_gv_tW_MaxUnitsSpawn = lv_vNewAmount;
        TextExpressionSetToken("Param/Expression/lib_01833E95_00548688", "A", IntToText(lv_vNewAmount));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_00548688"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_SpawnLimit_Init () {
    lib01833E95_gt_TW_SpawnLimit = TriggerCreate("lib01833E95_gt_TW_SpawnLimit_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_TW_SpawnLimit, c_playerAny, "-spawnlimit", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_SoundEmoteLimitSet
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_TW_SoundEmoteLimitSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNewAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_SoundEmoteCooldownLength = lv_vNewAmount;
    TextExpressionSetToken("Param/Expression/lib_01833E95_BBDDFF0F", "A", FixedToText(lv_vNewAmount, 0));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_01833E95_BBDDFF0F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_TW_SoundEmoteLimitSet_Init () {
    lib01833E95_gt_TW_SoundEmoteLimitSet = TriggerCreate("lib01833E95_gt_TW_SoundEmoteLimitSet_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_TW_SoundEmoteLimitSet, c_playerAny, "-soundlimit", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Karax 2.0
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_Karax20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vKaraxPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_650E5217"));
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxSoAChronoRegen", "Name", 1, "Button/Name/MasteryKaraxSoAChronoDefense");
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxSoAChronoRegen", "Tooltip", 1, "Button/Tooltip/MasteryKaraxSoAChronoDefense");
        CatalogFieldValueSet(c_gameCatalogButton, "MasteryKaraxChronoBoostSpeed", "Tooltip", 1, "Button/Tooltip/MasteryKaraxChronoBoostSpeed2");
        TriggerEnable(lib01833E95_gt_K2_CommanderMasteryClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_3377A6F3"));
        return true;
    }
    while (!((GameGetMissionTime() > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    lv_vKaraxPlayer = lib01833E95_gf_K2_GetKaraxPlayer();
    if ((lv_vKaraxPlayer == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_6D340C3F"));
        return true;
    }

    TechTreeUpgradeAddLevel(lv_vKaraxPlayer, "Karax20Base", 1);
    TechTreeUpgradeAddLevel(libA8FDA37D_gf_UT_OtherPlayer(lv_vKaraxPlayer), "Karax20Ally", 1);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("SolarForgeResearch", 6), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("SolarForgeResearch", 7), true);
    TriggerEnable(lib01833E95_gt_K2_CarrierUpgrade, true);
    TriggerEnable(lib01833E95_gt_K2_RepairDroneCreated, true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("CarrierRepairDroneHanger", 1), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("CarrierRepairDroneHanger", 0), false);
    TechTreeUpgradeAddLevel(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal2", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal", c_techCountCompleteOnly));
    libNtve_gf_SetUpgradeLevelForPlayer(lv_vKaraxPlayer, "MasteryKaraxRepairBeamHeal", 0);
    TechTreeUpgradeAddLevel(1, "ChronoMastery", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", c_techCountCompleteOnly));
    TechTreeUpgradeAddLevel(2, "ChronoMastery", TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", c_techCountCompleteOnly));
    CatalogFieldValueSet(c_gameCatalogButton, "TimeWarp", "Tooltip", libA8FDA37D_gf_UT_OtherPlayer(lv_vKaraxPlayer), "Button/Tooltip/TimeWarp2");
    libNtve_gf_SetUpgradeLevelForPlayer(lv_vKaraxPlayer, "MasteryKaraxSoAChronoRegen", 0);
    TriggerEnable(lib01833E95_gt_K2_NexusCreated, true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 0), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 2), true);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PhaseStructure", 1), true);
    TriggerEnable(lib01833E95_gt_K2_CannonPhased, true);
    TriggerEnable(lib01833E95_gt_K2_PylonCreated, true);
    TriggerEnable(lib01833E95_gt_K2_EnhancedTargetingImp, true);
    TriggerEnable(lib01833E95_gt_K2_ImprovedReconstruction, true);
    TriggerEnable(lib01833E95_gt_K2_GatewayTrainStart, true);
    TriggerEnable(lib01833E95_gt_K2_GatewayTrainStop, true);
    TriggerExecute(lib01833E95_gt_K2_RepairDroneUpdatePosition, true, false);
    TechTreeAbilityAllow(lv_vKaraxPlayer, AbilityCommand("PowerDischarge", 0), true);
    CatalogFieldValueSet(c_gameCatalogUnit, "SentryPurifier", "ShieldsStart", lv_vKaraxPlayer, FixedToString((140*(1+0.01*IntToFixed(TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxUnitVital", c_techCountCompleteOnly)))), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "SentryPurifier", "ShieldsMax", lv_vKaraxPlayer, FixedToString((140*(1+0.01*IntToFixed(TechTreeUpgradeCount(lv_vKaraxPlayer, "MasteryKaraxUnitVital", c_techCountCompleteOnly)))), 0));
    TriggerEnable(lib01833E95_gt_K2_ImprovedShadowCannon, true);
    TriggerEnable(lib01833E95_gt_K2_ImprovedReclamation, true);
    TriggerEnable(lib01833E95_gt_K2_StructureAttackUpgrade, true);
    TriggerEnable(lib01833E95_gt_K2_StructureArmorUpgrade, true);
    TriggerEnable(lib01833E95_gt_K2_ChronoWaveSwitch, true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_Karax20_Init () {
    lib01833E95_gt_K2_Karax20 = TriggerCreate("lib01833E95_gt_K2_Karax20_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_K2_Karax20, c_playerAny, "-karax2", true);
    TriggerAddEventChatMessage(lib01833E95_gt_K2_Karax20, c_playerAny, "-karax 2", true);
    TriggerAddEventChatMessage(lib01833E95_gt_K2_Karax20, c_playerAny, "-karax 2.0", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Init
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto963F2F67_ae = 15;
    int auto963F2F67_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto963F2F67_var = 1;
    for ( ; auto963F2F67_var <= auto963F2F67_ae; auto963F2F67_var += 1 ) {
        TechTreeAbilityAllow(auto963F2F67_var, AbilityCommand("PhaseStructure", 1), false);
        TechTreeAbilityAllow(auto963F2F67_var, AbilityCommand("PhaseStructure", 2), false);
        TechTreeAbilityAllow(auto963F2F67_var, AbilityCommand("PhaseStructure", 0), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_Init_Init () {
    lib01833E95_gt_K2_Init = TriggerCreate("lib01833E95_gt_K2_Init_Func");
    TriggerAddEventMapInit(lib01833E95_gt_K2_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Carrier Upgrade
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_CarrierUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "CarrierRepairDrones"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "CarrierUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_CarrierUpgrade_Init () {
    lib01833E95_gt_K2_CarrierUpgrade = TriggerCreate("lib01833E95_gt_K2_CarrierUpgrade_Func");
    TriggerEnable(lib01833E95_gt_K2_CarrierUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_CarrierUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_Nexus Created
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_NexusCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vNexus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(lv_vNexus)) == "ProtossKarax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_vNexus, OrderTargetingUnit(AbilityCommand("TimeWarp", 0), lv_vNexus), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_NexusCreated_Init () {
    lib01833E95_gt_K2_NexusCreated = TriggerCreate("lib01833E95_gt_K2_NexusCreated_Func");
    TriggerEnable(lib01833E95_gt_K2_NexusCreated, false);
    TriggerAddEventPlayerEffectUsed(lib01833E95_gt_K2_NexusCreated, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_CannonPhased
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_CannonPhased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnitCreatedUnit(), UnitGetFacing(EventUnit()), 0.0);
    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Phasing", 1, 1);
    UnitBehaviorAddPlayer(EventUnit(), "Phasing", 1, 1);
    Wait(5.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 0.000000 0.500000");
    Wait(0.5, c_timeGame);
    UnitSetPosition(EventUnit(), UnitGetPosition(EventUnitCreatedUnit()), false);
    UnitSetFacing(EventUnit(), UnitGetFacing(EventUnitCreatedUnit()), 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetOpacity 0.000000 2.000000");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 1.000000 2.000000");
    Wait(2.0, c_timeGame);
    UnitRemove(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_CannonPhased_Init () {
    lib01833E95_gt_K2_CannonPhased = TriggerCreate("lib01833E95_gt_K2_CannonPhased_Func");
    TriggerEnable(lib01833E95_gt_K2_CannonPhased, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_K2_CannonPhased, null, "PhaseStructure", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_PylonCreated
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_PylonCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnitCreatedUnit())) == "ProtossKarax"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "VoidPylonPowerSource", 1, 1);
    UnitBehaviorRemovePlayer(EventUnitCreatedUnit(), "PowerSource", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_PylonCreated_Init () {
    lib01833E95_gt_K2_PylonCreated = TriggerCreate("lib01833E95_gt_K2_PylonCreated_Func");
    TriggerEnable(lib01833E95_gt_K2_PylonCreated, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_K2_PylonCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_EnhancedTargetingImp
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_EnhancedTargetingImp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "KaraxTurretRange"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "EnhancedTargetingImp", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_EnhancedTargetingImp_Init () {
    lib01833E95_gt_K2_EnhancedTargetingImp = TriggerCreate("lib01833E95_gt_K2_EnhancedTargetingImp_Func");
    TriggerEnable(lib01833E95_gt_K2_EnhancedTargetingImp, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_EnhancedTargetingImp, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedReconstruction
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_ImprovedReconstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "ZealotResearchReconstruction"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedReconstruction", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_ImprovedReconstruction_Init () {
    lib01833E95_gt_K2_ImprovedReconstruction = TriggerCreate("lib01833E95_gt_K2_ImprovedReconstruction_Func");
    TriggerEnable(lib01833E95_gt_K2_ImprovedReconstruction, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_ImprovedReconstruction, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_GatewayTrain Start
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_GatewayTrainStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "UpgradeToWarpGate", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_GatewayTrainStart_Init () {
    lib01833E95_gt_K2_GatewayTrainStart = TriggerCreate("lib01833E95_gt_K2_GatewayTrainStart_Func");
    TriggerEnable(lib01833E95_gt_K2_GatewayTrainStart, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStart, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStart, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_GatewayTrain Stop
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_GatewayTrainStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }

        if (!((UnitQueueGetProperty(EventUnit(), c_unitQueuePropertyUsed) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "UpgradeToWarpGate", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_GatewayTrainStop_Init () {
    lib01833E95_gt_K2_GatewayTrainStop = TriggerCreate("lib01833E95_gt_K2_GatewayTrainStop_Func");
    TriggerEnable(lib01833E95_gt_K2_GatewayTrainStop, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib01833E95_gt_K2_GatewayTrainStop, null, AbilityCommand("GatewayTrain", 5), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_RepairDroneCreated
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_RepairDroneCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "RepairDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitCreatedUnit(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.3, (120*IntToFixed(UnitMagazineCount(EventUnit(), "CarrierRepairDroneHanger")))), false);
    UnitCreateEffectUnit(EventUnit(), "RepairDroneApplyRotateKinetic", EventUnitCreatedUnit());
    UnitCreateEffectUnit(EventUnit(), "RepairDroneApplyFollowKinetic", EventUnitCreatedUnit());
    UnitSetFacing(EventUnitCreatedUnit(), UnitGetFacing(EventUnit()), 0.0);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetScale 0.600000");
    UnitBehaviorAdd(EventUnitCreatedUnit(), "RepairdDroneMarker", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_RepairDroneCreated_Init () {
    lib01833E95_gt_K2_RepairDroneCreated = TriggerCreate("lib01833E95_gt_K2_RepairDroneCreated_Func");
    TriggerEnable(lib01833E95_gt_K2_RepairDroneCreated, false);
    TriggerAddEventUnitCreated(lib01833E95_gt_K2_RepairDroneCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_RepairDroneUpdatePosition
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_RepairDroneUpdatePosition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vCarrier;

    // Automatic Variable Declarations
    unitgroup auto2997264B_g;
    int auto2997264B_u;
    unit auto2997264B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(5.0, c_timeGame);
        auto2997264B_g = UnitGroup("RepairDrone", lib01833E95_gf_K2_GetKaraxPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2997264B_u = UnitGroupCount(auto2997264B_g, c_unitCountAll);
        for (;; auto2997264B_u -= 1) {
            auto2997264B_var = UnitGroupUnitFromEnd(auto2997264B_g, auto2997264B_u);
            if (auto2997264B_var == null) { break; }
            lv_vCarrier = UnitBehaviorEffectUnit(auto2997264B_var, "RepairdDroneMarker", c_effectUnitSource, 0);
            if (((DistanceBetweenPoints(UnitGetPosition(auto2997264B_var), UnitGetPosition(lv_vCarrier)) < 1.25) || (DistanceBetweenPoints(UnitGetPosition(auto2997264B_var), UnitGetPosition(lv_vCarrier)) > 1.35))) {
                UnitSetPosition(auto2997264B_var, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_vCarrier), 1.3, UnitGetPosition(auto2997264B_var)), false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_RepairDroneUpdatePosition_Init () {
    lib01833E95_gt_K2_RepairDroneUpdatePosition = TriggerCreate("lib01833E95_gt_K2_RepairDroneUpdatePosition_Func");
    TriggerEnable(lib01833E95_gt_K2_RepairDroneUpdatePosition, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedShadowCannon
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_ImprovedShadowCannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "ImmortalResearchShadowCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedShadowCannon", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_ImprovedShadowCannon_Init () {
    lib01833E95_gt_K2_ImprovedShadowCannon = TriggerCreate("lib01833E95_gt_K2_ImprovedShadowCannon_Func");
    TriggerEnable(lib01833E95_gt_K2_ImprovedShadowCannon, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_ImprovedShadowCannon, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ImprovedReclamation
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_ImprovedReclamation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "EnergizerReclamation"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ImprovedReclamation", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_ImprovedReclamation_Init () {
    lib01833E95_gt_K2_ImprovedReclamation = TriggerCreate("lib01833E95_gt_K2_ImprovedReclamation_Func");
    TriggerEnable(lib01833E95_gt_K2_ImprovedReclamation, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_ImprovedReclamation, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_StructureAttackUpgrade
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_StructureAttackUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Karax20Base", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 0) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel1") || (EventUpgradeName() == "ProtossAirWeaponsLevel1") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel1"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 1) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel2") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel2") || (EventUpgradeName() == "ProtossAirWeaponsLevel2"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureAttackUpgrade", c_techCountCompleteOnly) == 2) && ((EventUpgradeName() == "ProtossGroundWeaponsLevel3") || (EventUpgradeName() == "HiddenProtossAirWeaponsLevel3") || (EventUpgradeName() == "ProtossAirWeaponsLevel3"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureAttackUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_StructureAttackUpgrade_Init () {
    lib01833E95_gt_K2_StructureAttackUpgrade = TriggerCreate("lib01833E95_gt_K2_StructureAttackUpgrade_Func");
    TriggerEnable(lib01833E95_gt_K2_StructureAttackUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_StructureAttackUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_StructureArmorUpgrade
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_StructureArmorUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Karax20Base", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 0) && ((EventUpgradeName() == "ZeratulArmorsLevel1") || (EventUpgradeName() == "ProtossGroundArmorsLevel1") || (EventUpgradeName() == "ProtossAirArmorsLevel1") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel1"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 1) && ((EventUpgradeName() == "ZeratulArmorsLevel2") || (EventUpgradeName() == "ProtossGroundArmorsLevel2") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel2") || (EventUpgradeName() == "ProtossAirArmorsLevel2"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "StructureArmorUpgrade", c_techCountCompleteOnly) == 2) && ((EventUpgradeName() == "ZeratulArmorsLevel3") || (EventUpgradeName() == "ProtossGroundArmorsLevel3") || (EventUpgradeName() == "HiddenProtossAirArmorsLevel3") || (EventUpgradeName() == "ProtossAirArmorsLevel3"))) {
        TechTreeUpgradeAddLevel(EventPlayer(), "StructureArmorUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_StructureArmorUpgrade_Init () {
    lib01833E95_gt_K2_StructureArmorUpgrade = TriggerCreate("lib01833E95_gt_K2_StructureArmorUpgrade_Func");
    TriggerEnable(lib01833E95_gt_K2_StructureArmorUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_StructureArmorUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_ChronoWaveSwitch
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_ChronoWaveSwitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vCombatCW_CD;
    fixed lv_vBasicCW_CD;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "BasicChronoWave") || (EventUpgradeName() == "CombatChronoWave")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vBasicCW_CD = UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "SOAMapWideChrono", "Abil/SOAMapWideChrono");
    lv_vCombatCW_CD = UnitAbilityGetCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "CombatChronoWave", "Abil/SOAMapWideCombatChrono");
    if ((lv_vCombatCW_CD > lv_vBasicCW_CD)) {
        UnitAbilityAddCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "SOAMapWideChrono", "Abil/SOAMapWideChrono", (lv_vCombatCW_CD - lv_vBasicCW_CD));
    }
    else {
        UnitAbilityAddCooldown(lib01833E95_gf_CM_PlayerGetGlobalCaster(EventPlayer()), "CombatChronoWave", "Abil/SOAMapWideCombatChrono", (lv_vBasicCW_CD - lv_vCombatCW_CD));
    }
    if ((EventUpgradeName() == "BasicChronoWave") && (EventUpgradeLevelDelta() > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BasicChronoWave", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CombatChronoWave", 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_ChronoWaveSwitch_Init () {
    lib01833E95_gt_K2_ChronoWaveSwitch = TriggerCreate("lib01833E95_gt_K2_ChronoWaveSwitch_Func");
    TriggerEnable(lib01833E95_gt_K2_ChronoWaveSwitch, false);
    TriggerAddEventUpgradeLevelChanged(lib01833E95_gt_K2_ChronoWaveSwitch, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K2_CommanderMasteryClicked
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_K2_CommanderMasteryClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) == "ProtossKarax"))) {
            return false;
        }

        if (!(((EventDialogControl() == libCOUI_gv_cU_CommanderMasteryButton) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[1]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[1]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[2]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[2]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[3]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[3]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[4]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[4]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[5]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[5]) || (EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[6]) || (EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/lib_01833E95_AC30A969", "A", IntToText((libCOUI_gv_cU_MasteryUpgradePointsSpent[3][EventPlayer()] * 3)));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryValueLabels[3], TextExpressionAssemble("Param/Expression/lib_01833E95_AC30A969"), PlayerGroupSingle(EventPlayer()));
    TextExpressionSetToken("Param/Expression/lib_01833E95_7DB7A4D7", "A", IntToText((libCOUI_gv_cU_MasteryUpgradePointsSpent[4][EventPlayer()] * 2)));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryValueLabels[4], TextExpressionAssemble("Param/Expression/lib_01833E95_7DB7A4D7"), PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() != libCOUI_gv_cU_MasteryLevelDownButton) && (EventDialogControl() != libCOUI_gv_cU_MasteryLevelUpButton)) {
        lib01833E95_gf_K2_MasteryNameFix(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_K2_CommanderMasteryClicked_Init () {
    lib01833E95_gt_K2_CommanderMasteryClicked = TriggerCreate("lib01833E95_gt_K2_CommanderMasteryClicked_Func");
    TriggerEnable(lib01833E95_gt_K2_CommanderMasteryClicked, false);
    TriggerAddEventDialogControl(lib01833E95_gt_K2_CommanderMasteryClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_BileLauncherBombardment
//--------------------------------------------------------------------------------------------------
bool lib01833E95_gt_AF_BileLauncherBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(1, AbilityCommand("AdvancedBombardment", 0)) == false)) {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedBombardment", 0), true);
        TechTreeAbilityAllow(2, AbilityCommand("AdvancedBombardment", 0), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_917EC50B"));
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("AdvancedBombardment", 0), false);
        TechTreeAbilityAllow(2, AbilityCommand("AdvancedBombardment", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_01833E95_A9B0B06B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib01833E95_gt_AF_BileLauncherBombardment_Init () {
    lib01833E95_gt_AF_BileLauncherBombardment = TriggerCreate("lib01833E95_gt_AF_BileLauncherBombardment_Func");
    TriggerAddEventChatMessage(lib01833E95_gt_AF_BileLauncherBombardment, c_playerAny, "-bile", true);
}

void lib01833E95_InitTriggers () {
    lib01833E95_gt_AF_Init_Init();
    lib01833E95_gt_AF_ButtonClicked_Init();
    lib01833E95_gt_AF_HeroPurchased_Init();
    lib01833E95_gt_AF_EnableHeroicUnload_Init();
    lib01833E95_gt_AF_UnloadHeroic_Init();
    lib01833E95_gt_AF_Outlaws_Init();
    lib01833E95_gt_AF_OutlawDeath_Init();
    lib01833E95_gt_AF_OutlawPurchase_Init();
    lib01833E95_gt_AF_Score_Init();
    lib01833E95_gt_AF_Score_GraphsandCharts_Init();
    lib01833E95_gt_AF_Score_SwitchButtonCreate_Init();
    lib01833E95_gt_AF_Score_MissionsButtonCreate_Init();
    lib01833E95_gt_AF_Score_QuitButtonCreate_Init();
    lib01833E95_gt_AF_Score_FinalButtonClicked_Init();
    lib01833E95_gt_AF_MissionEnds_Init();
    lib01833E95_gt_AF_Meme_Init_Init();
    lib01833E95_gt_AF_Meme_UnitSelected_Init();
    lib01833E95_gt_AF_Meme_UnitDeselected_Init();
    lib01833E95_gt_AF_Meme_UnitDies_Init();
    lib01833E95_gt_AF_Meme_UnitRemoved_Init();
    lib01833E95_gt_AF_Meme_UnitCreated_Init();
    lib01833E95_gt_AF_Meme_UnitRevived_Init();
    lib01833E95_gt_AF_Meme_OwnerChanged_Init();
    lib01833E95_gt_AF_Meme_PartsPickedUp_Init();
    lib01833E95_gt_AF_Meme_Nuke_Init();
    lib01833E95_gt_AF_BlizzconChallengeInit_Init();
    lib01833E95_gt_AF_BlizzconChallengeExecute_Init();
    lib01833E95_gt_AF_SlimUI_Init();
    lib01833E95_gt_AF_SlimUI_Delayed_Init();
    lib01833E95_gt_AF_TopBarNotificationsEnableDisable_Init();
    lib01833E95_gt_AF_TopBarNotificationsInitialization_Init();
    lib01833E95_gt_AF_TopBarClicked_Init();
    lib01833E95_gt_AF_MouseEntersTopBar_Init();
    lib01833E95_gt_AF_MouseExitsTopBar_Init();
    lib01833E95_gt_AF_Nikara_Init();
    lib01833E95_gt_AF_GiveNikaraWeaponRevived_Init();
    lib01833E95_gt_AF_GiveNikaraWeaponCreated_Init();
    lib01833E95_gt_TW_UnitDies_Init();
    lib01833E95_gt_TW_UnitCreated_Init();
    lib01833E95_gt_TW_UnitRevived_Init();
    lib01833E95_gt_TW_UnitOwnerChanges_Init();
    lib01833E95_gt_TW_Numbers_Init();
    lib01833E95_gt_TW_NumbersDamage_Init();
    lib01833E95_gt_TW_SpawnLimit_Init();
    lib01833E95_gt_TW_SoundEmoteLimitSet_Init();
    lib01833E95_gt_K2_Karax20_Init();
    lib01833E95_gt_K2_Init_Init();
    lib01833E95_gt_K2_CarrierUpgrade_Init();
    lib01833E95_gt_K2_NexusCreated_Init();
    lib01833E95_gt_K2_CannonPhased_Init();
    lib01833E95_gt_K2_PylonCreated_Init();
    lib01833E95_gt_K2_EnhancedTargetingImp_Init();
    lib01833E95_gt_K2_ImprovedReconstruction_Init();
    lib01833E95_gt_K2_GatewayTrainStart_Init();
    lib01833E95_gt_K2_GatewayTrainStop_Init();
    lib01833E95_gt_K2_RepairDroneCreated_Init();
    lib01833E95_gt_K2_RepairDroneUpdatePosition_Init();
    lib01833E95_gt_K2_ImprovedShadowCannon_Init();
    lib01833E95_gt_K2_ImprovedReclamation_Init();
    lib01833E95_gt_K2_StructureAttackUpgrade_Init();
    lib01833E95_gt_K2_StructureArmorUpgrade_Init();
    lib01833E95_gt_K2_ChronoWaveSwitch_Init();
    lib01833E95_gt_K2_CommanderMasteryClicked_Init();
    lib01833E95_gt_AF_BileLauncherBombardment_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib01833E95_InitLib_completed = false;

void lib01833E95_InitLib () {
    if (lib01833E95_InitLib_completed) {
        return;
    }

    lib01833E95_InitLib_completed = true;

    lib01833E95_InitLibraries();
    lib01833E95_InitVariables();
    lib01833E95_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"
include "LibCOUI"
include "LibCOMU"
include "LibA8FDA37D"
include "Lib860A1A1F"

