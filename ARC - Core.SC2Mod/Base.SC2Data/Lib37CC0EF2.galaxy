include "TriggerLibs/NativeLib"
include "LibCOOC_h"
include "LibCOMI_h"

include "Lib37CC0EF2_h"

//--------------------------------------------------------------------------------------------------
// Library: Visceroid
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib37CC0EF2_InitLibraries () {
    libNtve_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
}

// Variable Initialization
bool lib37CC0EF2_InitVariables_completed = false;

void lib37CC0EF2_InitVariables () {
    int init_i;

    if (lib37CC0EF2_InitVariables_completed) {
        return;
    }

    lib37CC0EF2_InitVariables_completed = true;

    lib37CC0EF2_gv_alliance_tab = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib37CC0EF2_gv_commanders_names[init_i] = c_invalidDialogControlId;
    }
    lib37CC0EF2_gv_alliance_button_dialog = c_invalidDialogId;
    lib37CC0EF2_gv_alliance_button = c_invalidDialogControlId;
    lib37CC0EF2_gv_options_Wave = 1;
    lib37CC0EF2_gv_options_Boss = 1;
    lib37CC0EF2_gv_options_Enforcer1 = 1;
    lib37CC0EF2_gv_options_Enforcer2 = 1;
    lib37CC0EF2_gv_optionsDialog = c_invalidDialogId;
    lib37CC0EF2_gv_optionsDialogTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib37CC0EF2_gv_optionsDialogLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib37CC0EF2_gv_optionsDialogMenus[init_i] = c_invalidDialogControlId;
    }
    lib37CC0EF2_gv_optionsDialogAccept = c_invalidDialogControlId;
}

// Functions
void lib37CC0EF2_gf_set_alliance_button () {
    // Variable Declarations
    int lv_offset_y;
    int lv_label_height;
    int lv_player;
    int lv_num_of_players;
    string lv_button;

    // Automatic Variable Declarations
    playergroup autoD11FE433_g;

    // Variable Initialization
    lv_offset_y = 35;
    lv_label_height = 28;
    lv_num_of_players = PlayerGroupCount(PlayerGroupActive());

    // Implementation
    DialogCreate(825, (lv_label_height*lv_num_of_players+60), c_anchorTopLeft, 0, 0, true);
    lib37CC0EF2_gv_alliance_tab = DialogLastCreated();
    autoD11FE433_g = PlayerGroupActive();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD11FE433_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(lib37CC0EF2_gv_alliance_tab, 200, lv_label_height, c_anchorTopLeft, 35, lv_offset_y, PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20", PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20", PlayerGroupAll());
        lib37CC0EF2_gv_commanders_names[lv_player] = DialogControlLastCreated();
        if ((GameAttributeGameValue("3") == "0001")) {
        }

        if ((GameAttributeGameValue("9") == "0001")) {
            libNtve_gf_CreateDialogItemLabel(lib37CC0EF2_gv_alliance_tab, 300, lv_label_height, c_anchorTopRight, 35, lv_offset_y, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", lv_player)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Tooltip", lv_player)), PlayerGroupAll());
        }

        lv_offset_y = (lv_offset_y+lv_label_height);
    }
    DialogSetVisible(lib37CC0EF2_gv_alliance_tab, PlayerGroupAll(), false);
    DialogCreate(36, 36, c_anchorTopRight, 5, 5, true);
    lib37CC0EF2_gv_alliance_button_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(lib37CC0EF2_gv_alliance_button_dialog, 36, 36, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "Assets\\Textures\\ui_alliance_button_normalpressed.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_alliance_button_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    lib37CC0EF2_gv_alliance_button = DialogControlLastCreated();
    DialogSetVisible(lib37CC0EF2_gv_alliance_button_dialog, PlayerGroupAll(), true);
}

int lib37CC0EF2_gf_player_row (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_player + 1);
}

bool lib37CC0EF2_gf_DefeatAnyPlayerBaseDead () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto7EDA144A_g;

    // Variable Initialization

    // Implementation
    auto7EDA144A_g = libCOMI_gv_vU_AlliedCommanders;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(auto7EDA144A_g, lv_i);
        if (lv_i < 0) { break; }
        if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, lv_i, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
            return true;
        }

    }
    return false;
}

void lib37CC0EF2_gf_SetProtossFaction (int lp_player, string lp_faction, bool lp_ai) {
    // Automatic Variable Declarations
    // Deprecated
    if ((lp_ai == true) && (lp_faction == "Alarak")) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("VoidHighTemplarPsiOrbAutoCasted", 0), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("VoidHighTemplarMindBlastAutoCasted", 0), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForceFieldMonitorAutoCasted", 0), true);
    }

}

void lib37CC0EF2_gf_SetZergFaction (int lp_playernumber, string lp_faction, bool lp_ai) {
    // Variable Declarations
    int lv_playernumber;

    // Automatic Variable Declarations
    string autoB99E9818_val;

    // Variable Initialization

    // Deprecated
    autoB99E9818_val = lp_faction;
    if (autoB99E9818_val == "Stukov") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovCommander", 1);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructureUpgraded", 0), true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructureUpgraded", 0), false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), true);
        TechTreeUpgradeAllow(lp_playernumber, "HeavyInfestation", false);
        TechTreeUpgradeAllow(lp_playernumber, "SIBarracksTrainInfestedCivilianLevel4", false);
        TechTreeAbilityAllow(lv_playernumber, AbilityCommand("StukovSummonApocalisk", 0), false);
        TechTreeUpgradeAllow(lp_playernumber, "SIBunkerArmor", false);
        TechTreeUpgradeAllow(lp_playernumber, "SIBunkerLifeRegen", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "SIImprovedMarineSpawning", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovInfantryUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "SIMarinePlaguedMunitions", false);
        TechTreeUpgradeAllow(lp_playernumber, "StukovInfestedCivilianSpawnBroodlingOnDeath", false);
        TechTreeUnitAllow(lp_playernumber, "SIQueen", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovFactoryUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "InfestedSiegeTankArmoredDamage", false);
        TechTreeUpgradeAllow(lp_playernumber, "SIDiamondbackSnailTrail", false);
        TechTreeAbilityAllow(lv_playernumber, AbilityCommand("StukovSummonAleksander", 0), false);
        TechTreeUpgradeAllow(lp_playernumber, "StukovInfestedBansheeInfestedLife", false);
        TechTreeUpgradeAllow(lp_playernumber, "LiberatorInfestedBecomeSwarm", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovApocaliskUpgrades", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovBroodQueenUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "SIQueenEnergy", false);
        TechTreeUpgradeAllow(lp_playernumber, "SIQueenFungalGrowth", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "SIInfestedBunkerUpgraded", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovAleksanderMindControl", 1);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovEngineeringBayUpgradeCatch", 1);
    }
    else if (autoB99E9818_val == "Abathur") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveQueen", 1);
        TechTreeUnitAllow(lv_playernumber, "Brutalisk", true);
        TechTreeUnitAllow(lv_playernumber, "HotSLeviathan", true);
        TechTreeUnitAllow(lv_playernumber, "Leviathan", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurToxicNestIcreasedBiomass", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ToxicNestattackgivesMarkforCollectionPassive", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurImprovedMend", 1);
        TechTreeUpgradeAllow(lp_playernumber, "AbathurBioMechanicalTransfusion", true);
        TechTreeUpgradeAllow(lp_playernumber, "AbathurHatcheryDoubleQueue", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurBiomassRefund", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveViper", 1);
        TechTreeUpgradeAllow(lp_playernumber, "AbathurDeepTunnel", true);
        TechTreeUpgradeAllow(lp_playernumber, "ViperAbductImprovedStun", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurEnableSymbiote", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganSpirelUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "DevourerAoEDamage", true);
        TechTreeUpgradeAllow(lp_playernumber, "GuardianAttackRangeIncrease", true);
        TechTreeUpgradeAllow(lp_playernumber, "MutaliskSunderingGlave", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurMorphTimeCostReduced", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurEnemyDeathCreateLocusts", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "RoachVile", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveVile", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurBiomassLifeLeech", 1);
    }
    else if (autoB99E9818_val == "Zagara") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5TwoDrones", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveAberration", 1);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "QueenDoubleInjectLarva", 1);
        TechTreeUpgradeAllow(lp_playernumber, "ScourgeGasCostReduction", true);
        TechTreeUpgradeAllow(lp_playernumber, "ScourgeSplashDamage", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraBileLaunchers", 1);
        TechTreeUnitAllow(lp_playernumber, "BileLauncherZagara", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganZagaraSpawningPoolUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "HotSZerglingHealth", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZerglingArmorShred", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopBanelingSpawner", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopAberrationBanelingIncubation", 1);
        TechTreeUpgradeAllow(lp_playernumber, "AberrationArmorAura", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZagaraVoidCoopAttackUpgrade", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopImprovedMassRoachDrop", 1);
        TechTreeUpgradeAllow(lp_playernumber, "HotSRupture", true);
        TechTreeUpgradeAllow(lp_playernumber, "HotSBanelingCorrosiveBile", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopZerglingSwarmling", 1);
        TechTreeUnitAllow(lv_playernumber, "HotSSwarmling", true);
        TechTreeUnitAllow(lv_playernumber, "Zergling", false);
        TechTreeUpgradeAllow(lp_playernumber, "BileLauncherBombardmentCooldown", true);
        TechTreeUpgradeAllow(lp_playernumber, "BileLauncherIncreasedRange", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopBanelingSplitterling", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopImprovedAbilities", 1);
    }
    else if (autoB99E9818_val == "Kerrigan") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganInfestedCosmetic", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5PrimalSlash", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5PsiStrike", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganImmobilizationWave", 1);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganVoidCoopImprovedLeapingStrike", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganZagaraSpawningPoolUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "HotSZerglingHealth", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZerglingArmorShred", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSLurker", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveLurker", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveLurker", 1);
        TechTreeUnitAllow(lv_playernumber, "Hydralisk", false);
        TechTreeUnitAllow(lv_playernumber, "Lurker", true);
        TechTreeUnitAllow(lv_playernumber, "HydraliskLurker", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganHydraliskUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "HydraliskFrenzy", true);
        TechTreeUpgradeAllow(lp_playernumber, "HotSHydraliskHealth", true);
        TechTreeUpgradeAllow(lp_playernumber, "SeismicSpines", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganCreepBonusesCoop", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5CreepBonuses", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "VoidCoopGreaterNydusWorm", 1);
        TechTreeUpgradeAllow(lp_playernumber, "K5ChainLightning", true);
        TechTreeUpgradeAllow(lp_playernumber, "K5Cooldowns", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5Fury", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganKerriganUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "MutaliskSunderingGlave", true);
        TechTreeUpgradeAllow(lp_playernumber, "KerriganVoidCoopBroodlordSpeed", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopZerglingRaptor", 1);
        TechTreeUnitAllow(lv_playernumber, "Zergling", false);
        TechTreeUnitAllow(lv_playernumber, "HotSRaptor", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganUltraliskUpgradeCatch", 1);
        TechTreeUpgradeAllow(lp_playernumber, "UltraliskBurrowChargeUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "HotSTissueAssimilation", true);
        TechTreeUpgradeAllow(lp_playernumber, "HotSUltraliskBurrowCharge", true);
        TechTreeUnitAllow(lv_playernumber, "HotSTorrasque", true);
        TechTreeUnitAllow(lv_playernumber, "Ultralisk", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSTorrasque", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganVoidCoopEnergyRegen", 1);
    }
    else {
    }
}

void lib37CC0EF2_gf_SetTerranFaction (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pLAYER = lp_playernumber;

    // Deprecated
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaHelmetSensorVisor", 1);
}

void lib37CC0EF2_gf_TaldarimSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ZealotTaldarim", true);
}

void lib37CC0EF2_gf_PurifierSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ProbePurifier", true);
}

void lib37CC0EF2_gf_NerazimSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TemplarArchiveIhanrii", true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: alliance_button_pressed
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_alliance_button_pressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib37CC0EF2_gv_alliance_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(lib37CC0EF2_gv_alliance_tab, EventPlayer()) == true)) {
        DialogSetVisible(lib37CC0EF2_gv_alliance_tab, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(lib37CC0EF2_gv_alliance_tab, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_alliance_button_pressed_Init () {
    lib37CC0EF2_gt_alliance_button_pressed = TriggerCreate("lib37CC0EF2_gt_alliance_button_pressed_Func");
    TriggerAddEventDialogControl(lib37CC0EF2_gt_alliance_button_pressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player_defeated
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_player_defeated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemColor(lib37CC0EF2_gv_commanders_names[EventPlayer()], Color(44.71, 44.71, 44.71), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib37CC0EF2_gv_commanders_names[EventPlayer()], StringExternal("Param/Value/lib_37CC0EF2_B3D6F523"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_player_defeated_Init () {
    lib37CC0EF2_gt_player_defeated = TriggerCreate("lib37CC0EF2_gt_player_defeated_Func");
    TriggerAddEventPlayerLeft(lib37CC0EF2_gt_player_defeated, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Options
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_CloseOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib37CC0EF2_gv_optionsDialogAccept))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromInt(lib37CC0EF2_gv_savedBank, "CoA", "wave", (DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[0], 1)-1));
    lib37CC0EF2_gv_options_Wave = DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[0], 1);
    BankValueSetFromInt(lib37CC0EF2_gv_savedBank, "CoA", "boss", (DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[1], 1)-1));
    lib37CC0EF2_gv_options_Boss = DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[1], 1);
    BankValueSetFromInt(lib37CC0EF2_gv_savedBank, "CoA", "enforcer1", (DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[2], 1)-1));
    lib37CC0EF2_gv_options_Enforcer1 = DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[2], 1);
    BankValueSetFromInt(lib37CC0EF2_gv_savedBank, "CoA", "enforcer2", (DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[3], 1)-1));
    lib37CC0EF2_gv_options_Enforcer2 = DialogControlGetSelectedItem(lib37CC0EF2_gv_optionsDialogMenus[3], 1);
    BankSave(lib37CC0EF2_gv_savedBank);
    DialogSetVisible(lib37CC0EF2_gv_optionsDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_CloseOptions_Init () {
    lib37CC0EF2_gt_CloseOptions = TriggerCreate("lib37CC0EF2_gt_CloseOptions_Func");
    TriggerAddEventDialogControl(lib37CC0EF2_gt_CloseOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Options
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_OpenOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib37CC0EF2_gv_optionsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_OpenOptions_Init () {
    lib37CC0EF2_gt_OpenOptions = TriggerCreate("lib37CC0EF2_gt_OpenOptions_Func");
    TriggerAddEventChatMessage(lib37CC0EF2_gt_OpenOptions, c_playerAny, "-options", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Options Dialog
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_CreateOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numOptions;

    // Automatic Variable Declarations
    int auto52603F5F_ae;
    const int auto52603F5F_ai = 1;
    const int auto90CD24FA_ae = 3;
    const int auto90CD24FA_ai = 1;

    // Variable Initialization
    lv_numOptions = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, (220+(lv_numOptions*70)), c_anchorCenter, 0, 0, true);
    lib37CC0EF2_gv_optionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib37CC0EF2_gv_optionsDialog, 700, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/lib_37CC0EF2_897C1D19"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib37CC0EF2_gv_optionsDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(lib37CC0EF2_gv_optionsDialogTitle, "BattlenetDialogTitle", PlayerGroupAll());
    auto52603F5F_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (auto52603F5F_ai >= 0 && lv_i <= auto52603F5F_ae) || (auto52603F5F_ai < 0 && lv_i >= auto52603F5F_ae) ) ; lv_i += auto52603F5F_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 80, (120+(lv_i*70)), IntToText(lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib37CC0EF2_gv_optionsDialogLabels[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(lib37CC0EF2_gv_optionsDialogLabels[0], StringExternal("Param/Value/lib_37CC0EF2_5C1060AE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib37CC0EF2_gv_optionsDialogLabels[1], StringExternal("Param/Value/lib_37CC0EF2_E550FD12"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib37CC0EF2_gv_optionsDialogLabels[2], StringExternal("Param/Value/lib_37CC0EF2_2B85A2F3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib37CC0EF2_gv_optionsDialogLabels[3], StringExternal("Param/Value/lib_37CC0EF2_65C1A6CC"), PlayerGroupAll());
    lv_i = 0;
    for ( ; ( (auto90CD24FA_ai >= 0 && lv_i <= auto90CD24FA_ae) || (auto90CD24FA_ai < 0 && lv_i >= auto90CD24FA_ae) ) ; lv_i += auto90CD24FA_ai ) {
        DialogControlCreate(lib37CC0EF2_gv_optionsDialog, c_triggerControlTypePulldown);
        lib37CC0EF2_gv_optionsDialogMenus[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(lib37CC0EF2_gv_optionsDialogMenus[lv_i], PlayerGroupAll(), c_anchorTopLeft, 380, (100+(lv_i*70)));
        DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[lv_i], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_0CA66080"));
    }
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_A04C46B4"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_D0FC30AE"));
    DialogControlSelectItem(lib37CC0EF2_gv_optionsDialogMenus[0], PlayerGroupAll(), (lib37CC0EF2_gv_options_Wave+1));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_F68636A1"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_6E8C3569"));
    DialogControlSelectItem(lib37CC0EF2_gv_optionsDialogMenus[1], PlayerGroupAll(), (lib37CC0EF2_gv_options_Boss+1));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_BF079D07"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_F2949D5E"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_40E59617"));
    DialogControlSelectItem(lib37CC0EF2_gv_optionsDialogMenus[2], PlayerGroupAll(), (lib37CC0EF2_gv_options_Enforcer1+1));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[3], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_9B5504C5"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[3], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_DCCC5D22"));
    DialogControlAddItem(lib37CC0EF2_gv_optionsDialogMenus[3], PlayerGroupAll(), StringExternal("Param/Value/lib_37CC0EF2_5DFF9C99"));
    DialogControlSelectItem(lib37CC0EF2_gv_optionsDialogMenus[3], PlayerGroupAll(), (lib37CC0EF2_gv_options_Enforcer2+1));
    libNtve_gf_CreateDialogItemButton(lib37CC0EF2_gv_optionsDialog, 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_37CC0EF2_57A8689D"), "");
    lib37CC0EF2_gv_optionsDialogAccept = DialogControlLastCreated();
    DialogSetRenderPriority(lib37CC0EF2_gv_optionsDialog, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_CreateOptionsDialog_Init () {
    lib37CC0EF2_gt_CreateOptionsDialog = TriggerCreate("lib37CC0EF2_gt_CreateOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Bank Variables
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_LoadBankVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("coopSpeedruns", 1);
    lib37CC0EF2_gv_savedBank = BankLastCreated();
    BankSectionCreate(BankLastCreated(), "CoA");
    lib37CC0EF2_gv_options_Wave = BankValueGetAsInt(lib37CC0EF2_gv_savedBank, "CoA", "wave");
    lib37CC0EF2_gv_options_Boss = BankValueGetAsInt(lib37CC0EF2_gv_savedBank, "CoA", "boss");
    lib37CC0EF2_gv_options_Enforcer1 = BankValueGetAsInt(lib37CC0EF2_gv_savedBank, "CoA", "enforcer1");
    lib37CC0EF2_gv_options_Enforcer2 = BankValueGetAsInt(lib37CC0EF2_gv_savedBank, "CoA", "enforcer2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_LoadBankVariables_Init () {
    lib37CC0EF2_gt_LoadBankVariables = TriggerCreate("lib37CC0EF2_gt_LoadBankVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q 2
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_TipReadyQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_DisplayMissionTip();
    Wait(libCOMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_TipReadyQ2_Init () {
    lib37CC0EF2_gt_TipReadyQ2 = TriggerCreate("lib37CC0EF2_gt_TipReadyQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    libCOMI_gf_RunMissionVictorySequence(lib37CC0EF2_gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_VictoryCheat_Init () {
    lib37CC0EF2_gt_VictoryCheat = TriggerCreate("lib37CC0EF2_gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(lib37CC0EF2_gt_VictoryCheat, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(lib37CC0EF2_gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_DefeatCheat_Init () {
    lib37CC0EF2_gt_DefeatCheat = TriggerCreate("lib37CC0EF2_gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(lib37CC0EF2_gt_DefeatCheat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_Victory_Init () {
    lib37CC0EF2_gt_Victory = TriggerCreate("lib37CC0EF2_gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib37CC0EF2_gt_Defeat_Init () {
    lib37CC0EF2_gt_Defeat = TriggerCreate("lib37CC0EF2_gt_Defeat_Func");
}

void lib37CC0EF2_InitTriggers () {
    lib37CC0EF2_gt_alliance_button_pressed_Init();
    lib37CC0EF2_gt_player_defeated_Init();
    lib37CC0EF2_gt_CloseOptions_Init();
    lib37CC0EF2_gt_OpenOptions_Init();
    lib37CC0EF2_gt_CreateOptionsDialog_Init();
    lib37CC0EF2_gt_LoadBankVariables_Init();
    lib37CC0EF2_gt_TipReadyQ2_Init();
    lib37CC0EF2_gt_VictoryCheat_Init();
    lib37CC0EF2_gt_DefeatCheat_Init();
    lib37CC0EF2_gt_Victory_Init();
    lib37CC0EF2_gt_Defeat_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib37CC0EF2_InitLib_completed = false;

void lib37CC0EF2_InitLib () {
    if (lib37CC0EF2_InitLib_completed) {
        return;
    }

    lib37CC0EF2_InitLib_completed = true;

    lib37CC0EF2_InitLibraries();
    lib37CC0EF2_InitVariables();
    lib37CC0EF2_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"

