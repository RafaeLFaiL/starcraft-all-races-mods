include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC_h"
include "LibCOMI_h"
include "LibCOUI_h"
include "LibCOMU_h"
include "LibA8FDA37D_h"
include "Lib01833E95_h"

include "Lib860A1A1F_h"

//--------------------------------------------------------------------------------------------------
// Library: Maguro's Mutators
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib860A1A1F_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libA8FDA37D_InitVariables();
    lib01833E95_InitVariables();
}

// Variable Initialization
bool lib860A1A1F_InitVariables_completed = false;

void lib860A1A1F_InitVariables () {
    int init_i;

    if (lib860A1A1F_InitVariables_completed) {
        return;
    }

    lib860A1A1F_InitVariables_completed = true;

    lib860A1A1F_gv_mM_PX_PlayerX = 14;
    lib860A1A1F_gv_mM_OT_PlayerGroup = PlayerGroupEmpty();
    lib860A1A1F_gv_mM_GW_NoBuildRegion = RegionEmpty();
    lib860A1A1F_gv_mM_UndeadUG = UnitGroupEmpty();
    lib860A1A1F_gv_mM_MothershipTargets = UnitGroupEmpty();
    lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance = 25.0;
    lib860A1A1F_gv_mM_MothershipUG = UnitGroupEmpty();
    lib860A1A1F_gv_mM_Mists = UnitGroupEmpty();
    lib860A1A1F_gv_mM_ShadowTerrorSize = 1.2;
    for (init_i = 0; init_i <= lib860A1A1F_gv_mM_AmonHeroMaxNumber; init_i += 1) {
        lib860A1A1F_gv_mM_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    lib860A1A1F_gv_mM_AmonSummonedHeroes = UnitGroupEmpty();
    lib860A1A1F_gv_mM_AmonHeroPool = 1.0;
    lib860A1A1F_gv_mM_AmonHeroAttackWaveUnits = UnitGroupEmpty();
    lib860A1A1F_gv_mM_ShapeshiftedUnits = UnitGroupEmpty();
    lib860A1A1F_gv_mM_WaveUnitsWithShapeshifters = UnitGroupEmpty();
    lib860A1A1F_gv_mM_ShapeshifterTimer = TimerCreate();
    for (init_i = 0; init_i <= lib860A1A1F_gv_tT_C_AmonHeroMaxHeroTypes; init_i += 1) {
        lib860A1A1F_gv_tT_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
}

// Presets
// Functions
void lib860A1A1F_gf_MM_ApplySpawnBroodling (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_broodlingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlingGroup = UnitGroupEmpty();

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickAlienIncubation)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMU_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "KerriganInfestBroodling", 0, UnitGetOwner(lp_killedUnit), UnitGetPosition(lp_killedUnit));
    UnitGroupAddUnitGroup(libCOMU_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_broodlingGroup, UnitLastCreatedGroup());
    libCOMU_gv_cT_StatBroodlingsSpawned += MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1);
    libCOMU_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    AISetGroupScriptControlled(lv_broodlingGroup, false);
    AISetGroupSuicide(lv_broodlingGroup, true);
}

void lib860A1A1F_gf_MM_ApplySpawnInfested (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickWalkingInfested)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMU_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (libNtve_gf_KillingPlayer() == UnitGetOwner(lp_killedUnit)) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod") || (PathingType(UnitGetPosition(lp_killedUnit)) != c_pathingGround))) {
        return ;
    }
    else {
        lv_owner = UnitGetOwner(lp_killedUnit);
        libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "InfestedCivilian", c_unitCreateIgnorePlacement, lv_owner, UnitGetPosition(lp_killedUnit));
        UnitGroupAddUnitGroup(libCOMU_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCOMU_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
    }
}

void lib860A1A1F_gf_MM_ApplyDeathAOE (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    int auto5BF2FC6D_ae;
    const int auto5BF2FC6D_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickSelfDestruction)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", UnitGetPosition(lp_killedUnit));
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) > 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto5BF2FC6D_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto5BF2FC6D_ai >= 0 && lv_indexAOE <= auto5BF2FC6D_ae) || (auto5BF2FC6D_ai < 0 && lv_indexAOE >= auto5BF2FC6D_ae) ) ; lv_indexAOE += auto5BF2FC6D_ai ) {
            UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), lv_aOESpawnArea)));
        }
    }

}

void lib860A1A1F_gf_MM_ApplyAvenger (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    fixed lv_actualDistance;
    int lv_index;
    fixed lv_supplyvalue;

    // Automatic Variable Declarations
    unitgroup auto33D098DF_g;
    int auto33D098DF_u;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickAvenger)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    lv_supplyvalue = UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed);
    if ((lv_supplyvalue < 1)) {
        libCOMU_gv_cT_AvengerWimpCounter += 1;
        if ((ModI(libCOMU_gv_cT_AvengerWimpCounter, 2) == 1)) {
            return ;
        }

    }

    auto33D098DF_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 3.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33D098DF_u = UnitGroupCount(auto33D098DF_g, c_unitCountAll);
    for (;; auto33D098DF_u -= 1) {
        lv_nearbyUnit = UnitGroupUnitFromEnd(auto33D098DF_g, auto33D098DF_u);
        if (lv_nearbyUnit == null) { break; }
        if ((UnitWeaponCount(lv_nearbyUnit) == 0) && (UnitGetType(lv_nearbyUnit) != "VoidThrasher")) {
            continue;
        }

        lv_actualDistance = DistanceBetweenPoints(UnitGetPosition(lp_killedUnit), UnitGetPosition(lv_nearbyUnit));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_nearbyUnit), "Radius", c_playerAny));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_killedUnit), "Radius", c_playerAny));
        if ((lv_actualDistance > 1.25)) {
            continue;
        }

        UnitBehaviorAdd(lv_nearbyUnit, "MutatorAvenger", lp_killedUnit, MaxI(FixedToInt(lv_supplyvalue), 1));
        libCOMU_gv_cT_StatAvengerStacksApplied += FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, (("SetScale " + FixedToString(((0.08 * UnitBehaviorCount(lv_nearbyUnit, "MutatorAvenger")) + 1.0), 1))));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, "GlowStart");
    }
}

void lib860A1A1F_gf_MM_ApplyDeathFire (unit lp_killedUnit) {
    // Variable Declarations
    int lv_indexFlame;
    fixed lv_fireSpawnArea;
    point lv_unitPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickDeathFire)] == false) || (libCOMU_gf_MutatorIsEnabled("FireFight") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "AdeptPhaseShift") || (UnitGetType(lp_killedUnit) == "DisruptorPhased"))) {
        return ;
    }

    lv_unitPosition = UnitGetPosition(lp_killedUnit);
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 1.0)) {
        if (((UnitGetType(lp_killedUnit) == "XelNagaConstruct") || (UnitHasBehavior2(lp_killedUnit, "HybridUnitDummy") == true))) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamSmallInitialCP", lv_unitPosition);
        }
    }
    else {
        if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 4.0)) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
    }
}

void lib860A1A1F_gf_MM_ApplyEvolve (unit lp_killingUnit, unit lp_victimUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;

    // Automatic Variable Declarations
    const int autoB731AE0C_ae = 10;
    const int autoB731AE0C_ai = 1;
    const int auto16394CC3_ae = 10;
    const int auto16394CC3_ai = 1;
    const int autoA4C4B65B_ae = 1;
    const int autoA4C4B65B_ai = -1;
    const int auto0F251A59_ae = 1;
    const int auto0F251A59_ai = -1;
    string auto1C603951_val;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickEvolve)] == false) || (UnitIsAlive(lp_killingUnit) == false) || (UnitGetOwner(lp_killingUnit) == 0) || (UnitGetOwner(lp_victimUnit) == 0) || (UnitGetType(lp_killingUnit) == "MutatorKillBot") || (UnitGetType(lp_killingUnit) == "MutatorPropagator") || (UnitGetType(lp_killingUnit) == "MutatorBoomBot") || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_victimUnit)) == true) || (UnitHasBehavior2(lp_killingUnit, "MutatorEvolve") == true) || (UnitFilterMatch(lp_killingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMU_gf_CT_MutatorUnitIsMapObjective(lp_killingUnit) == true))) {
        return ;
    }

    lv_tier = 1;
    for ( ; ( (autoB731AE0C_ai >= 0 && lv_tier <= autoB731AE0C_ae) || (autoB731AE0C_ai < 0 && lv_tier >= autoB731AE0C_ae) ) ; lv_tier += autoB731AE0C_ai ) {
        lv_killerTier = UserDataInstance("EvolutionTiers", lv_tier);
        lv_type = 1;
        for ( ; ( (auto16394CC3_ai >= 0 && lv_type <= auto16394CC3_ae) || (auto16394CC3_ai < 0 && lv_type >= auto16394CC3_ae) ) ; lv_type += auto16394CC3_ai ) {
            lv_killingUnitTestUnit = UserDataGetUnit("EvolutionTiers", lv_killerTier, "UnitsToEvolveInto", lv_type);
            if ((lv_killingUnitTestUnit == UnitGetType(lp_killingUnit))) {
                lv_killerSupply = lv_tier;
                break;
            }

        }
        if ((lv_killerSupply > 0.0)) {
            break;
        }

    }
    if ((lv_killerSupply == 0.0)) {
        lv_killerSupply = 1.0;
    }
    else {
        if ((lv_killerTier == "Tier10")) {
            return ;
        }

    }
    if ((UnitIsAlive(lp_victimUnit) == true)) {
        lv_victimSupply = 1.0;
    }
    else {
        if (((libCOMI_gv_cM_HeroUnit[1] == lp_victimUnit) || (libCOMI_gv_cM_HeroUnit[2] == lp_victimUnit))) {
            lv_victimSupply = 10.0;
        }
        else {
            if ((UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) < 1)) {
                lv_victimSupply = 1.0;
            }
            else {
                lv_victimSupply = UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
        }
    }
    lv_newSupply = (lv_victimSupply + lv_killerSupply);
    lv_tier = MinI(FixedToInt(lv_newSupply), 10);
    for ( ; ( (autoA4C4B65B_ai >= 0 && lv_tier <= autoA4C4B65B_ae) || (autoA4C4B65B_ai < 0 && lv_tier >= autoA4C4B65B_ae) ) ; lv_tier += autoA4C4B65B_ai ) {
        lv_tierEndpoint = 8;
        for ( ; ( (auto0F251A59_ai >= 0 && lv_tierEndpoint <= auto0F251A59_ae) || (auto0F251A59_ai < 0 && lv_tierEndpoint >= auto0F251A59_ae) ) ; lv_tierEndpoint += auto0F251A59_ai ) {
            lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
            if ((lv_endpointTestUnit != "")) {
                break;
            }

        }
        lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
        if ((lv_newUnitType != "")) {
            break;
        }

    }
    lv_spawnPosition = UnitGetPosition(lp_killingUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_killingUnit));
    UnitRemove(lp_killingUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, UnitGetOwner(lp_killingUnit), lv_spawnPosition);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
    auto1C603951_val = libCOMI_gf_GetUnitRace(UnitLastCreated());
    if (auto1C603951_val == "Prot") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
    }
    else if (auto1C603951_val == "Terr") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
    }
    else if (auto1C603951_val == "Zerg") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    UnitCreateEffectUnit(lp_victimUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
}

void lib860A1A1F_gf_MM_ApplyFireworks (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;
    int lv_enemyUnitsRemaining;
    unit lv_fireworkTargetUnit;
    point lv_noTargetPoint;
    bool lv_targetUnitsNearby;

    // Automatic Variable Declarations
    int autoBC5FBF01_ae;
    const int autoBC5FBF01_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickFireworks)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_killedUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_targetUnitsNearby = true;
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
    }
    else {
        lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
        PointSetHeight(lv_noTargetPoint, 10.0);
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
    }
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) >= 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        autoBC5FBF01_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (autoBC5FBF01_ai >= 0 && lv_indexAOE <= autoBC5FBF01_ae) || (autoBC5FBF01_ai < 0 && lv_indexAOE >= autoBC5FBF01_ae) ) ; lv_indexAOE += autoBC5FBF01_ai ) {
            if ((lv_targetUnitsNearby == true)) {
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
            }
            else {
                lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
                PointSetHeight(lv_noTargetPoint, 10.0);
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
            }
        }
    }

}

void lib860A1A1F_gf_MM_ApplyDeathPull (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickDeathPull)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 1.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentWeak", UnitGetPosition(lp_killedUnit));
    }
    else if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) >= 6.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentStrong", UnitGetPosition(lp_killedUnit));
    }
    else if (true) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistent", UnitGetPosition(lp_killedUnit));
    }
}

void lib860A1A1F_gf_MM_ApplyMomentOfSilence (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickMomentOfSilence)] == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == true))) {
        return ;
    }
    else {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        if ((UnitGetType(lp_killedUnit) == "HybridNemesis")) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        PlayerCreateEffectPoint(3, "MutatorMomentOfSilenceSearch", lv_unitLocation);
    }
}

void lib860A1A1F_gf_MM_ApplyPermaCloak (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("AllEnemiesCloaked") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetType(lp_createdUnit) == "MutatorStormCloud") || (UnitGetType(lp_createdUnit) == "MutatorTornado") || (UnitGetType(lp_createdUnit) == "VoidThrasher"))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_createdUnit, "MutatorPermanentlyCloaked", UnitGetOwner(lp_createdUnit), 1);
}

void lib860A1A1F_gf_MM_ApplyUnitSpeed (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMU_gf_MutatorIsEnabled("UnitSpeed") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (lv_createdUnitType == "Caboose") || (lv_createdUnitType == "TarsonisEngineFast") || (lv_createdUnitType == "TarsonisEngine") || (lv_createdUnitType == "FreightCar") || (lv_createdUnitType == "ProtossFrigate") || (lv_createdUnitType == "MutatorStormCloud") || (lv_createdUnitType == "MutatorPurifierBeam") || (lv_createdUnitType == "MutatorTornado") || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) == 0.0) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) > 5.5))) {
        return ;
    }

    libCOMU_gv_cT_StatSpeedFreaksSpeedAdded += (5.5 - UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, 5.5);
}

void lib860A1A1F_gf_MM_ApplyAllSpellsEnergy (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMU_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, c_unitPropCurrent) != 0.0) || (libCOMU_gf_CT_AllCastersBlacklistedUnit(lp_createdUnit) == true))) {
        return ;
    }

    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, 200.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergy, 50.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyRegen, 0.5625);
}

void lib860A1A1F_gf_MM_ApplyPolarity (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("Polarity") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer1") == true) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer2") == true))) {
        return ;
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_TarsonisTrain") && ((UnitGetType(lp_createdUnit) == "Caboose") || (UnitGetType(lp_createdUnit) == "TarsonisEngineFast") || (UnitGetType(lp_createdUnit) == "TarsonisEngine") || (UnitGetType(lp_createdUnit) == "FreightCar"))) {
        libCOMU_gf_CT_Polarity_TrainApply(lp_createdUnit);
        return ;
    }

    if (libCOMU_gv_cT_PolarityPlayer >= 2) {
        libCOMU_gv_cT_PolarityPlayer = 1;
    }
    else {
        libCOMU_gv_cT_PolarityPlayer = libCOMU_gv_cT_PolarityPlayer + 1;
    }
    if ((libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMU_gv_cT_PolarityEnemies[libCOMU_gv_cT_PolarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer]);
    if ((libCOMU_gv_cT_PolarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

void lib860A1A1F_gf_MM_ApplyPlague (unit lp_newUnit) {
    // Variable Declarations
    int lv_plagueChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickPlague)] == false) || (libCOMU_gf_MutatorIsEnabled("Plague") == false) || (UnitFilterMatch(lp_newUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGetType(lp_newUnit) == "AdeptPhaseShift") || (UnitGetType(lp_newUnit) == "DisruptorPhased") || (UnitGetType(lp_newUnit) == "BiomassPickup"))) {
        return ;
    }
    else {
        lv_plagueChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
        if ((RandomInt(1, lv_plagueChance) == 1)) {
            UnitBehaviorAdd(lp_newUnit, "MutatorPlagueBehaviorVisual", lp_newUnit, 1);
        }

    }
}

void lib860A1A1F_gf_MM_ApplyHardenedWill (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickHardenedWill)] == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHardenedWillSelfCycle", lp_createdUnit, 1);
}

void lib860A1A1F_gf_MM_ApplyInspiration (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("Inspiration") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorInspirationSearch", lp_createdUnit, 1);
}

void lib860A1A1F_gf_MM_ApplyConcussiveAttacks (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickConcussiveAttacks)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectUnit(lp_damagingUnit, "MutatorConcussiveAttacksAB", lp_damagedUnit);
}

void lib860A1A1F_gf_MM_ApplyLifeLeech (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    fixed lv_leechPercentage;
    fixed lv_healAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickLifeLeech)] == false) || (UnitIsAlive(lp_damagingUnit) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }
    else {
        lv_leechPercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.5, 0.75, 1.0, 1.0, 1.0);
        lv_healAmount = (lp_damageAmount * lv_leechPercentage);
        if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(lp_damagingUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
        }
        else {
            if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
                UnitSetPropertyFixed(lp_damagingUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

        }
    }
}

void lib860A1A1F_gf_MM_ApplyBarrier (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickBarrier)] == false) || (UnitGroupHasUnit(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit) == true) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02"))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorBarrier", lp_damagedUnit, 1);
    UnitGroupAdd(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit);
}

void lib860A1A1F_gf_MM_ApplySideStep (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    int lv_safteyIndex;
    int lv_teleportRange;
    point lv_teleportPoint;
    point lv_departPoint;

    // Automatic Variable Declarations
    const int auto0BFA6590_ae = 10;
    const int auto0BFA6590_ai = 1;

    // Variable Initialization
    lv_teleportRange = 5;

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickSidestep)] == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorSideStep") == true) || (UnitWeaponCount(lp_damagedUnit) == 0) || (UnitHasBehavior2(lp_damagedUnit, "UnitKnockback") == true))) {
        return ;
    }

    lv_safteyIndex = 1;
    for ( ; ( (auto0BFA6590_ai >= 0 && lv_safteyIndex <= auto0BFA6590_ae) || (auto0BFA6590_ai < 0 && lv_safteyIndex >= auto0BFA6590_ae) ) ; lv_safteyIndex += auto0BFA6590_ai ) {
        if ((UnitIsAlive(lp_damagingUnit) == true) && (UnitIsAlive(lp_damagedUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_damagedUnit), UnitGetPosition(lp_damagingUnit)) < 20.0)) {
            lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagingUnit), lv_teleportRange));
        }
        else {
            if ((UnitIsAlive(lp_damagedUnit) == true)) {
                lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), lv_teleportRange));
            }
            else {
                return ;
            }
        }
        if ((PathingType(lv_teleportPoint) == c_pathingGround)) {
            lv_departPoint = UnitGetPosition(lp_damagedUnit);
            PointSetFacing(lv_departPoint, AngleBetweenPoints(lv_departPoint, lv_teleportPoint));
            PointSetHeight(lv_departPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkOut", lv_departPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            UnitSetPosition(lp_damagedUnit, lv_teleportPoint, false);
            if ((UnitIsAlive(lp_damagingUnit) == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_damagedUnit, UnitGetPosition(lp_damagingUnit), 0.0);
            }

            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, true);
            UnitBehaviorAdd(lp_damagedUnit, "MutatorSideStep", lp_damagedUnit, 1);
            PointSetFacing(lv_teleportPoint, AngleBetweenPoints(lv_teleportPoint, lv_departPoint));
            PointSetHeight(lv_teleportPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkIn", lv_teleportPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            Wait(0.25, c_timeGame);
            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, false);
            return ;
        }

    }
}

trigger auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_Trigger = null;
unit auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
unit auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
fixed auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
string auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

void lib860A1A1F_gf_CT_ApplyDamageBounce2 (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_initialDamageAmount, string lp_damagingEffect) {
    auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagedUnit = lp_damagedUnit;
    auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingUnit = lp_damagingUnit;
    auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount = lp_initialDamageAmount;
    auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingEffect = lp_damagingEffect;

    if (auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_Trigger == null) {
        auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_Trigger = TriggerCreate("auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_damagedUnit = auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
    unit lp_damagingUnit = auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
    fixed lp_initialDamageAmount = auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
    string lp_damagingEffect = auto_lib860A1A1F_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

    // Variable Declarations
    fixed lv_searchRegionRadius;
    region lv_searchRegion;
    fixed lv_bounceTargetsUnitCount;
    unitgroup lv_bounceTargetsUnitGroup;
    fixed lv_difficultyDamageModifier;
    fixed lv_bouncePercentage;
    fixed lv_finalDamageAmount;
    fixed lv_bouncedDamageAmount;
    fixed lv_takenDamageAmount;

    // Automatic Variable Declarations
    unitgroup autoDC6AC505_g;
    int autoDC6AC505_u;
    unit autoDC6AC505_var;
    unitgroup autoC7E3F36E_g;
    int autoC7E3F36E_u;
    unit autoC7E3F36E_var;

    // Variable Initialization
    lv_searchRegionRadius = 5.0;
    lv_bounceTargetsUnitGroup = UnitGroupEmpty();

    // Implementation
    if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickDamageBounce)] == false) || (EventUnitDamageEffect() == "AttackDummyImpact") || (EventUnitDamageEffect() == "DiffusionDummyImpact") || (UnitIsAlive(lp_damagedUnit) == false))) {
        return true;
    }

    lv_bouncePercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.3, 0.4, 0.5, 0.0, 0.0);
    lv_bouncedDamageAmount = (lp_initialDamageAmount * lv_bouncePercentage);
    lv_takenDamageAmount = (lp_initialDamageAmount - lv_bouncedDamageAmount);
    autoDC6AC505_g = UnitGroupAlliance(UnitGetOwner(lp_damagedUnit), c_unitAllianceAny, RegionCircle(UnitGetPosition(lp_damagedUnit), lv_searchRegionRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoDC6AC505_u = UnitGroupCount(autoDC6AC505_g, c_unitCountAll);
    for (;; autoDC6AC505_u -= 1) {
        autoDC6AC505_var = UnitGroupUnitFromEnd(autoDC6AC505_g, autoDC6AC505_u);
        if (autoDC6AC505_var == null) { break; }
        if ((autoDC6AC505_var != lp_damagedUnit)) {
            lv_bounceTargetsUnitCount += 1.0;
            UnitGroupAdd(lv_bounceTargetsUnitGroup, autoDC6AC505_var);
        }

    }
    if ((lv_bounceTargetsUnitCount != 0)) {
        autoC7E3F36E_g = lv_bounceTargetsUnitGroup;
        autoC7E3F36E_u = UnitGroupCount(autoC7E3F36E_g, c_unitCountAll);
        for (;; autoC7E3F36E_u -= 1) {
            autoC7E3F36E_var = UnitGroupUnitFromEnd(autoC7E3F36E_g, autoC7E3F36E_u);
            if (autoC7E3F36E_var == null) { break; }
            UnitDamage(lp_damagedUnit, "DiffusionDummyImpact", autoC7E3F36E_var, (lv_bouncedDamageAmount / lv_bounceTargetsUnitCount));
        }
        if ((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShields, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libHots_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
        else {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libHots_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
    }

    return true;
}

string lib860A1A1F_gf_MM_RandomUnusedCustomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCOMU_gf_CT_MutatorCustomAllowed(lv_randomMutator) == true) && (lv_randomMutator != "Random") && (lv_randomMutator != "Vertigo") && (libCOMU_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

trigger auto_lib860A1A1F_gf_MM_WarpIn_Trigger = null;
unit auto_lib860A1A1F_gf_MM_WarpIn_lp_pUnit;

void lib860A1A1F_gf_MM_WarpIn (unit lp_pUnit) {
    auto_lib860A1A1F_gf_MM_WarpIn_lp_pUnit = lp_pUnit;

    if (auto_lib860A1A1F_gf_MM_WarpIn_Trigger == null) {
        auto_lib860A1A1F_gf_MM_WarpIn_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_WarpIn_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_WarpIn_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_WarpIn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_lib860A1A1F_gf_MM_WarpIn_lp_pUnit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create ProtossGenericWarpInOut");
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(1.0, 1.0));
    UnitBehaviorAdd(lp_pUnit, "ProtossGenericWarpInOut", lp_pUnit, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorRemove(lp_pUnit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(1.0, 0.0));
    Wait(0.3, c_timeGame);
    return true;
}

void lib860A1A1F_gf_MM_CopyBeneficialBehaviors (unit lp_pBehUnit, unit lp_pTargetUnit) {
    // Variable Declarations
    string lv_vBehavior;

    // Automatic Variable Declarations
    int auto9DE2A735_ae;
    int auto9DE2A735_var;

    // Variable Initialization

    // Implementation
    auto9DE2A735_ae = (UnitBehaviorCountAll(lp_pBehUnit) - 1);
    auto9DE2A735_var = 0;
    for ( ; auto9DE2A735_var <= auto9DE2A735_ae; auto9DE2A735_var += 1 ) {
        lv_vBehavior = UnitBehaviorGet(lp_pBehUnit, auto9DE2A735_var);
        if (((lv_vBehavior == "BiomassBuff1") || (lv_vBehavior == "BiomassBuff10") || (lv_vBehavior == "BiomassBuff100") || (lv_vBehavior == "BiomassBuff100PlusLife") || (lv_vBehavior == "BiomassBuff10PlusLife") || (lv_vBehavior == "AscendantSacrificeSelfBuff") || (lv_vBehavior == "DehakaEssenceDropPickupBuff") || (lv_vBehavior == "EssenceBuff1") || (lv_vBehavior == "EssenceBuff10") || (lv_vBehavior == "EssenceBuff100") || (lv_vBehavior == "EssenceBuff100PlusLife") || (lv_vBehavior == "EssenceBuff10PlusLife") || (lv_vBehavior == "DehakaGene4Creepers") || (lv_vBehavior == "DehakaGeneAttackSpeed") || (lv_vBehavior == "DehakaGeneCarapace") || (lv_vBehavior == "DehakaGeneCreeperHostGeneApply") || (lv_vBehavior == "DehakaGeneFireRoachGeneApply") || (lv_vBehavior == "DehakaGeneGuardianGeneApply") || (lv_vBehavior == "DehakaGeneImpalerGeneApply") || (lv_vBehavior == "DehakaGeneLifeLeech") || (lv_vBehavior == "DehakaGeneMutaliskGeneApply") || (lv_vBehavior == "DehakaGeneRavasaurGeneApply") || (lv_vBehavior == "DehakaGeneThorns") || (lv_vBehavior == "DehakaGeneTyrannosaurGeneApply"))) {
            UnitBehaviorAddPlayer(lp_pTargetUnit, lv_vBehavior, UnitGetOwner(lp_pTargetUnit), UnitBehaviorCount(lp_pBehUnit, lv_vBehavior));
        }

    }
    UnitXPAddXP(lp_pTargetUnit, null, UnitXPGetCurrentXP(lp_pBehUnit, null));
}

trigger auto_lib860A1A1F_gf_MM_DelayedActorMessage_Trigger = null;
string auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pMessage;
unit auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pUnit;
fixed auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pTime;

void lib860A1A1F_gf_MM_DelayedActorMessage (string lp_pMessage, unit lp_pUnit, fixed lp_pTime) {
    auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pMessage = lp_pMessage;
    auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pUnit = lp_pUnit;
    auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pTime = lp_pTime;

    if (auto_lib860A1A1F_gf_MM_DelayedActorMessage_Trigger == null) {
        auto_lib860A1A1F_gf_MM_DelayedActorMessage_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_DelayedActorMessage_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_DelayedActorMessage_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_DelayedActorMessage_TriggerFunc (bool testConds, bool runActions) {
    string lp_pMessage = auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pMessage;
    unit lp_pUnit = auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pUnit;
    fixed lp_pTime = auto_lib860A1A1F_gf_MM_DelayedActorMessage_lp_pTime;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_pTime, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, lp_pMessage);
    return true;
}

void lib860A1A1F_gf_MM_SetUnitMaxLifeShields (unit lp_pUnit, fixed lp_pLife, fixed lp_pShields, fixed lp_pEnergy) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pLife >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifeMax, lp_pLife);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifePercent, 100.0);
    }

    if ((lp_pShields >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsMax, lp_pShields);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsPercent, 100.0);
    }

    if ((lp_pEnergy >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyMax, lp_pEnergy);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyPercent, 100.0);
    }

}

trigger auto_lib860A1A1F_gf_MM_EnableMutator_Trigger = null;
string auto_lib860A1A1F_gf_MM_EnableMutator_lp_pMutator;
bool auto_lib860A1A1F_gf_MM_EnableMutator_lp_pNotification;
bool auto_lib860A1A1F_gf_MM_EnableMutator_lp_pEnable;
int auto_lib860A1A1F_gf_MM_EnableMutator_lp_pTimer;

void lib860A1A1F_gf_MM_EnableMutator (string lp_pMutator, bool lp_pNotification, bool lp_pEnable, int lp_pTimer) {
    auto_lib860A1A1F_gf_MM_EnableMutator_lp_pMutator = lp_pMutator;
    auto_lib860A1A1F_gf_MM_EnableMutator_lp_pNotification = lp_pNotification;
    auto_lib860A1A1F_gf_MM_EnableMutator_lp_pEnable = lp_pEnable;
    auto_lib860A1A1F_gf_MM_EnableMutator_lp_pTimer = lp_pTimer;

    if (auto_lib860A1A1F_gf_MM_EnableMutator_Trigger == null) {
        auto_lib860A1A1F_gf_MM_EnableMutator_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_EnableMutator_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_EnableMutator_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_EnableMutator_TriggerFunc (bool testConds, bool runActions) {
    string lp_pMutator = auto_lib860A1A1F_gf_MM_EnableMutator_lp_pMutator;
    bool lp_pNotification = auto_lib860A1A1F_gf_MM_EnableMutator_lp_pNotification;
    bool lp_pEnable = auto_lib860A1A1F_gf_MM_EnableMutator_lp_pEnable;
    int lp_pTimer = auto_lib860A1A1F_gf_MM_EnableMutator_lp_pTimer;

    // Variable Declarations
    text lv_vNewMutatorText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNewMutatorText = StringExternal("Param/Value/lib_860A1A1F_CCE2305C");

    // Implementation
    if ((lp_pEnable == false)) {
        if ((libCOMU_gf_MutatorIsEnabled(lp_pMutator) == true)) {
            libCOMU_gf_EnableDisableMutator(false, lp_pMutator);
            if ((lp_pNotification == true)) {
                TextExpressionSetToken("Param/Expression/lib_860A1A1F_C0A14B16", "A", libCOMU_gf_CT_MutatorName(lp_pMutator));
                libCOUI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_860A1A1F_C0A14B16"));
            }

            lib860A1A1F_gf_MM_UpdateMutators();
        }

        return true;
    }

    if ((libCOMU_gf_MutatorIsEnabled(lp_pMutator) == false)) {
        if ((lp_pNotification == true)) {
            SoundPlayForPlayer(SoundLink("ChaosStudio", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_860A1A1F_E99CFE96", "A", libCOMU_gf_CT_MutatorName(lp_pMutator));
            libCOUI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_860A1A1F_E99CFE96"));
        }

        libCOMU_gf_EnableDisableMutator(true, lp_pMutator);
        TriggerExecute(libCOMU_gf_CT_MutatorInitTrigger(lp_pMutator), true, false);
        lib860A1A1F_gf_MM_UpdateMutators();
        if ((lp_pTimer > 0)) {
            Wait(lp_pTimer, c_timeGame);
            libCOMU_gf_EnableDisableMutator(false, lp_pMutator);
            if ((lp_pNotification == true)) {
                TextExpressionSetToken("Param/Expression/lib_860A1A1F_626D3F0F", "A", libCOMU_gf_CT_MutatorName(lp_pMutator));
                libCOUI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_860A1A1F_626D3F0F"));
            }

            lib860A1A1F_gf_MM_UpdateMutators();
        }

    }

    return true;
}

void lib860A1A1F_gf_MM_UpdateMutators () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMU_gf_CT_MutatorEnabledCount() > libCOUI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL)) {
        libCOUI_gf_CU_MutatorListInitLarge();
    }
    else {
        libCOUI_gf_CU_MutatorListInitSmall();
    }
}

void lib860A1A1F_gf_MM_UnitScaleController (unit lp_pUnit, fixed lp_pModifier) {
    // Variable Declarations
    fixed lv_vDefaultScale;
    fixed lv_vScale;
    int lv_vCustomValue;
    int lv_vBiomassCountTotal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vScale = 1.0;
    lv_vCustomValue = lib860A1A1F_gv_mM_UnitScale_CustomValue;

    // Implementation
    if ((UnitGetCustomValue(lp_pUnit, lv_vCustomValue) != 0.0)) {
        lv_vScale = UnitGetCustomValue(lp_pUnit, lv_vCustomValue);
    }
    else {
        lv_vScale = 1.0;
    }
    lv_vScale *= lp_pModifier;
    UnitSetCustomValue(lp_pUnit, lv_vCustomValue, lv_vScale);
    lv_vDefaultScale = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogActor, (UnitGetType(lp_pUnit)), "Scale", 0);
    if (((lv_vDefaultScale >= 0.5) && (lv_vDefaultScale <= 3.0)) && (lv_vDefaultScale != 1)) {
        lv_vScale *= lv_vDefaultScale;
    }

    if ((UnitBehaviorCount(lp_pUnit, "MutatorAvenger") >= 1)) {
        lv_vScale *= ((0.08 * UnitBehaviorCount(lp_pUnit, "MutatorAvenger")) + 1.0);
    }

    lv_vBiomassCountTotal = (UnitBehaviorCount(lp_pUnit, "BiomassBuff100") * 100);
    lv_vBiomassCountTotal += (UnitBehaviorCount(lp_pUnit, "BiomassBuff10") * 10);
    lv_vBiomassCountTotal += UnitBehaviorCount(lp_pUnit, "BiomassBuff1");
    if ((lv_vBiomassCountTotal > 100)) {
        lv_vBiomassCountTotal = 100;
    }

    if ((lv_vBiomassCountTotal > 0)) {
        lv_vScale *= ((0.0025 * lv_vBiomassCountTotal) + 1.25);
    }

    lv_vScale = libNtve_gf_ArithmeticRealClamp(lv_vScale, 0.35, 5.0);
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, (("SetScale " + FixedToString(lv_vScale, 1))));
}

unit lib860A1A1F_gf_MM_EnemyStructureWithPathing () {
    // Variable Declarations
    unit lv_vUnit;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int autoA8F2BACB_n = 100;
    int autoA8F2BACB_i;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Implementation
    lv_vUG = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    for (autoA8F2BACB_i = 1; autoA8F2BACB_i <= autoA8F2BACB_n; autoA8F2BACB_i += 1) {
        lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
        if ((PointPathingIsConnected(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) == true)) {
            return lv_vUnit;
        }

    }
    return lv_vUnit;
}

point lib860A1A1F_gf_MM_PositionEnemyStructureWithPathing () {
    // Variable Declarations
    point lv_vPoint;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int auto92002487_n = 200;
    int auto92002487_i;

    // Variable Initialization
    lv_vUnit = lib860A1A1F_gf_MM_EnemyStructureWithPathing();

    // Implementation
    if ((lv_vUnit != null) && (UnitIsAlive(lv_vUnit) == true)) {
        return UnitGetPosition(lv_vUnit);
    }
    else {
        for (auto92002487_i = 1; auto92002487_i <= auto92002487_n; auto92002487_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if ((UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(lv_vPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true)) {
                return lv_vPoint;
            }

        }
        return lv_vPoint;
    }
}

bool lib860A1A1F_gf_MM_IsTrain (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_pUnit) == "FreightCar") || (UnitGetType(lp_pUnit) == "Caboose") || (UnitGetType(lp_pUnit) == "TarsonisEngineFast") || (UnitGetType(lp_pUnit) == "TarsonisEngine"))) {
        return true;
    }
    else {
        return false;
    }
}

void lib860A1A1F_gf_MM_UnitCreationManual (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    lib860A1A1F_gf_MM_ApplyLevelPlayingField(lp_pUnit);
    lib860A1A1F_gf_MM_ApplyEndurance(lp_pUnit);
    lib860A1A1F_gf_MM_ApplySupremeCommander(lp_pUnit);
    lib860A1A1F_gf_MM_ApplyBloodlust(lp_pUnit);
}

void lib860A1A1F_gf_MM_CheckPrimalPackLeaderLairs (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("DehakaDakrunStructure", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DehakaDakrunStructure", c_unitCreateIgnorePlacement, lp_pPlayer, Point(0.0, 0.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 30000.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }

    if ((UnitGroupCount(UnitGroup("DehakaMurvarStructure", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DehakaMurvarStructure", c_unitCreateIgnorePlacement, lp_pPlayer, Point(0.0, 0.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 30000.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }

    if ((UnitGroupCount(UnitGroup("DehakaGlevigStructure", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DehakaGlevigStructure", c_unitCreateIgnorePlacement, lp_pPlayer, Point(0.0, 0.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 30000.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }

}

void lib860A1A1F_gf_MM_WaitForUnload (unitgroup lp_pTriggeringUG) {
    // Variable Declarations
    bool lv_vSomeGround;

    // Automatic Variable Declarations
    unitgroup autoDB6A5C61_g;
    int autoDB6A5C61_u;
    unit autoDB6A5C61_var;
    fixed auto05EC1A80_at;
    unitgroup auto4716FA0B_g;
    int auto4716FA0B_u;
    unit auto4716FA0B_var;
    fixed autoCA66560E_at;
    fixed auto36D30B73_at;

    // Variable Initialization

    // Implementation
    autoDB6A5C61_g = lp_pTriggeringUG;
    autoDB6A5C61_u = UnitGroupCount(autoDB6A5C61_g, c_unitCountAll);
    for (;; autoDB6A5C61_u -= 1) {
        autoDB6A5C61_var = UnitGroupUnitFromEnd(autoDB6A5C61_g, autoDB6A5C61_u);
        if (autoDB6A5C61_var == null) { break; }
        if ((libNtve_gf_UnitIsInsideTransport(autoDB6A5C61_var) == true)) {
            lv_vSomeGround = true;
            auto05EC1A80_at = 0;
            while (!((libNtve_gf_UnitIsInsideTransport(autoDB6A5C61_var) == false)) && auto05EC1A80_at <= 60.0) {
                Wait(1.0, c_timeGame);
                auto05EC1A80_at = auto05EC1A80_at + 1.0;
            }
            break;
        }

    }
    auto4716FA0B_g = lp_pTriggeringUG;
    auto4716FA0B_u = UnitGroupCount(auto4716FA0B_g, c_unitCountAll);
    for (;; auto4716FA0B_u -= 1) {
        auto4716FA0B_var = UnitGroupUnitFromEnd(auto4716FA0B_g, auto4716FA0B_u);
        if (auto4716FA0B_var == null) { break; }
        if ((UnitFilterMatch(auto4716FA0B_var, 1, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            lv_vSomeGround = true;
            autoCA66560E_at = 0;
            while (!((PointPathingIsConnected(UnitGetPosition(auto4716FA0B_var), PlayerStartLocation(1)) == true) && (PathingType(UnitGetPosition(auto4716FA0B_var)) == c_pathingGround)) && autoCA66560E_at <= 60.0) {
                Wait(1.0, c_timeGame);
                autoCA66560E_at = autoCA66560E_at + 1.0;
            }
            break;
        }

    }
    if ((lv_vSomeGround == false)) {
        auto36D30B73_at = 0;
        while (!((PointPathingIsConnected(UnitGroupCenterOfGroup(lp_pTriggeringUG), PlayerStartLocation(1)) == true)) && auto36D30B73_at <= 180.0) {
            Wait(1.0, c_timeGame);
            auto36D30B73_at = auto36D30B73_at + 1.0;
        }
        Wait(6.0, c_timeGame);
    }

}

trigger auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_Trigger = null;
unit auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUnit;
unitgroup auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUG;

void lib860A1A1F_gf_MM_AddToAttackWave_Check (unit lp_pUnit, unitgroup lp_pUG) {
    auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUnit = lp_pUnit;
    auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUG = lp_pUG;

    if (auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_Trigger == null) {
        auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUnit;
    unitgroup lp_pUG = auto_lib860A1A1F_gf_MM_AddToAttackWave_Check_lp_pUG;

    // Automatic Variable Declarations
    const int auto03C608AD_n = 50;
    int auto03C608AD_i;
    unitgroup autoB6CFE5BB_g;
    int autoB6CFE5BB_u;
    unit autoB6CFE5BB_var;

    // Implementation
    AISetUnitScriptControlled(lp_pUnit, false);
    for (auto03C608AD_i = 1; auto03C608AD_i <= auto03C608AD_n; auto03C608AD_i += 1) {
        if ((AIUnitGetWave(lp_pUnit) == null)) {
            autoB6CFE5BB_g = lp_pUG;
            autoB6CFE5BB_u = UnitGroupCount(autoB6CFE5BB_g, c_unitCountAll);
            for (;; autoB6CFE5BB_u -= 1) {
                autoB6CFE5BB_var = UnitGroupUnitFromEnd(autoB6CFE5BB_g, autoB6CFE5BB_u);
                if (autoB6CFE5BB_var == null) { break; }
                if ((UnitWeaponCount(autoB6CFE5BB_var) >= 1) && (libNtve_gf_UnitIsInsideTransport(autoB6CFE5BB_var) == false) && (UnitIsAlive(autoB6CFE5BB_var) == true) && (AIUnitGetWave(autoB6CFE5BB_var) != null) && (UnitGetOwner(autoB6CFE5BB_var) == UnitGetOwner(lp_pUnit))) {
                    AIWaveAddUnit(AIUnitGetWave(autoB6CFE5BB_var), lp_pUnit);
                    break;
                }

            }
        }
        else {
            return true;
        }
        Wait(0.5, c_timeGame);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_860A1A1F_CC8385BA"), false);
    return true;
}

void lib860A1A1F_gf_MM_ApplyEndurance (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Endurance)] == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitHasBehavior2(lp_pUnit, "Endurance") == true) || (UnitHasBehavior2(lp_pUnit, "EnduranceTrain") == true) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitHasBehavior2(lp_pUnit, "ExcludeEndurance") == true))) {
        return ;
    }

    if ((lib860A1A1F_gf_MM_IsTrain(lp_pUnit) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "EnduranceTrain", 3, 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_pUnit, "Endurance", 3, 1);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsPercent, 100.0);
    }
}

void lib860A1A1F_gf_MM_ApplyLevelPlayingField (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_LevelPlayingField)] == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitHasBehavior2(lp_pUnit, "LevelPlayingField") == true) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }
    else {
        UnitBehaviorAddPlayer(lp_pUnit, "LevelPlayingField", 3, 1);
    }
}

void lib860A1A1F_gf_MM_ApplyBloodlust (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Bloodlust)] == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), 1, libNtve_ge_PlayerRelation_Enemy) == false) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_pUnit, "Bloodlust") == true) || (UnitHasBehavior2(lp_pUnit, "Bloodlust2") == true) || (UnitHasBehavior2(lp_pUnit, "Bloodlust3") == true))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_pUnit, "Bloodlust", 3, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "Bloodlust2", 3, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "Bloodlust3", 3, 1);
}

trigger auto_lib860A1A1F_gf_MM_ApplyNuclearMines_Trigger = null;
unit auto_lib860A1A1F_gf_MM_ApplyNuclearMines_lp_pKilledUnit;

void lib860A1A1F_gf_MM_ApplyNuclearMines (unit lp_pKilledUnit) {
    auto_lib860A1A1F_gf_MM_ApplyNuclearMines_lp_pKilledUnit = lp_pKilledUnit;

    if (auto_lib860A1A1F_gf_MM_ApplyNuclearMines_Trigger == null) {
        auto_lib860A1A1F_gf_MM_ApplyNuclearMines_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_ApplyNuclearMines_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_ApplyNuclearMines_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_ApplyNuclearMines_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pKilledUnit = auto_lib860A1A1F_gf_MM_ApplyNuclearMines_lp_pKilledUnit;

    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_NuclearMines)] == false) || (UnitGetType(lp_pKilledUnit) != "NuclearMine"))) {
        return true;
    }

    lv_vPoint = UnitGetPosition(lp_pKilledUnit);
    Wait(1.2, c_timeGame);
    PlayerCreateEffectPoint(3, "HybridNukeDamage", lv_vPoint);
    return true;
}

point lib860A1A1F_gf_MM_GW_CreepTumorTarget (unit lp_pUnit) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto3F9F0AE6_n = 20;
    int auto3F9F0AE6_i;

    // Variable Initialization

    // Implementation
    for (auto3F9F0AE6_i = 1; auto3F9F0AE6_i <= auto3F9F0AE6_n; auto3F9F0AE6_i += 1) {
        lv_vPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), 5.0, PlayerStartLocation(1)), RandomFixed(0.0, 6.0), libNtve_gf_RandomAngle());
        if ((UnitCountAlliance(c_playerAny, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (CreepIsPresent(lv_vPoint) == true) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true)) {
            return lv_vPoint;
        }

    }
    return lv_vPoint;
}

point lib860A1A1F_gf_MM_GW_GetPointWithPathingNearBase () {
    // Variable Declarations
    point lv_vPoint;
    point lv_vPoint2;

    // Automatic Variable Declarations
    const int auto9B285E11_n = 30;
    int auto9B285E11_i;

    // Variable Initialization
    lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(PlayerStartLocation(1), 10.0, PlayerStartLocation(2));

    // Implementation
    for (auto9B285E11_i = 1; auto9B285E11_i <= auto9B285E11_n; auto9B285E11_i += 1) {
        lv_vPoint2 = RegionRandomPoint(RegionCircle(lv_vPoint, 40.0));
        if ((PointPathingCost(lv_vPoint, lv_vPoint2) != 65536)) {
            return lv_vPoint;
        }
        else {
            lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(PlayerStartLocation(1), (DistanceBetweenPoints(PlayerStartLocation(1), PlayerStartLocation(2)) * RandomFixed(0.0, 1.0)), PlayerStartLocation(2));
        }
    }
    return lv_vPoint;
}

bool lib860A1A1F_gf_MM_GW_NoBuildRegionClose (point lp_pPoint) {
    // Automatic Variable Declarations
    const int auto66A98850_n = 1000;
    int auto66A98850_i;

    // Implementation
    for (auto66A98850_i = 1; auto66A98850_i <= auto66A98850_n; auto66A98850_i += 1) {
        if ((DistanceBetweenPoints(lp_pPoint, RegionRandomPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion)) <= 8.0)) {
            return true;
        }

    }
    return false;
}

void lib860A1A1F_gf_MM_GW_PathingInit () {
    // Automatic Variable Declarations
    string auto8982BCC5_val;

    // Implementation
    TriggerEnable(lib860A1A1F_gt_MM_GW_ConstructionStarted, true);
    auto8982BCC5_val = libCOOC_gf_CC_CurrentMap();
    if (auto8982BCC5_val == "AC_ShakurasTemple") {
        lib860A1A1F_gf_MM_GW_Track(Point(26.0, 170.0), Point(56.5, 139.5));
        lib860A1A1F_gf_MM_GW_Track(Point(60.5, 135.5), Point(75.5, 120.5));
        lib860A1A1F_gf_MM_GW_Track(Point(170.0, 18.0), Point(140.5, 57.5));
        lib860A1A1F_gf_MM_GW_Track(Point(136.5, 61.5), Point(124.5, 73.5));
        lib860A1A1F_gf_MM_GW_Track(Point(17.0, 14.5), Point(57.5, 54.5));
        lib860A1A1F_gf_MM_GW_Track(Point(61.5, 58.5), Point(79.5, 78.0));
    }
    else {
        TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent, true);
        TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod, true);
        TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn, true);
    }
}

trigger auto_lib860A1A1F_gf_MM_GW_Track_Trigger = null;
point auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointStart;
point auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointEnd;

void lib860A1A1F_gf_MM_GW_Track (point lp_vPointStart, point lp_vPointEnd) {
    auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointStart = lp_vPointStart;
    auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointEnd = lp_vPointEnd;

    if (auto_lib860A1A1F_gf_MM_GW_Track_Trigger == null) {
        auto_lib860A1A1F_gf_MM_GW_Track_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_GW_Track_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_GW_Track_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_GW_Track_TriggerFunc (bool testConds, bool runActions) {
    point lp_vPointStart = auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointStart;
    point lp_vPointEnd = auto_lib860A1A1F_gf_MM_GW_Track_lp_vPointEnd;

    // Automatic Variable Declarations
    const int autoC9C291BC_n = 60;
    int autoC9C291BC_i;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GWDummy", c_unitCreateIgnorePlacement, 4, lp_vPointStart);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_vPointEnd), c_orderQueueReplace);
    RegionAddCircle(lib860A1A1F_gv_mM_GW_NoBuildRegion, true, lp_vPointStart, 3.0);
    for (autoC9C291BC_i = 1; autoC9C291BC_i <= autoC9C291BC_n; autoC9C291BC_i += 1) {
        Wait(1.0, c_timeGame);
        RegionAddCircle(lib860A1A1F_gv_mM_GW_NoBuildRegion, true, UnitGetPosition(UnitLastCreated()), 2.4);
        if ((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_vPointEnd) <= 0.5)) {
            break;
        }

    }
    UnitRemove(UnitLastCreated());
    return true;
}

void lib860A1A1F_gf_MM_GW_Path (point lp_pPoint) {
    // Automatic Variable Declarations
    const int autoB96C811F_n = 60;
    int autoB96C811F_i;

    // Implementation
    if (((RegionContainsPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion, lp_pPoint) == true) || (PathingType(lp_pPoint) != c_pathingGround) || (UnitGroupCount(UnitGroup("GWDummy", c_playerAny, RegionCircle(lp_pPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0) || (lib860A1A1F_gf_MM_GW_NoBuildRegionClose(lp_pPoint) == true))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GWDummy", c_unitCreateIgnorePlacement, 4, lp_pPoint);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(1)), c_orderQueueReplace);
    if ((AIPathingCostUnit(UnitLastCreated(), PlayerStartLocation(1), c_ignoreEnemyBuildings) == -1)) {
        UnitRemove(UnitLastCreated());
        return ;
    }

    if ((PointPathingCost(UnitGetPosition(UnitLastCreated()), lib860A1A1F_gf_MM_GW_GetPointWithPathingNearBase()) == 65536)) {
        Wait(60.0, c_timeGame);
        if ((PointPathingCost(UnitGetPosition(UnitLastCreated()), lib860A1A1F_gf_MM_GW_GetPointWithPathingNearBase()) == 65536)) {
            UnitRemove(UnitLastCreated());
            return ;
        }

    }

    RegionAddCircle(lib860A1A1F_gv_mM_GW_NoBuildRegion, true, lp_pPoint, 3.0);
    for (autoB96C811F_i = 1; autoB96C811F_i <= autoB96C811F_n; autoB96C811F_i += 1) {
        Wait(1.0, c_timeGame);
        RegionAddCircle(lib860A1A1F_gv_mM_GW_NoBuildRegion, true, UnitGetPosition(UnitLastCreated()), 2.0);
        if (((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), PlayerStartLocation(1)) <= 20.0) || (DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), PlayerStartLocation(2)) <= 20.0))) {
            break;
        }

    }
    UnitRemove(UnitLastCreated());
}

void lib860A1A1F_gf_MM_ApplySupremeCommander (unit lp_pUnit) {
    // Variable Declarations
    fixed lv_vRange;
    bool lv_vScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_SupremeCommander)] == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (UnitHasBehavior2(lp_pUnit, "SupremeCommander") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderMassive") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderWorker") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderStructure") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderTrain") == true))) {
        return ;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeStructure) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderStructure", 3, 1);
        return ;
    }

    if ((UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_HeroReviveScale_CustomValue) != lib860A1A1F_gv_mM_HeroReviveScale_CustomValue)) {
        UnitSetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_HeroReviveScale_CustomValue, lib860A1A1F_gv_mM_HeroReviveScale_CustomValue);
        lv_vScale = true;
    }

    if ((lib860A1A1F_gf_MM_IsTrain(lp_pUnit) == true)) {
        lib860A1A1F_gf_MM_UnitScaleController(lp_pUnit, 1.4);
        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderTrain", 3, 1);
        return ;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeMapBoss) == true))) {
        if ((lv_vScale == true)) {
            lib860A1A1F_gf_MM_UnitScaleController(lp_pUnit, 1.55);
        }

        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderMassive", 3, 1);
    }
    else {
        if ((UnitTypeTestFlag(UnitGetType(lp_pUnit), c_unitFlagWorker) == false) && (UnitGetType(lp_pUnit) != "TrooperMengsk")) {
            if ((lv_vScale == true)) {
                lib860A1A1F_gf_MM_UnitScaleController(lp_pUnit, 0.7);
            }

            UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommander", 3, 1);
        }
        else {
            if ((lv_vScale == true)) {
                lib860A1A1F_gf_MM_UnitScaleController(lp_pUnit, 0.7);
            }

            UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderWorker", 3, 1);
        }
    }
}

void lib860A1A1F_gf_MM_ApplyMatryoshka (unit lp_pUnit, int lp_pKillingPlayer) {
    // Variable Declarations
    fixed lv_vScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Matryoshka)] == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), 1, libNtve_ge_PlayerRelation_Enemy) == false) || ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) && (UnitGroupHasUnit(lib860A1A1F_gv_mM_AmonSummonedHeroes, lp_pUnit) == false)) || (UnitGetType(lp_pUnit) == "TerranDropPod") || (UnitGetType(lp_pUnit) == "ZergDropPodLarge") || (UnitGetType(lp_pUnit) == "ZergDropPod") || (UnitGetType(lp_pUnit) == "KerriganInfestBroodling") || (UnitGetType(lp_pUnit) == "StukovInfestBroodling") || (UnitGetType(lp_pUnit) == "Broodling") || (UnitGetType(lp_pUnit) == "InfestedCivilian") || ((120.0 * UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_Matryoshka_CustomValue)) > UnitTypeGetProperty(UnitGetType(lp_pUnit), c_unitPropVitalityMax)) || (UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_Matryoshka_CustomValue) == 3.0) || ((lp_pKillingPlayer != 1) && (lp_pKillingPlayer != 2)))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pUnit), 0, UnitGetOwner(lp_pUnit), UnitGetPosition(lp_pUnit), UnitGetFacing(lp_pUnit));
    UnitSetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Matryoshka_CustomValue, (UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_Matryoshka_CustomValue) + 1.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Matryoshka", 3, FixedToInt(UnitGetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Matryoshka_CustomValue)));
    UnitBehaviorAddPlayer(UnitLastCreated(), "HybridPnPMirrorImage", 3, 1);
    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "GlazeShadow"), "Destroy");
    ActorSendTo(libNtve_gf_MainActorofUnit(null), "GlazeShadow", "Destroy");
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropLifeMax) * Pow(0.5, UnitGetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Matryoshka_CustomValue))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropShieldsMax) * Pow(0.5, UnitGetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Matryoshka_CustomValue))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, UnitGetPropertyFixed(lp_pUnit, c_unitPropEnergy, c_unitPropCurrent));
    UnitGroupAdd(libCOMU_gv_cT_OnDeathSpawns, UnitLastCreated());
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    lib860A1A1F_gf_MM_UnitScaleController(UnitLastCreated(), Pow(0.666, UnitGetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Matryoshka_CustomValue)));
    libNtve_gf_CreateActorAtPoint("MatryoshkaRessurect", UnitGetPosition(UnitLastCreated()));
    if ((UnitGetType(lp_pUnit) == "MutatorVoidReanimator")) {
        UnitGroupAdd(libCOMU_gv_cT_Reanimators, UnitLastCreated());
    }

    AISetUnitScriptControlled(UnitLastCreated(), false);
    AISetUnitSuicide(UnitLastCreated(), true);
}

void lib860A1A1F_gf_MM_ApplyNecronomicon (unit lp_pKilledUnit, int lp_pKillingPlayer) {
    // Variable Declarations
    point lv_vStructureLocation;
    string lv_vBehavior;

    // Automatic Variable Declarations
    const int auto0F68ECA4_n = 100;
    int auto0F68ECA4_i;

    // Variable Initialization

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Necronomicon)] == false) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == false) || ((UnitFilterMatch(lp_pKilledUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) && ((UnitGetType(lp_pKilledUnit) != "SIInfestedTrooper") || (UnitGetType(lp_pKilledUnit) != "SIInfestedCivilian") || (UnitGetType(lp_pKilledUnit) != "SIInfestedMarine") || (UnitGetType(lp_pKilledUnit) != "SIVolatileInfested"))) || (UnitTypeTestFlag(UnitGetType(lp_pKilledUnit), c_unitFlagWorker) == true) || ((UnitWeaponCount(lp_pKilledUnit) == 0) && (UnitGetType(lp_pKilledUnit) != "Medic") && (UnitGetType(lp_pKilledUnit) != "Monitor") && (UnitGetType(lp_pKilledUnit) != "ScienceVessel") && (UnitGetType(lp_pKilledUnit) != "Raven_BlackOps") && (UnitGetType(lp_pKilledUnit) != "HHRaven")))) {
        return ;
    }

    for (auto0F68ECA4_i = 1; auto0F68ECA4_i <= auto0F68ECA4_n; auto0F68ECA4_i += 1) {
        lv_vStructureLocation = UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((PointPathingIsConnected(lv_vStructureLocation, PlayerStartLocation(1)) == true)) {
            break;
        }

    }
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lp_pKilledUnit), 0, lib860A1A1F_gv_mM_PX_PlayerX, lv_vStructureLocation, PlayerStartLocation(1));
    lib860A1A1F_gf_MM_CopyBeneficialBehaviors(lp_pKilledUnit, UnitLastCreated());
    libNtve_gf_CreateActorAtPoint("NecronomiconRessurect", UnitGetPosition(UnitLastCreated()));
    if (((UnitGetType(lp_pKilledUnit) == "Interceptor") || (UnitGetType(lp_pKilledUnit) == "InterceptorAiur") || (UnitGetType(lp_pKilledUnit) == "FenixClolarionInterceptor") || (UnitGetType(lp_pKilledUnit) == "FenixClolarionBomber") || (UnitGetType(lp_pKilledUnit) == "HHGriffon") || (UnitGetType(lp_pKilledUnit) == "SS_Interceptor") || (UnitGetType(lp_pKilledUnit) == "SelendisInterceptor") || (UnitGetType(lp_pKilledUnit) == "FlagshipInterceptor"))) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(1)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(2)), c_orderQueueReplace);
        }
    }
    else {
        UnitGroupAdd(lib860A1A1F_gv_mM_UndeadUG, UnitLastCreated());
    }
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    lib860A1A1F_gf_MM_UnitCreationManual(UnitLastCreated());
}

void lib860A1A1F_gf_MM_ApplyRepulsiveField (unit lp_pDamagingUnit, unit lp_pDamagedUnit) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto2160AF3E_ae = 10;
    int auto2160AF3E_var;

    // Variable Initialization

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RepulsiveField)] == false) || (lp_pDamagedUnit == lp_pDamagingUnit) || (lp_pDamagedUnit == null) || (lp_pDamagingUnit == null) || (UnitFilterMatch(lp_pDamagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || ((UnitGetOwner(lp_pDamagedUnit) != 1) && (UnitGetOwner(lp_pDamagedUnit) != 2)))) {
        return ;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lp_pDamagedUnit), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pDamagedUnit), c_unitAttributeMassive) == true))) {
        lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pDamagedUnit), -0.8, UnitGetPosition(lp_pDamagingUnit));
    }
    else {
        lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pDamagedUnit), -1.6, UnitGetPosition(lp_pDamagingUnit));
    }
    if (((UnitFilterMatch(lp_pDamagedUnit, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || ((PointPathingPassable(lv_vPoint) == true) && (PointPathingPassable(libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, -0.5, UnitGetPosition(lp_pDamagingUnit))) == true)))) {
        UnitSetPosition(lp_pDamagedUnit, lv_vPoint, true);
    }
    else {
        auto2160AF3E_var = 1;
        for ( ; auto2160AF3E_var <= auto2160AF3E_ae; auto2160AF3E_var += 1 ) {
            lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, 0.16, UnitGetPosition(lp_pDamagingUnit));
            if ((PointPathingPassable(libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, -0.5, UnitGetPosition(lp_pDamagingUnit))) == true)) {
                UnitSetPosition(lp_pDamagedUnit, lv_vPoint, true);
                break;
            }

        }
    }
}

void lib860A1A1F_gf_MM_ApplyIcollectIchange (unit lp_pKillingUnit, unit lp_pKilledUnit) {
    // Automatic Variable Declarations
    const int auto138E98F4_ae = 9;
    int auto138E98F4_var;

    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_ICollectIChange)] == false) || (lp_pKillingUnit == null) || (UnitGetOwner(lp_pKillingUnit) == c_playerAny) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (UnitFilterMatch(lp_pKilledUnit, UnitGetOwner(lp_pKillingUnit), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || (UnitFilterMatch(lp_pKillingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || ((UnitTypeGetCost(UnitGetType(lp_pKilledUnit), c_unitCostSumMineralsVespene) < UnitTypeGetCost(UnitGetType(lp_pKillingUnit), c_unitCostSumMineralsVespene)) && (UnitTypeTestAttribute(UnitGetType(lp_pKilledUnit), c_unitAttributeMapBoss) == false) && (UnitTypeTestAttribute(UnitGetType(lp_pKilledUnit), c_unitAttributeHeroic) == false)))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pKilledUnit), 0, UnitGetOwner(lp_pKillingUnit), UnitGetPosition(lp_pKillingUnit), UnitGetFacing(lp_pKillingUnit));
    auto138E98F4_var = 0;
    for ( ; auto138E98F4_var <= auto138E98F4_ae; auto138E98F4_var += 1 ) {
        if ((UnitGroupHasUnit(UnitControlGroup(UnitGetOwner(lp_pKillingUnit), auto138E98F4_var), lp_pKillingUnit) == true)) {
            UnitControlGroupAddUnit(UnitGetOwner(lp_pKillingUnit), auto138E98F4_var, UnitLastCreated());
        }

    }
    if ((UnitIsSelected(lp_pKillingUnit, UnitGetOwner(lp_pKillingUnit)) == true)) {
        UnitSelect(UnitLastCreated(), UnitGetOwner(lp_pKillingUnit), true);
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, UnitGetPropertyFixed(lp_pKillingUnit, c_unitPropKills, c_unitPropCurrent));
    UnitIssueOrder(UnitLastCreated(), UnitOrder(lp_pKillingUnit, 0), c_orderQueueReplace);
    UnitRemove(lp_pKillingUnit);
}

bool lib860A1A1F_gf_MM_MothershipTargetValid (unit lp_mothership, unit lp_target) {
    // Variable Declarations
    point lv_stepLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false) || (UnitIsAlive(lp_target) == false))) {
        return false;
    }

    if (((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_target)) == false) || (DistanceBetweenPoints(UnitGetPosition(lp_target), PlayerStartLocation(1)) < lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) || (DistanceBetweenPoints(UnitGetPosition(lp_target), PlayerStartLocation(2)) < lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_target), 30.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        return false;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_mothership), UnitGetPosition(lp_target)) > 10.0)) {
        lv_stepLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_mothership), 10.0, UnitGetPosition(lp_target));
        if (((DistanceBetweenPoints(lv_stepLocation, PlayerStartLocation(1)) < lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) || (DistanceBetweenPoints(lv_stepLocation, PlayerStartLocation(2)) < lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_stepLocation, 25.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

    }

    return true;
}

point lib860A1A1F_gf_MM_MothershipSpawn () {
    // Variable Declarations
    point lv_vPoint;
    unit lv_vUnit;
    unitgroup lv_vStructures;
    unit lv_vMaxUnit;
    fixed lv_vMaxDistance;

    // Automatic Variable Declarations
    const int auto1B6AAFE2_n = 500;
    int auto1B6AAFE2_i;
    const int autoB4CFD7E6_n = 100;
    int autoB4CFD7E6_i;
    const int auto5C9AE42A_n = 1000;
    int auto5C9AE42A_i;

    // Variable Initialization
    lv_vStructures = UnitGroupEmpty();

    // Implementation
    lv_vStructures = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_vStructures, c_unitCountAlive) > 0)) {
        for (autoB4CFD7E6_i = 1; autoB4CFD7E6_i <= autoB4CFD7E6_n; autoB4CFD7E6_i += 1) {
            lv_vUnit = UnitGroupRandomUnit(lv_vStructures, c_unitCountAlive);
            if ((DistanceBetweenPoints(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) > lv_vMaxDistance)) {
                lv_vMaxUnit = lv_vUnit;
                lv_vMaxDistance = DistanceBetweenPoints(UnitGetPosition(lv_vUnit), PlayerStartLocation(1));
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) >= 90.0) && (UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_vUnit), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(UnitGetPosition(lv_vUnit), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
        lv_vPoint = UnitGetPosition(lv_vMaxUnit);
    }
    else {
        for (auto1B6AAFE2_i = 1; auto1B6AAFE2_i <= auto1B6AAFE2_n; auto1B6AAFE2_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) > 90.0) && (UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(lv_vPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(lv_vPoint, 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
    }
    if ((lv_vPoint == null)) {
        for (auto5C9AE42A_i = 1; auto5C9AE42A_i <= auto5C9AE42A_n; auto5C9AE42A_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) > 60.0) && (UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(lv_vPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(lv_vPoint, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
    }

    return lv_vPoint;
}

void lib860A1A1F_gf_MM_DeathInTheMist (unit lp_pKilledUnit, unit lp_pKillingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_TheMist)] == false) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (UnitGetOwner(lp_pKillingUnit) == 1) || (UnitGetOwner(lp_pKillingUnit) == 2) || (lp_pKilledUnit == null) || (UnitFilterMatch(lp_pKilledUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGroupCount(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(lp_pKilledUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pKilledUnit), 0, lib860A1A1F_gv_mM_PX_PlayerX, UnitGetPosition(lp_pKilledUnit), UnitGetFacing(lp_pKilledUnit));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 50.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MistGlaze");
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    Wait(0.3, c_timeGame);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "Reanimator_Resurrect_Coop", null, null, null);
}

trigger auto_lib860A1A1F_gf_MM_TerrorSpawn_Trigger = null;
unit auto_lib860A1A1F_gf_MM_TerrorSpawn_lp_pTargetUnit;

void lib860A1A1F_gf_MM_TerrorSpawn (unit lp_pTargetUnit) {
    auto_lib860A1A1F_gf_MM_TerrorSpawn_lp_pTargetUnit = lp_pTargetUnit;

    if (auto_lib860A1A1F_gf_MM_TerrorSpawn_Trigger == null) {
        auto_lib860A1A1F_gf_MM_TerrorSpawn_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_TerrorSpawn_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_TerrorSpawn_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_TerrorSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pTargetUnit = auto_lib860A1A1F_gf_MM_TerrorSpawn_lp_pTargetUnit;

    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto4806DD70_n = 500;
    int auto4806DD70_i;

    // Variable Initialization

    // Implementation
    for (auto4806DD70_i = 1; auto4806DD70_i <= auto4806DD70_n; auto4806DD70_i += 1) {
        lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_pTargetUnit))), 7.0));
        if ((PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 2.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            break;
        }

    }
    libNtve_gf_UnitCreateFacingPoint(1, "ShadowTerror", 0, 3, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pTargetUnit), 2.0, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_pTargetUnit)))), UnitGetPosition(lp_pTargetUnit));
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStatePaused, true);
    SoundPlayOnUnitForPlayer(SoundLink("ShadowTerrorSound", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 1.0, 200.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MistGlaze");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.001000");
    lib860A1A1F_gf_MM_UnitScaleController(UnitLastCreated(), lib860A1A1F_gv_mM_ShadowTerrorSize);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 2.000000");
    Wait(0.5, c_timeGame);
    UnitSetState(UnitLastCreated(), c_unitStatePaused, false);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitLastCreated()), -10.0, UnitGetPosition(lp_pTargetUnit))), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.000000 1.500000");
    Wait(1.5, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

void lib860A1A1F_gf_MM_HeroSetUp (unit lp_pUnit) {
    // Variable Declarations
    int lv_vPlayer;
    string lv_vLibrary;

    // Automatic Variable Declarations
    string autoAE629783_val;

    // Variable Initialization
    lv_vPlayer = UnitGetOwner(lp_pUnit);
    lv_vLibrary = "lib860A1A1F_gf_MM";

    // Implementation
    UnitGroupAdd(lib860A1A1F_gv_mM_AmonSummonedHeroes, lp_pUnit);
    UnitBehaviorAddPlayer(lp_pUnit, "AmonHeroDuration", lv_vPlayer, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "noDevour", lv_vPlayer, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "DarkArchonMindControlPrevention", lv_vPlayer, 1);
    autoAE629783_val = UnitGetType(lp_pUnit);
    if (autoAE629783_val == "MutatorAmonArtanis") {
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2000.0, 2000.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 2);
    }
    else if (autoAE629783_val == "MutatorAmonDehaka") {
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
    }
    else if (autoAE629783_val == "MutatorAmonKarax") {
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
    }
    else if (autoAE629783_val == "MutatorAmonKerrigan") {
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 3500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 2);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 5);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyRegen, 5.0);
    }
    else if (autoAE629783_val == "MutatorAmonNova") {
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 3);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyRegen, 5.0);
    }
    else if (autoAE629783_val == "MutatorAmonRaynor") {
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
    }
    else if (autoAE629783_val == "MutatorAmonTychus") {
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
    }
    else if (autoAE629783_val == "MutatorAmonZagara") {
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
    }
    else if (autoAE629783_val == "MutatorAmonZeratul") {
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 1500.0, 1500.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
    }
    else if (autoAE629783_val == "HyperionVoidCoop") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 3000.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "Subtitle", UnitGetOwner(lp_pUnit), "");
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroHyperion_AIThink"));
    }
    else if (autoAE629783_val == "StukovAleksander") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 3000.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 6);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
    }
    else if (autoAE629783_val == "StukovApocalisk") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 4);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitBehaviorRemove(lp_pUnit, "Frenzy", 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroApocalisk_AIThink"));
    }
    else if (autoAE629783_val == "TychusOdin") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 5000.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroOdin_AIThink"));
    }
    else if (autoAE629783_val == "DehakaMurvar") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitIssueOrder(lp_pUnit, OrderSetAutoCast(AbilityCommand("MurvarCoopPuke", 0), true), c_orderQueueReplace);
        UnitIssueOrder(lp_pUnit, OrderSetAutoCast(AbilityCommand("CoopMurvarSpawnCreepers", 0), true), c_orderQueueAddToEnd);
    }
    else if (autoAE629783_val == "DehakaDakrun") {
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 5000.0, -1.0, -1.0);
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroDakrun_AIThink"));
    }
    else if (autoAE629783_val == "AlarakCoop") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 1000.0, 1000.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "OnDeathControllerDeathPrevent", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroAlarak_AIThink"));
        TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, true);
        TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, true);
        CatalogFieldValueSet(c_gameCatalogBehavior, "AlarakEmpowerCaster", "Modification.DamageTotalMultiplier[" + IntToString(c_unitDamageTypeSpell) + "]", lv_vPlayer, "1");
        CatalogFieldValueSet(c_gameCatalogBehavior, "AlarakEmpowerCaster", "Modification.DamageTotalMultiplier[" + IntToString(c_unitDamageTypeMelee) + "]", lv_vPlayer, "1");
        CatalogFieldValueSet(c_gameCatalogBehavior, "AlarakEmpowerCaster", "Modification.DamageTotalMultiplier[" + IntToString(c_unitDamageTypeRanged) + "]", lv_vPlayer, "1");
    }
    else if (autoAE629783_val == "FenixCoop") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 800.0, 800.0, 150.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroFenixPraetor_AIThink"));
        UnitIssueOrder(lp_pUnit, OrderSetAutoCast(AbilityCommand("VoidShieldCapacitor", 0), true), c_orderQueueReplace);
        UnitIssueOrder(lp_pUnit, OrderSetAutoCast(AbilityCommand("FenixWhirlwind", 0), true), c_orderQueueAddToEnd);
    }
    else if (autoAE629783_val == "FenixDragoon") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 800.0, 800.0, 100.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroFenixDragoon_AIThink"));
    }
    else if (autoAE629783_val == "FenixArbiter") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 500.0, 500.0, 200.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroFenixArbiter_AIThink"));
    }
    else if (autoAE629783_val == "TychusHERC") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroCannonball_AIThink"));
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusHercGrappleArmor", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusHercGrappleStun", 1);
        UnitBehaviorAddPlayer(lp_pUnit, "OnDeathControllerDeathPrevent", lv_vPlayer, 1);
        if ((GameGetMissionTime() >= 480.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusHercRage", 1);
        }

        if ((GameGetMissionTime() >= 900.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusHercCrit", 1);
        }

    }
    else if (autoAE629783_val == "TychusWarhound") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroSirius_AIThink"));
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusWarhoundHaywireMissiles", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusWarhoundDeathExplosion", 1);
        if ((GameGetMissionTime() >= 600.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusWarhoundTurretUpgrade", 1);
        }

    }
    else if (autoAE629783_val == "TychusSpectre") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2000.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 3);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroNux_AIThink"));
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusSpectreVisionSuit", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusSpectreSuperUltrasonicPulse", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusSpectreExtendedPulseGun", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusSpectreBrillianceAura", 1);
    }
    else if (autoAE629783_val == "TychusFirebat") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroBlaze_AIThink"));
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusFirebatPremiumPetroleum", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusFirebatBlueFlameOil", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusFirebatIncendiaryPetroleum", 1);
        if ((GameGetMissionTime() >= 900.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusFirebatShield", 1);
        }

    }
    else if (autoAE629783_val == "TychusReaper") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2000.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroSam_AIThink"));
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusReaperBombStun", 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusReaperBombU", "Amount", lv_vPlayer, "300");
        if ((GameGetMissionTime() >= 600.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusReaperEvasionBuff", 1);
        }

        if ((GameGetMissionTime() >= 900.0)) {
            TechTreeUpgradeAddLevel(lv_vPlayer, "TychusReaperBombCharges", 1);
        }

    }
    else if (autoAE629783_val == "AvatarofForm") {
        lib860A1A1F_gf_MM_DelayedActorMessage("Create MistGlaze", lp_pUnit, 2.5);
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        TechTreeUpgradeAddLevel(lv_vPlayer, "ZeratulTalentUltimatePurity", 1);
        TriggerEnable(libCOMI_gt_CM_Zeratul_Entropic_Spawner, true);
    }
    else if (autoAE629783_val == "TychusMedic") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 2500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "NikaraCDR", lv_vPlayer, 1);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroNikara_AIThink"));
        UnitBehaviorAddPlayer(lp_pUnit, "NikaraFakeWeaponControl", lv_vPlayer, 1);
        UnitWeaponAdd(lp_pUnit, "NikaraFakeWeapon", null);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusMedicAdvancedHealingSpray", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusMedicSuperHealing", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusMedicDoubleBeam", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "TychusMedicDefensiveMatrix", 1);
    }
    else if (autoAE629783_val == "DehakaGlevig") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 3500.0, -1.0, -1.0);
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, 5);
        UnitIssueOrder(lp_pUnit, OrderSetAutoCast(AbilityCommand("DehakaGlevigFirebreath", 0), true), c_orderQueueReplace);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroGlevig_AIThink"));
    }
    else if (autoAE629783_val == "SOAMothershipv4") {
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Shields");
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, 1);
        lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, 1500.0, 1500.0, -1.0);
        TechTreeUpgradeAddLevel(lv_vPlayer, "AlarakImprovedDeathFleet", 1);
        CatalogFieldValueSet(c_gameCatalogWeapon, "SOAMothershipv4Weapon", "Range", lv_vPlayer, "6");
        CatalogFieldValueSet(c_gameCatalogWeapon, "SOAMothershipv4Weapon", "MinScanRange", lv_vPlayer, "6.5");
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipv4BeamDamage", "Amount", lv_vPlayer, "20");
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackDamage", "Amount", lv_vPlayer, "10");
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroMothership_AIThink"));
    }
    else if (autoAE629783_val == "SuperGaryStetmann") {
        TechTreeUpgradeAddLevel(lv_vPlayer, "PowerFieldHPRegeneration", 1);
        TechTreeUpgradeAddLevel(lv_vPlayer, "MasteryStetmannStetzoneBonusesHPRegeneration", 1);
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, (lv_vLibrary + "_AmonHeroGary_AIThink"));
    }
    else {
    }
    lib860A1A1F_gf_MM_SetUnitMaxLifeShields(lp_pUnit, (UnitGetPropertyFixed(lp_pUnit, c_unitPropLife, c_unitPropCurrent) * libCOMI_gf_MinimumDifficultyValueCoopReal(0.5, 0.65, 0.8, 1.0, 1.0, 1.0)), (UnitGetPropertyFixed(lp_pUnit, c_unitPropShields, c_unitPropCurrent) * libCOMI_gf_MinimumDifficultyValueCoopReal(0.5, 0.65, 0.8, 1.0, 1.0, 1.0)), -1.0);
}

trigger auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_Trigger = null;
int auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_lp_pSoundIndex;

void lib860A1A1F_gf_MM_AmonHeroPlaySound (int lp_pSoundIndex) {
    auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_lp_pSoundIndex = lp_pSoundIndex;

    if (auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_Trigger == null) {
        auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_Trigger = TriggerCreate("auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_TriggerFunc");
    }

    TriggerExecute(auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_Trigger, false, false);
}

bool auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_TriggerFunc (bool testConds, bool runActions) {
    int lp_pSoundIndex = auto_lib860A1A1F_gf_MM_AmonHeroPlaySound_lp_pSoundIndex;

    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    SoundPlayForPlayer(lib860A1A1F_gv_mM_AmonHeroSoundArray[lp_pSoundIndex], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

void lib860A1A1F_gf_MM_SetHeroCustomFrames (int lp_pPlayer) {
    // Variable Declarations
    string lv_vFrame;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vFrame = "";

    // Implementation
    lv_vFrame = "Coop_UnitStatus/MutatorAmonHeroUnitShieldedStatusFrameTemplate";
    CatalogFieldValueSet(c_gameCatalogActor, "AlarakCoop", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "FenixCoop", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "FenixArbiter", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "FenixDragoon", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "SOAMothershipv4", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    lv_vFrame = "Coop_UnitStatus/MutatorAmonHeroUnitStatusFrameTemplate";
    CatalogFieldValueSet(c_gameCatalogActor, "TychusHERC", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusFirebat", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusReaper", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusWarhound", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusSpectre", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "DehakaMurvar", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "StukovApocalisk", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusMedic", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "SuperGaryStetmann", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    lv_vFrame = "MM_Templates/MutatorAmonHeroUnitStatusFrameTemplate";
    CatalogFieldValueSet(c_gameCatalogActor, "HyperionVoidCoop", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "StukovAleksander", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "TychusOdin", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    lv_vFrame = "MM_Templates/AmonHeroAvatarOfEssenceStatusFrameTemplate";
    CatalogFieldValueSet(c_gameCatalogActor, "DehakaDakrun", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "AvatarofForm", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
    CatalogFieldValueSet(c_gameCatalogActor, "DehakaGlevig", "CustomUnitStatusFrame", lp_pPlayer, lv_vFrame);
}

void lib860A1A1F_gf_MM_AmonHeroHyperion_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    fixed lv_abilityRange;
    int lv_abilityDamage;
    unitgroup lv_canidates;
    aifilter lv_targetFilter2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_canidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("HyperionVoidCoopYamatoCannon", 0))) == true) && (UnitAbilityGetCooldown(lp_aIUnit, "HyperionVoidCoopYamatoCannon", "Abil/HyperionVoidCoopYamatoGun") <= 0.0) && (UnitOrderHasAbil(lp_aIUnit, "HyperionVoidCoopYamatoCannon") == false)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "HyperionVoidCoopYamatoCannon", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HyperionVoidCoopYamatoCannonDamage", "Amount", lp_owner);
        lv_abilityDamage /= 2;
        AISetFilterLife(lv_targetFilter2, lv_abilityDamage, 524287.0);
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_targetFilter2, lv_abilityDamage, (lv_abilityDamage * 0.2));
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("HyperionVoidCoopYamatoCannon", 0), UnitGroupUnit(lv_canidates, 1)));
        return ;
    }

    if ((UnitAbilityChargeInfo(lp_aIUnit, AbilityCommand("HyperionAdvancedPDD", 0), c_unitAbilChargeCountLeft) > 0.0) && (UnitAbilityGetCooldown(lp_aIUnit, "HyperionAdvancedPDD", "Abil/HyperionAdvancedPDD") <= 0.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("HyperionAdvancedPDD", 0), PointWithOffsetPolar(UnitGetPosition(lp_aIUnit), 2.0, libNtve_gf_RandomAngle())));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroApocalisk_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_candidatesFilter, c_planeGround);
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("ApocaliskBurrowCharge", 0))) == false) || (UnitAbilityGetCooldown(lp_aIUnit, "ApocaliskBurrowCharge", "Abil/ApocaliskBurrowCharge") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "ApocaliskBurrowCharge") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ApocaliskBurrowCharge", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ApocaliskBurrowChargeTargetSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ApocaliskBurrowChargeTargetDamage", "Amount", lp_owner);
    lv_abilityDamage /= 2;
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("ApocaliskBurrowCharge", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroOdin_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_candidatesFilter, c_planeGround);
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (UnitAbilityChargeInfo(lp_aIUnit, AbilityCommand("TychusOdinBarrage", 0), c_unitAbilChargeCountLeft) == 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusOdinBarrage") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "TychusOdinBarrage", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TychusOdinBarrageSearchArea", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TychusOdinBarrageDamage", "Amount", lp_owner);
    lv_abilityDamage /= 2;
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("TychusOdinBarrage", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroDakrun_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_candidatesFilter, c_planeGround);
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (UnitAbilityGetCooldown(lp_aIUnit, "KraithCrashingCharge", "Abil/KraithCrashingCharge") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "KraithCrashingCharge") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "KraithCrashingCharge", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "DehakaDakrunCrashingChargeTargetSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "DehakaDakrunCrashingChargeDamage", "Amount", lp_owner);
    lv_abilityDamage /= 2;
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("KraithCrashingCharge", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroAlarak_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    unitgroup lv_canidates;
    aifilter lv_targetFilter2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_canidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitOrderHasAbil(lp_aIUnit, "AlarakACDeadlyCharge") == true) || (UnitOrderHasAbil(lp_aIUnit, "AlarakKnockback") == true) || (UnitOrderHasAbil(lp_aIUnit, "AlarakEmpower") == true))) {
        return ;
    }

    if ((PlayerGetCooldown(lp_owner, "Abil/AlarakKnockback") <= 0.0)) {
        lv_abilityRange = 5.0;
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "DestructionWaveDamage", "Amount", lp_owner);
        lv_abilityAoE = 3.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("AlarakKnockback", 0), lv_target));
            return ;
        }

    }

    if ((PlayerGetCooldown(lp_owner, "Abil/AlarakACDeadlyCharge") <= 0.0)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "AlarakACDeadlyCharge", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AlarakACDeadlyChargeDamage", "Amount", lp_owner);
        AISetFilterLife(lv_targetFilter2, lv_abilityDamage, 524287.0);
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_targetFilter2, lv_abilityDamage, (lv_abilityDamage * 0.2));
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) >= 1)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("AlarakACDeadlyCharge", 0), UnitGroupUnit(lv_canidates, 1)));
            return ;
        }

    }

    if ((PlayerGetCooldown(lp_owner, "Abil/AlarakEmpower") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("AlarakEmpower", 0)));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroFenixPraetor_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_candidatesFilter, c_planeGround);
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (PlayerGetCooldown(lp_owner, "Abil/FenixThunderousChargeCoop") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "FenixThunderousChargeCoop") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FenixThunderousChargeCoop", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "FenixThunderousChargeCoopDamage", "Amount", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FenixThunderousChargeCoopDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("FenixThunderousChargeCoop", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroFenixDragoon_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0) || (UnitOrderHasAbil(lp_aIUnit, "FenixDragoonAirBomb") == true) || (UnitOrderHasAbil(lp_aIUnit, "ChargedBuster") == true))) {
        return ;
    }

    if ((PlayerGetCooldown(lp_owner, "Abil/FenixChargedBuster") <= 0.0)) {
        lv_abilityRange = 6.0;
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ChargedBusterDamage", "Amount", lp_owner);
        lv_abilityAoE = 3.0;
        lv_score = 2;
        lv_canidates = UnitGroupFilter(null, c_playerAny, lv_enemiesNearby, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_target = AIBestTargetPoint(lv_canidates, 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("ChargedBuster", 0), lv_target));
            return ;
        }

    }

    if ((PlayerGetCooldown(lp_owner, "Abil/FenixDragoonAirBomb") <= 0.0)) {
        lv_abilityRange = 11.0;
        lv_abilityDamage = 100;
        lv_abilityAoE = 2.5;
        lv_score = 2;
        lv_canidates = UnitGroupFilter(null, c_playerAny, lv_enemiesNearby, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_target = AIBestTargetPoint(lv_canidates, 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("FenixDragoonAirBomb", 0), lv_target));
            return ;
        }

    }

}

void lib860A1A1F_gf_MM_AmonHeroFenixArbiter_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0) || (UnitOrderHasAbil(lp_aIUnit, "FenixArbiterStasisField") == true))) {
        return ;
    }

    if ((PlayerGetCooldown(lp_owner, "Abil/FenixArbiterStasisField") <= 0.0)) {
        lv_abilityRange = 13.0;
        lv_abilityDamage = 100;
        lv_abilityAoE = 4.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("FenixArbiterStasisField", 0), lv_target));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) > 0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("FenixArbiterCloakingField", 0)));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroCannonball_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_candidatesFilter, c_planeGround);
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (UnitAbilityGetCooldown(lp_aIUnit, "TychusHercGrapple", "Abil/TychusHercGrapple") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusHercGrapple") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "TychusOdinBarrage", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TychusOdinBarrageDamage", "Amount", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TychusOdinBarrageSearchArea", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 1, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("TychusHercGrapple", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroSirius_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitAbilityChargeInfo(lp_aIUnit, AbilityCommand("TychusWarhoundBuildAutoTurret", 0), c_unitAbilChargeCountLeft) == 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusWarhoundBuildAutoTurret") == true))) {
        return ;
    }

    libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("TychusWarhoundBuildAutoTurret", 0), PointInterpolate(UnitGetPosition(lp_aIUnit), UnitGetPosition(UnitGroupRandomUnit(lp_nearByUnits, c_unitCountAlive)), 0.4)));
    return ;
}

void lib860A1A1F_gf_MM_AmonHeroNux_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    aifilter lv_candidatesFilter;
    unitgroup lv_canidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidatesFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_candidatesFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_candidatesFilter, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    lv_canidates = AIGetFilterGroup(lv_candidatesFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_canidates, c_unitCountAlive) <= 0) || (UnitAbilityChargeInfo(lp_aIUnit, AbilityCommand("TychusSpectreUltrasonicPulse", 0), c_unitAbilChargeCountLeft) == 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusSpectreUltrasonicPulse") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "TychusSpectreUltrasonicPulse", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = 300;
    lv_abilityAoE = 2.0;
    lv_score = 1;
    lv_target = AIBestTargetPoint(lv_canidates, 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("TychusSpectreUltrasonicPulse", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroBlaze_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitAbilityGetCooldown(lp_aIUnit, "TychusFirebatOilBomb", "Abil/TychusFirebatOilBomb") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusFirebatOilBomb") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "TychusFirebatOilBomb", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = 50;
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "TychusFirebatOilBombSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_score = 1;
    lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("TychusFirebatOilBomb", 0), lv_target));
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroSam_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    unitgroup lv_canidates;
    aifilter lv_targetFilter2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_canidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitAbilityChargeInfo(lp_aIUnit, AbilityCommand("TychusReaperBomb", 0), c_unitAbilChargeCountLeft) == 0.0) || (UnitOrderHasAbil(lp_aIUnit, "TychusReaperBomb") == true))) {
        return ;
    }

    lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "TychusReaperBomb", "Range[" + IntToString(0) + "]", c_playerAny));
    lv_abilityDamage = 300.0;
    AISetFilterLife(lv_targetFilter2, 100.0, 524287.0);
    AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
    AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    AISetFilterRange(lv_targetFilter2, lp_aIUnit, lv_abilityRange);
    AISetFilterLifeSortReference(lv_targetFilter2, lv_abilityDamage, (lv_abilityDamage * 0.2));
    lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
    libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("TychusReaperBomb", 0), UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive))));
    return ;
}

void lib860A1A1F_gf_MM_AmonHeroNikara_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityGetCooldown(lp_aIUnit, "TychusMedicAoE", "Abil/TychusMedicAoE") <= 0.0) && (((UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent)) > 5.0) || (UnitAbilityGetCooldown(lp_aIUnit, "TychusMedicDefensiveMatrix", "Abil/TychusMedicDefensiveMatrix") > 0.0))) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("TychusMedicAoE", 0)));
        return ;
    }

    if (((AIUnitGetWave(lp_aIUnit) == null) || (UnitGroupCount(AIWaveGetUnits(AIUnitGetWave(lp_aIUnit)), c_unitCountAlive) <= 2))) {
        AISetUnitScriptControlled(lp_aIUnit, true);
        AISetUnitSuicide(lp_aIUnit, true);
        Wait(10.0, c_timeGame);
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroGlevig_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((AIUnitGetWave(lp_aIUnit) != null)) {
        lv_vUG = AIWaveGetUnits(AIUnitGetWave(lp_aIUnit));
    }
    else {
        lv_vUG = libNtve_gf_ConvertUnitToUnitGroup(lp_aIUnit);
    }
    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) > 1) && (UnitOrderHasAbil(lp_aIUnit, "DehakaGlevigFirebreath") == false) && (UnitOrderHasAbil(lp_aIUnit, "GlevigDeepTunnel") == false) && (UnitOrderHasAbil(lp_aIUnit, "attack") == false)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("GlevigDeepTunnel", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_vUG), -7.0, UnitGetPosition(lp_aIUnit))));
        Wait(7.0, c_timeGame);
        return ;
    }

    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 1) && (UnitOrderHasAbil(lp_aIUnit, "DehakaGlevigFirebreath") == false) && (UnitOrderHasAbil(lp_aIUnit, "GlevigDeepTunnel") == false) && (UnitOrderHasAbil(lp_aIUnit, "attack") == false)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("GlevigDeepTunnel", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_aIUnit), 12.0, libNtve_gf_PointOffsetTowardsPoint(PlayerStartLocation(1), 20.0, PlayerStartLocation(2)))));
        Wait(7.0, c_timeGame);
        return ;
    }

}

void lib860A1A1F_gf_MM_AmonHeroMothership_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;

    // Automatic Variable Declarations
    unitgroup auto1DF00EA0_g;
    int auto1DF00EA0_u;
    unit auto1DF00EA0_var;

    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    AISetFilterRange(lv_enemyNearbyFilter, lp_aIUnit, 6.0);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_aIUnit, "AlarakMothershipMassRecall", "Abil/AlarakMothershipMassRecall") <= 0.0)) {
        UnitAbilityAddCooldown(lp_aIUnit, "AlarakMothershipMassRecall", "Abil/AlarakMothershipMassRecall", 180.0);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(3, 4, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late, UnitGetPosition(lp_aIUnit), false);
        auto1DF00EA0_g = libCOMI_gf_LastCreatedCoopAttackForce();
        auto1DF00EA0_u = UnitGroupCount(auto1DF00EA0_g, c_unitCountAll);
        for (;; auto1DF00EA0_u -= 1) {
            auto1DF00EA0_var = UnitGroupUnitFromEnd(auto1DF00EA0_g, auto1DF00EA0_u);
            if (auto1DF00EA0_var == null) { break; }
            lib860A1A1F_gf_MM_WarpIn(auto1DF00EA0_var);
            AIWaveAddUnit(AIUnitGetWave(lp_aIUnit), auto1DF00EA0_var);
        }
    }

    return ;
}

void lib860A1A1F_gf_MM_AmonHeroGary_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    point lv_target;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);

    // Implementation
    if ((UnitIsAlive(lp_aIUnit) == false)) {
        return ;
    }

    if ((UnitGroupCount(UnitGroup("PowerTowerStetmann", 3, RegionCircle(UnitGetPosition(lp_aIUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent)) > 5.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("SuperGaryStetmannPowerTowerOverchargeHealth", 0), UnitGroupRandomUnit(UnitGroup("PowerTowerStetmann", 3, RegionCircle(UnitGetPosition(lp_aIUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        return ;
    }

    if (true) {
        if (((UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent)) > 5.0)) {
            libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("PowerFieldSuperGaryStetmannHealth", 0)));
            Wait(1.0, c_timeGame);
        }

    }

    if ((PlayerGetCooldown(lp_owner, "Abil/GaryOrb") <= 0.0)) {
        lv_abilityRange = 5.0;
        lv_abilityDamage = 50;
        lv_abilityAoE = 3.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("SuperGaryStetmannOrb", 0), lv_target));
            return ;
        }

    }

}

void lib860A1A1F_gf_MM_AmonHeroSpawn (unitgroup lp_pUG) {
    // Variable Declarations
    int lv_vAmonHeroIndex;
    point lv_vWaveSpawnPoint;
    int lv_vSpawnAmount;
    unitgroup lv_vUG;
    int lv_vTries;
    int lv_vPlayer;

    // Automatic Variable Declarations
    int auto5D5EE5CC_ae;
    int auto5D5EE5CC_var;
    const int autoF4842717_n = 1000;
    int autoF4842717_i;

    // Variable Initialization
    lv_vAmonHeroIndex = 12;
    lv_vSpawnAmount = FixedToInt(lib860A1A1F_gv_mM_AmonHeroPool);
    lv_vUG = lp_pUG;
    lv_vPlayer = UnitGetOwner(UnitGroupRandomUnit(lp_pUG, c_unitCountAlive));

    // Implementation
    if (((lv_vSpawnAmount <= 0) || (UnitGroupCount(lv_vUG, c_unitCountAlive) < 1))) {
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_860A1A1F_992278A8"), false);
    UnitGroupAddUnitGroup(lib860A1A1F_gv_mM_AmonHeroAttackWaveUnits, lv_vUG);
    if ((lib860A1A1F_gv_mM_AmonHeroRecentWave == false) && (lv_vSpawnAmount == 1) && (GameGetMissionTime() >= 250.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_860A1A1F_5D36A236"), false);
        lib860A1A1F_gv_mM_AmonHeroPool += 0.5;
    }

    lib860A1A1F_gv_mM_AmonHeroRecentWave = true;
    if ((GameGetMissionTime() >= 600.0)) {
        lv_vSpawnAmount = libNtve_gf_ArithmeticIntClamp(lv_vSpawnAmount, 1, 2);
    }
    else {
        lv_vSpawnAmount = 1;
    }
    lib860A1A1F_gv_mM_AmonHeroPool -= lv_vSpawnAmount;
    lib860A1A1F_gv_mM_AmonHeroTotalHeroSpawned += lv_vSpawnAmount;
    lib860A1A1F_gf_MM_CheckPrimalPackLeaderLairs(lv_vPlayer);
    lib860A1A1F_gf_MM_WaitForUnload(lp_pUG);
    auto5D5EE5CC_ae = lv_vSpawnAmount;
    auto5D5EE5CC_var = 1;
    for ( ; auto5D5EE5CC_var <= auto5D5EE5CC_ae; auto5D5EE5CC_var += 1 ) {
        for (autoF4842717_i = 1; autoF4842717_i <= autoF4842717_n; autoF4842717_i += 1) {
            lv_vTries += 1;
            if ((GameGetMissionTime() >= 780.0)) {
                lv_vAmonHeroIndex = RandomInt(3, lib860A1A1F_gv_mM_AmonHeroMaxNumber);
            }
            else if ((GameGetMissionTime() >= 300.0)) {
                lv_vAmonHeroIndex = RandomInt(3, 12);
            }
            else if (true) {
                lv_vAmonHeroIndex = RandomInt(1, 2);
            }
            if (((lib860A1A1F_gv_mM_AmonHeroUsed[lv_vAmonHeroIndex] == false) || (lv_vTries > 200))) {
                lib860A1A1F_gv_mM_AmonHeroUsed[lv_vAmonHeroIndex] = true;
                lv_vWaveSpawnPoint = UnitGroupCenterOfGroup(lv_vUG);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[lv_vAmonHeroIndex], 0, lv_vPlayer, lv_vWaveSpawnPoint);
                TextExpressionSetToken("Param/Expression/lib_860A1A1F_F9A091AD", "A", UnitGetName(UnitLastCreated()));
                TextExpressionSetToken("Param/Expression/lib_860A1A1F_F9A091AD", "B", StringToText(libA8FDA37D_gf_UT_PointXYToString(lv_vWaveSpawnPoint, ",", 1)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_860A1A1F_F9A091AD"), false);
                lib860A1A1F_gf_MM_HeroSetUp(UnitLastCreated());
                lib860A1A1F_gf_MM_AddToAttackWave_Check(UnitLastCreated(), lv_vUG);
                lib860A1A1F_gf_MM_AmonHeroPlaySound(lv_vAmonHeroIndex);
                lib860A1A1F_gf_MM_WarpIn(UnitLastCreated());
                AISetUnitScriptControlled(UnitLastCreated(), false);
                break;
            }

        }
    }
    Wait(10.0, c_timeAI);
    lib860A1A1F_gv_mM_AmonHeroRecentWave = false;
}

void lib860A1A1F_gf_MM_ShapeshiftedUnit_Dies (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Shapeshifters)] == false) || (UnitGroupHasUnit(lib860A1A1F_gv_mM_ShapeshiftedUnits, lp_pUnit) == false) || (UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_Shapeshifter_CustomValue) < 1))) {
        return ;
    }

    UnitCreate(1, "Shapeshifter", 0, UnitGetOwner(lp_pUnit), UnitGetPosition(lp_pUnit), UnitGetFacing(lp_pUnit));
    libCOMU_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetCustomValue(lp_pUnit, lib860A1A1F_gv_mM_Shapeshifter_CustomValue));
}

void lib860A1A1F_gf_MM_ApplyShapeshifterPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((UnitGetType(lp_createdUnit) != "Shapeshifter"))) {
        return ;
    }

    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "PingCircle", ColorWithAlpha(54.90, 10.20, 100.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.25);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_860A1A1F_116B8898"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libHots_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void lib860A1A1F_gf_MM_ApplyShapeshifterPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if ((UnitGetType(lp_killedUnit) != "Shapeshifter")) {
        return ;
    }

    lv_storedPing = libHots_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

void lib860A1A1F_gf_MM_Shapeshifter_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_vCanidates;
    aifilter lv_targetFilter2;
    unit lv_vTargetUnit;

    // Automatic Variable Declarations
    int auto5812D5AC_ae;
    int auto5812D5AC_var;

    // Variable Initialization
    lv_vCanidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitOrderHasAbil(lp_aIUnit, "Shapeshift") == true))) {
        return ;
    }

    AISetFilterRange(lv_targetFilter2, lp_aIUnit, 9.0);
    AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
    AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
    lv_vCanidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
    if ((RandomInt(0, 100) >= 50) && (UnitGroupCount(lv_vCanidates, c_unitCountAlive) >= 1)) {
        lv_vTargetUnit = UnitGroupRandomUnit(lv_vCanidates, c_unitCountAlive);
        if ((UnitWeaponCount(lv_vTargetUnit) >= 1)) {
            lib860A1A1F_gf_MM_Shapeshift_Use(lp_aIUnit, lv_vTargetUnit);
            return ;
        }

    }

    AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
    AISetFilterLifeSortReference(lv_targetFilter2, 500.0, 150.0);
    lv_vCanidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
    auto5812D5AC_ae = UnitGroupCount(lv_vCanidates, c_unitCountAlive);
    auto5812D5AC_var = 1;
    for ( ; auto5812D5AC_var <= auto5812D5AC_ae; auto5812D5AC_var += 1 ) {
        lv_vTargetUnit = UnitGroupUnit(lv_vCanidates, auto5812D5AC_var);
        if ((UnitWeaponCount(lv_vTargetUnit) >= 1) && (UnitGetPropertyFixed(lv_vTargetUnit, c_unitPropVitalityMax, c_unitPropCurrent) >= 100.0)) {
            lib860A1A1F_gf_MM_Shapeshift_Use(lp_aIUnit, lv_vTargetUnit);
            return ;
        }

    }
}

void lib860A1A1F_gf_MM_Shapeshift_Use (unit lp_pShapeshifter, unit lp_pTargetUnit) {
    // Variable Declarations
    fixed lv_vShapeshifterLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateActorAtPoint("NecronomiconRessurect", UnitGetPosition(lp_pShapeshifter));
    Wait(1.0, c_timeAI);
    if (((UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent) < 10.0) || (UnitFilterMatch(lp_pShapeshifter, 3, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32)))) == false) || (UnitIsAlive(lp_pTargetUnit) == false))) {
        return ;
    }

    if (((UnitGetType(lp_pTargetUnit) == "DehakaMurvar") || (UnitGetType(lp_pTargetUnit) == "DehakaGlevig") || (UnitGetType(lp_pTargetUnit) == "DehakaDakrun"))) {
        lib860A1A1F_gf_MM_CheckPrimalPackLeaderLairs(lib860A1A1F_gv_mM_PX_PlayerX);
    }

    UnitCreate(1, UnitGetType(lp_pTargetUnit), 0, lib860A1A1F_gv_mM_PX_PlayerX, UnitGetPosition(lp_pTargetUnit), UnitGetFacing(lp_pTargetUnit));
    libCOMU_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "DarkArchonMindControlPrevention", lib860A1A1F_gv_mM_PX_PlayerX, 1);
    UnitSetPosition(UnitLastCreated(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pShapeshifter), -1.0, UnitGetPosition(lp_pTargetUnit)), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", 3, 1);
    SoundPlayAtPointForPlayer(SoundLink("Changeling_Disguise", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    lib860A1A1F_gf_MM_CopyBeneficialBehaviors(lp_pTargetUnit, UnitLastCreated());
    lv_vShapeshifterLife = UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (2*lv_vShapeshifterLife));
    lv_vShapeshifterLife -= UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLife, c_unitPropCurrent);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, lv_vShapeshifterLife);
    UnitSetCustomValue(UnitLastCreated(), lib860A1A1F_gv_mM_Shapeshifter_CustomValue, (UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent) - UnitGetPropertyFixed(UnitLastCreated(), c_unitPropVitality, c_unitPropCurrent)));
    UnitGroupAdd(lib860A1A1F_gv_mM_ShapeshiftedUnits, UnitLastCreated());
    lib860A1A1F_gf_MM_UnitCreationManual(UnitLastCreated());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create ShapeshifterGooTrail2");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
    UnitRemove(lp_pShapeshifter);
    AISetUnitSuicide(UnitLastCreated(), true);
}

void lib860A1A1F_gf_MM_ShapeshifterSwapModel (unit lp_pShapeshifter) {
    // Automatic Variable Declarations
    string autoA2500FF0_val;
    int auto7C7B1D67_val;
    int autoF26EFABD_val;
    int auto344CF92C_val;

    // Implementation
    autoA2500FF0_val = PlayerRace(3);
    if (autoA2500FF0_val == "Zerg") {
        autoF26EFABD_val = RandomInt(1, 3);
        if (autoF26EFABD_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "ZerglingXPR", 0, "");
        }
        else if (autoF26EFABD_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Hydralisk", 0, "");
        }
        else if (autoF26EFABD_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "InfestedAbomination", 0, "");
        }
        else {
        }
    }
    else if (autoA2500FF0_val == "Terr") {
        auto344CF92C_val = RandomInt(1, 3);
        if (auto344CF92C_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "HellionTank", 0, "");
        }
        else if (auto344CF92C_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Goliath", 0, "");
        }
        else if (auto344CF92C_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "SiegeTank", 0, "");
        }
        else {
        }
    }
    else {
        auto7C7B1D67_val = RandomInt(1, 3);
        if (auto7C7B1D67_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Stalker_Ihanrii", 0, "");
        }
        else if (auto7C7B1D67_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Immortal", 0, "");
        }
        else if (auto7C7B1D67_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Archon", 0, "");
        }
        else {
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_InitPlayerX
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PX_InitPlayerX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;
    int lv_vA;

    // Automatic Variable Declarations
    const int auto1960E059_ae = 5;
    const int auto1960E059_ai = -1;
    playergroup auto2BEB1119_g;
    int auto2BEB1119_var;
    playergroup auto098B896F_g;
    int auto098B896F_var;
    int auto54C663BD_catalog;
    int auto54C663BD_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerType(lib860A1A1F_gv_mM_PX_PlayerX) != c_playerTypeNone)) {
        lv_vA = 13;
        for ( ; ( (auto1960E059_ai >= 0 && lv_vA <= auto1960E059_ae) || (auto1960E059_ai < 0 && lv_vA >= auto1960E059_ae) ) ; lv_vA += auto1960E059_ai ) {
            if ((PlayerType(lv_vA) == c_playerTypeNone)) {
                lib860A1A1F_gv_mM_PX_PlayerX = lv_vA;
                libCOMI_gv_mM_PlayerX = lv_vA;
                break;
            }

        }
    }

    AICampaignStart(lib860A1A1F_gv_mM_PX_PlayerX);
    PlayerSetColorIndex(lib860A1A1F_gv_mM_PX_PlayerX, 7, true);
    TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, "overlordspeed", 1);
    auto2BEB1119_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto2BEB1119_var = -1;
    while (true) {
        auto2BEB1119_var = PlayerGroupNextPlayer(auto2BEB1119_g, auto2BEB1119_var);
        if (auto2BEB1119_var < 0) { break; }
        libNtve_gf_SetAlliance(lib860A1A1F_gv_mM_PX_PlayerX, auto2BEB1119_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    auto098B896F_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
    auto098B896F_var = -1;
    while (true) {
        auto098B896F_var = PlayerGroupNextPlayer(auto098B896F_g, auto098B896F_var);
        if (auto098B896F_var < 0) { break; }
        libNtve_gf_SetAlliance(lib860A1A1F_gv_mM_PX_PlayerX, auto098B896F_var, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(lib860A1A1F_gv_mM_PX_PlayerX, 1, libNtve_ge_AllianceSetting_Enemy);
    TriggerEnable(lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX, true);
    auto54C663BD_catalog = c_gameCatalogUpgrade;
    auto54C663BD_i = 1;
    for ( ; auto54C663BD_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto54C663BD_i += 1 ) {
        lv_vUpgrade = CatalogEntryGet(auto54C663BD_catalog, auto54C663BD_i);
        if ((lv_vUpgrade != "Player0102") && ((TechTreeUpgradeCount(1, lv_vUpgrade, c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(2, lv_vUpgrade, c_techCountCompleteOnly) >= 1))) {
            if ((TechTreeUpgradeCount(1, lv_vUpgrade, c_techCountCompleteOnly) >= TechTreeUpgradeCount(2, lv_vUpgrade, c_techCountCompleteOnly))) {
                TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, lv_vUpgrade, TechTreeUpgradeCount(1, lv_vUpgrade, c_techCountCompleteOnly));
            }
            else {
                TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, lv_vUpgrade, TechTreeUpgradeCount(2, lv_vUpgrade, c_techCountCompleteOnly));
            }
        }

    }
    Wait(0.0, c_timeGame);
    if ((libCOMU_gf_MutatorIsEnabled("JustDie") == true)) {
        TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, "MutatorJustDie", 1);
    }

    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitDeathFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitDamageFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_LongRangeFix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PX_InitPlayerX_Init () {
    lib860A1A1F_gt_MM_PX_InitPlayerX = TriggerCreate("lib860A1A1F_gt_MM_PX_InitPlayerX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UpgradeParityPlayerX
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeLevelDelta() >= 1))) {
            return false;
        }

        if (!(((EventPlayer() == 1) || (EventPlayer() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    TechTreeUpgradeAddLevel(lib860A1A1F_gv_mM_PX_PlayerX, EventUpgradeName(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX_Init () {
    lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX = TriggerCreate("lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX_Func");
    TriggerEnable(lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX, false);
    TriggerAddEventUpgradeLevelChanged(lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDeathFix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PX_UnitDeathFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_KillingPlayer() == lib860A1A1F_gv_mM_PX_PlayerX) || (EventPlayer() == lib860A1A1F_gv_mM_PX_PlayerX)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DisruptorPhased"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AdeptPhaseShift"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "TerranDropPod"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPodLarge"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPod"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPodCreep"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_KillingPlayer() == lib860A1A1F_gv_mM_PX_PlayerX)) {
        lib860A1A1F_gf_MM_ApplyEvolve(libNtve_gf_KillingUnit(), EventUnit());
    }
    else {
        if ((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false)) {
            lib860A1A1F_gf_MM_ApplySpawnBroodling(EventUnit());
            lib860A1A1F_gf_MM_ApplySpawnInfested(EventUnit());
        }

        lib860A1A1F_gf_MM_ApplyDeathAOE(EventUnit());
        lib860A1A1F_gf_MM_ApplyAvenger(EventUnit());
        lib860A1A1F_gf_MM_ApplyDeathFire(EventUnit());
        lib860A1A1F_gf_MM_ApplyFireworks(EventUnit());
        lib860A1A1F_gf_MM_ApplyDeathPull(EventUnit());
        lib860A1A1F_gf_MM_ApplyMomentOfSilence(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PX_UnitDeathFix_Init () {
    lib860A1A1F_gt_MM_PX_UnitDeathFix = TriggerCreate("lib860A1A1F_gt_MM_PX_UnitDeathFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitDeathFix, false);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_PX_UnitDeathFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitCreationFix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PX_UnitCreationFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == lib860A1A1F_gv_mM_PX_PlayerX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyPermaCloak(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyUnitSpeed(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyAllSpellsEnergy(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyPolarity(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyPlague(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyHardenedWill(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyInspiration(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PX_UnitCreationFix_Init () {
    lib860A1A1F_gt_MM_PX_UnitCreationFix = TriggerCreate("lib860A1A1F_gt_MM_PX_UnitCreationFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitCreationFix, false);
    TriggerAddEventUnitCreated(lib860A1A1F_gt_MM_PX_UnitCreationFix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDamageFix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PX_UnitDamageFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitDamageSourcePlayer() == lib860A1A1F_gv_mM_PX_PlayerX) || (EventPlayer() == lib860A1A1F_gv_mM_PX_PlayerX)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageSourcePlayer() == lib860A1A1F_gv_mM_PX_PlayerX)) {
        lib860A1A1F_gf_MM_ApplyConcussiveAttacks(EventUnit(), EventUnitDamageSourceUnit());
        lib860A1A1F_gf_MM_ApplyLifeLeech(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
        if ((RandomInt(0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 400, 300, 200, 0, 0)) <= FixedToInt(EventUnitDamageAmount()))) {
            lib860A1A1F_gf_MM_ApplyEvolve(EventUnitDamageSourceUnit(), EventUnit());
        }

    }

    if ((EventPlayer() == lib860A1A1F_gv_mM_PX_PlayerX)) {
        lib860A1A1F_gf_MM_ApplyBarrier(EventUnit(), EventUnitDamageSourceUnit());
        lib860A1A1F_gf_MM_ApplySideStep(EventUnit(), EventUnitDamageSourceUnit());
        lib860A1A1F_gf_CT_ApplyDamageBounce2(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PX_UnitDamageFix_Init () {
    lib860A1A1F_gt_MM_PX_UnitDamageFix = TriggerCreate("lib860A1A1F_gt_MM_PX_UnitDamageFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_PX_UnitDamageFix, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_PX_UnitDamageFix, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_LongRangeFix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_LongRangeFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_stringUnitID;
    string lv_stringWeapon;
    fixed lv_sightRange;
    fixed lv_weaponRange;
    int lv_i;
    int lv_k;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int autoABFD9C97_ae;
    const int autoABFD9C97_ai = 1;
    int auto79BA1795_ae;
    const int auto79BA1795_ai = 1;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_stringWeapon = "";

    // Conditions
    if (testConds) {
        if (!((libCOMU_gf_MutatorIsEnabled("LongRange") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoABFD9C97_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; ( (autoABFD9C97_ai >= 0 && lv_i <= autoABFD9C97_ae) || (autoABFD9C97_ai < 0 && lv_i >= autoABFD9C97_ae) ) ; lv_i += autoABFD9C97_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_i));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) + 3.0);
        if ((lv_sightRange > 32.0)) {
            lv_sightRange = 32.0;
        }

        CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lib860A1A1F_gv_mM_PX_PlayerX, FixedToString(lv_sightRange, 2));
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) > 0)) {
            auto79BA1795_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) - 1);
            lv_k = 0;
            for ( ; ( (auto79BA1795_ai >= 0 && lv_k <= auto79BA1795_ae) || (auto79BA1795_ai < 0 && lv_k >= auto79BA1795_ae) ) ; lv_k += auto79BA1795_ai ) {
                lv_stringWeapon = CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray[" + IntToString(lv_k) + "].Link", 0);
                if ((lv_stringWeapon != "")) {
                    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lv_stringWeapon) == true)) {
                        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Options[" + IntToString(2) + "]", 0)) == 0)) {
                            lv_weaponRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Range", 0)) + 3.0);
                            if ((lv_weaponRange > 499.0)) {
                                lv_weaponRange = 499.0;
                            }

                            CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "Range", lib860A1A1F_gv_mM_PX_PlayerX, FixedToString(lv_weaponRange, 2));
                            CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "MinScanRange", lib860A1A1F_gv_mM_PX_PlayerX, FixedToString((lv_weaponRange + 0.5), 2));
                        }

                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_LongRangeFix_Init () {
    lib860A1A1F_gt_MM_LongRangeFix = TriggerCreate("lib860A1A1F_gt_MM_LongRangeFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_LongRangeFix, false);
    TriggerAddEventUpgradeLevelChanged(lib860A1A1F_gt_MM_LongRangeFix, 1);
    TriggerAddEventUpgradeLevelChanged(lib860A1A1F_gt_MM_LongRangeFix, 2);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_LongRangeFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GiftShrunkEffectOn Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GiftShrunkEffectOnFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.7, c_timeGame);
    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GiftShrunkEffectOnFix_Init () {
    lib860A1A1F_gt_MM_GiftShrunkEffectOnFix = TriggerCreate("lib860A1A1F_gt_MM_GiftShrunkEffectOnFix_Func");
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_GiftShrunkEffectOnFix, null, "MutatorShrunk", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GiftShrunkEffectOff Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GiftShrunkEffectOffFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.7, c_timeGame);
    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GiftShrunkEffectOffFix_Init () {
    lib860A1A1F_gt_MM_GiftShrunkEffectOffFix = TriggerCreate("lib860A1A1F_gt_MM_GiftShrunkEffectOffFix_Func");
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_GiftShrunkEffectOffFix, null, "MutatorShrunk", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Avenger Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AvengerFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AvengerFix_Init () {
    lib860A1A1F_gt_MM_AvengerFix = TriggerCreate("lib860A1A1F_gt_MM_AvengerFix_Func");
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_AvengerFix, null, "MutatorAvenger", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_AvengerFix, null, "MutatorAvenger", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AbathurChosen
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AbathurChosen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeLevelDelta() == 1))) {
            return false;
        }

        if (!((EventUpgradeName() == "AbathurCommander"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib860A1A1F_gt_MM_BiomassSizeUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AbathurChosen_Init () {
    lib860A1A1F_gt_MM_AbathurChosen = TriggerCreate("lib860A1A1F_gt_MM_AbathurChosen_Func");
    TriggerAddEventUpgradeLevelChanged(lib860A1A1F_gt_MM_AbathurChosen, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_BiomassSizeUpdate
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_BiomassSizeUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTotal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libA8FDA37D_gf_ActiveCommanderForPlayer3(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_BiomassSizeUpdate_Init () {
    lib860A1A1F_gt_MM_BiomassSizeUpdate = TriggerCreate("lib860A1A1F_gt_MM_BiomassSizeUpdate_Func");
    TriggerEnable(lib860A1A1F_gt_MM_BiomassSizeUpdate, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BiomassSizeUpdate, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BiomassSizeUpdate, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BiomassSizeUpdate, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Ultralisk Size Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UltraliskSizeFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UltraliskSizeFix_Init () {
    lib860A1A1F_gt_MM_UltraliskSizeFix = TriggerCreate("lib860A1A1F_gt_MM_UltraliskSizeFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UltraliskSizeFix, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_UltraliskSizeFix, null, "TorrasqueTimerBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Random Mutator Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_RandomMutatorFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vRandomEnabled;

    // Automatic Variable Declarations
    int auto241F2348_ae;
    int auto241F2348_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMU_gf_MutatorIsEnabled("Random") == true)) {
        libCOMU_gf_EnableDisableMutator(false, "Random");
        lv_vRandomEnabled = true;
    }

    Wait(2.0, c_timeGame);
    if ((lib860A1A1F_gv_mM_RandomMutatorCount >= 1)) {
        auto241F2348_ae = lib860A1A1F_gv_mM_RandomMutatorCount;
        auto241F2348_var = 1;
        for ( ; auto241F2348_var <= auto241F2348_ae; auto241F2348_var += 1 ) {
            lib860A1A1F_gf_MM_EnableMutator(lib860A1A1F_gf_MM_RandomUnusedCustomMutator(), false, true, 0);
        }
        return true;
    }

    if ((lv_vRandomEnabled == true)) {
        lib860A1A1F_gf_MM_EnableMutator(lib860A1A1F_gf_MM_RandomUnusedCustomMutator(), false, true, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_RandomMutatorFix_Init () {
    lib860A1A1F_gt_MM_RandomMutatorFix = TriggerCreate("lib860A1A1F_gt_MM_RandomMutatorFix_Func");
    libCOUI_gf_CU_CommanderClosed(lib860A1A1F_gt_MM_RandomMutatorFix);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_RandomMutator
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_RandomMutator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vX;

    // Automatic Variable Declarations
    int autoFBDD858E_ae;
    int autoFBDD858E_var;

    // Variable Initialization
    lv_vX = StringToInt(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        TextExpressionSetToken("Param/Expression/lib_860A1A1F_55521E8C", "A", IntToText(lv_vX));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_860A1A1F_55521E8C"));
        lib860A1A1F_gv_mM_RandomMutatorCount = lv_vX;
    }
    else {
        if ((lv_vX >= 1)) {
            autoFBDD858E_ae = StringToInt(StringWord(EventChatMessage(false), 2));
            autoFBDD858E_var = 1;
            for ( ; autoFBDD858E_var <= autoFBDD858E_ae; autoFBDD858E_var += 1 ) {
                lib860A1A1F_gf_MM_EnableMutator(lib860A1A1F_gf_MM_RandomUnusedCustomMutator(), true, true, 0);
                Wait(1.5, c_timeGame);
            }
        }
        else {
            lib860A1A1F_gf_MM_EnableMutator(lib860A1A1F_gf_MM_RandomUnusedCustomMutator(), true, true, 0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_RandomMutator_Init () {
    lib860A1A1F_gt_MM_RandomMutator = TriggerCreate("lib860A1A1F_gt_MM_RandomMutator_Func");
    TriggerAddEventChatMessage(lib860A1A1F_gt_MM_RandomMutator, c_playerAny, "-randommut", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDamage Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitDamageFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyRepulsiveField(EventUnitDamageSourceUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitDamageFix_Init () {
    lib860A1A1F_gt_MM_UnitDamageFix = TriggerCreate("lib860A1A1F_gt_MM_UnitDamageFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitDamageFix, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_UnitDamageFix, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDies Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitDiesFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "DisruptorPhased"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AdeptPhaseShift"))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyNecronomicon(EventUnit(), libNtve_gf_KillingPlayer());
    lib860A1A1F_gf_MM_ApplyMatryoshka(EventUnit(), libNtve_gf_KillingPlayer());
    lib860A1A1F_gf_MM_ApplyNuclearMines(EventUnit());
    lib860A1A1F_gf_MM_ApplyIcollectIchange(libNtve_gf_KillingUnit(), EventUnit());
    lib860A1A1F_gf_MM_DeathInTheMist(EventUnit(), libNtve_gf_KillingUnit());
    lib860A1A1F_gf_MM_ShapeshiftedUnit_Dies(EventUnit());
    lib860A1A1F_gf_MM_ApplyShapeshifterPingCleanup(EventUnit());
    libA8FDA37D_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitDiesFix_Init () {
    lib860A1A1F_gt_MM_UnitDiesFix = TriggerCreate("lib860A1A1F_gt_MM_UnitDiesFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, false);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_UnitDiesFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitCreation Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitCreationFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyLevelPlayingField(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyEndurance(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplySupremeCommander(EventUnitCreatedUnit());
    lib860A1A1F_gf_MM_ApplyBloodlust(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitCreationFix_Init () {
    lib860A1A1F_gt_MM_UnitCreationFix = TriggerCreate("lib860A1A1F_gt_MM_UnitCreationFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, false);
    TriggerAddEventUnitCreated(lib860A1A1F_gt_MM_UnitCreationFix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRevived Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitRevivedFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyLevelPlayingField(EventUnit());
    lib860A1A1F_gf_MM_ApplyEndurance(EventUnit());
    lib860A1A1F_gf_MM_ApplySupremeCommander(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitRevivedFix_Init () {
    lib860A1A1F_gt_MM_UnitRevivedFix = TriggerCreate("lib860A1A1F_gt_MM_UnitRevivedFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitRevivedFix, false);
    TriggerAddEventUnitRevive(lib860A1A1F_gt_MM_UnitRevivedFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRemoved Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitRemovedFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gf_MM_ApplyShapeshifterPingCleanup(EventUnit());
    libA8FDA37D_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitRemovedFix_Init () {
    lib860A1A1F_gt_MM_UnitRemovedFix = TriggerCreate("lib860A1A1F_gt_MM_UnitRemovedFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitRemovedFix, false);
    TriggerAddEventUnitRemoved(lib860A1A1F_gt_MM_UnitRemovedFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitChangesOwner
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_UnitChangesOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitOwnerNew() == 1) || (EventUnitOwnerNew() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "Bloodlust", 1, 1);
    UnitBehaviorRemovePlayer(EventUnit(), "Bloodlust2", 1, 1);
    UnitBehaviorRemovePlayer(EventUnit(), "Bloodlust3", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_UnitChangesOwner_Init () {
    lib860A1A1F_gt_MM_UnitChangesOwner = TriggerCreate("lib860A1A1F_gt_MM_UnitChangesOwner_Func");
    TriggerEnable(lib860A1A1F_gt_MM_UnitChangesOwner, false);
    TriggerAddEventUnitChangeOwner(lib860A1A1F_gt_MM_UnitChangesOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_CustomMutatorInit
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_CustomMutatorInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vCommander;

    // Automatic Variable Declarations
    playergroup autoA80995EE_g;
    int autoA80995EE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOMU_gf_CT_RegisterMutator("OldTimes", lib860A1A1F_gt_MM_InitializeOldTimes, lib860A1A1F_gt_MM_ShutdownOldTimes);
    libCOMU_gf_CT_RegisterMutator("Endurance", lib860A1A1F_gt_MM_InitializeEndurance, lib860A1A1F_gt_MM_ShutdownEndurance);
    libCOMU_gf_CT_RegisterMutator("RipFieldGenerators", lib860A1A1F_gt_MM_InitializeRipFieldGenerators, lib860A1A1F_gt_MM_ShutdownRipFieldGenerators);
    libCOMU_gf_CT_RegisterMutator("LevelPlayingField", lib860A1A1F_gt_MM_InitializeLevelPlayingField, lib860A1A1F_gt_MM_ShutdownLevelPlayingField);
    libCOMU_gf_CT_RegisterMutator("Bloodlust", lib860A1A1F_gt_MM_InitializeBloodlust, lib860A1A1F_gt_MM_ShutdownBloodlust);
    libCOMU_gf_CT_RegisterMutator("NuclearMines", lib860A1A1F_gt_MM_InitializeNuclearMines, lib860A1A1F_gt_MM_ShutdownNuclearMines);
    libCOMU_gf_CT_RegisterMutator("GreatWall", lib860A1A1F_gt_MM_InitializeGreatWall, lib860A1A1F_gt_MM_ShutdownGreatWall);
    libCOMU_gf_CT_RegisterMutator("SupremeCommander", lib860A1A1F_gt_MM_InitializeSupremeCommander, lib860A1A1F_gt_MM_ShutdownSupremeCommander);
    libCOMU_gf_CT_RegisterMutator("Matryoshka", lib860A1A1F_gt_MM_InitializeMatryoshka, lib860A1A1F_gt_MM_ShutdownMatryoshka);
    libCOMU_gf_CT_RegisterMutator("InfestationStation", lib860A1A1F_gt_MM_InitializeInfestationStation, lib860A1A1F_gt_MM_ShutdownInfestationStation);
    libCOMU_gf_CT_RegisterMutator("Necronomicon", lib860A1A1F_gt_MM_InitializeNecronomicon, lib860A1A1F_gt_MM_ShutdownNecronomicon);
    libCOMU_gf_CT_RegisterMutator("DarkMirror", lib860A1A1F_gt_MM_InitializeDarkMirror, lib860A1A1F_gt_MM_ShutdownDarkMirror);
    libCOMU_gf_CT_RegisterMutator("RepulsiveField", lib860A1A1F_gt_MM_InitializeRepulsiveField, lib860A1A1F_gt_MM_ShutdownRepulsiveField);
    libCOMU_gf_CT_RegisterMutator("ICollectIChange", lib860A1A1F_gt_MM_InitializeIcollectIchange, lib860A1A1F_gt_MM_ShutdownICollectIChange);
    libCOMU_gf_CT_RegisterMutator("Mothership", lib860A1A1F_gt_MM_InitializeMothership, lib860A1A1F_gt_MM_ShutdownMothership);
    libCOMU_gf_CT_RegisterMutator("TheMist", lib860A1A1F_gt_MM_InitializeTheMist, lib860A1A1F_gt_MM_ShutdownMist);
    libCOMU_gf_CT_RegisterMutator("TheUsualSuspects", lib860A1A1F_gt_MM_InitializeTheUsualSuspects, lib860A1A1F_gt_MM_ShutdownTheUsualSuspects);
    libCOMU_gf_CT_RegisterMutator("Shapeshifters", lib860A1A1F_gt_MM_InitializeShapeshifters, lib860A1A1F_gt_MM_ShutdownShapeshifters);
    libCOMU_gf_CT_RegisterMutator("HeroesfromtheStormOld", lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld, lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld);
    autoA80995EE_g = PlayerGroupAll();
    autoA80995EE_var = -1;
    while (true) {
        autoA80995EE_var = PlayerGroupNextPlayer(autoA80995EE_g, autoA80995EE_var);
        if (autoA80995EE_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoA80995EE_var, "ConstructingEnabled", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_CustomMutatorInit_Init () {
    lib860A1A1F_gt_MM_CustomMutatorInit = TriggerCreate("lib860A1A1F_gt_MM_CustomMutatorInit_Func");
    TriggerAddEventMapInit(lib860A1A1F_gt_MM_CustomMutatorInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeOldTimes
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeOldTimes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vA;

    // Automatic Variable Declarations
    const int auto0AF164E4_ae = 23;
    const int auto0AF164E4_ai = 1;
    const int autoD9E720DE_ae = 5;
    const int autoD9E720DE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lib860A1A1F_gv_mM_OT_PlayerGroup, 1);
    PlayerGroupAdd(lib860A1A1F_gv_mM_OT_PlayerGroup, 2);
    TriggerEnable(lib860A1A1F_gt_MM_OT_SelectionLimitations, true);
    TriggerEnable(lib860A1A1F_gt_MM_OT_AntiSmartCast, true);
    TriggerEnable(lib860A1A1F_gt_MM_OT_WorkerCreated, true);
    TriggerEnable(lib860A1A1F_gt_MM_OT_NoBuildQueue, true);
    TriggerEnable(lib860A1A1F_gt_MM_OT_RallyFix, true);
    TriggerExecute(lib860A1A1F_gt_MM_OT_StructureHotkeyCheck, true, false);
    TriggerExecute(lib860A1A1F_gt_MM_OT_WorkerBuildCheck, true, false);
    TriggerExecute(lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop, true, false);
    lv_vA = 12;
    for ( ; ( (auto0AF164E4_ai >= 0 && lv_vA <= auto0AF164E4_ae) || (auto0AF164E4_ai < 0 && lv_vA >= auto0AF164E4_ae) ) ; lv_vA += auto0AF164E4_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame0/GroupUnitButton" + IntToString(lv_vA));
        DialogControlFadeTransparency(DialogControlLastCreated(), lib860A1A1F_gv_mM_OT_PlayerGroup, 0.0, 100.0);
    }
    lv_vA = 0;
    for ( ; ( (autoD9E720DE_ai >= 0 && lv_vA <= autoD9E720DE_ae) || (autoD9E720DE_ai < 0 && lv_vA >= autoD9E720DE_ae) ) ; lv_vA += autoD9E720DE_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageButton" + IntToString(lv_vA));
        DialogControlFadeTransparency(DialogControlLastCreated(), lib860A1A1F_gv_mM_OT_PlayerGroup, 0.0, 100.0);
    }
    UISetFrameVisible(lib860A1A1F_gv_mM_OT_PlayerGroup, c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(lib860A1A1F_gv_mM_OT_PlayerGroup, c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(lib860A1A1F_gv_mM_OT_PlayerGroup, c_syncFrameTypePylonButton, false);
    Wait(4.0, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), lib860A1A1F_gv_mM_OT_PlayerGroup, "MMBW_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeOldTimes_Init () {
    lib860A1A1F_gt_MM_InitializeOldTimes = TriggerCreate("lib860A1A1F_gt_MM_InitializeOldTimes_Func");
    TriggerEnable(lib860A1A1F_gt_MM_InitializeOldTimes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Initial Worker automine Stop
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD19A4339_n = 4;
    int autoD19A4339_i;
    playergroup autoCC92C56E_g;
    int autoCC92C56E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoD19A4339_i = 1; autoD19A4339_i <= autoD19A4339_n; autoD19A4339_i += 1) {
        Wait(0.5, c_timeGame);
        autoCC92C56E_g = lib860A1A1F_gv_mM_OT_PlayerGroup;
        autoCC92C56E_var = -1;
        while (true) {
            autoCC92C56E_var = PlayerGroupNextPlayer(autoCC92C56E_g, autoCC92C56E_var);
            if (autoCC92C56E_var < 0) { break; }
            UnitGroupIssueOrder(UnitGroup(null, autoCC92C56E_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop_Init () {
    lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop = TriggerCreate("lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Selection Limitations
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_SelectionLimitations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;
    unitgroup lv_vNewUG;

    // Automatic Variable Declarations
    const int auto7843C106_ae = 12;
    int auto7843C106_var;
    unitgroup auto8789455B_g;
    int auto8789455B_u;
    unit auto8789455B_var;

    // Variable Initialization
    lv_vUG = UnitGroupSelected(EventPlayer());
    lv_vNewUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib860A1A1F_gv_mM_OT_PlayerGroup, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(lv_vUG, c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) > 12)) {
        UnitGroupSelect(lv_vUG, EventPlayer(), false);
        auto7843C106_var = 1;
        for ( ; auto7843C106_var <= auto7843C106_ae; auto7843C106_var += 1 ) {
            UnitGroupAdd(lv_vNewUG, UnitGroupUnit(lv_vUG, auto7843C106_var));
        }
        Wait(0.0, c_timeGame);
        UnitGroupSelect(lv_vNewUG, EventPlayer(), true);
    }

    lv_vNewUG = UnitGroupSelected(EventPlayer());
    auto8789455B_g = lv_vNewUG;
    auto8789455B_u = UnitGroupCount(auto8789455B_g, c_unitCountAll);
    for (;; auto8789455B_u -= 1) {
        auto8789455B_var = UnitGroupUnitFromEnd(auto8789455B_g, auto8789455B_u);
        if (auto8789455B_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto8789455B_var), c_unitAttributeStructure) == true)) {
            UnitGroupRemove(lv_vNewUG, auto8789455B_var);
            UnitGroupSelect(lv_vNewUG, EventPlayer(), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_SelectionLimitations_Init () {
    lib860A1A1F_gt_MM_OT_SelectionLimitations = TriggerCreate("lib860A1A1F_gt_MM_OT_SelectionLimitations_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_SelectionLimitations, false);
    TriggerAddEventUnitSelected(lib860A1A1F_gt_MM_OT_SelectionLimitations, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Anti-Smart Cast
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_AntiSmartCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    unitgroup autoB52003CB_g;
    int autoB52003CB_u;
    unit autoB52003CB_var;

    // Variable Initialization
    lv_vAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_vUG = UnitGroupSelected(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_vUG, c_unitCountAlive) > 1))) {
            return false;
        }

        if (!((AbilityClass(lv_vAbility) == c_classIdCAbilEffectTarget))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib860A1A1F_gv_mM_OT_PlayerGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "AntiSmartCastCD", EventPlayer(), 1);
    UnitGroupRemove(lv_vUG, EventUnit());
    autoB52003CB_g = lv_vUG;
    autoB52003CB_u = UnitGroupCount(autoB52003CB_g, c_unitCountAll);
    for (;; autoB52003CB_u -= 1) {
        autoB52003CB_var = UnitGroupUnitFromEnd(autoB52003CB_g, autoB52003CB_u);
        if (autoB52003CB_var == null) { break; }
        if ((UnitGetType(EventUnit()) == UnitGetType(autoB52003CB_var)) && (UnitHasBehavior2(autoB52003CB_var, "AntiSmartCastCD") == false)) {
            UnitBehaviorAddPlayer(autoB52003CB_var, "AntiSmartCastCD", EventPlayer(), 1);
            UnitIssueOrder(autoB52003CB_var, EventUnitOrder(), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_AntiSmartCast_Init () {
    lib860A1A1F_gt_MM_OT_AntiSmartCast = TriggerCreate("lib860A1A1F_gt_MM_OT_AntiSmartCast_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_AntiSmartCast, false);
    TriggerAddEventUnitOrder(lib860A1A1F_gt_MM_OT_AntiSmartCast, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Worker Created
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_WorkerCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vPoint = OrderGetTargetPosition(UnitOrder(EventUnitCreatedUnit(), 0));

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 3.0))) {
            return false;
        }

        if (!((lv_vPoint != null))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib860A1A1F_gv_mM_OT_PlayerGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_vPoint), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_WorkerCreated_Init () {
    lib860A1A1F_gt_MM_OT_WorkerCreated = TriggerCreate("lib860A1A1F_gt_MM_OT_WorkerCreated_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_WorkerCreated, false);
    TriggerAddEventUnitCreated(lib860A1A1F_gt_MM_OT_WorkerCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_No Build Queue
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_NoBuildQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;

    // Automatic Variable Declarations
    int auto13B322EA_ae;
    int auto13B322EA_var;

    // Variable Initialization
    lv_vAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_vAbility) == c_classIdCAbilBuild))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib860A1A1F_gv_mM_OT_PlayerGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto13B322EA_ae = (UnitOrderCount(EventUnit()) - 2);
    auto13B322EA_var = 0;
    for ( ; auto13B322EA_var <= auto13B322EA_ae; auto13B322EA_var += 1 ) {
        if ((AbilityClass(AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), auto13B322EA_var)))) == c_classIdCAbilBuild)) {
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), EventUnitOrder(), c_orderQueueAddToEnd);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_NoBuildQueue_Init () {
    lib860A1A1F_gt_MM_OT_NoBuildQueue = TriggerCreate("lib860A1A1F_gt_MM_OT_NoBuildQueue_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_NoBuildQueue, false);
    TriggerAddEventUnitOrder(lib860A1A1F_gt_MM_OT_NoBuildQueue, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Structure Hotkey Check
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_StructureHotkeyCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    playergroup autoC48F8D09_g;
    int autoC48F8D09_var;
    const int autoFDB64E2F_ae = 9;
    int autoFDB64E2F_var;
    unitgroup autoC7F08B0F_g;
    int autoC7F08B0F_u;
    unit autoC7F08B0F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        autoC48F8D09_g = lib860A1A1F_gv_mM_OT_PlayerGroup;
        autoC48F8D09_var = -1;
        while (true) {
            autoC48F8D09_var = PlayerGroupNextPlayer(autoC48F8D09_g, autoC48F8D09_var);
            if (autoC48F8D09_var < 0) { break; }
            autoFDB64E2F_var = 0;
            for ( ; autoFDB64E2F_var <= autoFDB64E2F_ae; autoFDB64E2F_var += 1 ) {
                lv_vUG = UnitControlGroup(autoC48F8D09_var, autoFDB64E2F_var);
                autoC7F08B0F_g = lv_vUG;
                autoC7F08B0F_u = UnitGroupCount(autoC7F08B0F_g, c_unitCountAll);
                for (;; autoC7F08B0F_u -= 1) {
                    autoC7F08B0F_var = UnitGroupUnitFromEnd(autoC7F08B0F_g, autoC7F08B0F_u);
                    if (autoC7F08B0F_var == null) { break; }
                    if ((UnitTypeTestAttribute(UnitGetType(autoC7F08B0F_var), c_unitAttributeStructure) == true) && (UnitGroupCount(lv_vUG, c_unitCountAlive) > 1)) {
                        UnitGroupRemove(lv_vUG, autoC7F08B0F_var);
                        UnitControlGroupRemoveUnits(autoC48F8D09_var, autoFDB64E2F_var, lv_vUG);
                        break;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_StructureHotkeyCheck_Init () {
    lib860A1A1F_gt_MM_OT_StructureHotkeyCheck = TriggerCreate("lib860A1A1F_gt_MM_OT_StructureHotkeyCheck_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_StructureHotkeyCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Worker Build Check
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_WorkerBuildCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    playergroup auto053DF327_g;
    int auto053DF327_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.125, c_timeGame);
        auto053DF327_g = lib860A1A1F_gv_mM_OT_PlayerGroup;
        auto053DF327_var = -1;
        while (true) {
            auto053DF327_var = PlayerGroupNextPlayer(auto053DF327_g, auto053DF327_var);
            if (auto053DF327_var < 0) { break; }
            lv_vUG = UnitGroupSelected(auto053DF327_var);
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) == 1) && (UnitTypeTestFlag(UnitGetType(UnitGroupUnit(lv_vUG, 1)), c_unitFlagWorker) == true)) {
                if ((TechTreeUpgradeCount(auto053DF327_var, "ConstructingEnabled", c_techCountCompleteOnly) != 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto053DF327_var, "ConstructingEnabled", 1);
                }

            }
            else {
                if ((TechTreeUpgradeCount(auto053DF327_var, "ConstructingEnabled", c_techCountCompleteOnly) != 0)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto053DF327_var, "ConstructingEnabled", 0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_WorkerBuildCheck_Init () {
    lib860A1A1F_gt_MM_OT_WorkerBuildCheck = TriggerCreate("lib860A1A1F_gt_MM_OT_WorkerBuildCheck_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_WorkerBuildCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Rally Fix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_OT_RallyFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("RallyHatchery", 1), OrderGetTargetPosition(EventUnitOrder())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_OT_RallyFix_Init () {
    lib860A1A1F_gt_MM_OT_RallyFix = TriggerCreate("lib860A1A1F_gt_MM_OT_RallyFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_OT_RallyFix, false);
    TriggerAddEventUnitOrder(lib860A1A1F_gt_MM_OT_RallyFix, null, AbilityCommand("RallyHatchery", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownOldTimes
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownOldTimes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_OldTimes)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_OT_SelectionLimitations, false);
    TriggerEnable(lib860A1A1F_gt_MM_OT_AntiSmartCast, false);
    TriggerEnable(lib860A1A1F_gt_MM_OT_WorkerCreated, false);
    TriggerEnable(lib860A1A1F_gt_MM_OT_NoBuildQueue, false);
    TriggerEnable(lib860A1A1F_gt_MM_OT_RallyFix, false);
    TriggerStop(lib860A1A1F_gt_MM_OT_StructureHotkeyCheck);
    TriggerStop(lib860A1A1F_gt_MM_OT_WorkerBuildCheck);
    TriggerStop(lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownOldTimes_Init () {
    lib860A1A1F_gt_MM_ShutdownOldTimes = TriggerCreate("lib860A1A1F_gt_MM_ShutdownOldTimes_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownOldTimes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeEndurance
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeEndurance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB6318FDA_g;
    int autoB6318FDA_u;
    unit autoB6318FDA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Endurance)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitRevivedFix, true);
    Wait(0.5, c_timeReal);
    autoB6318FDA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB6318FDA_u = UnitGroupCount(autoB6318FDA_g, c_unitCountAll);
    for (;; autoB6318FDA_u -= 1) {
        autoB6318FDA_var = UnitGroupUnitFromEnd(autoB6318FDA_g, autoB6318FDA_u);
        if (autoB6318FDA_var == null) { break; }
        lib860A1A1F_gf_MM_ApplyEndurance(autoB6318FDA_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeEndurance_Init () {
    lib860A1A1F_gt_MM_InitializeEndurance = TriggerCreate("lib860A1A1F_gt_MM_InitializeEndurance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownEndurance
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownEndurance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22B9DD1F_g;
    int auto22B9DD1F_u;
    unit auto22B9DD1F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_860A1A1F_BCA67AE3"), true);
    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Endurance)] = false;
    auto22B9DD1F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto22B9DD1F_u = UnitGroupCount(auto22B9DD1F_g, c_unitCountAll);
    for (;; auto22B9DD1F_u -= 1) {
        auto22B9DD1F_var = UnitGroupUnitFromEnd(auto22B9DD1F_g, auto22B9DD1F_u);
        if (auto22B9DD1F_var == null) { break; }
        UnitBehaviorRemovePlayer(auto22B9DD1F_var, "Endurance", 3, 1);
        UnitBehaviorRemovePlayer(auto22B9DD1F_var, "EnduranceTrain", 3, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownEndurance_Init () {
    lib860A1A1F_gt_MM_ShutdownEndurance = TriggerCreate("lib860A1A1F_gt_MM_ShutdownEndurance_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownEndurance, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeRipFieldGenerators
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeRipFieldGenerators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vSpawnCount;
    point lv_vPoint;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 1200;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RipFieldGenerators)] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "LifeMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(400.0, 500.0, 750.0, 1000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(400.0, 500.0, 750.0, 1000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "ShieldsStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(750.0, 1000.0, 1250.0, 1500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "ShieldsMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(750.0, 1000.0, 1250.0, 1500.0, 0.0, 0.0), 0));
    Wait(0.5, c_timeGame);
    lv_vAmount = 14;
    while ((lv_vSpawnCount < lv_vAmount) && (lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        lv_vPoint = RegionRandomPoint(RegionEntireMap());
        if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= 60.0) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= 60.0) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (UnitCountAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_vPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitGroupCount(UnitGroup("RipFieldGenerator2", c_playerAny, RegionCircle(lv_vPoint, 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_vSpawnCount += 1;
            UnitCreate(1, "RipFieldGenerator2", 0, 3, lv_vPoint, 100.0);
            UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitSetTeamColorIndex(UnitLastCreated(), 10);
            VisRevealArea(1, RegionCircle(UnitGetPosition(UnitLastCreated()), 1.0), 0.5, false);
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    TriggerEnable(lib860A1A1F_gt_MM_RipFieldGeneratorDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeRipFieldGenerators_Init () {
    lib860A1A1F_gt_MM_InitializeRipFieldGenerators = TriggerCreate("lib860A1A1F_gt_MM_InitializeRipFieldGenerators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_RipFieldGeneratorDamage
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_RipFieldGeneratorDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_vRegion;

    // Automatic Variable Declarations
    unitgroup autoA24CED4F_g;
    int autoA24CED4F_u;
    unit autoA24CED4F_var;
    unitgroup auto9C470762_g;
    int auto9C470762_u;
    unit auto9C470762_var;
    unitgroup autoCFF7516B_g;
    int autoCFF7516B_u;
    unit autoCFF7516B_var;

    // Variable Initialization
    lv_vRegion = RegionCircle(Point(1.0, 1.0), 0.0);

    // Conditions
    if (testConds) {
        if (!((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RipFieldGenerators)] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA24CED4F_g = UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA24CED4F_u = UnitGroupCount(autoA24CED4F_g, c_unitCountAll);
    for (;; autoA24CED4F_u -= 1) {
        autoA24CED4F_var = UnitGroupUnitFromEnd(autoA24CED4F_g, autoA24CED4F_u);
        if (autoA24CED4F_var == null) { break; }
        RegionAddRegion(lv_vRegion, RegionCircle(UnitGetPosition(autoA24CED4F_var), 30.0));
    }
    auto9C470762_g = UnitGroup(null, 1, lv_vRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto9C470762_u = UnitGroupCount(auto9C470762_g, c_unitCountAll);
    for (;; auto9C470762_u -= 1) {
        auto9C470762_var = UnitGroupUnitFromEnd(auto9C470762_g, auto9C470762_u);
        if (auto9C470762_var == null) { break; }
        UnitBehaviorAddPlayer(auto9C470762_var, "RipFieldBurning", 3, 1);
        libNtve_gf_AttachActorToUnit(auto9C470762_var, "XelNagaShieldDomeImpact", "Ref_Center");
    }
    autoCFF7516B_g = UnitGroup(null, 2, lv_vRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoCFF7516B_u = UnitGroupCount(autoCFF7516B_g, c_unitCountAll);
    for (;; autoCFF7516B_u -= 1) {
        autoCFF7516B_var = UnitGroupUnitFromEnd(autoCFF7516B_g, autoCFF7516B_u);
        if (autoCFF7516B_var == null) { break; }
        UnitBehaviorAddPlayer(autoCFF7516B_var, "RipFieldBurning", 3, 1);
        libNtve_gf_AttachActorToUnit(autoCFF7516B_var, "XelNagaShieldDomeImpact", "Ref_Center");
    }
    if ((UnitGroupCount(UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_RipFieldGeneratorDamage_Init () {
    lib860A1A1F_gt_MM_RipFieldGeneratorDamage = TriggerCreate("lib860A1A1F_gt_MM_RipFieldGeneratorDamage_Func");
    TriggerEnable(lib860A1A1F_gt_MM_RipFieldGeneratorDamage, false);
    TriggerAddEventTimePeriodic(lib860A1A1F_gt_MM_RipFieldGeneratorDamage, 2.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownRipFieldGenerators
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownRipFieldGenerators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAF5DBC01_g;
    int autoAF5DBC01_u;
    unit autoAF5DBC01_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RipFieldGenerators)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_RipFieldGeneratorDamage, false);
    autoAF5DBC01_g = UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF5DBC01_u = UnitGroupCount(autoAF5DBC01_g, c_unitCountAll);
    for (;; autoAF5DBC01_u -= 1) {
        autoAF5DBC01_var = UnitGroupUnitFromEnd(autoAF5DBC01_g, autoAF5DBC01_u);
        if (autoAF5DBC01_var == null) { break; }
        UnitKill(autoAF5DBC01_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownRipFieldGenerators_Init () {
    lib860A1A1F_gt_MM_ShutdownRipFieldGenerators = TriggerCreate("lib860A1A1F_gt_MM_ShutdownRipFieldGenerators_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownRipFieldGenerators, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeLevelPlayingField
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeLevelPlayingField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0982CA7E_g;
    int auto0982CA7E_u;
    unit auto0982CA7E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_LevelPlayingField)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitRevivedFix, true);
    Wait(0.5, c_timeReal);
    auto0982CA7E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0982CA7E_u = UnitGroupCount(auto0982CA7E_g, c_unitCountAll);
    for (;; auto0982CA7E_u -= 1) {
        auto0982CA7E_var = UnitGroupUnitFromEnd(auto0982CA7E_g, auto0982CA7E_u);
        if (auto0982CA7E_var == null) { break; }
        lib860A1A1F_gf_MM_ApplyLevelPlayingField(auto0982CA7E_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeLevelPlayingField_Init () {
    lib860A1A1F_gt_MM_InitializeLevelPlayingField = TriggerCreate("lib860A1A1F_gt_MM_InitializeLevelPlayingField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownLevelPlayingField
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownLevelPlayingField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto16AD0113_g;
    int auto16AD0113_u;
    unit auto16AD0113_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_LevelPlayingField)] = false;
    auto16AD0113_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto16AD0113_u = UnitGroupCount(auto16AD0113_g, c_unitCountAll);
    for (;; auto16AD0113_u -= 1) {
        auto16AD0113_var = UnitGroupUnitFromEnd(auto16AD0113_g, auto16AD0113_u);
        if (auto16AD0113_var == null) { break; }
        UnitBehaviorRemovePlayer(auto16AD0113_var, "LevelPlayingField", 3, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownLevelPlayingField_Init () {
    lib860A1A1F_gt_MM_ShutdownLevelPlayingField = TriggerCreate("lib860A1A1F_gt_MM_ShutdownLevelPlayingField_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownLevelPlayingField, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeBloodlust
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeBloodlust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3ABBFFAD_g;
    int auto3ABBFFAD_u;
    unit auto3ABBFFAD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Bloodlust)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitChangesOwner, true);
    TriggerEnable(lib860A1A1F_gt_MM_BloodlustActivated, true);
    Wait(0.5, c_timeReal);
    auto3ABBFFAD_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto3ABBFFAD_u = UnitGroupCount(auto3ABBFFAD_g, c_unitCountAll);
    for (;; auto3ABBFFAD_u -= 1) {
        auto3ABBFFAD_var = UnitGroupUnitFromEnd(auto3ABBFFAD_g, auto3ABBFFAD_u);
        if (auto3ABBFFAD_var == null) { break; }
        lib860A1A1F_gf_MM_ApplyBloodlust(auto3ABBFFAD_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeBloodlust_Init () {
    lib860A1A1F_gt_MM_InitializeBloodlust = TriggerCreate("lib860A1A1F_gt_MM_InitializeBloodlust_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_BloodlustActivated
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_BloodlustActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("Bloodlust", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 200.0, 0.0);
    Wait(RandomInt(2, 10), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_BloodlustActivated_Init () {
    lib860A1A1F_gt_MM_BloodlustActivated = TriggerCreate("lib860A1A1F_gt_MM_BloodlustActivated_Func");
    TriggerEnable(lib860A1A1F_gt_MM_BloodlustActivated, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BloodlustActivated, null, "Bloodlust", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BloodlustActivated, null, "Bloodlust2", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_BloodlustActivated, null, "Bloodlust3", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownBloodlust
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownBloodlust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD5EB154B_g;
    int autoD5EB154B_u;
    unit autoD5EB154B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Bloodlust)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_BloodlustActivated, false);
    autoD5EB154B_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoD5EB154B_u = UnitGroupCount(autoD5EB154B_g, c_unitCountAll);
    for (;; autoD5EB154B_u -= 1) {
        autoD5EB154B_var = UnitGroupUnitFromEnd(autoD5EB154B_g, autoD5EB154B_u);
        if (autoD5EB154B_var == null) { break; }
        UnitBehaviorRemovePlayer(autoD5EB154B_var, "Bloodlust", 3, 1);
        UnitBehaviorRemovePlayer(autoD5EB154B_var, "Bloodlust2", 3, 1);
        UnitBehaviorRemovePlayer(autoD5EB154B_var, "Bloodlust3", 3, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownBloodlust_Init () {
    lib860A1A1F_gt_MM_ShutdownBloodlust = TriggerCreate("lib860A1A1F_gt_MM_ShutdownBloodlust_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownBloodlust, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeNuclearMines
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeNuclearMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vPoint;
    int lv_vSpawnCount;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 3000;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_NuclearMines)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    lv_vAmount = FixedToInt((libNtve_gf_HeightOfRegion(RegionEntireMap()) * (libNtve_gf_WidthOfRegion(RegionEntireMap()) / libCOMI_gf_MinimumDifficultyValueCoopReal(1000.0, 900.0, 800.0, 700.0, 0.0, 0.0))));
    while ((lv_vSpawnCount < lv_vAmount) && (lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        lv_vPoint = RegionRandomPoint(RegionEntireMap());
        if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= 40.0) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= 40.0) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (UnitCountAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_vPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            lv_vSpawnCount += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NuclearMine", 0, 3, lv_vPoint);
            UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitSetTeamColorIndex(UnitLastCreated(), 10);
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(UnitGetPosition(UnitLastCreated()), 0.0, 6.0), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), false, 3);
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeNuclearMines_Init () {
    lib860A1A1F_gt_MM_InitializeNuclearMines = TriggerCreate("lib860A1A1F_gt_MM_InitializeNuclearMines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownNuclearMines
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownNuclearMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E94B08F_g;
    int auto5E94B08F_u;
    unit auto5E94B08F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5E94B08F_g = UnitGroup("NuclearMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E94B08F_u = UnitGroupCount(auto5E94B08F_g, c_unitCountAll);
    for (;; auto5E94B08F_u -= 1) {
        auto5E94B08F_var = UnitGroupUnitFromEnd(auto5E94B08F_g, auto5E94B08F_u);
        if (auto5E94B08F_var == null) { break; }
        UnitKill(auto5E94B08F_var);
    }
    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_NuclearMines)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownNuclearMines_Init () {
    lib860A1A1F_gt_MM_ShutdownNuclearMines = TriggerCreate("lib860A1A1F_gt_MM_ShutdownNuclearMines_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownNuclearMines, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_NobuildRegion (debug)
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_NobuildRegiondebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto6C7AC803_ae = 15;
    int auto6C7AC803_var;
    const int auto028B402E_n = 1000;
    int auto028B402E_i;
    unitgroup auto67EF249C_g;
    int auto67EF249C_u;
    unit auto67EF249C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib01833E95_gf_AF_MyAcc(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C7AC803_var = 1;
    for ( ; auto6C7AC803_var <= auto6C7AC803_ae; auto6C7AC803_var += 1 ) {
        libNtve_gf_SetAlliance(auto6C7AC803_var, libA8FDA37D_gv_uT_ArtSpawnPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    for (auto028B402E_i = 1; auto028B402E_i <= auto028B402E_n; auto028B402E_i += 1) {
        lv_vPoint = RegionRandomPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion);
        if ((UnitGroupCount(UnitGroup("ShapeSphere", c_playerAny, RegionCircle(lv_vPoint, 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeSphere", c_unitCreateIgnorePlacement, libA8FDA37D_gv_uT_ArtSpawnPlayer, lv_vPoint);
        }

    }
    Wait(10.0, c_timeGame);
    auto67EF249C_g = UnitGroup("ShapeSphere", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67EF249C_u = UnitGroupCount(auto67EF249C_g, c_unitCountAll);
    for (;; auto67EF249C_u -= 1) {
        auto67EF249C_var = UnitGroupUnitFromEnd(auto67EF249C_g, auto67EF249C_u);
        if (auto67EF249C_var == null) { break; }
        UnitRemove(auto67EF249C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_NobuildRegiondebug_Init () {
    lib860A1A1F_gt_MM_NobuildRegiondebug = TriggerCreate("lib860A1A1F_gt_MM_NobuildRegiondebug_Func");
    TriggerAddEventChatMessage(lib860A1A1F_gt_MM_NobuildRegiondebug, c_playerAny, "-nobuilddebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeGreatWall
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeGreatWall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;
    point lv_vWorkerSpawn;
    point lv_vCreepTumorSpawn;
    unit lv_vUnit;
    unitgroup lv_vUG;
    unitgroup lv_vCreepTumorBurrowed;
    fixed lv_vPeriod;
    bool lv_vEitherOr;
    int lv_vPlayer;
    int lv_vOtherPlayer;
    fixed lv_vStartDistance;
    fixed lv_vObjDistance;
    int lv_vRandom;
    fixed lv_vCoef;

    // Automatic Variable Declarations
    string auto1AC538A0_val;
    const int autoF7F93281_ae = 12;
    int autoF7F93281_var;
    unitgroup auto82905429_g;
    int auto82905429_u;
    unit auto82905429_var;
    unitgroup autoC07430AD_g;
    int autoC07430AD_u;
    unit autoC07430AD_var;
    string auto16506737_val;
    string auto95B82DB7_val;
    const int auto1A87F6E4_n = 50;
    int auto1A87F6E4_i;
    const int auto04BE1438_n = 200;
    int auto04BE1438_i;
    int autoFDBB13AB_val;
    unitgroup auto7AAAD404_g;
    int auto7AAAD404_u;
    unit auto7AAAD404_var;
    string auto2C20F42C_val;
    const int autoF2F092E7_n = 50;
    int autoF2F092E7_i;
    const int auto0E3C7F44_n = 400;
    int auto0E3C7F44_i;
    int auto26D0A83A_val;
    unitgroup autoB4478E80_g;
    int autoB4478E80_u;
    unit autoB4478E80_var;
    string auto9680A01F_val;
    unitgroup auto63844EA5_g;
    int auto63844EA5_u;
    unit auto63844EA5_var;
    const int autoDD0ABCA6_n = 50;
    int autoDD0ABCA6_i;
    const int auto9D584DFD_n = 400;
    int auto9D584DFD_i;
    int autoBA14755B_val;
    const int autoAA9C09BB_n = 300;
    int autoAA9C09BB_i;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();
    lv_vCreepTumorBurrowed = UnitGroupEmpty();
    lv_vPeriod = 1.2;
    lv_vPlayer = 4;
    lv_vOtherPlayer = 3;
    lv_vStartDistance = 35.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_GreatWall)] = true;
    lib860A1A1F_gf_MM_GW_PathingInit();
    libCOMI_gf_GivePlayerResources(Point(0.0, 0.0), libCOMI_ge_CacheResourceType_Mineral, 10000000, null, null, lv_vPlayer);
    libCOMI_gf_GivePlayerResources(Point(0.0, 0.0), libCOMI_ge_CacheResourceType_Vespene, 10000000, null, null, lv_vPlayer);
    auto1AC538A0_val = libCOOC_gf_CC_CurrentMap();
    if (auto1AC538A0_val == "AC_ShakurasTemple") {
        lv_vStartDistance = 10.0;
        lv_vObjDistance = 30.0;
    }
    else if (auto1AC538A0_val == "AC_MeinhoffDayNight") {
        lv_vStartDistance = 10.0;
    }
    else if (auto1AC538A0_val == "AC_TarsonisTrain") {
        lv_vStartDistance = 10.0;
    }
    else {
    }
    autoF7F93281_var = 3;
    for ( ; autoF7F93281_var <= autoF7F93281_ae; autoF7F93281_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "FireSuppressionSystems", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "HailstormMissilePods", 1);
        CatalogFieldValueSet(c_gameCatalogBehavior, "ShrikeTurret", "Requirements", autoF7F93281_var, "");
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "NeosteelFrame", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "TerranBuildingArmor", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "HiSecAutoTracking", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "ShieldBatteryStructureBarrier", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(autoF7F93281_var, "KaraxTurretRange", 1);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveForge", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveGateway", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "KaraxLevel05", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveSpawningPool", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveEvolutionChamber", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveEngineeringBay", false);
        TechTreeSpecificRequirementEnable(autoF7F93281_var, "HaveBarracks", false);
    }
    auto82905429_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82905429_u = UnitGroupCount(auto82905429_g, c_unitCountAll);
    for (;; auto82905429_u -= 1) {
        auto82905429_var = UnitGroupUnitFromEnd(auto82905429_g, auto82905429_u);
        if (auto82905429_var == null) { break; }
        if ((UnitPathableToPoint(auto82905429_var, PlayerStartLocation(1), 10.0, 10000.0) == true)) {
            UnitSetOwner(auto82905429_var, lv_vPlayer, true);
        }

    }
    autoC07430AD_g = UnitGroup("CreepTumorBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC07430AD_u = UnitGroupCount(autoC07430AD_g, c_unitCountAll);
    for (;; autoC07430AD_u -= 1) {
        autoC07430AD_var = UnitGroupUnitFromEnd(autoC07430AD_g, autoC07430AD_u);
        if (autoC07430AD_var == null) { break; }
        UnitSetOwner(autoC07430AD_var, lv_vPlayer, true);
    }
    Wait(2.0, c_timeGame);
    auto16506737_val = libCOMI_gf_GetUnitRace(UnitGroupRandomUnit(UnitGroup(null, lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive));
    if (auto16506737_val == "Terr") {
        auto2C20F42C_val = libCOOC_gf_CC_CurrentMap();
        if (auto2C20F42C_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.9;
        }
        else if (auto2C20F42C_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.5;
        }
        else {
            lv_vPeriod = 1.3;
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = lib860A1A1F_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (autoF2F092E7_i = 1; autoF2F092E7_i <= autoF2F092E7_n; autoF2F092E7_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) == true)) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            for (auto0E3C7F44_i = 1; auto0E3C7F44_i <= auto0E3C7F44_n; auto0E3C7F44_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 50.0));
                if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= lv_vStartDistance) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= lv_vStartDistance) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOOC_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 5000.0) == true) && (RegionContainsPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            auto26D0A83A_val = RandomInt(1, 3);
            if (auto26D0A83A_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto26D0A83A_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 5), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto26D0A83A_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 0), lv_vPoint), c_orderQueueReplace);
            }
            else {
            }
            autoB4478E80_g = UnitGroup("CommandCenter", lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB4478E80_u = UnitGroupCount(autoB4478E80_g, c_unitCountAll);
            for (;; autoB4478E80_u -= 1) {
                autoB4478E80_var = UnitGroupUnitFromEnd(autoB4478E80_g, autoB4478E80_u);
                if (autoB4478E80_var == null) { break; }
                UnitIssueOrder(autoB4478E80_var, Order(AbilityCommand("UpgradeToPlanetaryFortress", 0)), c_orderQueueReplace);
            }
        }
    }
    else if (auto16506737_val == "Prot") {
        auto9680A01F_val = libCOOC_gf_CC_CurrentMap();
        if (auto9680A01F_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.9;
        }
        else if (auto9680A01F_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.5;
        }
        else {
            lv_vPeriod = 1.2;
        }
        auto63844EA5_g = UnitGroup(null, lv_vOtherPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto63844EA5_u = UnitGroupCount(auto63844EA5_g, c_unitCountAll);
        for (;; auto63844EA5_u -= 1) {
            auto63844EA5_var = UnitGroupUnitFromEnd(auto63844EA5_g, auto63844EA5_u);
            if (auto63844EA5_var == null) { break; }
            UnitSetOwner(auto63844EA5_var, lv_vPlayer, true);
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = lib860A1A1F_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (autoDD0ABCA6_i = 1; autoDD0ABCA6_i <= autoDD0ABCA6_n; autoDD0ABCA6_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) == true)) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            for (auto9D584DFD_i = 1; auto9D584DFD_i <= auto9D584DFD_n; auto9D584DFD_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 50.0));
                if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= lv_vStartDistance) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= lv_vStartDistance) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOOC_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCount("Pylon", c_playerAny, RegionCircle(lv_vPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 2.0, 5000.0) == true) && (RegionContainsPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            autoBA14755B_val = RandomInt(1, 4);
            if (autoBA14755B_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoBA14755B_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 24), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoBA14755B_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 21), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoBA14755B_val == 4) {
                for (autoAA9C09BB_i = 1; autoAA9C09BB_i <= autoAA9C09BB_n; autoAA9C09BB_i += 1) {
                    lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 60.0));
                    if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= lv_vStartDistance) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= lv_vStartDistance) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOOC_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCount("Pylon", lv_vPlayer, RegionCircle(lv_vPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 2.0, 5000.0) == true) && (RegionContainsPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                        UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), lv_vPoint), c_orderQueueReplace);
                        break;
                    }

                }
            }
            else {
            }
        }
    }
    else {
        auto95B82DB7_val = libCOOC_gf_CC_CurrentMap();
        if (auto95B82DB7_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.2;
        }
        else if (auto95B82DB7_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.2;
        }
        else {
            lv_vPeriod = 0.3;
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = lib860A1A1F_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (auto1A87F6E4_i = 1; auto1A87F6E4_i <= auto1A87F6E4_n; auto1A87F6E4_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_vUnit), PlayerStartLocation(1)) == true)) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            lv_vRandom = RandomInt(1, 3);
            if ((libCOOC_gf_CC_CurrentMap() == "AC_MeinhoffDayNight") && (lv_vRandom == 3)) {
                lv_vCoef = 3.0;
            }
            else {
                lv_vCoef = 1.0;
            }
            for (auto04BE1438_i = 1; auto04BE1438_i <= auto04BE1438_n; auto04BE1438_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 40.0));
                if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= (lv_vStartDistance * lv_vCoef)) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= (lv_vStartDistance * lv_vCoef)) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceEnemy, RegionCircle(lv_vPoint, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOOC_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (CreepIsPresent(lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 5000.0) == true) && (RegionContainsPoint(lib860A1A1F_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            autoFDBB13AB_val = lv_vRandom;
            if (autoFDBB13AB_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 14), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoFDBB13AB_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 15), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoFDBB13AB_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 19), lv_vPoint), c_orderQueueReplace);
            }
            else {
            }
            lv_vCreepTumorBurrowed = UnitGroup("CreepTumorBurrowed", lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_vCreepTumorBurrowed, c_unitCountAlive) < 15)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, lv_vPlayer, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(lv_vPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vCreepTumorBurrowed, UnitLastCreated());
            }

            auto7AAAD404_g = lv_vCreepTumorBurrowed;
            auto7AAAD404_u = UnitGroupCount(auto7AAAD404_g, c_unitCountAll);
            for (;; auto7AAAD404_u -= 1) {
                auto7AAAD404_var = UnitGroupUnitFromEnd(auto7AAAD404_g, auto7AAAD404_u);
                if (auto7AAAD404_var == null) { break; }
                libNtve_gf_AICast(auto7AAAD404_var, OrderTargetingPoint(AbilityCommand("CreepTumorBuild", 0), lib860A1A1F_gf_MM_GW_CreepTumorTarget(auto7AAAD404_var)));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeGreatWall_Init () {
    lib860A1A1F_gt_MM_InitializeGreatWall = TriggerCreate("lib860A1A1F_gt_MM_InitializeGreatWall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_ConstructionStarted
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GW_ConstructionStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), lib860A1A1F_gv_mM_GW_NoBuildRegion) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GW_ConstructionStarted_Init () {
    lib860A1A1F_gt_MM_GW_ConstructionStarted = TriggerCreate("lib860A1A1F_gt_MM_GW_ConstructionStarted_Func");
    TriggerEnable(lib860A1A1F_gt_MM_GW_ConstructionStarted, false);
    TriggerAddEventUnitConstructProgress(lib860A1A1F_gt_MM_GW_ConstructionStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave DropPod
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "TerranDropPod") || (UnitGetType(EventUnitCreatedUnit()) == "ZergDropPodLarge") || (UnitGetType(EventUnitCreatedUnit()) == "ZergDropPod")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroupAlliance(UnitGetOwner(EventUnitCreatedUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), 2.5), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 6)) {
        lib860A1A1F_gf_MM_GW_Path(UnitGetPosition(EventUnitCreatedUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod_Init () {
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod = TriggerCreate("lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod_Func");
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod, false);
    TriggerAddEventUnitCreated(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave WarpIn
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitAbilityCheck(EventUnit(), "attack", false) == true))) {
            return false;
        }

        if (!((UnitAbilityCheck(EventUnit(), "move", false) == true))) {
            return false;
        }

        if (!((UnitWeaponCount(EventUnit()) >= 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMapBoss) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 4)) {
        lib860A1A1F_gf_MM_GW_Path(UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn_Init () {
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn = TriggerCreate("lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn_Func");
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn, null, "ProtossGenericWarpInOut", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave AI Event
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive)), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 4)) {
        lib860A1A1F_gf_MM_GW_Path(UnitGetPosition(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent_Init () {
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent = TriggerCreate("lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent_Func");
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent, false);
    TriggerAddEventPlayerAIWave(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownGreatWall
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownGreatWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_GreatWall)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent, false);
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod, false);
    TriggerEnable(lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn, false);
    TriggerEnable(lib860A1A1F_gt_MM_GW_ConstructionStarted, false);
    TriggerStop(lib860A1A1F_gt_MM_InitializeGreatWall);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownGreatWall_Init () {
    lib860A1A1F_gt_MM_ShutdownGreatWall = TriggerCreate("lib860A1A1F_gt_MM_ShutdownGreatWall_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownGreatWall, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeSupremeCommander
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeSupremeCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto45ABD770_g;
    int auto45ABD770_u;
    unit auto45ABD770_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_SupremeCommander)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitRevivedFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UltraliskSizeFix, true);
    Wait(0.5, c_timeReal);
    auto45ABD770_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45ABD770_u = UnitGroupCount(auto45ABD770_g, c_unitCountAll);
    for (;; auto45ABD770_u -= 1) {
        auto45ABD770_var = UnitGroupUnitFromEnd(auto45ABD770_g, auto45ABD770_u);
        if (auto45ABD770_var == null) { break; }
        lib860A1A1F_gf_MM_ApplySupremeCommander(auto45ABD770_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeSupremeCommander_Init () {
    lib860A1A1F_gt_MM_InitializeSupremeCommander = TriggerCreate("lib860A1A1F_gt_MM_InitializeSupremeCommander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownSupremeCommander
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownSupremeCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto94B92F83_g;
    int auto94B92F83_u;
    unit auto94B92F83_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_SupremeCommander)] = false;
    auto94B92F83_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto94B92F83_u = UnitGroupCount(auto94B92F83_g, c_unitCountAll);
    for (;; auto94B92F83_u -= 1) {
        auto94B92F83_var = UnitGroupUnitFromEnd(auto94B92F83_g, auto94B92F83_u);
        if (auto94B92F83_var == null) { break; }
        UnitBehaviorRemovePlayer(auto94B92F83_var, "SupremeCommanderMassive", 3, 1);
        UnitBehaviorRemovePlayer(auto94B92F83_var, "SupremeCommander", 3, 1);
        UnitBehaviorRemovePlayer(auto94B92F83_var, "SupremeCommanderStructure", 3, 1);
        UnitBehaviorRemovePlayer(auto94B92F83_var, "SupremeCommanderTrain", 3, 1);
        UnitBehaviorRemovePlayer(auto94B92F83_var, "SupremeCommanderWorker", 3, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownSupremeCommander_Init () {
    lib860A1A1F_gt_MM_ShutdownSupremeCommander = TriggerCreate("lib860A1A1F_gt_MM_ShutdownSupremeCommander_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownSupremeCommander, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeMatryoshka
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeMatryoshka_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Matryoshka)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeMatryoshka_Init () {
    lib860A1A1F_gt_MM_InitializeMatryoshka = TriggerCreate("lib860A1A1F_gt_MM_InitializeMatryoshka_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMatryoshka
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownMatryoshka_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Matryoshka)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownMatryoshka_Init () {
    lib860A1A1F_gt_MM_ShutdownMatryoshka = TriggerCreate("lib860A1A1F_gt_MM_ShutdownMatryoshka_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownMatryoshka, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeInfestationStation
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeInfestationStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_InfestationStation)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_InfestionStationStructureAttack, true);
    CatalogFieldValueSet(c_gameCatalogBehavior, "SIStukovInfestStructureFriendlyTarget", "Modification.VitalRegenArray[" + IntToString(c_unitVitalLife) + "]", 3, "5");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeInfestationStation_Init () {
    lib860A1A1F_gt_MM_InitializeInfestationStation = TriggerCreate("lib860A1A1F_gt_MM_InitializeInfestationStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InfestionStation Structure Attack
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InfestionStationStructureAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "TychusFireBatOilFireDamage"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SIStukovInfestStructureFriendlyTarget") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SIStukovInfestStructureEnemyTarget") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "RecentlyInfested") == false))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() >= 2.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ToxicNest"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ToxicNestBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorUsed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (RandomInt(0, 100) >= 95) && ((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2))) {
        PlayerCreateEffectUnit(3, "SIStukovInfestStructureEnemyTarget", EventUnit());
        UnitBehaviorAddPlayer(EventUnit(), "RecentlyInfested", 3, 1);
        return true;
    }

    if ((RandomInt(0, 100) >= 90) && (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnit())) == true) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0)) {
        PlayerCreateEffectUnit(3, "SIStukovInfestStructureFriendlyTarget", EventUnit());
        UnitBehaviorAddPlayer(EventUnit(), "RecentlyInfested", 3, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InfestionStationStructureAttack_Init () {
    lib860A1A1F_gt_MM_InfestionStationStructureAttack = TriggerCreate("lib860A1A1F_gt_MM_InfestionStationStructureAttack_Func");
    TriggerEnable(lib860A1A1F_gt_MM_InfestionStationStructureAttack, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_InfestionStationStructureAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownInfestationStation
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownInfestationStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_InfestationStation)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_InfestionStationStructureAttack, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownInfestationStation_Init () {
    lib860A1A1F_gt_MM_ShutdownInfestationStation = TriggerCreate("lib860A1A1F_gt_MM_ShutdownInfestationStation_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownInfestationStation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeNecronomicon
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeNecronomicon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Necronomicon)] = true;
    Wait(2.0, c_timeGame);
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend, true);
    TriggerExecute(lib860A1A1F_gt_MM_PX_InitPlayerX, true, false);
    TriggerExecute(lib860A1A1F_gt_MM_NecronomiconAttackWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeNecronomicon_Init () {
    lib860A1A1F_gt_MM_InitializeNecronomicon = TriggerCreate("lib860A1A1F_gt_MM_InitializeNecronomicon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_NecronomiconAttackWave
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_NecronomiconAttackWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto59651319_n = 200;
    int auto59651319_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto59651319_i = 1; auto59651319_i <= auto59651319_n; auto59651319_i += 1) {
        while (!((UnitGroupCount(lib860A1A1F_gv_mM_UndeadUG, c_unitCountAlive) >= 30))) {
            Wait(5.0, c_timeGame);
        }
        UnitGroupIssueOrder(lib860A1A1F_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(RandomInt(1, 2))), c_orderQueueReplace);
        UnitGroupClear(lib860A1A1F_gv_mM_UndeadUG);
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_NecronomiconAttackWave_Init () {
    lib860A1A1F_gt_MM_NecronomiconAttackWave = TriggerCreate("lib860A1A1F_gt_MM_NecronomiconAttackWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_NecronomiconAttackWaveDefend
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGroupCount(lib860A1A1F_gv_mM_UndeadUG, c_unitCountAlive) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(lib860A1A1F_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    UnitGroupIssueOrder(lib860A1A1F_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(RandomInt(1, 2))), c_orderQueueAddToEnd);
    UnitGroupClear(lib860A1A1F_gv_mM_UndeadUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend_Init () {
    lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend = TriggerCreate("lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend_Func");
    TriggerEnable(lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownNecronomicon
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownNecronomicon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Necronomicon)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend, false);
    TriggerStop(lib860A1A1F_gt_MM_NecronomiconAttackWave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownNecronomicon_Init () {
    lib860A1A1F_gt_MM_ShutdownNecronomicon = TriggerCreate("lib860A1A1F_gt_MM_ShutdownNecronomicon_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownNecronomicon, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeDarkMirror
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeDarkMirror_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const bool lv_cTrue = true;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_DarkMirror)] = true;
    libCOMI_gv_mM_DarkMirrorActive = lv_cTrue;
    TriggerExecute(lib860A1A1F_gt_MM_PX_InitPlayerX, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeDarkMirror_Init () {
    lib860A1A1F_gt_MM_InitializeDarkMirror = TriggerCreate("lib860A1A1F_gt_MM_InitializeDarkMirror_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownDarkMirror
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownDarkMirror_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const bool lv_cFalse = false;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_DarkMirror)] = false;
    libCOMI_gv_mM_DarkMirrorActive = lv_cFalse;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownDarkMirror_Init () {
    lib860A1A1F_gt_MM_ShutdownDarkMirror = TriggerCreate("lib860A1A1F_gt_MM_ShutdownDarkMirror_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownDarkMirror, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeRepulsive Field
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeRepulsiveField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RepulsiveField)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitDamageFix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeRepulsiveField_Init () {
    lib860A1A1F_gt_MM_InitializeRepulsiveField = TriggerCreate("lib860A1A1F_gt_MM_InitializeRepulsiveField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownRepulsiveField
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownRepulsiveField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_RepulsiveField)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownRepulsiveField_Init () {
    lib860A1A1F_gt_MM_ShutdownRepulsiveField = TriggerCreate("lib860A1A1F_gt_MM_ShutdownRepulsiveField_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownRepulsiveField, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeIcollectIchange
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeIcollectIchange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_ICollectIChange)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeIcollectIchange_Init () {
    lib860A1A1F_gt_MM_InitializeIcollectIchange = TriggerCreate("lib860A1A1F_gt_MM_InitializeIcollectIchange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownICollectIChange
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownICollectIChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_ICollectIChange)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownICollectIChange_Init () {
    lib860A1A1F_gt_MM_ShutdownICollectIChange = TriggerCreate("lib860A1A1F_gt_MM_ShutdownICollectIChange_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownICollectIChange, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeMothership
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Mothership)] = true;
    if ((libCOOC_gf_CC_CurrentMap() == "AC_ShakurasTemple")) {
        lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance = 18.0;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    TriggerEnable(lib860A1A1F_gt_MM_MissileDrop, true);
    TriggerEnable(lib860A1A1F_gt_MM_MothershipCritical, true);
    TriggerEnable(lib860A1A1F_gt_MM_PlanetCracker, true);
    Wait(10.0, c_timeAI);
    TriggerExecute(lib860A1A1F_gt_MM_MothershipController, true, false);
    Wait(710.0, c_timeAI);
    TriggerExecute(lib860A1A1F_gt_MM_MothershipController, true, false);
    Wait(300.0, c_timeAI);
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3500.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    Wait(300.0, c_timeAI);
    TriggerExecute(lib860A1A1F_gt_MM_MothershipController, true, false);
    Wait(300.0, c_timeAI);
    TriggerExecute(lib860A1A1F_gt_MM_MothershipController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeMothership_Init () {
    lib860A1A1F_gt_MM_InitializeMothership = TriggerCreate("lib860A1A1F_gt_MM_InitializeMothership_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MothershipController
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_MothershipController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vCurrentTarget;
    unitgroup lv_vTargetCandidates;
    unit lv_vMothership;
    point lv_vTargetLocation;
    int lv_vSearchAttempts;

    // Automatic Variable Declarations
    const int auto83B3DE6F_ae = 100;
    const int auto83B3DE6F_ai = 1;

    // Variable Initialization
    lv_vTargetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, 3, lib860A1A1F_gf_MM_MothershipSpawn());
    lv_vMothership = UnitLastCreated();
    UnitGroupAdd(lib860A1A1F_gv_mM_MothershipUG, UnitLastCreated());
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingDiamond", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(73.33, 0.00, 73.33, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_860A1A1F_6921BEE0"));
    Wait(2.0, c_timeGame);
    while (true) {
        if ((lv_vCurrentTarget != null)) {
            UnitGroupRemove(lib860A1A1F_gv_mM_MothershipTargets, lv_vCurrentTarget);
        }

        lv_vCurrentTarget = null;
        lv_vTargetCandidates = UnitGroupAlliance(1, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_vTargetCandidates, lib860A1A1F_gv_mM_MothershipTargets);
        while ((lib860A1A1F_gf_MM_MothershipTargetValid(lv_vMothership, lv_vCurrentTarget) == false)) {
            if ((lv_vCurrentTarget != null)) {
                UnitGroupRemove(lv_vTargetCandidates, lv_vCurrentTarget);
                lv_vCurrentTarget = null;
            }

            if (((lv_vMothership == null) || (UnitGroupCount(lv_vTargetCandidates, c_unitCountAlive) <= 0))) {
                break;
            }

            lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vTargetCandidates, UnitGetPosition(lv_vMothership));
        }
        if ((lv_vCurrentTarget != null)) {
            UnitIssueOrder(lv_vMothership, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_vCurrentTarget)), c_orderQueueReplace);
            UnitGroupAdd(lib860A1A1F_gv_mM_MothershipTargets, lv_vCurrentTarget);
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_vMothership), PlayerStartLocation(1)) > 80.0)) {
                lv_vTargetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_vMothership), 10.0, PlayerStartLocation(1));
            }
            else {
                lv_vTargetLocation = PointWithOffsetPolar(UnitGetPosition(lv_vMothership), 10.0, libNtve_gf_RandomAngle());
            }
            lv_vSearchAttempts = 1;
            for ( ; ( (auto83B3DE6F_ai >= 0 && lv_vSearchAttempts <= auto83B3DE6F_ae) || (auto83B3DE6F_ai < 0 && lv_vSearchAttempts >= auto83B3DE6F_ae) ) ; lv_vSearchAttempts += auto83B3DE6F_ai ) {
                if ((DistanceBetweenPoints(lv_vTargetLocation, PlayerStartLocation(1)) > lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) && (DistanceBetweenPoints(lv_vTargetLocation, PlayerStartLocation(2)) > lib860A1A1F_gv_mM_MotherShipBaseAvoidDistance) && (UnitGroupCount(UnitGroup("PitAlarak", c_playerAny, RegionCircle(lv_vTargetLocation, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_vTargetLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) || (DistanceBetweenPoints(lv_vTargetLocation, PlayerStartLocation(3)) < 25.0) || (DistanceBetweenPoints(lv_vTargetLocation, PlayerStartLocation(4)) < 25.0))) {
                    UnitIssueOrder(lv_vMothership, OrderTargetingPoint(AbilityCommand("attack", 0), lv_vTargetLocation), c_orderQueueReplace);
                    break;
                }
                else {
                    lv_vTargetLocation = PointWithOffsetPolar(UnitGetPosition(lv_vMothership), 10.0, libNtve_gf_RandomAngle());
                }
            }
        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
        if ((UnitIsAlive(lv_vMothership) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_MothershipController_Init () {
    lib860A1A1F_gt_MM_MothershipController = TriggerCreate("lib860A1A1F_gt_MM_MothershipController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Missile Drop
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_MissileDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vMothership;
    unitgroup lv_vDummies;
    unitgroup lv_vMissiles;

    // Automatic Variable Declarations
    unitgroup autoEA0CFE58_g;
    int autoEA0CFE58_u;
    unit autoEA0CFE58_var;
    unitgroup auto43593D7E_g;
    int auto43593D7E_u;
    unit auto43593D7E_var;
    unitgroup auto7B1904AA_g;
    int auto7B1904AA_u;
    unit auto7B1904AA_var;

    // Variable Initialization
    lv_vDummies = UnitGroupEmpty();
    lv_vMissiles = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vMothership = EventUnit();
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_vMothership, "Create Shockwave");
    Wait(0.5, c_timeGame);
    autoEA0CFE58_g = UnitGroupAlliance(UnitGetOwner(lv_vMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_vMothership), 10.0), UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA0CFE58_u = UnitGroupCount(autoEA0CFE58_g, c_unitCountAll);
    for (;; autoEA0CFE58_u -= 1) {
        autoEA0CFE58_var = UnitGroupUnitFromEnd(autoEA0CFE58_g, autoEA0CFE58_u);
        if (autoEA0CFE58_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyUnit", 0, UnitGetOwner(lv_vMothership), libNtve_gf_PointWithZOffset(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(autoEA0CFE58_var), 0.7, UnitGetPosition(lv_vMothership)), 0.0));
        UnitCreateEffectUnit(UnitLastCreated(), "FlagshipTimeBombApplyRedirectMissile", autoEA0CFE58_var);
        UnitGroupAdd(lv_vDummies, UnitLastCreated());
        UnitGroupAdd(lv_vMissiles, autoEA0CFE58_var);
    }
    Wait(8.0, c_timeGame);
    auto43593D7E_g = lv_vDummies;
    auto43593D7E_u = UnitGroupCount(auto43593D7E_g, c_unitCountAll);
    for (;; auto43593D7E_u -= 1) {
        auto43593D7E_var = UnitGroupUnitFromEnd(auto43593D7E_g, auto43593D7E_u);
        if (auto43593D7E_var == null) { break; }
        UnitRemove(auto43593D7E_var);
    }
    auto7B1904AA_g = lv_vMissiles;
    auto7B1904AA_u = UnitGroupCount(auto7B1904AA_g, c_unitCountAll);
    for (;; auto7B1904AA_u -= 1) {
        auto7B1904AA_var = UnitGroupUnitFromEnd(auto7B1904AA_g, auto7B1904AA_u);
        if (auto7B1904AA_var == null) { break; }
        UnitRemove(auto7B1904AA_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_MissileDrop_Init () {
    lib860A1A1F_gt_MM_MissileDrop = TriggerCreate("lib860A1A1F_gt_MM_MissileDrop_Func");
    TriggerEnable(lib860A1A1F_gt_MM_MissileDrop, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_MissileDrop, null, "FinalB", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MothershipCritical
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_MothershipCritical_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_MothershipUG, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 200.0))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), lib860A1A1F_gf_MM_MothershipSpawn()), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("MothershipAiur06PlanetCracker", 1)), c_orderQueueReplace);
    lib860A1A1F_gf_MM_UnitScaleController(EventUnit(), 1.0);
    Wait(0.5, c_timeGame);
    UnitBehaviorAddPlayer(EventUnit(), "MothershipRegen", 3, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_MothershipCritical_Init () {
    lib860A1A1F_gt_MM_MothershipCritical = TriggerCreate("lib860A1A1F_gt_MM_MothershipCritical_Func");
    TriggerEnable(lib860A1A1F_gt_MM_MothershipCritical, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_MothershipCritical, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PlanetCracker
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_PlanetCracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vTargetCandidates;
    unitgroup lv_vArmedTargetCandidates;
    unit lv_vCurrentTarget;

    // Automatic Variable Declarations
    unitgroup auto888C76FC_g;
    int auto888C76FC_u;
    unit auto888C76FC_var;
    const int auto4C6ECB0A_n = 10;
    int auto4C6ECB0A_i;

    // Variable Initialization
    lv_vTargetCandidates = UnitGroupEmpty();
    lv_vArmedTargetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(EventUnit(), "MothershipAiur06PlanetCracker") == true) && (UnitIsAlive(EventUnit()) == true)) {
        lv_vCurrentTarget = null;
        UnitGroupClear(lv_vArmedTargetCandidates);
        lv_vTargetCandidates = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto888C76FC_g = lv_vTargetCandidates;
        auto888C76FC_u = UnitGroupCount(auto888C76FC_g, c_unitCountAll);
        for (;; auto888C76FC_u -= 1) {
            auto888C76FC_var = UnitGroupUnitFromEnd(auto888C76FC_g, auto888C76FC_u);
            if (auto888C76FC_var == null) { break; }
            if ((UnitHasBehavior2(auto888C76FC_var, "VoidSentryBlackHole") == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_vCurrentTarget)) <= 4.0)) {
                lv_vCurrentTarget = auto888C76FC_var;
                break;
            }

            if ((UnitCanAttackTarget(auto888C76FC_var, EventUnit()) == true)) {
                UnitGroupAdd(lv_vArmedTargetCandidates, auto888C76FC_var);
            }

        }
        if ((lv_vCurrentTarget == null)) {
            if ((UnitGroupCount(lv_vArmedTargetCandidates, c_unitCountAlive) >= 1)) {
                lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vArmedTargetCandidates, UnitGetPosition(EventUnit()));
            }
            else {
                lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vTargetCandidates, UnitGetPosition(EventUnit()));
            }
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.35);
        for (auto4C6ECB0A_i = 1; auto4C6ECB0A_i <= auto4C6ECB0A_n; auto4C6ECB0A_i += 1) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_vCurrentTarget)), c_orderQueueReplace);
            Wait(0.2, c_timeGame);
            if ((UnitIsAlive(lv_vCurrentTarget) == false)) {
                break;
            }

        }
    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropMovementSpeed));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_PlanetCracker_Init () {
    lib860A1A1F_gt_MM_PlanetCracker = TriggerCreate("lib860A1A1F_gt_MM_PlanetCracker_Func");
    TriggerEnable(lib860A1A1F_gt_MM_PlanetCracker, false);
    TriggerAddEventUnitAbility(lib860A1A1F_gt_MM_PlanetCracker, null, AbilityCommand("MothershipAiur06PlanetCracker", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMothership
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto00B11C97_g;
    int auto00B11C97_u;
    unit auto00B11C97_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Mothership)] = false;
    TriggerEnable(lib860A1A1F_gt_MM_MissileDrop, false);
    TriggerEnable(lib860A1A1F_gt_MM_MothershipCritical, false);
    TriggerEnable(lib860A1A1F_gt_MM_PlanetCracker, false);
    auto00B11C97_g = lib860A1A1F_gv_mM_MothershipUG;
    auto00B11C97_u = UnitGroupCount(auto00B11C97_g, c_unitCountAll);
    for (;; auto00B11C97_u -= 1) {
        auto00B11C97_var = UnitGroupUnitFromEnd(auto00B11C97_g, auto00B11C97_u);
        if (auto00B11C97_var == null) { break; }
        UnitKill(auto00B11C97_var);
    }
    TriggerStop(lib860A1A1F_gt_MM_MothershipController);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownMothership_Init () {
    lib860A1A1F_gt_MM_ShutdownMothership = TriggerCreate("lib860A1A1F_gt_MM_ShutdownMothership_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownMothership, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeTheMist
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeTheMist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSpawnCount;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;
    point lv_vPoint;
    int lv_vDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 3000;
    lv_vDistance = 21;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_TheMist)] = true;
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_MistTerrorDies, true);
    TriggerEnable(lib860A1A1F_gt_MM_ScannerSweepCounter, true);
    TriggerExecute(lib860A1A1F_gt_MM_MistMovement, true, false);
    TriggerExecute(lib860A1A1F_gt_MM_TerrorSpawn, true, false);
    TriggerExecute(lib860A1A1F_gt_MM_PX_InitPlayerX, true, true);
    while ((lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        if ((lv_vSpawnAttempt >= 2500)) {
            lv_vDistance = 21;
            lv_vPoint = RegionRandomPoint(RegionEntireMap());
        }
        else {
            lv_vPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
        if ((DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= 25.0) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= 25.0) && (UnitCount("ShadowCloudEpilogue01", c_playerAny, RegionCircle(lv_vPoint, lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 22.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (PointPathingIsConnected(lv_vPoint, PlayerStartLocation(1)) == true)) {
            lv_vSpawnCount += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloudEpilogue01", 0, 3, lv_vPoint);
            UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitGroupAdd(lib860A1A1F_gv_mM_Mists, UnitLastCreated());
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamage", "Amount", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(30.0, 40.0, 50.0, 60.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamageAOE", "Amount", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(10.0, 15.0, 20.0, 25.0, 0.0, 0.0), 0));
    Wait(900.0, c_timeAI);
    lib860A1A1F_gv_mM_ShadowTerrorSize = 1.4;
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsSearch", "AreaArray[" + IntToString(0) + "].Radius", 3, "2");
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamage", "Amount", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(60.0, 70.0, 80.0, 90.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamageAOE", "Amount", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(25.0, 30.0, 35.0, 40.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "ShadowTerror", "LifeMax", 3, "15000");
    CatalogFieldValueSet(c_gameCatalogUnit, "ShadowTerror", "LifeStart", 3, "15000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeTheMist_Init () {
    lib860A1A1F_gt_MM_InitializeTheMist = TriggerCreate("lib860A1A1F_gt_MM_InitializeTheMist_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MistMovement
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_MistMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexMist;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_nearbyMists;
    int lv_left_or_Right;

    // Automatic Variable Declarations
    unitgroup auto535FBD47_g;
    int auto535FBD47_u;
    const int autoA8188964_ae = 50;
    const int autoA8188964_ai = 1;

    // Variable Initialization
    lv_nearbyMists = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto535FBD47_g = lib860A1A1F_gv_mM_Mists;
        auto535FBD47_u = UnitGroupCount(auto535FBD47_g, c_unitCountAll);
        for (;; auto535FBD47_u -= 1) {
            lv_indexMist = UnitGroupUnitFromEnd(auto535FBD47_g, auto535FBD47_u);
            if (lv_indexMist == null) { break; }
            lv_nearbyMists = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(lv_indexMist), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupRemove(lv_nearbyMists, lv_indexMist);
            if ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) > 0)) {
                lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_indexMist), -3.0, UnitGetPosition(UnitGroupRandomUnit(lv_nearbyMists, c_unitCountAlive)));
            }
            else {
                lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexMist), 8.0, libNtve_gf_RandomAngle());
            }
            if ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) == 0)) {
                lv_searchAttempts = 1;
                for ( ; ( (autoA8188964_ai >= 0 && lv_searchAttempts <= autoA8188964_ae) || (autoA8188964_ai < 0 && lv_searchAttempts >= autoA8188964_ae) ) ; lv_searchAttempts += autoA8188964_ai ) {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexMist), 8.0, libNtve_gf_RandomAngle());
                    if ((DistanceBetweenPoints(lv_targetLocation, PlayerStartLocation(1)) > 25.0) && (DistanceBetweenPoints(lv_targetLocation, PlayerStartLocation(2)) > 25.0) && (UnitCount(null, c_playerAny, RegionCircle(lv_targetLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("ShadowCloudEpilogue01", c_playerAny, RegionCircle(lv_targetLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1) && (PointPathingIsConnected(lv_targetLocation, PlayerStartLocation(1)) == true)) {
                        break;
                    }
                    else {
                        lv_targetLocation = null;
                    }
                }
            }

            if ((lv_targetLocation != null) && ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) > 0) || (RandomInt(0, 100) >= 92))) {
                UnitIssueOrder(lv_indexMist, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
            }

        }
        Wait(RandomFixed(8.0, 15.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_MistMovement_Init () {
    lib860A1A1F_gt_MM_MistMovement = TriggerCreate("lib860A1A1F_gt_MM_MistMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_TerrorSpawn
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_TerrorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vTargets;
    int lv_i;
    unit lv_vPickedTarget;
    fixed lv_vInterval;

    // Automatic Variable Declarations
    unitgroup autoA94D7677_g;
    int autoA94D7677_u;
    unit autoA94D7677_var;
    int auto6277A86E_ae;
    int auto6277A86E_var;
    const int autoDF103A9B_n = 1000;
    int autoDF103A9B_i;

    // Variable Initialization
    lv_vTargets = UnitGroupEmpty();
    lv_vInterval = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vInterval = libCOMI_gf_MinimumDifficultyValueCoopReal(40.0, 40.0, 35.0, 30.0, 0.0, 0.0);
    while (true) {
        Wait(RandomFixed((lv_vInterval * 0.5), (lv_vInterval * 1.8)), c_timeGame);
        UnitGroupClear(lv_vTargets);
        autoA94D7677_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA94D7677_u = UnitGroupCount(autoA94D7677_g, c_unitCountAll);
        for (;; autoA94D7677_u -= 1) {
            autoA94D7677_var = UnitGroupUnitFromEnd(autoA94D7677_g, autoA94D7677_u);
            if (autoA94D7677_var == null) { break; }
            UnitGroupAddUnitGroup(lv_vTargets, UnitGroup(null, 1, RegionCircle(UnitGetPosition(autoA94D7677_var), 8.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_vTargets, UnitGroup(null, 2, RegionCircle(UnitGetPosition(autoA94D7677_var), 8.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        if ((UnitGroupCount(lv_vTargets, c_unitCountAlive) >= 1)) {
            lv_i = MaxI(MinI((UnitGroupCount(lv_vTargets, c_unitCountAlive) / 30), 5), 1);
            auto6277A86E_ae = lv_i;
            auto6277A86E_var = 1;
            for ( ; auto6277A86E_var <= auto6277A86E_ae; auto6277A86E_var += 1 ) {
                for (autoDF103A9B_i = 1; autoDF103A9B_i <= autoDF103A9B_n; autoDF103A9B_i += 1) {
                    lv_vPickedTarget = UnitGroupRandomUnit(lv_vTargets, c_unitCountAlive);
                    if ((UnitGroupCount(UnitGroup("ShadowTerror", c_playerAny, RegionCircle(UnitGetPosition(lv_vPickedTarget), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (PathingType(UnitGetPosition(lv_vPickedTarget)) == c_pathingGround)) {
                        lib860A1A1F_gf_MM_TerrorSpawn(lv_vPickedTarget);
                        break;
                    }

                }
            }
        }

        if ((GameGetMissionTime() >= 600.0)) {
            lv_vInterval = libCOMI_gf_MinimumDifficultyValueCoopReal(35.0, 30.0, 25.0, 20.0, 0.0, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_TerrorSpawn_Init () {
    lib860A1A1F_gt_MM_TerrorSpawn = TriggerCreate("lib860A1A1F_gt_MM_TerrorSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ScannerSweepCounter
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ScannerSweepCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        Wait(RandomFixed(1.0, 3.0), c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("EventEP03_ThunderOneShot", -1), c_maxPlayers, PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 500.0, 0.0);
        Wait(1.5, c_timeGame);
        GameDestroyEffects(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 1, "ScannerSweep");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ScannerSweepCounter_Init () {
    lib860A1A1F_gt_MM_ScannerSweepCounter = TriggerCreate("lib860A1A1F_gt_MM_ScannerSweepCounter_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ScannerSweepCounter, false);
    TriggerAddEventPlayerEffectUsed(lib860A1A1F_gt_MM_ScannerSweepCounter, c_playerAny, "ScannerSweep");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MistTerrorDies
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_MistTerrorDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF7040C67_g;
    int autoF7040C67_u;
    unit autoF7040C67_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ShadowTerror"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7040C67_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoF7040C67_u = UnitGroupCount(autoF7040C67_g, c_unitCountAll);
    for (;; autoF7040C67_u -= 1) {
        autoF7040C67_var = UnitGroupUnitFromEnd(autoF7040C67_g, autoF7040C67_u);
        if (autoF7040C67_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(autoF7040C67_var), libNtve_gf_SetOpacity(0.0, 10.0));
        Wait(10.0, c_timeGame);
        UnitRemove(autoF7040C67_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_MistTerrorDies_Init () {
    lib860A1A1F_gt_MM_MistTerrorDies = TriggerCreate("lib860A1A1F_gt_MM_MistTerrorDies_Func");
    TriggerEnable(lib860A1A1F_gt_MM_MistTerrorDies, false);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_MistTerrorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMist
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownMist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4305BA9F_g;
    int auto4305BA9F_u;
    unit auto4305BA9F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_TheMist)] = false;
    auto4305BA9F_g = lib860A1A1F_gv_mM_Mists;
    auto4305BA9F_u = UnitGroupCount(auto4305BA9F_g, c_unitCountAll);
    for (;; auto4305BA9F_u -= 1) {
        auto4305BA9F_var = UnitGroupUnitFromEnd(auto4305BA9F_g, auto4305BA9F_u);
        if (auto4305BA9F_var == null) { break; }
        UnitRemove(auto4305BA9F_var);
    }
    TriggerEnable(lib860A1A1F_gt_MM_ScannerSweepCounter, false);
    TriggerStop(lib860A1A1F_gt_MM_MistMovement);
    TriggerStop(lib860A1A1F_gt_MM_TerrorSpawn);
    TriggerEnable(lib860A1A1F_gt_MM_MistTerrorDies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownMist_Init () {
    lib860A1A1F_gt_MM_ShutdownMist = TriggerCreate("lib860A1A1F_gt_MM_ShutdownMist_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownMist, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeTheUsualSuspects
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeTheUsualSuspects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vHeroIndex;
    fixed lv_raynorLife;
    fixed lv_tychusLife;
    fixed lv_dehakaLife;
    fixed lv_karaxLife;
    fixed lv_karaxShields;
    fixed lv_novaLife;
    fixed lv_zagaraLife;
    fixed lv_artanisLife;
    fixed lv_artanisShields;
    fixed lv_zeratulLife;
    fixed lv_zertaulShields;
    fixed lv_kerriganLife;

    // Automatic Variable Declarations
    const int autoB8944AA9_ae = lib860A1A1F_gv_mM_AmonHeroMaxNumber;
    const int autoB8944AA9_ai = 1;
    string auto4F7EF844_val;
    const int autoC88B750C_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int autoC88B750C_ai = 1;

    // Variable Initialization
    lv_raynorLife = 1000.0;
    lv_tychusLife = 1000.0;
    lv_dehakaLife = 1500.0;
    lv_karaxLife = 750.0;
    lv_karaxShields = 750.0;
    lv_novaLife = 2250.0;
    lv_zagaraLife = 2250.0;
    lv_artanisLife = 2000.0;
    lv_artanisShields = 2000.0;
    lv_zeratulLife = 2000.0;
    lv_zertaulShields = 2000.0;
    lv_kerriganLife = 5000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_TheUsualSuspects)] = true;
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[1] = "MutatorAmonRaynor";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[2] = "MutatorAmonTychus";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[3] = "TychusMedic";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[4] = "FenixCoop";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[5] = "MutatorAmonKarax";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[6] = "TychusWarhound";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[7] = "TychusSpectre";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[8] = "TychusFirebat";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[9] = "TychusReaper";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[10] = "MutatorAmonDehaka";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[11] = "DehakaGlevig";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[12] = "MutatorAmonNova";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[13] = "AlarakCoop";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[14] = "MutatorAmonArtanis";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[15] = "StukovApocalisk";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[16] = "MutatorAmonZeratul";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[17] = "TychusOdin";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[18] = "DehakaDakrun";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[19] = "DehakaMurvar";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[20] = "StukovAleksander";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[21] = "MutatorAmonZagara";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[22] = "HyperionVoidCoop";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[23] = "AvatarofForm";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[24] = "MutatorAmonKerrigan";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[25] = "TychusHERC";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[26] = "SOAMothershipv4";
    lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[27] = "SuperGaryStetmann";
    lv_vHeroIndex = 1;
    for ( ; ( (autoB8944AA9_ai >= 0 && lv_vHeroIndex <= autoB8944AA9_ae) || (autoB8944AA9_ai < 0 && lv_vHeroIndex >= autoB8944AA9_ae) ) ; lv_vHeroIndex += autoB8944AA9_ai ) {
        auto4F7EF844_val = lib860A1A1F_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex];
        if (auto4F7EF844_val == "MutatorAmonTychus") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonTychus_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonRaynor") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonRaynor_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonDehaka") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonDehaka_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonKarax") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonKarax_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonNova") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonNova_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonZagara") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonZagara_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonArtanis") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonArtanis_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonZeratul") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonZeratul_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "MutatorAmonKerrigan") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("MutatorAmonKerrigan_BirthDialog", c_soundIndexAny);
        }
        else if (auto4F7EF844_val == "HyperionVoidCoop") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroHyperion", -1);
        }
        else if (auto4F7EF844_val == "StukovAleksander") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroAleksander", -1);
        }
        else if (auto4F7EF844_val == "StukovApocalisk") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroApocalisk", -1);
        }
        else if (auto4F7EF844_val == "TychusOdin") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroOdin", -1);
        }
        else if (auto4F7EF844_val == "DehakaMurvar") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroMurvar", -1);
        }
        else if (auto4F7EF844_val == "DehakaDakrun") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroDakrun", -1);
        }
        else if (auto4F7EF844_val == "AlarakCoop") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroAlarak", -1);
        }
        else if (auto4F7EF844_val == "FenixCoop") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroFenix", -1);
        }
        else if (auto4F7EF844_val == "TychusHERC") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroCannonball", -1);
        }
        else if (auto4F7EF844_val == "TychusWarhound") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroSirius", -1);
        }
        else if (auto4F7EF844_val == "TychusSpectre") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroNux", -1);
        }
        else if (auto4F7EF844_val == "TychusFirebat") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroBlaze", -1);
        }
        else if (auto4F7EF844_val == "TychusReaper") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroSam", -1);
        }
        else if (auto4F7EF844_val == "AvatarofForm") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("Zeratul_AC_Construct_Attack_VxFx", -1);
        }
        else if (auto4F7EF844_val == "TychusMedic") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroNikara", -1);
        }
        else if (auto4F7EF844_val == "DehakaGlevig") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroGlevig", -1);
        }
        else if (auto4F7EF844_val == "SOAMothershipv4") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroMothership", -1);
        }
        else if (auto4F7EF844_val == "SuperGaryStetmann") {
            lib860A1A1F_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink("AmonHeroGary", -1);
        }
        else {
        }
    }
    lv_vPlayer = 3;
    for ( ; ( (autoC88B750C_ai >= 0 && lv_vPlayer <= autoC88B750C_ae) || (autoC88B750C_ai < 0 && lv_vPlayer >= autoC88B750C_ae) ) ; lv_vPlayer += autoC88B750C_ai ) {
        if ((PlayerType(lv_vPlayer) == c_playerTypeComputer)) {
            lib860A1A1F_gf_MM_SetHeroCustomFrames(lv_vPlayer);
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_vPlayer, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_vPlayer, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_vPlayer, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_vPlayer, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_vPlayer, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_vPlayer, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_vPlayer, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_vPlayer, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_vPlayer, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_vPlayer, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_vPlayer, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_vPlayer, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_vPlayer, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_vPlayer, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_vPlayer, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_vPlayer, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_vPlayer, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_vPlayer, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_vPlayer, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_vPlayer, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_vPlayer, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_vPlayer, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_vPlayer, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_vPlayer, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            if ((libCOOC_gf_CC_CurrentMap() == "AC_UlnarLocks")) {
                CatalogFieldValueSet(c_gameCatalogBehavior, "AmonHeroDuration", "Duration", lv_vPlayer, "300");
            }

        }

    }
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage, true);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroWaveSent, true);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroHookTriggered, true);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroStunFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDuration, true);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDies, true);
    TriggerEnable(lib860A1A1F_gt_MM_FenixBroodQueen, true);
    TriggerEnable(lib860A1A1F_gt_MM_GaryPowerFieldUsed, true);
    TriggerExecute(lib860A1A1F_gt_MM_AmonHeroPoolAdd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeTheUsualSuspects_Init () {
    lib860A1A1F_gt_MM_InitializeTheUsualSuspects = TriggerCreate("lib860A1A1F_gt_MM_InitializeTheUsualSuspects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroPoolAdd
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroPoolAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE8060EBE_n = 7;
    int autoE8060EBE_i;
    const int auto36592F1A_n = 11;
    int auto36592F1A_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() > 220.0))) {
        Wait(3.0, c_timeGame);
    }
    lib860A1A1F_gv_mM_AmonHeroPool += 1.0;
    for (autoE8060EBE_i = 1; autoE8060EBE_i <= autoE8060EBE_n; autoE8060EBE_i += 1) {
        Wait(90.0, c_timeGame);
        lib860A1A1F_gv_mM_AmonHeroPool += 1.0;
    }
    for (auto36592F1A_i = 1; auto36592F1A_i <= auto36592F1A_n; auto36592F1A_i += 1) {
        Wait(60.0, c_timeGame);
        lib860A1A1F_gv_mM_AmonHeroPool += 1.0;
    }
    while (true) {
        Wait(30.0, c_timeGame);
        lib860A1A1F_gv_mM_AmonHeroPool += 1.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroPoolAdd_Init () {
    lib860A1A1F_gt_MM_AmonHeroPoolAdd = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroPoolAdd_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroPoolAdd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroFenixFatalDamage
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;
    wave lv_vWave;

    // Automatic Variable Declarations
    string auto4F1BB9D6_val;

    // Variable Initialization
    lv_vPoint = UnitGetPosition(EventUnit());
    lv_vWave = AIUnitGetWave(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_AmonSummonedHeroes, EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "FenixCoop") || (UnitGetType(EventUnit()) == "FenixDragoon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4F1BB9D6_val = UnitGetType(EventUnit());
    if (auto4F1BB9D6_val == "FenixCoop") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixDragoon", c_unitCreateIgnorePlacement, EventPlayer(), lv_vPoint);
        lib860A1A1F_gf_MM_HeroSetUp(UnitLastCreated());
        lib860A1A1F_gf_MM_WarpIn(UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(lv_vWave, UnitLastCreated());
    }
    else if (auto4F1BB9D6_val == "FenixDragoon") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixArbiter", c_unitCreateIgnorePlacement, EventPlayer(), lv_vPoint);
        lib860A1A1F_gf_MM_HeroSetUp(UnitLastCreated());
        lib860A1A1F_gf_MM_WarpIn(UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(lv_vWave, UnitLastCreated());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage_Init () {
    lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage, false);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroStunFix
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroStunFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DehakaGlevig") || (UnitGetType(EventUnit()) == "DehakaMurvar") || (UnitGetType(EventUnit()) == "DehakaDakrun") || (UnitGetType(EventUnit()) == "TychusOdin")))) {
            return false;
        }

        if (!(((TechTreeUpgradeCount(1, "TychusReaperBombStun", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(2, "TychusReaperBombStun", c_techCountCompleteOnly) >= 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "TychusReaperBombStunUpgrade", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroStunFix_Init () {
    lib860A1A1F_gt_MM_AmonHeroStunFix = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroStunFix_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroStunFix, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_AmonHeroStunFix, null, "TychusReaperBomb", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroWaveSent
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroWaveSent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_AmonHeroAttackWaveUnits, UnitGroupRandomUnit(AIWaveGetUnits(EventPlayerWave()), c_unitCountAlive)) == false))) {
            return false;
        }

        if (!(((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 2, libNtve_ge_PlayerRelation_Enemy) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = AIWaveGetUnits(EventPlayerWave());
    TextExpressionSetToken("Param/Expression/lib_860A1A1F_D85B69B6", "A", StringToText(libA8FDA37D_gf_UT_PointXYToString(UnitGroupCenterOfGroup(lv_vUG), ",", 1)));
    TextExpressionSetToken("Param/Expression/lib_860A1A1F_D85B69B6", "B", IntToText(UnitGroupCount(lv_vUG, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_860A1A1F_D85B69B6"), false);
    lib860A1A1F_gf_MM_AmonHeroSpawn(lv_vUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroWaveSent_Init () {
    lib860A1A1F_gt_MM_AmonHeroWaveSent = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroWaveSent_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroWaveSent, false);
    TriggerAddEventPlayerAIWave(lib860A1A1F_gt_MM_AmonHeroWaveSent, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroHookTriggered
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroHookTriggered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = DataTableGetUnitGroup(true, "MM_WaveSentGroup");

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_860A1A1F_9905F508", "C", IntToText(UnitGetOwner(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive))));
    TextExpressionSetToken("Param/Expression/lib_860A1A1F_9905F508", "A", StringToText(libA8FDA37D_gf_UT_PointXYToString(UnitGroupCenterOfGroup(lv_vUG), ",", 1)));
    TextExpressionSetToken("Param/Expression/lib_860A1A1F_9905F508", "B", IntToText(UnitGroupCount(lv_vUG, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_860A1A1F_9905F508"), false);
    lib860A1A1F_gf_MM_AmonHeroSpawn(lv_vUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroHookTriggered_Init () {
    lib860A1A1F_gt_MM_AmonHeroHookTriggered = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroHookTriggered_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroHookTriggered, false);
    TriggerAddEventGeneric(lib860A1A1F_gt_MM_AmonHeroHookTriggered, "MM_WaveSentHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroDuration
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_860A1A1F_DDA660AB"), false);
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroDuration_Init () {
    lib860A1A1F_gt_MM_AmonHeroDuration = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroDuration_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDuration, false);
    TriggerAddEventUnitBehaviorChange(lib860A1A1F_gt_MM_AmonHeroDuration, null, "AmonHeroDuration", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroDies
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_AmonHeroDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_AmonSummonedHeroes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    if ((EventUnit() != null)) {
        UnitRemove(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_AmonHeroDies_Init () {
    lib860A1A1F_gt_MM_AmonHeroDies = TriggerCreate("lib860A1A1F_gt_MM_AmonHeroDies_Func");
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDies, false);
    TriggerAddEventUnitDied(lib860A1A1F_gt_MM_AmonHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_FenixBroodQueen
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_FenixBroodQueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_AmonSummonedHeroes, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FenixDragoon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_860A1A1F_4B44D461"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_FenixBroodQueen_Init () {
    lib860A1A1F_gt_MM_FenixBroodQueen = TriggerCreate("lib860A1A1F_gt_MM_FenixBroodQueen_Func");
    TriggerEnable(lib860A1A1F_gt_MM_FenixBroodQueen, false);
    TriggerAddEventUnitDamaged(lib860A1A1F_gt_MM_FenixBroodQueen, null, c_unitDamageTypeAny, c_unitDamageEither, "QueenStukovSpawnBroodlingsDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Gary Power Field Used
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_GaryPowerFieldUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto5A803C77_n = 3;
    int auto5A803C77_i;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    for (auto5A803C77_i = 1; auto5A803C77_i <= auto5A803C77_n; auto5A803C77_i += 1) {
        Wait(1.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PowerTowerStetmann", 0, 3, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 6.0)));
        UnitBehaviorAddPlayer(UnitLastCreated(), "StetTimedLife", 3, 1);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetShowStatusBar 1 Duration");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_GaryPowerFieldUsed_Init () {
    lib860A1A1F_gt_MM_GaryPowerFieldUsed = TriggerCreate("lib860A1A1F_gt_MM_GaryPowerFieldUsed_Func");
    TriggerEnable(lib860A1A1F_gt_MM_GaryPowerFieldUsed, false);
    TriggerAddEventUnitAbility(lib860A1A1F_gt_MM_GaryPowerFieldUsed, null, AbilityCommand("PowerFieldSuperGaryStetmannHealth", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownTheUsualSuspects
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownTheUsualSuspects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3C6A2D13_g;
    int auto3C6A2D13_u;
    unit auto3C6A2D13_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_TheUsualSuspects)] = false;
    auto3C6A2D13_g = lib860A1A1F_gv_mM_AmonSummonedHeroes;
    auto3C6A2D13_u = UnitGroupCount(auto3C6A2D13_g, c_unitCountAll);
    for (;; auto3C6A2D13_u -= 1) {
        auto3C6A2D13_var = UnitGroupUnitFromEnd(auto3C6A2D13_g, auto3C6A2D13_u);
        if (auto3C6A2D13_var == null) { break; }
        UnitKill(auto3C6A2D13_var);
    }
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage, false);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroWaveSent, false);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroHookTriggered, false);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroStunFix, false);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDuration, false);
    TriggerEnable(lib860A1A1F_gt_MM_AmonHeroDies, false);
    TriggerEnable(lib860A1A1F_gt_MM_FenixBroodQueen, false);
    TriggerStop(lib860A1A1F_gt_MM_AmonHeroPoolAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownTheUsualSuspects_Init () {
    lib860A1A1F_gt_MM_ShutdownTheUsualSuspects = TriggerCreate("lib860A1A1F_gt_MM_ShutdownTheUsualSuspects_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownTheUsualSuspects, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeShapeshifters
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_InitializeShapeshifters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Shapeshifters)] = true;
    TriggerExecute(lib860A1A1F_gt_MM_PX_InitPlayerX, true, false);
    TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitCreationFix, true);
    TriggerEnable(lib860A1A1F_gt_MM_UnitRemovedFix, true);
    TriggerExecute(lib860A1A1F_gt_MM_Shapeshifter_Spawn, true, false);
    TriggerEnable(lib860A1A1F_gt_MM_ShapeshiftersInWaves, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_InitializeShapeshifters_Init () {
    lib860A1A1F_gt_MM_InitializeShapeshifters = TriggerCreate("lib860A1A1F_gt_MM_InitializeShapeshifters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Shapeshifter_Spawn
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_Shapeshifter_Spawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_vSpawnTimer;
    int lv_vAmount;
    int lv_vStationaryPercentage;

    // Automatic Variable Declarations
    string auto0E6E25C4_val;
    int autoAC0BDC6B_ae;
    int autoAC0BDC6B_var;

    // Variable Initialization
    lv_vSpawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E6E25C4_val = libCOOC_gf_CC_CurrentMap();
    {
        lv_vStationaryPercentage = 100;
    }
    Wait(230.0, c_timeGame);
    while (true) {
        if ((TimerGetRemaining(lv_vSpawnTimer) > 0.0)) {
            Wait(1.0, c_timeGame);
            continue;
        }
        else {
            if ((GameGetMissionTime() <= 420.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 1, 2, 2);
            }
            else if ((GameGetMissionTime() <= 600.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 3, 4);
            }
            else if ((GameGetMissionTime() <= 900.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 5, 6);
            }
            else if ((GameGetMissionTime() <= 1200.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 5, 6, 7);
            }
            else if ((GameGetMissionTime() <= 1500.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 5, 6, 7, 8);
            }
            else if (true) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 5, 7, 8, 9);
            }
            SoundPlayForPlayer(SoundLink("Changeling_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            autoAC0BDC6B_ae = lv_vAmount;
            autoAC0BDC6B_var = 1;
            for ( ; autoAC0BDC6B_var <= autoAC0BDC6B_ae; autoAC0BDC6B_var += 1 ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Shapeshifter", 0, 3, lib860A1A1F_gf_MM_PositionEnemyStructureWithPathing());
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                libCOMU_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                if ((RandomInt(1, 100) <= lv_vStationaryPercentage)) {
                    lib860A1A1F_gf_MM_ShapeshifterSwapModel(UnitLastCreated());
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
                    lib860A1A1F_gf_MM_UnitScaleController(UnitLastCreated(), 0.5);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetWalkAnimMoveSpeed 1.5");
                }
                else {
                    AISetUnitSuicide(UnitLastCreated(), true);
                    lib860A1A1F_gf_MM_ApplyShapeshifterPing(UnitLastCreated());
                }
            }
            TimerStart(lv_vSpawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 120.0, 110.0, 100.0, 90.0, 80.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_Shapeshifter_Spawn_Init () {
    lib860A1A1F_gt_MM_Shapeshifter_Spawn = TriggerCreate("lib860A1A1F_gt_MM_Shapeshifter_Spawn_Func");
    TriggerEnable(lib860A1A1F_gt_MM_Shapeshifter_Spawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShapeshiftersInWaves
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShapeshiftersInWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSpawnAmount;
    unitgroup lv_vUG;
    int lv_vPlayer;

    // Automatic Variable Declarations
    string auto22946064_val;
    int auto226C8B8E_n;
    int auto226C8B8E_i;

    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(lib860A1A1F_gv_mM_ShapeshifterTimer) < 1.0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib860A1A1F_gv_mM_WaveUnitsWithShapeshifters, UnitGroupRandomUnit(AIWaveGetUnits(EventPlayerWave()), c_unitCountAlive)) == false))) {
            return false;
        }

        if (!(((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 2, libNtve_ge_PlayerRelation_Enemy) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto22946064_val = libCOOC_gf_CC_CurrentMap();
    if (auto22946064_val == "AC_ShakurasTemple") {
        TimerStart(lib860A1A1F_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else if (auto22946064_val == "AC_TarsonisTrain") {
        TimerStart(lib860A1A1F_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else if (auto22946064_val == "AC_KaldirShuttle") {
        TimerStart(lib860A1A1F_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else {
        TimerStart(lib860A1A1F_gv_mM_ShapeshifterTimer, 60.0, false, c_timeGame);
    }
    UnitGroupAddUnitGroup(lib860A1A1F_gv_mM_WaveUnitsWithShapeshifters, AIWaveGetUnits(EventPlayerWave()));
    if ((GameGetMissionTime() < 600.0)) {
        lv_vSpawnAmount = 1;
    }
    else if ((GameGetMissionTime() < 900.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0);
    }
    else if ((GameGetMissionTime() < 1200.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 2, 3, 0, 0);
    }
    else if ((GameGetMissionTime() < 1500.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0);
    }
    else if (true) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 4, 5, 0, 0);
    }
    lib860A1A1F_gf_MM_WaitForUnload(lv_vUG);
    SoundPlayForPlayer(SoundLink("Changeling_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto226C8B8E_n = lv_vSpawnAmount;
    for (auto226C8B8E_i = 1; auto226C8B8E_i <= auto226C8B8E_n; auto226C8B8E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Shapeshifter", 0, lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
        TextExpressionSetToken("Param/Expression/lib_860A1A1F_66A0823A", "A", FixedToText(PointGetX(UnitGetPosition(UnitLastCreated())), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_860A1A1F_66A0823A", "B", FixedToText(PointGetY(UnitGetPosition(UnitLastCreated())), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_860A1A1F_66A0823A"), false);
        lib860A1A1F_gf_MM_ShapeshifterSwapModel(UnitLastCreated());
        lib860A1A1F_gf_MM_AddToAttackWave_Check(UnitLastCreated(), lv_vUG);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetWalkAnimMoveSpeed 1.5");
        UnitGroupAdd(lib860A1A1F_gv_mM_WaveUnitsWithShapeshifters, UnitLastCreated());
        libCOMU_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        lib860A1A1F_gf_MM_WarpIn(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShapeshiftersInWaves_Init () {
    lib860A1A1F_gt_MM_ShapeshiftersInWaves = TriggerCreate("lib860A1A1F_gt_MM_ShapeshiftersInWaves_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShapeshiftersInWaves, false);
    TriggerAddEventPlayerAIWave(lib860A1A1F_gt_MM_ShapeshiftersInWaves, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownShapeshifters
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_MM_ShutdownShapeshifters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B215C08_g;
    int auto8B215C08_u;
    unit auto8B215C08_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_Shapeshifters)] = false;
    auto8B215C08_g = UnitGroup("Shapeshifter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B215C08_u = UnitGroupCount(auto8B215C08_g, c_unitCountAll);
    for (;; auto8B215C08_u -= 1) {
        auto8B215C08_var = UnitGroupUnitFromEnd(auto8B215C08_g, auto8B215C08_u);
        if (auto8B215C08_var == null) { break; }
        UnitKill(auto8B215C08_var);
    }
    TriggerStop(lib860A1A1F_gt_MM_Shapeshifter_Spawn);
    TriggerEnable(lib860A1A1F_gt_MM_ShapeshiftersInWaves, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_MM_ShutdownShapeshifters_Init () {
    lib860A1A1F_gt_MM_ShutdownShapeshifters = TriggerCreate("lib860A1A1F_gt_MM_ShutdownShapeshifters_Func");
    TriggerEnable(lib860A1A1F_gt_MM_ShutdownShapeshifters, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_InitializeHeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_raynorLife;
    fixed lv_tychusLife;
    fixed lv_dehakaLife;
    fixed lv_karaxLife;
    fixed lv_karaxShields;
    fixed lv_novaLife;
    fixed lv_zagaraLife;
    fixed lv_artanisLife;
    fixed lv_artanisShields;
    fixed lv_zeratulLife;
    fixed lv_zertaulShields;
    fixed lv_kerriganLife;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto5C54086F_ae = lib860A1A1F_gv_tT_C_AmonHeroMaxHeroTypes;
    const int auto5C54086F_ai = 1;
    string auto3956026A_val;
    const int auto482C6C3B_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int auto482C6C3B_ai = 1;

    // Variable Initialization
    lv_raynorLife = 1000.0;
    lv_tychusLife = 1000.0;
    lv_dehakaLife = 1500.0;
    lv_karaxLife = 750.0;
    lv_karaxShields = 750.0;
    lv_novaLife = 2250.0;
    lv_zagaraLife = 2250.0;
    lv_artanisLife = 2000.0;
    lv_artanisShields = 2000.0;
    lv_zeratulLife = 2000.0;
    lv_zertaulShields = 2000.0;
    lv_kerriganLife = 5000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_HeroesfromtheStormOld)] = true;
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[1] = "MutatorAmonTychus";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[2] = "MutatorAmonRaynor";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[3] = "MutatorAmonDehaka";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[4] = "MutatorAmonKarax";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[5] = "MutatorAmonNova";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[6] = "MutatorAmonZagara";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[7] = "MutatorAmonZeratul";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[8] = "MutatorAmonArtanis";
    lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[9] = "MutatorAmonKerrigan";
    lv_heroIndex = 1;
    for ( ; ( (auto5C54086F_ai >= 0 && lv_heroIndex <= auto5C54086F_ae) || (auto5C54086F_ai < 0 && lv_heroIndex >= auto5C54086F_ae) ) ; lv_heroIndex += auto5C54086F_ai ) {
        auto3956026A_val = lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[lv_heroIndex];
        if (auto3956026A_val == "MutatorAmonTychus") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonTychus_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonRaynor") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonRaynor_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonDehaka") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonDehaka_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonKarax") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKarax_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonNova") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonNova_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonZagara") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZagara_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonArtanis") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonArtanis_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonZeratul") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZeratul_BirthDialog", c_soundIndexAny);
        }
        else if (auto3956026A_val == "MutatorAmonKerrigan") {
            lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKerrigan_BirthDialog", c_soundIndexAny);
        }
        else {
        }
    }
    lv_player = 3;
    for ( ; ( (auto482C6C3B_ai >= 0 && lv_player <= auto482C6C3B_ae) || (auto482C6C3B_ai < 0 && lv_player >= auto482C6C3B_ae) ) ; lv_player += auto482C6C3B_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
        }

    }
    TriggerEnable(lib860A1A1F_gt_TT_HeroesFromTheStormOld, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld_Init () {
    lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld = TriggerCreate("lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_ShutdownHeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_HeroesfromtheStormOld)] = false;
    TriggerEnable(lib860A1A1F_gt_TT_HeroesFromTheStormOld, false);
    TriggerStop(lib860A1A1F_gt_TT_HeroesFromTheStormOld);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld_Init () {
    lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld = TriggerCreate("lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_HeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_gt_TT_HeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_waveSpawnPoint;
    unit lv_heroUnit;
    int lv_i;
    int lv_randomHeroIndex1;
    int lv_randomHeroIndex2;
    int lv_randomHeroIndex3;

    // Automatic Variable Declarations
    int autoF00D5106_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveSpawnPoint = UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave()));
    lib860A1A1F_gv_TT_AmonHeroNumber += 1;
    autoF00D5106_val = lib860A1A1F_gv_TT_AmonHeroNumber;
    if (autoF00D5106_val == 1) {
        return true;
    }
    else if (autoF00D5106_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[2], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[2], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[1], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[1], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 8) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[8], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[8], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 9) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[7], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[7], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (autoF00D5106_val == 10) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[(lib860A1A1F_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else {
        if ((ModI(lib860A1A1F_gv_TT_AmonHeroNumber, 2) == 0)) {
            SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            lv_randomHeroIndex1 = RandomInt(1, 3);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex1], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex1], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
            lv_randomHeroIndex2 = RandomInt(4, 6);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex2], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex2], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
            lv_randomHeroIndex3 = RandomInt(7, 9);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib860A1A1F_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex3], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(lib860A1A1F_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex3], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib860A1A1F_gt_TT_HeroesFromTheStormOld_Init () {
    lib860A1A1F_gt_TT_HeroesFromTheStormOld = TriggerCreate("lib860A1A1F_gt_TT_HeroesFromTheStormOld_Func");
    TriggerEnable(lib860A1A1F_gt_TT_HeroesFromTheStormOld, false);
    TriggerAddEventPlayerAIWave(lib860A1A1F_gt_TT_HeroesFromTheStormOld, c_playerAny);
}

void lib860A1A1F_InitTriggers () {
    lib860A1A1F_gt_MM_PX_InitPlayerX_Init();
    lib860A1A1F_gt_MM_PX_UpgradeParityPlayerX_Init();
    lib860A1A1F_gt_MM_PX_UnitDeathFix_Init();
    lib860A1A1F_gt_MM_PX_UnitCreationFix_Init();
    lib860A1A1F_gt_MM_PX_UnitDamageFix_Init();
    lib860A1A1F_gt_MM_LongRangeFix_Init();
    lib860A1A1F_gt_MM_GiftShrunkEffectOnFix_Init();
    lib860A1A1F_gt_MM_GiftShrunkEffectOffFix_Init();
    lib860A1A1F_gt_MM_AvengerFix_Init();
    lib860A1A1F_gt_MM_AbathurChosen_Init();
    lib860A1A1F_gt_MM_BiomassSizeUpdate_Init();
    lib860A1A1F_gt_MM_UltraliskSizeFix_Init();
    lib860A1A1F_gt_MM_RandomMutatorFix_Init();
    lib860A1A1F_gt_MM_RandomMutator_Init();
    lib860A1A1F_gt_MM_UnitDamageFix_Init();
    lib860A1A1F_gt_MM_UnitDiesFix_Init();
    lib860A1A1F_gt_MM_UnitCreationFix_Init();
    lib860A1A1F_gt_MM_UnitRevivedFix_Init();
    lib860A1A1F_gt_MM_UnitRemovedFix_Init();
    lib860A1A1F_gt_MM_UnitChangesOwner_Init();
    lib860A1A1F_gt_MM_CustomMutatorInit_Init();
    lib860A1A1F_gt_MM_InitializeOldTimes_Init();
    lib860A1A1F_gt_MM_OT_InitialWorkerautomineStop_Init();
    lib860A1A1F_gt_MM_OT_SelectionLimitations_Init();
    lib860A1A1F_gt_MM_OT_AntiSmartCast_Init();
    lib860A1A1F_gt_MM_OT_WorkerCreated_Init();
    lib860A1A1F_gt_MM_OT_NoBuildQueue_Init();
    lib860A1A1F_gt_MM_OT_StructureHotkeyCheck_Init();
    lib860A1A1F_gt_MM_OT_WorkerBuildCheck_Init();
    lib860A1A1F_gt_MM_OT_RallyFix_Init();
    lib860A1A1F_gt_MM_ShutdownOldTimes_Init();
    lib860A1A1F_gt_MM_InitializeEndurance_Init();
    lib860A1A1F_gt_MM_ShutdownEndurance_Init();
    lib860A1A1F_gt_MM_InitializeRipFieldGenerators_Init();
    lib860A1A1F_gt_MM_RipFieldGeneratorDamage_Init();
    lib860A1A1F_gt_MM_ShutdownRipFieldGenerators_Init();
    lib860A1A1F_gt_MM_InitializeLevelPlayingField_Init();
    lib860A1A1F_gt_MM_ShutdownLevelPlayingField_Init();
    lib860A1A1F_gt_MM_InitializeBloodlust_Init();
    lib860A1A1F_gt_MM_BloodlustActivated_Init();
    lib860A1A1F_gt_MM_ShutdownBloodlust_Init();
    lib860A1A1F_gt_MM_InitializeNuclearMines_Init();
    lib860A1A1F_gt_MM_ShutdownNuclearMines_Init();
    lib860A1A1F_gt_MM_NobuildRegiondebug_Init();
    lib860A1A1F_gt_MM_InitializeGreatWall_Init();
    lib860A1A1F_gt_MM_GW_ConstructionStarted_Init();
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveDropPod_Init();
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveWarpIn_Init();
    lib860A1A1F_gt_MM_GW_AICreatesAttackWaveAIEvent_Init();
    lib860A1A1F_gt_MM_ShutdownGreatWall_Init();
    lib860A1A1F_gt_MM_InitializeSupremeCommander_Init();
    lib860A1A1F_gt_MM_ShutdownSupremeCommander_Init();
    lib860A1A1F_gt_MM_InitializeMatryoshka_Init();
    lib860A1A1F_gt_MM_ShutdownMatryoshka_Init();
    lib860A1A1F_gt_MM_InitializeInfestationStation_Init();
    lib860A1A1F_gt_MM_InfestionStationStructureAttack_Init();
    lib860A1A1F_gt_MM_ShutdownInfestationStation_Init();
    lib860A1A1F_gt_MM_InitializeNecronomicon_Init();
    lib860A1A1F_gt_MM_NecronomiconAttackWave_Init();
    lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend_Init();
    lib860A1A1F_gt_MM_ShutdownNecronomicon_Init();
    lib860A1A1F_gt_MM_InitializeDarkMirror_Init();
    lib860A1A1F_gt_MM_ShutdownDarkMirror_Init();
    lib860A1A1F_gt_MM_InitializeRepulsiveField_Init();
    lib860A1A1F_gt_MM_ShutdownRepulsiveField_Init();
    lib860A1A1F_gt_MM_InitializeIcollectIchange_Init();
    lib860A1A1F_gt_MM_ShutdownICollectIChange_Init();
    lib860A1A1F_gt_MM_InitializeMothership_Init();
    lib860A1A1F_gt_MM_MothershipController_Init();
    lib860A1A1F_gt_MM_MissileDrop_Init();
    lib860A1A1F_gt_MM_MothershipCritical_Init();
    lib860A1A1F_gt_MM_PlanetCracker_Init();
    lib860A1A1F_gt_MM_ShutdownMothership_Init();
    lib860A1A1F_gt_MM_InitializeTheMist_Init();
    lib860A1A1F_gt_MM_MistMovement_Init();
    lib860A1A1F_gt_MM_TerrorSpawn_Init();
    lib860A1A1F_gt_MM_ScannerSweepCounter_Init();
    lib860A1A1F_gt_MM_MistTerrorDies_Init();
    lib860A1A1F_gt_MM_ShutdownMist_Init();
    lib860A1A1F_gt_MM_InitializeTheUsualSuspects_Init();
    lib860A1A1F_gt_MM_AmonHeroPoolAdd_Init();
    lib860A1A1F_gt_MM_AmonHeroFenixFatalDamage_Init();
    lib860A1A1F_gt_MM_AmonHeroStunFix_Init();
    lib860A1A1F_gt_MM_AmonHeroWaveSent_Init();
    lib860A1A1F_gt_MM_AmonHeroHookTriggered_Init();
    lib860A1A1F_gt_MM_AmonHeroDuration_Init();
    lib860A1A1F_gt_MM_AmonHeroDies_Init();
    lib860A1A1F_gt_MM_FenixBroodQueen_Init();
    lib860A1A1F_gt_MM_GaryPowerFieldUsed_Init();
    lib860A1A1F_gt_MM_ShutdownTheUsualSuspects_Init();
    lib860A1A1F_gt_MM_InitializeShapeshifters_Init();
    lib860A1A1F_gt_MM_Shapeshifter_Spawn_Init();
    lib860A1A1F_gt_MM_ShapeshiftersInWaves_Init();
    lib860A1A1F_gt_MM_ShutdownShapeshifters_Init();
    lib860A1A1F_gt_TT_InitializeHeroesFromTheStormOld_Init();
    lib860A1A1F_gt_TT_ShutdownHeroesFromTheStormOld_Init();
    lib860A1A1F_gt_TT_HeroesFromTheStormOld_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib860A1A1F_InitLib_completed = false;

void lib860A1A1F_InitLib () {
    if (lib860A1A1F_InitLib_completed) {
        return;
    }

    lib860A1A1F_InitLib_completed = true;

    lib860A1A1F_InitLibraries();
    lib860A1A1F_InitVariables();
    lib860A1A1F_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"
include "LibCOUI"
include "LibCOMU"
include "LibA8FDA37D"
include "Lib01833E95"

