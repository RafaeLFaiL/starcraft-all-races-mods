include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC_h"
include "LibCOMI_h"
include "LibCOUI_h"
include "LibCOMU_h"
include "Lib01833E95_h"
include "Lib860A1A1F_h"

include "LibA8FDA37D_h"

//--------------------------------------------------------------------------------------------------
// Library: Utility Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libA8FDA37D_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    lib01833E95_InitVariables();
    lib860A1A1F_InitVariables();
}

// Variable Initialization
bool libA8FDA37D_InitVariables_completed = false;

void libA8FDA37D_InitVariables () {
    int init_i;
    int init_j;

    if (libA8FDA37D_InitVariables_completed) {
        return;
    }

    libA8FDA37D_InitVariables_completed = true;

    for (init_i = 0; init_i <= 20; init_i += 1) {
        libA8FDA37D_gv_uT_DevCommands[init_i] = libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering;
    }
    libA8FDA37D_gv_uT_InfoDialog = c_invalidDialogId;
    libA8FDA37D_gv_uT_InfoButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libA8FDA37D_gv_uT_MAXEMOTES; init_i += 1) {
        libA8FDA37D_gv_uT_SC_Emoticons[init_i] = "";
    }
    for (init_i = 0; init_i <= libA8FDA37D_gv_uT_MAXEMOTES; init_i += 1) {
        libA8FDA37D_gv_uT_CS_Emoticons[init_i] = "";
    }
    libA8FDA37D_gv_uT_Emote_Dialog = c_invalidDialogId;
    libA8FDA37D_gv_uT_Emote_CloseButton = c_invalidDialogControlId;
    libA8FDA37D_gv_uT_SoundEmoteTimer = TimerCreate();
    libA8FDA37D_gv_uT_encompsDialogs = c_invalidDialogId;
    libA8FDA37D_gv_uT_Bank_UnitFilter = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libA8FDA37D_gv_uT_UI_Hidden = PlayerGroupEmpty();
    libA8FDA37D_gv_uT_ButtonUsagePlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libA8FDA37D_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libA8FDA37D_gv_uT_HotkeyToStoreButton[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libA8FDA37D_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libA8FDA37D_gv_uT_HotkeyToStoreValue[init_i][init_j] = "";
        }
    }
    libA8FDA37D_gv_uT_AlarakCDRRange = 15.0;
    libA8FDA37D_gv_uT_AlarakCDRPlayers = PlayerGroupEmpty();
    libA8FDA37D_gv_uT_ArtSpawnColor = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libA8FDA37D_gv_uT_Pie[init_i][init_j] = c_invalidDialogId;
        }
    }
    libA8FDA37D_gv_graphsGeneral.lv_intervals = 6;
    libA8FDA37D_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libA8FDA37D_gv_maxGraphs; init_i += 1) {
        libA8FDA37D_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libA8FDA37D_gv_graphsData[init_i].lv_highFrame = c_invalidDialogControlId;
        libA8FDA37D_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
    }
    libA8FDA37D_gv_uT_Graph_ButtonDialog = c_invalidDialogId;
    libA8FDA37D_gv_uT_Graph_Button = c_invalidDialogControlId;
    libA8FDA37D_gv_uT_MissileCreators = UnitGroupEmpty();
    libA8FDA37D_gv_uT_Horde_UG_Wave = UnitGroupEmpty();
    libA8FDA37D_gv_uT_Horde_UG = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libA8FDA37D_gv_uT_MasteryBoxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libA8FDA37D_gv_uT_MasteryLabels[init_i] = c_invalidDialogControlId;
    }
    libA8FDA37D_gv_uT_MasteryButton = c_invalidDialogControlId;
    libA8FDA37D_gv_uT_MasteryDialog = c_invalidDialogId;
    libA8FDA37D_gv_uT_LastAttackWave = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libA8FDA37D_gv_uT_Camera_Rotation[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libA8FDA37D_gv_uT_Camera_AngleofAttack[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    }
    libA8FDA37D_gv_uT_Dummies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            libA8FDA37D_gv_uT_DummyTimer[init_i][init_j] = TimerCreate();
        }
    }
    libA8FDA37D_gv_uT_DPS_UG = UnitGroupEmpty();
    libA8FDA37D_gv_uT_DPS_UG_Summoned = UnitGroupEmpty();
    for (init_i = 0; init_i <= libA8FDA37D_gv_uT_DPS_MaxUnits; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libA8FDA37D_gv_uT_DPS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    libA8FDA37D_gv_uT_PlayersWithNumbers = PlayerGroupEmpty();
    libA8FDA37D_gv_uT_DL_LoggingPlayers = PlayerGroupEmpty();
    libA8FDA37D_gv_uT_DL_LogDialog = c_invalidDialogId;
    libA8FDA37D_gv_uT_DL_LogDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libA8FDA37D_gv_uT_DL_PlayerData[init_i] = 1;
    }
}

// Presets
// Functions
bool libA8FDA37D_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer) {
    // Automatic Variable Declarations
    int auto4E013BCC_val;

    // Implementation
    auto4E013BCC_val = lp_pDevCommandType;
    if (auto4E013BCC_val == libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering) {
        if ((libA8FDA37D_gv_uT_DevCommands[lp_pPlayer] == libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto4E013BCC_val == libA8FDA37D_ge_UT_DevCommandTypes_Visual) {
        if (((libA8FDA37D_gv_uT_DevCommands[lp_pPlayer] == libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering) || (libA8FDA37D_gv_uT_DevCommands[lp_pPlayer] == libA8FDA37D_ge_UT_DevCommandTypes_Visual))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto4E013BCC_val == libA8FDA37D_ge_UT_DevCommandTypes_No) {
        if ((libA8FDA37D_gv_uT_DevCommands[lp_pPlayer] == libA8FDA37D_ge_UT_DevCommandTypes_No)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void libA8FDA37D_gf_UT_Cheat () {
    // Automatic Variable Declarations
    // Implementation
    libA8FDA37D_gv_uT_CheatUsed = true;
    TriggerSendEvent("UT_CheatUsed");
}

trigger auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    unit lv_veteran;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    fixed lv_globalcasterenergy;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((0.0 + (libCOMI_gv_cM_Mengsk_EnergyRegenRoyalGuard + libCOMI_gv_cM_Mengsk_EnergyRegenTrooper)), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lv_globalcasterenergy);
        libCOMI_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
    }
    return true;
}

bool libA8FDA37D_gf_UT_GL_ScoreUsed (string lp_pScore) {
    // Automatic Variable Declarations
    const int auto240F0DFE_ae = 100;
    int auto240F0DFE_var;

    // Implementation
    auto240F0DFE_var = 0;
    for ( ; auto240F0DFE_var <= auto240F0DFE_ae; auto240F0DFE_var += 1 ) {
        if ((lp_pScore == libA8FDA37D_gv_uT_GL_ScoresUsed[auto240F0DFE_var])) {
            return true;
        }

    }
    return false;
}

string libA8FDA37D_gf_UT_GL_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

text libA8FDA37D_gf_UT_GL_MasteryButtonName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_ADF37AE3", "A", StringToText(CatalogFieldValueGet(c_gameCatalogButton, libA8FDA37D_gf_UT_GL_PlayerMasteryTalent(lp_masteryUpgrade), "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_A8FDA37D_ADF37AE3");
}

string libA8FDA37D_gf_UT_GL_GetCommanderScore (int lp_pIndex, string lp_pCommander) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pIndex == 1)) {
        return UserDataGetGameLink("PlayerCommanders", lp_pCommander, "ScoreStatisticCoop", 1);
    }
    else {
        return UserDataGetGameLink("PlayerCommanders", lp_pCommander, "ScoreStatisticSelf", 1);
    }
}

text libA8FDA37D_gf_UT_GL_AddScoreValueToText (text lp_pText, string lp_pScore, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_pScore == "KorhalRiftDamage") || (lp_pScore == "DamageDealtToVoidShards") || (lp_pScore == "KaldirShuttleDamage") || (lp_pScore == "TarsonisTrainDamage") || (lp_pScore == "JarbanPointCaptureKills") || (lp_pScore == "PartAndParcelCollection") || (lp_pScore == "MeinhoffDayNightInfestedKills") || (lp_pScore == "CradleOfDeathDamageDealttoConstructs"))) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F330E89E", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F330E89E");
    }
    else if (((lp_pScore == "ZeratulDamage") || (lp_pScore == "AlarakDamage") || (lp_pScore == "FenixChampionDamage") || (lp_pScore == "DehakaDamage") || (lp_pScore == "VorazunCloakedDamage") || (lp_pScore == "SwannDrillDamage") || (lp_pScore == "FenixSuitDamage") || (lp_pScore == "ZagaraFrenzyDamage") || (lp_pScore == "RaynorHyperionDamage") || (lp_pScore == "StukovInfestedDamage") || (lp_pScore == "KerriganDamage") || (lp_pScore == "HornerMagMineDamage") || (lp_pScore == "NovaDamage") || (lp_pScore == "ArtanisSoADamage") || (lp_pScore == "AbathurMonsterDamage") || (lp_pScore == "VorazunBlackHoleDamage") || (lp_pScore == "ZagaraSuicideDamage") || (lp_pScore == "StukovMonstrosityDamage") || (lp_pScore == "StetmannGaryDamage") || (lp_pScore == "TychusReaperBombDamage") || (lp_pScore == "TychusGhostDominatedDamage") || (lp_pScore == "TychusOdinDamage") || (lp_pScore == "TychusFirebatOilDamage") || (lp_pScore == "TychusGrenadeDamage") || (lp_pScore == "TychusSpectrePulseDamage") || (lp_pScore == "TychusWarhoundTurretDamage") || (lp_pScore == "MengskRoyalGuardDamage") || (lp_pScore == "MengskTrooperDamage"))) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_641231B7", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_641231B7");
    }
    else if ((lp_pScore == "Devouroffcooldown")) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8DD6531", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_D8DD6531");
    }
    else if ((lp_pScore == "DamageDealtbyContaminatedStrike")) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_52D5BEAE", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_52D5BEAE");
    }
    else if (true) {
        if ((libA8FDA37D_gf_UT_GL_IsSharedMissionScore(lp_pScore) == true)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_14973D81", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_14973D81");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3AD91BB3", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_3AD91BB3");
        }
    }
    return lv_vText;
}

text libA8FDA37D_gf_UT_GL_AddVariableValueToText (text lp_pText, text lp_pVariable, text lp_pVariableDescription, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "A", lp_pText);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "C", lp_pVariableDescription);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "E", lp_pVariable);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_088A180F", "B", IntToText(lp_pIndex));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_088A180F");
    return lv_vText;
}

bool libA8FDA37D_gf_UT_GL_IsSharedMissionScore (string lp_pScore) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_pScore == "MSFortressLifeRemaining") || (lp_pScore == "MSHarvestingBotLifeRemaining") || (lp_pScore == "MSLockOverloadTime") || (lp_pScore == "MSScientistHealthRemaining") || (lp_pScore == "MSShuttleUptime") || (lp_pScore == "MSTempleLifeRemaining") || (lp_pScore == "ShakurasTempleLife") || (lp_pScore == "MSThrasherUptime") || (lp_pScore == "MSTrainDuration") || (lp_pScore == "SlaynPush") || (lp_pScore == "BelshirEscortHarvesterDamage") || (lp_pScore == "UlnarOverload") || (lp_pScore == "CharThrasherLife"))) {
        return true;
    }
    else {
        return false;
    }
}

void libA8FDA37D_gf_UT_GL_GenerateNewLayout () {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    string lv_vMap;
    string lv_vMasteryUpgradeInstance;
    string lv_vCommanderInstance;
    int lv_vMasteryIndex;
    string lv_vCurrentScore;

    // Automatic Variable Declarations
    string autoC1FBECEF_userType;
    int autoC1FBECEF_i;
    int auto434071AB_ai;
    int auto434071AB_ae;
    int auto434071AB_ac;
    const int auto261E9CB3_ae = 6;
    int auto261E9CB3_var;
    string auto9DCFEA79_userType;
    int auto9DCFEA79_i;
    int auto3A645F5B_catalog;
    int auto3A645F5B_i;
    const int auto972B1A3B_ae = 2;
    int auto972B1A3B_var;
    string auto0C5FB4F7_userType;
    int auto0C5FB4F7_i;
    string auto5C9F4651_userType;
    int auto5C9F4651_i;

    // Variable Initialization
    lv_vText = StringToText("");

    // Implementation
    BankLoad("ReplayUILayouts", 1);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_05FCB1E3", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_05FCB1E3");
    autoC1FBECEF_userType = "PlayerCommanders";
    autoC1FBECEF_i = 1;
    for ( ; autoC1FBECEF_i <= UserDataInstanceCount(autoC1FBECEF_userType) ; autoC1FBECEF_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(autoC1FBECEF_userType, autoC1FBECEF_i);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_53C5AE75", "C", lv_vText);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_53C5AE75", "A", UserDataGetText("PlayerCommanders", lv_vCommanderInstance, "Name", 1));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_53C5AE75", "B", IntToText(UserDataGetInt("PlayerCommanders", lv_vCommanderInstance, "UniqueIndex", 1)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_53C5AE75", "A", UserDataGetText("PlayerCommanders", lv_vCommanderInstance, "Name", 1));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_53C5AE75");
        lv_vMasteryIndex = 1;
        if ((lv_vCommanderInstance == "TerranMengsk")) {
            auto261E9CB3_var = 1;
            for ( ; auto261E9CB3_var <= auto261E9CB3_ae; auto261E9CB3_var += 1 ) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B48ADD8B", "A", lv_vText);
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B48ADD8B", "C", IntToText(lv_vMasteryIndex));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B48ADD8B", "B", IntToText(auto261E9CB3_var));
                lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B48ADD8B");
                lv_vMasteryIndex += 1;
            }
        }
        else {
            auto434071AB_ai = 0;
            auto434071AB_ae = UserDataInstanceCount("MasteryUpgrades")+1;
            while (auto434071AB_ai < auto434071AB_ae) {
                auto434071AB_ai = auto434071AB_ai+1;
                auto434071AB_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto434071AB_ai), "Category", 1);
                if( lv_vCommanderInstance == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto434071AB_ai),"Commander",1) ) {
                    lv_vMasteryUpgradeInstance = UserDataInstance("MasteryUpgrades", auto434071AB_ai);
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4B0ABFE8", "A", lv_vText);
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4B0ABFE8", "C", IntToText(lv_vMasteryIndex));
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4B0ABFE8", "B", libA8FDA37D_gf_UT_GL_MasteryButtonName(lv_vMasteryUpgradeInstance));
                    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_4B0ABFE8");
                    lv_vMasteryIndex += 1;
                }    
            }
        }
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_A94EE04C", "A", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_A94EE04C");
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_87B560B0", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_87B560B0");
    auto9DCFEA79_userType = "PlayerCommanders";
    auto9DCFEA79_i = 1;
    for ( ; auto9DCFEA79_i <= UserDataInstanceCount(auto9DCFEA79_userType) ; auto9DCFEA79_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(auto9DCFEA79_userType, auto9DCFEA79_i);
        if ((lv_vCommanderInstance != "TerranTychus")) {
            auto972B1A3B_var = 1;
            for ( ; auto972B1A3B_var <= auto972B1A3B_ae; auto972B1A3B_var += 1 ) {
                lv_vCurrentScore = libA8FDA37D_gf_UT_GL_GetCommanderScore(auto972B1A3B_var, lv_vCommanderInstance);
                if ((lv_vCurrentScore != null) && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                    lv_vA += 1;
                    lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                    libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                }

            }
            lv_vCurrentScore = "Devouroffcooldown";
            if ((lv_vCommanderInstance == "ZergDehaka") && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

            lv_vCurrentScore = "DamageDealtbyContaminatedStrike";
            if ((lv_vCommanderInstance == "TerranMengsk") && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

        }
        else {
            auto3A645F5B_catalog = c_gameCatalogScoreValue;
            auto3A645F5B_i = 1;
            for ( ; auto3A645F5B_i <= CatalogEntryCount(c_gameCatalogScoreValue) ; auto3A645F5B_i += 1 ) {
                lv_vCurrentScore = CatalogEntryGet(auto3A645F5B_catalog, auto3A645F5B_i);
                if ((StringSub((lv_vCurrentScore), 1, 6) == "Tychus")) {
                    if ((lv_vCurrentScore != null) && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                        lv_vA += 1;
                        lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                        libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                    }

                }

            }
        }
    }
    auto0C5FB4F7_userType = "Maps";
    auto0C5FB4F7_i = 1;
    for ( ; auto0C5FB4F7_i <= UserDataInstanceCount(auto0C5FB4F7_userType) ; auto0C5FB4F7_i += 1 ) {
        lv_vMap = UserDataInstance(auto0C5FB4F7_userType, auto0C5FB4F7_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libA8FDA37D_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == false)) {
            lv_vA += 1;
            lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_18767412", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_18767412", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_18767412");
    BankValueSetFromText(BankLastCreated(), "A", "PlayerScores", lv_vText);
    lv_vText = StringToText("");
    lv_vA = 0;
    auto5C9F4651_userType = "Maps";
    auto5C9F4651_i = 1;
    for ( ; auto5C9F4651_i <= UserDataInstanceCount(auto5C9F4651_userType) ; auto5C9F4651_i += 1 ) {
        lv_vMap = UserDataInstance(auto5C9F4651_userType, auto5C9F4651_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libA8FDA37D_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libA8FDA37D_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == true)) {
            lv_vA += 1;
            lv_vText = libA8FDA37D_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libA8FDA37D_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    lv_vText = libA8FDA37D_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_A8FDA37D_A6CACA96"), StringExternal("Param/Value/lib_A8FDA37D_B76A5F31"), lv_vA);
    lv_vA += 1;
    lv_vText = libA8FDA37D_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_A8FDA37D_A9424741"), StringExternal("Param/Value/lib_A8FDA37D_5A53D545"), lv_vA);
    lv_vA += 1;
    lv_vText = libA8FDA37D_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_A8FDA37D_37CDC2B8"), StringExternal("Param/Value/lib_A8FDA37D_5F7E26B4"), lv_vA);
    lv_vA += 1;
    lv_vText = libA8FDA37D_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_A8FDA37D_E89078F3"), StringExternal("Param/Value/lib_A8FDA37D_64C24D00"), lv_vA);
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EF04F194", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EF04F194", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EF04F194");
    BankValueSetFromText(BankLastCreated(), "A", "SharedMissionMutatorScores", lv_vText);
    BankSave(BankLastCreated());
}

void libA8FDA37D_gf_HistogramHorizontalCreate (color lp_pColor, structref<libA8FDA37D_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pVertical, bool lp_pPercent, int lp_pTotal) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeX = 1400;
    const int lv_vInnerSizeY = 1000;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarYCoef;
    int lv_vX_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int autoAB55CC84_ae = libA8FDA37D_gv_maxHistogramEntries;
    const int autoAB55CC84_ai = 1;
    const int auto41504617_ae = libA8FDA37D_gv_maxHistogramEntries;
    const int auto41504617_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (autoAB55CC84_ai >= 0 && lv_vIter <= autoAB55CC84_ae) || (autoAB55CC84_ai < 0 && lv_vIter >= autoAB55CC84_ae) ) ; lv_vIter += autoAB55CC84_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeX/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarYCoef = ((IntToFixed(lv_vInnerSizeY) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarYCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (auto41504617_ai >= 0 && lv_vIter <= auto41504617_ae) || (auto41504617_ai < 0 && lv_vIter >= auto41504617_ae) ) ; lv_vIter += auto41504617_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vX_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_vBarSize, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef)), c_anchorBottom, (lv_vX_OffsetIter + lp_pCenter), (lv_vInnerSizeY/2 - 53 + lp_pVertical), StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_992ECA5D", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_992ECA5D", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_992ECA5D"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 15.0);
            }

            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/LabelPanelTemplate");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter + 125 + lp_pCenter), (lp_pVertical-320));
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "LabelTemplate");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_pData.lv_labels[lv_vIter], PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/CountPanelTemplate");
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter - 2 + lp_pCenter), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef + 52 + IntToFixed(lp_pVertical))));
                DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "CountTemplate");
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_629A6E30", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_629A6E30"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libA8FDA37D_gf_HistogramVerticalCreate (color lp_pColor, structref<libA8FDA37D_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pTotal, bool lp_pPercent) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeY = 1000;
    const int lv_vInnerSizeX = 1200;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarXCoef;
    int lv_vY_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int autoB66A9E0C_ae = libA8FDA37D_gv_maxHistogramEntries;
    const int autoB66A9E0C_ai = 1;
    const int auto31DC0374_ae = libA8FDA37D_gv_maxHistogramEntries;
    const int auto31DC0374_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (autoB66A9E0C_ai >= 0 && lv_vIter <= autoB66A9E0C_ae) || (autoB66A9E0C_ai < 0 && lv_vIter >= autoB66A9E0C_ae) ) ; lv_vIter += autoB66A9E0C_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeY/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarXCoef = ((IntToFixed(lv_vInnerSizeX) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarXCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (auto31DC0374_ai >= 0 && lv_vIter <= auto31DC0374_ae) || (auto31DC0374_ai < 0 && lv_vIter >= auto31DC0374_ae) ) ; lv_vIter += auto31DC0374_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vY_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef)), (lv_vBarSize), c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter), lv_vY_OffsetIter, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3C922343", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3C922343", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_3C922343"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter - 405), (lv_vY_OffsetIter), lp_pData.lv_labels[lv_vIter], ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramLabel", PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef + IntToFixed(lv_vInnerSizeX)/2 + lp_pCenter + 2)), (lv_vY_OffsetIter), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_6EBA4B9C", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_6EBA4B9C"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libA8FDA37D_gf_UT_SignalMutators () {
    // Variable Declarations
    string lv_vMutator;

    // Automatic Variable Declarations
    string auto6149318D_userType;
    int auto6149318D_i;

    // Variable Initialization

    // Implementation
    auto6149318D_userType = "Mutators";
    auto6149318D_i = 1;
    for ( ; auto6149318D_i <= UserDataInstanceCount(auto6149318D_userType) ; auto6149318D_i += 1 ) {
        lv_vMutator = UserDataInstance(auto6149318D_userType, auto6149318D_i);
        if ((libCOMU_gf_MutatorIsEnabled(lv_vMutator) == true)) {
            TechTreeUpgradeAddLevel(0, (("mutatorinfo_" + (lv_vMutator))), 1);
        }

    }
}

text libA8FDA37D_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pTimeSeconds >= 3600.0)) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_8DCC5ED3", "C", IntToText(TruncI((lp_pTimeSeconds/3600))));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_8DCC5ED3", "A", libA8FDA37D_gf_UT_AddStringsInfronttext(2, "0", TruncI((ModF(lp_pTimeSeconds, 3600.0)/60))));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_8DCC5ED3", "B", libA8FDA37D_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_A8FDA37D_8DCC5ED3");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EA09135B", "A", IntToText(TruncI((lp_pTimeSeconds/60))));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EA09135B", "B", libA8FDA37D_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EA09135B");
    }
}

unit libA8FDA37D_gf_CM_PlayerGetGlobalCaster (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_GlobalCasterUnit[lp_player];
}

trigger auto_libA8FDA37D_gf_UT_FixAISupply_Trigger = null;
int auto_libA8FDA37D_gf_UT_FixAISupply_lp_pPlayer;

void libA8FDA37D_gf_UT_FixAISupply (int lp_pPlayer) {
    auto_libA8FDA37D_gf_UT_FixAISupply_lp_pPlayer = lp_pPlayer;

    if (auto_libA8FDA37D_gf_UT_FixAISupply_Trigger == null) {
        auto_libA8FDA37D_gf_UT_FixAISupply_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_FixAISupply_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_FixAISupply_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_FixAISupply_TriggerFunc (bool testConds, bool runActions) {
    int lp_pPlayer = auto_libA8FDA37D_gf_UT_FixAISupply_lp_pPlayer;

    // Variable Declarations
    int lv_vLimit;

    // Automatic Variable Declarations
    string auto22B11F65_val;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    if (((PlayerStatus(lp_pPlayer) == c_playerStatusActive) || (libCOMU_gf_MutatorIsEnabled("SharedSupply") == true))) {
        return true;
    }

    auto22B11F65_val = libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer);
    if (auto22B11F65_val == "TerranNova") {
        lv_vLimit = 100;
    }
    else if (auto22B11F65_val == "ZergDehaka") {
        lv_vLimit = 200;
    }
    else if (auto22B11F65_val == "TerranTychus") {
        lv_vLimit = 100;
    }
    else if (auto22B11F65_val == "ProtossZeratul") {
        lv_vLimit = 100;
    }
    else if (auto22B11F65_val == "ProtossArtanis") {
        if ((TechTreeUpgradeCount(lp_pPlayer, "ArtanisStartingSupply", c_techCountCompleteOnly) >= 1)) {
            lv_vLimit = 200;
        }

    }
    else {
        return true;
    }
    PlayerModifyPropertyInt(lp_pPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vLimit);
    PlayerModifyPropertyInt(lp_pPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_vLimit);
    return true;
}

trigger auto_libA8FDA37D_gf_UT_FixConsoleSkins_Trigger = null;

void libA8FDA37D_gf_UT_FixConsoleSkins () {
    if (auto_libA8FDA37D_gf_UT_FixConsoleSkins_Trigger == null) {
        auto_libA8FDA37D_gf_UT_FixConsoleSkins_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_FixConsoleSkins_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_FixConsoleSkins_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_FixConsoleSkins_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7B6B7088_g;
    int auto7B6B7088_var;
    string autoC4585BCC_val;

    // Implementation
    Wait(0.0, c_timeGame);
    auto7B6B7088_g = libA8FDA37D_gf_UT_ActiveCommanderPlayers();
    auto7B6B7088_var = -1;
    while (true) {
        auto7B6B7088_var = PlayerGroupNextPlayer(auto7B6B7088_g, auto7B6B7088_var);
        if (auto7B6B7088_var < 0) { break; }
        autoC4585BCC_val = libCOOC_gf_ActiveCommanderForPlayer(auto7B6B7088_var);
        if (autoC4585BCC_val == "TerranRaynor") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Default");
        }
        else if (autoC4585BCC_val == "ZergKerrigan") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Default");
        }
        else if (autoC4585BCC_val == "ZergZagara") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Zagara");
        }
        else if (autoC4585BCC_val == "ProtossArtanis") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Default");
        }
        else if (autoC4585BCC_val == "TerranSwann") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Swann");
        }
        else if (autoC4585BCC_val == "ZergAbathur") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Abathur");
        }
        else if (autoC4585BCC_val == "ProtossKarax") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Default");
        }
        else if (autoC4585BCC_val == "ProtossAlarak") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Forged");
        }
        else if (autoC4585BCC_val == "ZergDehaka") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Dehaka");
        }
        else if (autoC4585BCC_val == "ProtossFenix") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Fenix");
        }
        else if (autoC4585BCC_val == "TerranHorner") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Horner");
        }
        else if (autoC4585BCC_val == "TerranNova") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Nova");
        }
        else if (autoC4585BCC_val == "ZergStukov") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Default");
        }
        else if (autoC4585BCC_val == "TerranTychus") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Default");
        }
        else if (autoC4585BCC_val == "ProtossVorazun") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Nerazim");
        }
        else if (autoC4585BCC_val == "ProtossZeratul") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleProtoss_Default");
        }
        else if (autoC4585BCC_val == "ZergStetmann") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleZerg_Mecha");
        }
        else if (autoC4585BCC_val == "TerranMengsk") {
            PlayerSetConsoleSkin(auto7B6B7088_var, "ConsoleTerran_Imperial");
        }
        else {
        }
    }
    return true;
}

void libA8FDA37D_gf_UT_CommanderHide (int lp_pCommanderMax) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;

    // Automatic Variable Declarations
    const int auto0A0D7E3C_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto0A0D7E3C_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypePanel, "CommanderButtons");
    lv_commanderButtons = DialogControlLastCreated();
    lv_commanderIndex = (lp_pCommanderMax + 1);
    for ( ; ( (auto0A0D7E3C_ai >= 0 && lv_commanderIndex <= auto0A0D7E3C_ae) || (auto0A0D7E3C_ai < 0 && lv_commanderIndex >= auto0A0D7E3C_ae) ) ; lv_commanderIndex += auto0A0D7E3C_ai ) {
        DialogControlHookup(lv_commanderButtons, c_triggerControlTypeButton, "CommanderButton" + IntToString(lv_commanderIndex));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypePortrait, "CommanderPortrait");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypeLabel, "CommanderName");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libCOUI_gv_cU_CommanderButton[lv_commanderIndex], c_triggerControlTypeImage, "SelectionBorder");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

string libA8FDA37D_gf_ActiveCommanderForPlayer3 (int lp_player) {
    // Variable Declarations
    string lv_commanderInstance;

    // Automatic Variable Declarations
    string autoA45D3E51_val;

    // Variable Initialization
    lv_commanderInstance = libCOOC_gv_cCX_PlayerCommander[lp_player];

    // Implementation
    autoA45D3E51_val = libCOOC_gv_cCX_PlayerCommander[lp_player];
    if (autoA45D3E51_val == "ZergAbathur") {
        return "Abathur";
    }
    else if (autoA45D3E51_val == "ProtossAlarak") {
        return "Alarak";
    }
    else if (autoA45D3E51_val == "ProtossArtanis") {
        return "Artanis";
    }
    else if (autoA45D3E51_val == "ZergDehaka") {
        return "Dehaka";
    }
    else if (autoA45D3E51_val == "ProtossFenix") {
        return "Fenix";
    }
    else if (autoA45D3E51_val == "TerranHorner") {
        return "Horner";
    }
    else if (autoA45D3E51_val == "ProtossKarax") {
        return "Karax";
    }
    else if (autoA45D3E51_val == "ZergKerrigan") {
        return "Kerrigan";
    }
    else if (autoA45D3E51_val == "TerranNova") {
        return "Nova";
    }
    else if (autoA45D3E51_val == "TerranRaynor") {
        return "Raynor";
    }
    else if (autoA45D3E51_val == "ZergStukov") {
        return "Stukov";
    }
    else if (autoA45D3E51_val == "TerranSwann") {
        return "Swann";
    }
    else if (autoA45D3E51_val == "TerranTychus") {
        return "Tychus";
    }
    else if (autoA45D3E51_val == "ProtossVorazun") {
        return "Vorazun";
    }
    else if (autoA45D3E51_val == "ZergZagara") {
        return "Zagara";
    }
    else if (autoA45D3E51_val == "ProtossZeratul") {
        return "Zeratul";
    }
    else if (autoA45D3E51_val == "ZergStetmann") {
        return "Stetmann";
    }
    else if (autoA45D3E51_val == "TerranMengsk") {
        return "Mengsk";
    }
    else {
        return null;
    }
}

string libA8FDA37D_gf_ActiveCommanderForPlayer2 (string lp_pUserDataInstance) {
    // Automatic Variable Declarations
    string auto4821CDFA_val;

    // Implementation
    auto4821CDFA_val = lp_pUserDataInstance;
    if (auto4821CDFA_val == "ZergAbathur") {
        return "Abathur";
    }
    else if (auto4821CDFA_val == "ProtossAlarak") {
        return "Alarak";
    }
    else if (auto4821CDFA_val == "ProtossArtanis") {
        return "Artanis";
    }
    else if (auto4821CDFA_val == "ZergDehaka") {
        return "Dehaka";
    }
    else if (auto4821CDFA_val == "ProtossFenix") {
        return "Fenix";
    }
    else if (auto4821CDFA_val == "TerranHorner") {
        return "Horner";
    }
    else if (auto4821CDFA_val == "ProtossKarax") {
        return "Karax";
    }
    else if (auto4821CDFA_val == "ZergKerrigan") {
        return "Kerrigan";
    }
    else if (auto4821CDFA_val == "TerranNova") {
        return "Nova";
    }
    else if (auto4821CDFA_val == "TerranRaynor") {
        return "Raynor";
    }
    else if (auto4821CDFA_val == "ZergStukov") {
        return "Stukov";
    }
    else if (auto4821CDFA_val == "TerranSwann") {
        return "Swann";
    }
    else if (auto4821CDFA_val == "TerranTychus") {
        return "Tychus";
    }
    else if (auto4821CDFA_val == "ProtossVorazun") {
        return "Vorazun";
    }
    else if (auto4821CDFA_val == "ZergZagara") {
        return "Zagara";
    }
    else if (auto4821CDFA_val == "ProtossZeratul") {
        return "Zeratul";
    }
    else if (auto4821CDFA_val == "ZergStetmann") {
        return "Stetmann";
    }
    else if (auto4821CDFA_val == "TerranMengsk") {
        return "Mengsk";
    }
    else {
        return null;
    }
}

string libA8FDA37D_gf_UT_CommanderLoadingImage (string lp_pCommander) {
    // Automatic Variable Declarations
    string autoF0942E81_val;

    // Implementation
    autoF0942E81_val = lp_pCommander;
    if (autoF0942E81_val == "Abathur") {
        return "Assets\\Textures\\ui_loading_coop_hero_abathur.dds";
    }
    else if (autoF0942E81_val == "Alarak") {
        return "Assets\\Textures\\ui_loading_coop_hero_alarak.dds";
    }
    else if (autoF0942E81_val == "Artanis") {
        return "Assets\\Textures\\ui_loading_coop_hero_artanis.dds";
    }
    else if (autoF0942E81_val == "Dehaka") {
        return "Assets\\Textures\\ui_loading_coop_hero_dehaka.dds";
    }
    else if (autoF0942E81_val == "Fenix") {
        return "Assets\\Textures\\ui_loading_coop_hero_fenix.dds";
    }
    else if (autoF0942E81_val == "Horner") {
        return "Assets\\Textures\\ui_loading_coop_hero_hanandhorner.dds";
    }
    else if (autoF0942E81_val == "Karax") {
        return "Assets\\Textures\\ui_loading_coop_hero_karax.dds";
    }
    else if (autoF0942E81_val == "Kerrigan") {
        return "Assets\\Textures\\ui_loading_coop_hero_kerrigan.dds";
    }
    else if (autoF0942E81_val == "Nova") {
        return "Assets\\Textures\\ui_loading_coop_hero_nova.dds";
    }
    else if (autoF0942E81_val == "Raynor") {
        return "Assets\\Textures\\ui_loading_coop_hero_raynor.dds";
    }
    else if (autoF0942E81_val == "Stukov") {
        return "Assets\\Textures\\ui_loading_coop_hero_stukov.dds";
    }
    else if (autoF0942E81_val == "Swann") {
        return "Assets\\Textures\\ui_loading_coop_hero_swann.dds";
    }
    else if (autoF0942E81_val == "Tychus") {
        return "Assets\\Textures\\ui_loading_coop_hero_tychus.dds";
    }
    else if (autoF0942E81_val == "Vorazun") {
        return "Assets\\Textures\\ui_loading_coop_hero_vorazun.dds";
    }
    else if (autoF0942E81_val == "Zagara") {
        return "Assets\\Textures\\ui_loading_coop_hero_zagara.dds";
    }
    else if (autoF0942E81_val == "Zeratul") {
        return "Assets\\Textures\\ui_loading_coop_hero_zeratul.dds";
    }
    else if (autoF0942E81_val == "Stetmann") {
        return "Assets\\Textures\\ui_loading_coop_hero_stetmann.dds";
    }
    else if (autoF0942E81_val == "Mengsk") {
        return "Assets\\Textures\\ui_loading_coop_hero_mengsk.dds";
    }
    else {
        return "Assets\\Textures\\blank.dds";
    }
}

int libA8FDA37D_gf_UT_OtherPlayer (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pPlayer == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

string libA8FDA37D_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol) {
    int init_i;

    // Variable Declarations
    int lv_vNumber;
    int[4] lv_vINT;
    string[4] lv_vSTRING;
    string lv_vSign;
    string lv_vDivingSymbol;
    int lv_vA;
    bool lv_vFirst;

    // Automatic Variable Declarations
    const int auto62B3F806_ae = 3;
    const int auto62B3F806_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vSTRING[init_i] = "";
    }
    lv_vSign = "";
    lv_vDivingSymbol = "";
    lv_vFirst = true;

    // Implementation
    lv_vNumber = AbsI(lp_pNumber);
    if ((lp_pNumber != lv_vNumber)) {
        lv_vSign = "-";
    }

    lv_vINT[0] = (lv_vNumber / 1000000000);
    lv_vNumber -= (lv_vINT[0] * 1000000000);
    lv_vINT[1] = (lv_vNumber / 1000000);
    lv_vNumber -= (lv_vINT[1] * 1000000);
    lv_vINT[2] = (lv_vNumber / 1000);
    lv_vNumber -= (lv_vINT[2] * 1000);
    lv_vINT[3] = lv_vNumber;
    lv_vDivingSymbol = lp_pDividingSymbol;
    lv_vA = 0;
    for ( ; ( (auto62B3F806_ai >= 0 && lv_vA <= auto62B3F806_ae) || (auto62B3F806_ai < 0 && lv_vA >= auto62B3F806_ae) ) ; lv_vA += auto62B3F806_ai ) {
        if ((lv_vA == 3)) {
            lv_vDivingSymbol = "";
        }

        if ((lv_vINT[lv_vA] != 0) && (lv_vFirst == true)) {
            lv_vFirst = false;
            lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
        }
        else {
            if ((lv_vINT[lv_vA] >= 100)) {
                lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
            }
            else {
                if ((lv_vINT[lv_vA] >= 10)) {
                    lv_vSTRING[lv_vA] = ("0" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                }
                else {
                    if ((lv_vINT[lv_vA] == 0) && (lv_vFirst == true)) {
                        lv_vSTRING[lv_vA] = "";
                    }
                    else {
                        lv_vSTRING[lv_vA] = ("00" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                    }
                }
            }
        }
    }
    return (lv_vSign + lv_vSTRING[0] + lv_vSTRING[1] + lv_vSTRING[2] + lv_vSTRING[3]);
}

text libA8FDA37D_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int autoC5D102A6_n;
    int autoC5D102A6_i;

    // Variable Initialization
    lv_vString = IntToString(lp_pInputNumber);

    // Implementation
    autoC5D102A6_n = (lp_pDigits - StringLength(lv_vString));
    for (autoC5D102A6_i = 1; autoC5D102A6_i <= autoC5D102A6_n; autoC5D102A6_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return StringToText(lv_vString);
}

string libA8FDA37D_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto0594F798_n;
    int auto0594F798_i;

    // Variable Initialization
    lv_vString = FixedToString(lp_pInputReal, lp_pPrecision);

    // Implementation
    auto0594F798_n = (lp_pDigits - StringLength(lv_vString));
    for (auto0594F798_i = 1; auto0594F798_i <= auto0594F798_n; auto0594F798_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return lv_vString;
}

int libA8FDA37D_gf_UT_3StringsToInteger (string lp_pString) {
    // Variable Declarations
    string lv_v1;
    string lv_v2;
    string lv_v3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v1 = StringSub(lp_pString, 1, 1);
    lv_v2 = StringSub(lp_pString, 2, 2);
    lv_v3 = StringSub(lp_pString, 3, 3);

    // Implementation
    return (libA8FDA37D_gf_UT_1StringToInteger(lv_v1)*10000 + libA8FDA37D_gf_UT_1StringToInteger(lv_v2)*100 + libA8FDA37D_gf_UT_1StringToInteger(lv_v3));
}

int libA8FDA37D_gf_UT_1StringToInteger (string lp_pLetter) {
    // Automatic Variable Declarations
    string auto548E51AA_val;

    // Implementation
    auto548E51AA_val = lp_pLetter;
    if (auto548E51AA_val == "a") {
        return 10;
    }
    else if (auto548E51AA_val == "b") {
        return 11;
    }
    else if (auto548E51AA_val == "c") {
        return 12;
    }
    else if (auto548E51AA_val == "d") {
        return 13;
    }
    else if (auto548E51AA_val == "e") {
        return 14;
    }
    else if (auto548E51AA_val == "f") {
        return 15;
    }
    else if (auto548E51AA_val == "g") {
        return 16;
    }
    else if (auto548E51AA_val == "h") {
        return 17;
    }
    else if (auto548E51AA_val == "i") {
        return 18;
    }
    else if (auto548E51AA_val == "j") {
        return 19;
    }
    else if (auto548E51AA_val == "k") {
        return 20;
    }
    else if (auto548E51AA_val == "l") {
        return 21;
    }
    else if (auto548E51AA_val == "m") {
        return 22;
    }
    else if (auto548E51AA_val == "n") {
        return 23;
    }
    else if (auto548E51AA_val == "o") {
        return 24;
    }
    else if (auto548E51AA_val == "p") {
        return 25;
    }
    else if (auto548E51AA_val == "q") {
        return 26;
    }
    else if (auto548E51AA_val == "r") {
        return 27;
    }
    else if (auto548E51AA_val == "s") {
        return 28;
    }
    else if (auto548E51AA_val == "t") {
        return 29;
    }
    else if (auto548E51AA_val == "u") {
        return 30;
    }
    else if (auto548E51AA_val == "v") {
        return 31;
    }
    else if (auto548E51AA_val == "w") {
        return 32;
    }
    else if (auto548E51AA_val == "x") {
        return 33;
    }
    else if (auto548E51AA_val == "y") {
        return 34;
    }
    else if (auto548E51AA_val == "z") {
        return 35;
    }
    else {
        return StringToInt(lp_pLetter);
    }
}

void libA8FDA37D_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int autoAC865E00_n;
    int autoAC865E00_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    autoAC865E00_n = lv_vSteps;
    for (autoAC865E00_i = 1; autoAC865E00_i <= autoAC865E00_n; autoAC865E00_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3CD784A6", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3CD784A6", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3CD784A6", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_3CD784A6"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_89787C64", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_89787C64", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_89787C64", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_89787C64"), PlayerGroupAll());
}

playergroup libA8FDA37D_gf_UT_ActiveCommanderPlayers () {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    const int autoD589A75E_ae = 2;
    int autoD589A75E_var;

    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Implementation
    autoD589A75E_var = 1;
    for ( ; autoD589A75E_var <= autoD589A75E_ae; autoD589A75E_var += 1 ) {
        if ((PlayerStatus(autoD589A75E_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_vPG, autoD589A75E_var);
        }

    }
    return lv_vPG;
}

int libA8FDA37D_gf_UT_SingleHexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;

    // Automatic Variable Declarations
    string auto79F222A1_val;

    // Variable Initialization

    // Implementation
    auto79F222A1_val = lp_pString;
    if (auto79F222A1_val == "A") {
        lv_vOutput += 10;
    }
    else if (auto79F222A1_val == "a") {
        lv_vOutput += 10;
    }
    else if (auto79F222A1_val == "B") {
        lv_vOutput += 11;
    }
    else if (auto79F222A1_val == "b") {
        lv_vOutput += 11;
    }
    else if (auto79F222A1_val == "C") {
        lv_vOutput += 12;
    }
    else if (auto79F222A1_val == "c") {
        lv_vOutput += 12;
    }
    else if (auto79F222A1_val == "D") {
        lv_vOutput += 13;
    }
    else if (auto79F222A1_val == "d") {
        lv_vOutput += 13;
    }
    else if (auto79F222A1_val == "E") {
        lv_vOutput += 14;
    }
    else if (auto79F222A1_val == "e") {
        lv_vOutput += 14;
    }
    else if (auto79F222A1_val == "F") {
        lv_vOutput += 15;
    }
    else if (auto79F222A1_val == "f") {
        lv_vOutput += 15;
    }
    else {
        lv_vOutput += StringToInt(lp_pString);
    }
    return lv_vOutput;
}

int libA8FDA37D_gf_UT_HexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;
    int lv_vMult;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto548AE49E_ae = 1;
    const int auto548AE49E_ai = -1;

    // Variable Initialization
    lv_vMult = 1;

    // Implementation
    lv_vIter = StringLength(lp_pString);
    for ( ; ( (auto548AE49E_ai >= 0 && lv_vIter <= auto548AE49E_ae) || (auto548AE49E_ai < 0 && lv_vIter >= auto548AE49E_ae) ) ; lv_vIter += auto548AE49E_ai ) {
        lv_vOutput += (libA8FDA37D_gf_UT_SingleHexToInt(StringSub(lp_pString, lv_vIter, lv_vIter))*lv_vMult);
        lv_vMult *= 16;
    }
    return lv_vOutput;
}

color libA8FDA37D_gf_UT_HexToColor (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return Color((libA8FDA37D_gf_UT_HexToInt(StringSub(lp_pString, 2, 3))/2.55), (libA8FDA37D_gf_UT_HexToInt(StringSub(lp_pString, 4, 5))/2.55), (libA8FDA37D_gf_UT_HexToInt(StringSub(lp_pString, 6, 7))/2.55));
}

trigger auto_libA8FDA37D_gf_UT_Rise_Trigger = null;
unit auto_libA8FDA37D_gf_UT_Rise_lp_pUnit;

void libA8FDA37D_gf_UT_Rise (unit lp_pUnit) {
    auto_libA8FDA37D_gf_UT_Rise_lp_pUnit = lp_pUnit;

    if (auto_libA8FDA37D_gf_UT_Rise_Trigger == null) {
        auto_libA8FDA37D_gf_UT_Rise_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_Rise_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_Rise_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_Rise_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_libA8FDA37D_gf_UT_Rise_lp_pUnit;

    // Variable Declarations
    int lv_vB;

    // Automatic Variable Declarations
    const int autoBC959EFB_n = 10;
    int autoBC959EFB_i;

    // Variable Initialization
    lv_vB = 10;

    // Implementation
    for (autoBC959EFB_i = 1; autoBC959EFB_i <= autoBC959EFB_n; autoBC959EFB_i += 1) {
        lv_vB -= 1;
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetHeight -0." +IntToString(lv_vB));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

bool libA8FDA37D_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pUnitTypeA == "SiegeTankSieged") && (lp_pUnitTypeB == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged") && (lp_pUnitTypeA == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeA == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeB == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "InfestedSiegeBreaker") && (lp_pUnitTypeB == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeB == "InfestedSiegeBreaker") && (lp_pUnitTypeA == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeA == "ZeratulPhotonCannon") && (lp_pUnitTypeB == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulPhotonCannon") && (lp_pUnitTypeA == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeA == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeB == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "SILiberator") && (lp_pUnitTypeB == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SILiberator") && (lp_pUnitTypeA == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SIInfestedBunker") && (lp_pUnitTypeA == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "SIInfestedBunker") && (lp_pUnitTypeB == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "Liberator_BlackOps") && (lp_pUnitTypeB == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator_BlackOps") && (lp_pUnitTypeA == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator") && (lp_pUnitTypeA == "LiberatorAG")) || ((lp_pUnitTypeA == "Liberator") && (lp_pUnitTypeB == "LiberatorAG")) || ((lp_pUnitTypeB == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeA == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeB == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "GaryStetmann") && (lp_pUnitTypeB == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "GaryStetmann") && (lp_pUnitTypeA == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "BroodLordStetmann") && (lp_pUnitTypeA == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "BroodLordStetmann") && (lp_pUnitTypeB == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "FenixArbiter") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixArbiter") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixArbiter")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixArbiter")) || ((lp_pUnitTypeB == "HHReaper") && (lp_pUnitTypeA == "HHReaperFlying")) || ((lp_pUnitTypeA == "HHReaper") && (lp_pUnitTypeB == "HHReaperFlying")) || ((lp_pUnitTypeA == "Broodling") && (lp_pUnitTypeB == "KerriganInfestBroodling")) || ((lp_pUnitTypeA == "KerriganInfestBroodling") && (lp_pUnitTypeB == "Broodling")) || ((lp_pUnitTypeA == "BroodLord") && (lp_pUnitTypeB == "BroodlingEscort")) || ((lp_pUnitTypeA == "BroodlingEscort") && (lp_pUnitTypeB == "BroodLord")) || ((lp_pUnitTypeA == "SiegeTankMengskSieged") && (lp_pUnitTypeB == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "SiegeTankMengskSieged") && (lp_pUnitTypeA == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "VikingMengskAssault") && (lp_pUnitTypeA == "VikingMengskFighter")) || ((lp_pUnitTypeA == "VikingMengskAssault") && (lp_pUnitTypeB == "VikingMengskFighter")) || ((lp_pUnitTypeA == "ThorMengsk") && (lp_pUnitTypeB == "ThorMengskSieged")) || ((lp_pUnitTypeB == "ThorMengsk") && (lp_pUnitTypeA == "ThorMengskSieged")))) {
        return true;
    }
    else {
        return false;
    }
}

text libA8FDA37D_gf_UT_NameOfUnitType (string lp_pUnitType) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vText = UnitTypeGetName(lp_pUnitType);
    if ((lp_pUnitType == "HHMagneticMineWeapon")) {
        lv_vText = UnitTypeGetName("HHMagneticMine");
    }
    else if ((lp_pUnitType == "HornerAirFleetStrafer")) {
        lv_vText = StringExternal("Button/Name/HornerAirFleet");
    }
    else if ((lp_pUnitType == "SILiberatorCloud")) {
        lv_vText = UnitTypeGetName("SILiberator");
    }
    else if ((lp_pUnitType == "SOAThermalLanceTargeter")) {
        lv_vText = StringExternal("Button/Name/SOAThermalLance");
    }
    else if ((lp_pUnitType == "BroodlingEscortStetmann")) {
        lv_vText = UnitTypeGetName("BroodLordStetmann");
    }
    else if ((lp_pUnitType == "BroodlingEscort")) {
        lv_vText = UnitTypeGetName("BroodLord");
    }
    return lv_vText;
}

string libA8FDA37D_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator) {
    // Variable Declarations
    const string lv_vSEP = "SEP#";
    string lv_vString;
    int lv_vA;

    // Automatic Variable Declarations
    int auto2708610A_ae;
    const int auto2708610A_ai = 1;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto2708610A_ae = lp_pN;
    lv_vA = 1;
    for ( ; ( (auto2708610A_ai >= 0 && lv_vA <= auto2708610A_ae) || (auto2708610A_ai < 0 && lv_vA >= auto2708610A_ae) ) ; lv_vA += auto2708610A_ai ) {
        lv_vString = StringReplaceWord(lv_vString, lp_pSeparator, (lv_vSEP + IntToString(lv_vA)), 1, c_stringCase);
    }
    if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) > 0)) {
        return StringSub(lv_vString, 1, (StringFind(lv_vString, (lv_vSEP + "1"), c_stringCase)-1));
    }
    else if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return lv_vString;
    }
    else if ((StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), StringLength(lv_vString));
    }
    return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase)-1));
}

string libA8FDA37D_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToString(PointGetX(lp_pPoint), lp_pPrecision) + lp_pDelimiter + FixedToString(PointGetY(lp_pPoint), lp_pPrecision));
}

point libA8FDA37D_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint) {
    // Variable Declarations
    int lv_vRadius;
    int lv_vAngle;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto51589E7F_ae = 200;
    const int auto51589E7F_ai = 3;
    const int autoE5AFAC37_ae = 360;
    const int autoE5AFAC37_ai = 30;

    // Variable Initialization

    // Implementation
    if ((PointPathingIsConnected(lp_vInitPoint, lp_vTargetPoint) == true)) {
        return lp_vInitPoint;
    }

    lv_vRadius = 1;
    for ( ; ( (auto51589E7F_ai >= 0 && lv_vRadius <= auto51589E7F_ae) || (auto51589E7F_ai < 0 && lv_vRadius >= auto51589E7F_ae) ) ; lv_vRadius += auto51589E7F_ai ) {
        lv_vAngle = 1;
        for ( ; ( (autoE5AFAC37_ai >= 0 && lv_vAngle <= autoE5AFAC37_ae) || (autoE5AFAC37_ai < 0 && lv_vAngle >= autoE5AFAC37_ae) ) ; lv_vAngle += autoE5AFAC37_ai ) {
            lv_vPoint = PointWithOffsetPolar(lp_vInitPoint, lv_vRadius, lv_vAngle);
            if ((RegionContainsPoint(RegionPlayableMap(), lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, lp_vTargetPoint) == true)) {
                return lv_vPoint;
            }

        }
    }
    return lp_vInitPoint;
}

string libA8FDA37D_gf_UT_StageToString (int lp_pStage) {
    // Variable Declarations
    string lv_vStage;

    // Automatic Variable Declarations
    int autoBCE61E6B_val;

    // Variable Initialization
    lv_vStage = "";

    // Implementation
    autoBCE61E6B_val = lp_pStage;
    if (autoBCE61E6B_val == c_unitAbilStageAll) {
        lv_vStage = "Any";
    }
    else if (autoBCE61E6B_val == c_unitAbilStageQueue) {
        lv_vStage = "Queue";
    }
    else if (autoBCE61E6B_val == c_unitAbilStageExecute) {
        lv_vStage = "Execute";
    }
    else if (autoBCE61E6B_val == c_unitAbilStageCancel) {
        lv_vStage = "Cancel";
    }
    else if (autoBCE61E6B_val == c_unitAbilStagePreempt) {
        lv_vStage = "Preempt";
    }
    else if (autoBCE61E6B_val == c_unitAbilStageComplete) {
        lv_vStage = "Complete";
    }
    else if (autoBCE61E6B_val == c_unitAbilStagePause) {
        lv_vStage = "Pause";
    }
    else if (autoBCE61E6B_val == c_unitAbilStageUnpause) {
        lv_vStage = "Unpause";
    }
    else {
        lv_vStage = "-";
    }
    return lv_vStage;
}

trigger auto_libA8FDA37D_gf_UT_AotDFix_Trigger = null;

void libA8FDA37D_gf_UT_AotDFix () {
    if (auto_libA8FDA37D_gf_UT_AotDFix_Trigger == null) {
        auto_libA8FDA37D_gf_UT_AotDFix_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_AotDFix_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_AotDFix_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_AotDFix_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringUnitID = "";

    // Implementation
    Wait(1.0, c_timeGame);
    if ((libCOMU_gf_MutatorIsEnabled("UberDarkness") == true) && (libCOOC_gf_CC_CurrentMap() == "AC_CradleOfDeath")) {
        CatalogFieldValueSet(c_gameCatalogUnit, "CODFlatbedTruck", "Sight", 1, "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "CODFlatbedTruck", "Sight", 2, "0");
    }

    return true;
}

trigger auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger = null;

void libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck () {
    if (auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger == null) {
        auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_Dehaka_DevourCooldownScoreCheck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vDehaka;

    // Automatic Variable Declarations
    playergroup auto55950CF9_g;
    int auto55950CF9_var;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    auto55950CF9_g = libA8FDA37D_gf_UT_ActiveCommanderPlayers();
    auto55950CF9_var = -1;
    while (true) {
        auto55950CF9_var = PlayerGroupNextPlayer(auto55950CF9_g, auto55950CF9_var);
        if (auto55950CF9_var < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(auto55950CF9_var) == "ZergDehaka")) {
            while (!((GameGetMissionTime() > 0.0) && (UnitIsAlive(lib01833E95_gf_AF_GetHeroUnit(auto55950CF9_var)) == true))) {
                Wait(0.5, c_timeGame);
            }
            lv_vDehaka = lib01833E95_gf_AF_GetHeroUnit(auto55950CF9_var);
            while (true) {
                if ((UnitIsAlive(lv_vDehaka) == true) && (UnitAbilityGetCooldown(lv_vDehaka, "DehakaConsume", "Abil/DehakaConsume") <= 0.0)) {
                    PlayerScoreValueSetFromFixed(auto55950CF9_var, "Devouroffcooldown", (PlayerScoreValueGetAsFixed(auto55950CF9_var, "Devouroffcooldown")+0.5));
                }

                Wait(0.5, c_timeGame);
            }
        }

    }
    return true;
}

trigger auto_libA8FDA37D_gf_UT_PostStringWithIcons_Trigger = null;
string auto_libA8FDA37D_gf_UT_PostStringWithIcons_lp_pString;

void libA8FDA37D_gf_UT_PostStringWithIcons (string lp_pString) {
    auto_libA8FDA37D_gf_UT_PostStringWithIcons_lp_pString = lp_pString;

    if (auto_libA8FDA37D_gf_UT_PostStringWithIcons_Trigger == null) {
        auto_libA8FDA37D_gf_UT_PostStringWithIcons_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_PostStringWithIcons_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_PostStringWithIcons_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_PostStringWithIcons_TriggerFunc (bool testConds, bool runActions) {
    string lp_pString = auto_libA8FDA37D_gf_UT_PostStringWithIcons_lp_pString;

    // Variable Declarations
    string lv_vString;
    string lv_vTempString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vString = libA8FDA37D_gf_UT_ReplaceEmotes(lp_pString);
    lv_vTempString = lv_vString;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(lv_vString));
    while (true) {
        if ((StringContains(lv_vTempString, "*honk*", c_stringAnywhere, c_stringNoCase) == true)) {
            if ((TimerGetRemaining(libA8FDA37D_gv_uT_SoundEmoteTimer) > 0.0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_375A006F"));
                break;
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
            SoundPlayForPlayer(SoundLink("Honk", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            lv_vTempString = StringReplaceWord(lv_vTempString, "*honk*", "", 1, c_stringNoCase);
            if ((libA8FDA37D_gv_uT_SoundEmoteCooldownLength > 0.0)) {
                TimerStart(libA8FDA37D_gv_uT_SoundEmoteTimer, libA8FDA37D_gv_uT_SoundEmoteCooldownLength, false, c_timeGame);
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

void libA8FDA37D_gf_UT_Init_Emoticons () {
    int init_i;

    // Variable Declarations
    string[101] lv_vEmoticons;
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lv_vEmoticons[init_i] = "";
    }

    // Implementation
    lv_vIndex = 0;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "angry";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "baneling";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "brew";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "poo";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "cannon";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "cool";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "depot";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "drone";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "flex";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "gas";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "gg";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "glhf";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "gminerals";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "happy";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "infested";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "inlove";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "locust";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "minerals";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "mochi";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "nuke";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "overlord";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "pheart";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "bunker";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "probe";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "protoss";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "pylon";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "random";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "rofl";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "sad";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "sc2";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "scv";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "silly";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "skull";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "snipe";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "speechless";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "surprised";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "symbiote";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "terran";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "theart";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsdown";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsup";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "zerg";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "zheart";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_SC_Emoticons[lv_vIndex] = "zipped";
    lv_vIndex = 0;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "BabyRage";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "BibleThump";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "BlessRNG";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "coronaS";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "DansGame";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "FailFish";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsBadMan";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsGoodMan";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsOkayMan";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "FrankerZ";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "GivePLZ";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "HYPERS";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "Kappa";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "LUL";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "monkaGun";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "monkaS";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "MrDestructoid";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "NotLikeThis";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "OhMyDog";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "OMEGALUL";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "PepeHands";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "PogChamp";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "POGGERS";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "ResidentSleeper";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "SeemsGood";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "TakeNRG";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "TheThing";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "Thonk";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "weSmart";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "BrokeBack";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "4Head";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "Catalisk";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "Kreygasm";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "OpieOP";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "WutFace";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "Rfrogdurr";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "peepopotat";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "rip";
    lv_vIndex += 1;
    libA8FDA37D_gv_uT_CS_Emoticons[lv_vIndex] = "goose";
}

string libA8FDA37D_gf_UT_ReplaceEmotes (string lp_pString) {
    // Variable Declarations
    string lv_vString;
    const string lv_cSCSTART = "<img path=\"Assets\\Textures\\ui_emoticons_";
    const string lv_cTWSTART = "<img path=\"TwitchEmotes\\";
    const string lv_cEND = ".dds\" alignment=\"absolutemiddle\" />";

    // Automatic Variable Declarations
    const int auto416F7EFC_ae = libA8FDA37D_gv_uT_MAXEMOTES;
    int auto416F7EFC_var;
    const int auto8F5E53C1_ae = libA8FDA37D_gv_uT_MAXEMOTES;
    int auto8F5E53C1_var;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto416F7EFC_var = 0;
    for ( ; auto416F7EFC_var <= auto416F7EFC_ae; auto416F7EFC_var += 1 ) {
        if ((libA8FDA37D_gv_uT_SC_Emoticons[auto416F7EFC_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, ("(" + libA8FDA37D_gv_uT_SC_Emoticons[auto416F7EFC_var] + ")"), (lv_cSCSTART + libA8FDA37D_gv_uT_SC_Emoticons[auto416F7EFC_var] + lv_cEND), c_stringReplaceAll, c_stringNoCase);
        }

    }
    auto8F5E53C1_var = 0;
    for ( ; auto8F5E53C1_var <= auto8F5E53C1_ae; auto8F5E53C1_var += 1 ) {
        if ((libA8FDA37D_gv_uT_CS_Emoticons[auto8F5E53C1_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, (" " + libA8FDA37D_gv_uT_CS_Emoticons[auto8F5E53C1_var]), (" " + lv_cTWSTART + libA8FDA37D_gv_uT_CS_Emoticons[auto8F5E53C1_var] + lv_cEND), c_stringReplaceAll, c_stringCase);
        }

    }
    return lv_vString;
}

bool libA8FDA37D_gf_UT_Bank_UnitExcluded (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_pUnit) != "SoloDummy") && (lp_pUnit != lib01833E95_gf_CM_PlayerGetGlobalCaster(1)) && (lp_pUnit != lib01833E95_gf_CM_PlayerGetGlobalCaster(2)) && (lp_pUnit != lib01833E95_gf_AF_GetHeroUnit(1)) && (lp_pUnit != lib01833E95_gf_AF_GetHeroUnit(2)) && (lp_pUnit != lib01833E95_gf_AF_GetHeroUnit(2))) {
        return false;
    }
    else {
        return true;
    }
}

void libA8FDA37D_gf_UT_Bank_SaveBank (int lp_pPlayer, string lp_pSaveName, string lp_pBankName) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vA;
    int lv_vB;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    const int lv_vSecLength = 6;

    // Automatic Variable Declarations
    const int autoBCCC27ED_ae = libA8FDA37D_gv_uT_Bank_MaxPlayers;
    int autoBCCC27ED_var;
    unitgroup auto2A753197_g;
    int auto2A753197_u;
    unit auto2A753197_var;

    // Variable Initialization
    lv_vUnitSection = ("Units_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    BankSectionRemove(BankLastCreated(), lv_vUnitSection);
    autoBCCC27ED_var = 1;
    for ( ; autoBCCC27ED_var <= autoBCCC27ED_ae; autoBCCC27ED_var += 1 ) {
        auto2A753197_g = UnitGroup(null, autoBCCC27ED_var, RegionEntireMap(), libA8FDA37D_gv_uT_Bank_UnitFilter, 0);
        auto2A753197_u = UnitGroupCount(auto2A753197_g, c_unitCountAll);
        for (;; auto2A753197_u -= 1) {
            auto2A753197_var = UnitGroupUnitFromEnd(auto2A753197_g, auto2A753197_u);
            if (auto2A753197_var == null) { break; }
            if ((libA8FDA37D_gf_UT_Bank_UnitExcluded(auto2A753197_var) == false)) {
                BankValueSetFromString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA), (FixedToString(PointGetX(UnitGetPosition(auto2A753197_var)), c_fixedPrecisionAny) + "," + FixedToString(PointGetY(UnitGetPosition(auto2A753197_var)), c_fixedPrecisionAny) + "," + FixedToString(UnitGetFacing(auto2A753197_var), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto2A753197_var, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto2A753197_var, c_unitPropShields, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto2A753197_var, c_unitPropEnergy, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto2A753197_var, c_unitPropKills, c_unitPropCurrent), c_fixedPrecisionAny) + "," + IntToString(BoolToInt(libNtve_gf_UnitIsHidden(auto2A753197_var))) + "," + IntToString(UnitGetOwner(auto2A753197_var)) + "," + (UnitGetType(auto2A753197_var))));
                lv_vA += 1;
            }

        }
    }
    BankValueSetFromInt(BankLastCreated(), lv_vUnitSection, "MaxUnits", lv_vA);
    BankSave(BankLastCreated());
}

void libA8FDA37D_gf_UT_Bank_RestoreBank (int lp_pPlayer, string lp_pSaveName, playergroup lp_pPlayerGroup, string lp_pBankName) {
    // Variable Declarations
    int lv_vA;
    int lv_vB;
    int lv_vMaxUnits;
    int lv_vMaxUpgrades;
    unitgroup lv_vUGRemoveTheseUnitsLater;
    unitgroup lv_vUGKeepTheseUnits;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    string lv_vString;
    string lv_vUnitType;
    point lv_vPosition;
    int lv_vPlayer;
    unitgroup lv_vUGSameUnitsClose;
    unit lv_vUnit;

    // Automatic Variable Declarations
    int autoFF93F870_ae;
    const int autoFF93F870_ai = 1;
    playergroup auto71F9A882_g;
    int auto71F9A882_var;
    unitgroup autoDEE11865_g;
    int autoDEE11865_u;
    unit autoDEE11865_var;
    unitgroup autoE5362170_g;
    int autoE5362170_u;
    unit autoE5362170_var;

    // Variable Initialization
    lv_vUGRemoveTheseUnitsLater = UnitGroupEmpty();
    lv_vUGKeepTheseUnits = UnitGroupEmpty();
    lv_vUnitSection = ("Units_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOOC_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vString = "";
    lv_vUGSameUnitsClose = UnitGroupEmpty();

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    lv_vMaxUnits = BankValueGetAsInt(BankLastCreated(), lv_vUnitSection, "MaxUnits");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummy", 0, 1, PlayerStartLocation(1));
    UnitGroupAdd(lv_vUGRemoveTheseUnitsLater, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummy", 0, 2, PlayerStartLocation(2));
    UnitGroupAdd(lv_vUGRemoveTheseUnitsLater, UnitLastCreated());
    autoFF93F870_ae = (lv_vMaxUnits-1);
    lv_vA = 0;
    for ( ; ( (autoFF93F870_ai >= 0 && lv_vA <= autoFF93F870_ae) || (autoFF93F870_ai < 0 && lv_vA >= autoFF93F870_ae) ) ; lv_vA += autoFF93F870_ai ) {
        lv_vString = BankValueGetAsString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA));
        lv_vUnitType = UnitTypeFromString(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 10, ","));
        lv_vPosition = Point(StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 1, ",")), StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 2, ",")));
        lv_vPlayer = StringToInt(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 9, ","));
        lv_vUGSameUnitsClose = UnitGroup(lv_vUnitType, lv_vPlayer, RegionCircle(lv_vPosition, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) == 0)) {
            lv_vB += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_vUnitType, c_unitCreateIgnorePlacement, lv_vPlayer, lv_vPosition);
            UnitGroupAdd(lv_vUGKeepTheseUnits, UnitLastCreated());
            UnitSetFacing(UnitLastCreated(), StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 3, ",")), 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 6, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 7, ",")));
            if ((libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 8, ",") == "1")) {
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
        else if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) >= 1)) {
            lv_vUnit = UnitGroupRandomUnit(lv_vUGSameUnitsClose, c_unitCountAlive);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libA8FDA37D_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitGroupAdd(lv_vUGKeepTheseUnits, lv_vUnit);
        }
    }
    auto71F9A882_g = lp_pPlayerGroup;
    auto71F9A882_var = -1;
    while (true) {
        auto71F9A882_var = PlayerGroupNextPlayer(auto71F9A882_g, auto71F9A882_var);
        if (auto71F9A882_var < 0) { break; }
        autoDEE11865_g = UnitGroup(null, auto71F9A882_var, RegionEntireMap(), libA8FDA37D_gv_uT_Bank_UnitFilter, 0);
        autoDEE11865_u = UnitGroupCount(autoDEE11865_g, c_unitCountAll);
        for (;; autoDEE11865_u -= 1) {
            autoDEE11865_var = UnitGroupUnitFromEnd(autoDEE11865_g, autoDEE11865_u);
            if (autoDEE11865_var == null) { break; }
            if ((libA8FDA37D_gf_UT_Bank_UnitExcluded(autoDEE11865_var) == false) && (UnitGroupHasUnit(lv_vUGKeepTheseUnits, autoDEE11865_var) == false)) {
                UnitRemove(autoDEE11865_var);
            }

        }
    }
    autoE5362170_g = lv_vUGRemoveTheseUnitsLater;
    autoE5362170_u = UnitGroupCount(autoE5362170_g, c_unitCountAll);
    for (;; autoE5362170_u -= 1) {
        autoE5362170_var = UnitGroupUnitFromEnd(autoE5362170_g, autoE5362170_u);
        if (autoE5362170_var == null) { break; }
        UnitRemove(autoE5362170_var);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 1);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), 2);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F8928C9C", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F8928C9C"));
}

trigger auto_libA8FDA37D_gf_UT_CopyProperties_Trigger = null;
unit auto_libA8FDA37D_gf_UT_CopyProperties_lp_pOriginalUnit;
unit auto_libA8FDA37D_gf_UT_CopyProperties_lp_pNewUnit;

void libA8FDA37D_gf_UT_CopyProperties (unit lp_pOriginalUnit, unit lp_pNewUnit) {
    auto_libA8FDA37D_gf_UT_CopyProperties_lp_pOriginalUnit = lp_pOriginalUnit;
    auto_libA8FDA37D_gf_UT_CopyProperties_lp_pNewUnit = lp_pNewUnit;

    if (auto_libA8FDA37D_gf_UT_CopyProperties_Trigger == null) {
        auto_libA8FDA37D_gf_UT_CopyProperties_Trigger = TriggerCreate("auto_libA8FDA37D_gf_UT_CopyProperties_TriggerFunc");
    }

    TriggerExecute(auto_libA8FDA37D_gf_UT_CopyProperties_Trigger, false, false);
}

bool auto_libA8FDA37D_gf_UT_CopyProperties_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pOriginalUnit = auto_libA8FDA37D_gf_UT_CopyProperties_lp_pOriginalUnit;
    unit lp_pNewUnit = auto_libA8FDA37D_gf_UT_CopyProperties_lp_pNewUnit;

    // Variable Declarations
    int lv_vPlayer;
    int lv_vControlGroup;

    // Automatic Variable Declarations
    const int autoAC67DD8C_ae = 15;
    const int autoAC67DD8C_ai = 1;
    const int autoD9A38E2C_ae = 9;
    const int autoD9A38E2C_ai = 1;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifeMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropShieldsMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropShieldsMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyMax, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyRegen, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyRegen, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifeRegen, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifeRegen, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLifePercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLifePercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropXP, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropXP, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropShields, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropShields, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropKills, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropKills, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropResources, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropResources, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropMovementSpeed, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropBaseMovementSpeed, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropLevel, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropHeight, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropHeight, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedVespene, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedVespene, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedMinerals, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedMinerals, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedTerrazine, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedTerrazine, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_pNewUnit, c_unitPropCarriedCustom, UnitGetPropertyFixed(lp_pOriginalUnit, c_unitPropCarriedCustom, c_unitPropCurrent));
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 0), c_orderQueueReplace);
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 1), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_pNewUnit, UnitOrder(lp_pOriginalUnit, 2), c_orderQueueAddToEnd);
    lv_vPlayer = 1;
    for ( ; ( (autoAC67DD8C_ai >= 0 && lv_vPlayer <= autoAC67DD8C_ae) || (autoAC67DD8C_ai < 0 && lv_vPlayer >= autoAC67DD8C_ae) ) ; lv_vPlayer += autoAC67DD8C_ai ) {
        if ((UnitIsSelected(lp_pOriginalUnit, lv_vPlayer) == true)) {
            UnitSelect(lp_pNewUnit, lv_vPlayer, true);
        }

        lv_vControlGroup = 0;
        for ( ; ( (autoD9A38E2C_ai >= 0 && lv_vControlGroup <= autoD9A38E2C_ae) || (autoD9A38E2C_ai < 0 && lv_vControlGroup >= autoD9A38E2C_ae) ) ; lv_vControlGroup += autoD9A38E2C_ai ) {
            if ((UnitGroupHasUnit(UnitControlGroup(lv_vPlayer, lv_vControlGroup), lp_pOriginalUnit) == true)) {
                UnitControlGroupAddUnit(lv_vPlayer, lv_vControlGroup, lp_pNewUnit);
            }

        }
    }
    return true;
}

void libA8FDA37D_gf_UT_VoidRiftDebugSpawn (int lp_forPlayer, fixed lp_pTime) {
    // Variable Declarations
    int lv_riftPlayer;
    int lv_spawnAttempt;
    point lv_riftLocation;
    fixed lv_maxDistance;

    // Automatic Variable Declarations
    const int autoC10D902E_ae = 1000;
    const int autoC10D902E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_forPlayer == 2)) {
        lv_riftPlayer = 4;
    }
    else {
        lv_riftPlayer = 3;
    }
    if (((lp_pTime * 60.0) < 480.0)) {
        lv_maxDistance = 80.0;
    }
    else if (true) {
        lv_maxDistance = 500.0;
    }
    lv_spawnAttempt = 1;
    for ( ; ( (autoC10D902E_ai >= 0 && lv_spawnAttempt <= autoC10D902E_ae) || (autoC10D902E_ai < 0 && lv_spawnAttempt >= autoC10D902E_ae) ) ; lv_spawnAttempt += autoC10D902E_ai ) {
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(2)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) > lv_maxDistance) || (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_riftLocation) == false) || (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_riftLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 3) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("ShapeSphere", c_playerAny, RegionCircle(lv_riftLocation, 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (PointPathingIsConnected(lv_riftLocation, PlayerStartLocation(1)) == false) || (UnitGroupCount(UnitGroup("MutatorVoidRift", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((libCOOC_gf_CC_CurrentMap() == "AC_UlnarLocks") && ((lp_pTime * 60.0) < 300.0) && (AIPathingCostMap(lv_riftLocation, PlayerStartLocation(lp_forPlayer)) > 70)))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeSphere", 0, 0, lv_riftLocation);
    UnitSetTeamColorIndex(UnitLastCreated(), 3);
}

void libA8FDA37D_gf_UT_UpdateUnitInfo (unit lp_pUnit) {
    // Variable Declarations
    string lv_vBeh;
    text lv_vBehNumber;
    text lv_vText;
    int lv_vTextTagNormal;
    int lv_vTextTagHidden;
    text lv_vDuration;

    // Automatic Variable Declarations
    unit autoFA659547_u;
    int autoFA659547_i;

    // Variable Initialization
    lv_vTextTagNormal = libHots_gf_TextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionNormal);
    lv_vTextTagHidden = libHots_gf_TextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionHidden);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BD98AC9F", "A", StringToText((UnitGetType(lp_pUnit))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BD98AC9F", "B", IntToText(UnitGetOwner(lp_pUnit)));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_760ABD31", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_A8FDA37D_BD98AC9F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_pUnit), false))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_760ABD31", "B", FixedToText(PointGetX(UnitGetPosition(lp_pUnit)), 1));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_760ABD31", "C", FixedToText(PointGetY(UnitGetPosition(lp_pUnit)), 1));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_760ABD31");
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == true)) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_933BE132", "B", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_933BE132");
    }

    autoFA659547_u = lp_pUnit;
    autoFA659547_i = 1;
    for ( ; autoFA659547_i <= UnitBehaviorCountAll(autoFA659547_u) ; autoFA659547_i += BoolToInt(lv_vBeh == UnitBehaviorGet(autoFA659547_u, autoFA659547_i)) ) {
        lv_vBeh = UnitBehaviorGet(autoFA659547_u, autoFA659547_i);
        if ((UnitBehaviorCount(lp_pUnit, lv_vBeh) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B0B543B4", "A", IntToText(UnitBehaviorCount(lp_pUnit, lv_vBeh)));
            lv_vBehNumber = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B0B543B4");
        }
        else {
            lv_vBehNumber = StringToText("");
        }
        if ((UnitBehaviorDuration(lp_pUnit, lv_vBeh) > 0.0) && (UnitBehaviorDuration(lp_pUnit, lv_vBeh) < 32000.0)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F8FEA185", "A", FixedToText(UnitBehaviorDuration(lp_pUnit, lv_vBeh), 0));
            lv_vDuration = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F8FEA185");
        }
        else {
            lv_vDuration = StringToText("");
        }
        if ((UnitBehaviorEnabled(lp_pUnit, lv_vBeh) == false)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_630B8853", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_630B8853", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_630B8853", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_630B8853", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_630B8853");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_FE673A93", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_FE673A93", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_FE673A93", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_FE673A93", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_FE673A93");
        }
    }
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == false)) {
        TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), false);
        if ((lv_vTextTagNormal == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionNormal, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.0);
        }
        else {
            TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagNormal, lv_vText);
        }
    }
    else {
        TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), false);
        if ((lv_vTextTagHidden == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionHidden, TextTagLastCreated());
        }
        else {
            TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagHidden, lv_vText);
            TextTagSetPosition(lv_vTextTagHidden, UnitGetPosition(lp_pUnit), 2.0);
        }
    }
}

void libA8FDA37D_gf_UT_RemoveUnitInfo (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    TextTagShow(libHots_gf_TextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionHidden), PlayerGroupAll(), false);
    TextTagShow(libHots_gf_TextTagForUnit(lp_pUnit, libA8FDA37D_gv_uT_TextTagPositionNormal), PlayerGroupAll(), false);
}

bool libA8FDA37D_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    int lv_vIdx;
    bool lv_vStored;

    // Automatic Variable Declarations
    const int autoDA6FFA17_ae = libA8FDA37D_gv_uT_HotkeyStoreLength;
    const int autoDA6FFA17_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vIdx = 0;
    for ( ; ( (autoDA6FFA17_ai >= 0 && lv_vIdx <= autoDA6FFA17_ae) || (autoDA6FFA17_ai < 0 && lv_vIdx >= autoDA6FFA17_ae) ) ; lv_vIdx += autoDA6FFA17_ai ) {
        if ((libA8FDA37D_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] != "")) {
            BankValueSetFromString(lp_pBank, "ModifiedHotkeys", libA8FDA37D_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer], libA8FDA37D_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer]);
            libA8FDA37D_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] = "";
            libA8FDA37D_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer] = "";
            lv_vStored = true;
        }

    }
    return lv_vStored;
}

void libA8FDA37D_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    string lv_vButtonName;
    string lv_vHotkeyValue;

    // Automatic Variable Declarations
    int auto7416F702_ae;
    int auto7416F702_var;

    // Variable Initialization
    lv_vButtonName = "";
    lv_vHotkeyValue = "";

    // Implementation
    auto7416F702_ae = BankKeyCount(lp_pBank, "ModifiedHotkeys");
    auto7416F702_var = 1;
    for ( ; auto7416F702_var <= auto7416F702_ae; auto7416F702_var += 1 ) {
        lv_vButtonName = BankKeyName(lp_pBank, "ModifiedHotkeys", (auto7416F702_var-1));
        lv_vHotkeyValue = BankValueGetAsString(lp_pBank, "ModifiedHotkeys", lv_vButtonName);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_13904E23", "A", StringToText(lv_vButtonName));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_13904E23", "B", StringToText(lv_vHotkeyValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_13904E23"), false);
        CatalogFieldValueSet(c_gameCatalogButton, (lv_vButtonName), "Hotkey", lp_pPlayer, ("Letter/" + lv_vHotkeyValue));
    }
}

int libA8FDA37D_gf_UT_DiffForPlayer (int lp_player) {
    // Automatic Variable Declarations
    int autoB118B0F5_val;

    // Implementation
    autoB118B0F5_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoB118B0F5_val == 1) {
        return 1;
    }
    else if (autoB118B0F5_val == 2) {
        return 2;
    }
    else if (autoB118B0F5_val == 3) {
        return 3;
    }
    else if (autoB118B0F5_val == 4) {
        return 4;
    }
    else {
        return -1;
    }
}

void libA8FDA37D_gf_UT_RefreshTopBarZeratul (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_pPlayer], PlayerGroupAll(), "CurrentArtifact", IntToString((libCOMI_gv_cM_ZeratulProphecyArtifactNumber + 0)));
    if ((PlayerGetCooldown(lp_pPlayer, "Abil/ProphecyVision") <= 0.0) && (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier3", c_techCountCompleteOnly) == 0)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_pPlayer], PlayerGroupAll(), "ProphecyState", "Ready");
    }

    if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) >= 1))) {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Used");
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier1", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier2", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactTier3", c_techCountCompleteOnly) >= 1)) {
        if (((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3C", c_techCountCompleteOnly) >= 1))) {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Used");
        }
        else {
            DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Collected");
        }
    }
    else {
        DialogControlSetAnimationState(libCOUI_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
}

void libA8FDA37D_gf_UT_RefreshTopBarTychus (int lp_pPlayer) {
    // Variable Declarations
    int lv_vA;
    fixed lv_vCharges;
    unit lv_vUnit;
    string lv_vUnitType;
    string lv_vSquadInstance;
    unitgroup lv_vUG;
    int lv_vSquadIndex;

    // Automatic Variable Declarations
    string auto78898B96_userType;
    int auto78898B96_i;
    const int autoA7EC135B_ae = 4;
    int autoA7EC135B_var;
    unitgroup auto4CF4F6ED_g;
    int auto4CF4F6ED_u;
    unit auto4CF4F6ED_var;

    // Variable Initialization
    lv_vCharges = UnitAbilityChargeInfo(UnitGroupUnit(UnitGroup("TychusResearchCenterUnlocked", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), AbilityCommand("TychusBarracksTrain", 0), c_unitAbilChargeCountLeft);
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive);
    lv_vUG = UnitGroupEmpty();

    // Implementation
    auto78898B96_userType = libCOMI_gv_cM_Tychus_UserTypeHeroList;
    auto78898B96_i = 1;
    for ( ; auto78898B96_i <= UserDataInstanceCount(auto78898B96_userType) ; auto78898B96_i += 1 ) {
        lv_vSquadInstance = UserDataInstance(auto78898B96_userType, auto78898B96_i);
        lv_vSquadIndex = UserDataGetInt("XAC_TechTychusSquad", lv_vSquadInstance, "Squad Slot", 1);
        lv_vUnitType = UserDataGetUnit(libCOMI_gv_cM_Tychus_UserTypeHeroList, lv_vSquadInstance, "Unit Type", 1);
        lv_vUG = UnitGroup(lv_vUnitType, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
        lv_vUnit = UnitGroupUnit(lv_vUG, 1);
        if (((lv_vSquadIndex >= 1) || (lv_vUnitType == "TychusCoop"))) {
            if ((lv_vUnitType == "TychusCoop")) {
                lv_vSquadIndex = 0;
            }

            TriggerDebugOutput(1, UnitGetName(lv_vUnit), true);
            libCOUI_gf_SetTychusSquadMember(lv_vUnit, lv_vSquadIndex, lv_vSquadInstance);
            lv_vA += 1;
            if ((UnitIsAlive(lv_vUnit) == false)) {
                DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[lv_vSquadIndex], PlayerGroupAll(), "DeathState", "Dead");
            }

            DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[UserDataGetInt("XAC_TechTychusSquad", lv_vSquadInstance, "Squad Slot", 1)], PlayerGroupAll(), "EquipmentState", IntToString(UserDataGetInt("XAC_TechTychusSquad", lv_vSquadInstance, "EquipCount", 1)));
        }

    }
    autoA7EC135B_var = lv_vA;
    for ( ; autoA7EC135B_var <= autoA7EC135B_ae; autoA7EC135B_var += 1 ) {
        if ((lv_vCharges >= 1)) {
            DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[autoA7EC135B_var], PlayerGroupAll(), "AvailabilityState", "Available");
            lv_vCharges -= 1.0;
        }

    }
    lv_vA = 0;
    auto4CF4F6ED_g = UnitGroup("TychusMedivacPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4CF4F6ED_u = UnitGroupCount(auto4CF4F6ED_g, c_unitCountAll);
    for (;; auto4CF4F6ED_u -= 1) {
        auto4CF4F6ED_var = UnitGroupUnitFromEnd(auto4CF4F6ED_g, auto4CF4F6ED_u);
        if (auto4CF4F6ED_var == null) { break; }
        if ((UnitAbilityGetCooldown(auto4CF4F6ED_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits") <= 0.0)) {
            lv_vA += 1;
        }

    }
    libCOUI_gv_cU_TychusMedivacCurrentCharges = lv_vA;
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadContainer, PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCOUI_gv_cU_TychusMedivacCurrentCharges));
}

void libA8FDA37D_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    unitgroup auto11F16612_g;
    int auto11F16612_u;
    unit auto11F16612_var;

    // Implementation
    libA8FDA37D_gv_cM_ZeratulProphecyArtifactBadRegion = null;
    auto11F16612_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), 0, (1 << (c_targetFilterDead - 32))), 0);
    auto11F16612_u = UnitGroupCount(auto11F16612_g, c_unitCountAll);
    for (;; auto11F16612_u -= 1) {
        auto11F16612_var = UnitGroupUnitFromEnd(auto11F16612_g, auto11F16612_u);
        if (auto11F16612_var == null) { break; }
        if ((libA8FDA37D_gv_cM_ZeratulProphecyArtifactBadRegion == null)) {
            libA8FDA37D_gv_cM_ZeratulProphecyArtifactBadRegion = RegionCircle(UnitGetPosition(auto11F16612_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto11F16612_var), "Radius", UnitGetOwner(auto11F16612_var)));
        }
        else {
            RegionAddRegion(libA8FDA37D_gv_cM_ZeratulProphecyArtifactBadRegion, RegionCircle(UnitGetPosition(auto11F16612_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto11F16612_var), "Radius", UnitGetOwner(auto11F16612_var))));
        }
    }
}

point libA8FDA37D_gf_UT_Zeratul_FindArtifactPlacementPointNewDebug (int lp_artifactNumber) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed autoFEFA8409_ae;
    fixed autoFEFA8409_ai;
    const fixed auto8F3F2CF9_ae = 360.0;
    fixed auto8F3F2CF9_ai;
    unitgroup auto7605239F_g;
    int auto7605239F_u;
    unit auto7605239F_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMI_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMI_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMI_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);

    // Implementation
    libA8FDA37D_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    autoFEFA8409_ae = lv_minSearchRadius;
    autoFEFA8409_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (autoFEFA8409_ai >= 0 && lv_radiusIter <= autoFEFA8409_ae) || (autoFEFA8409_ai < 0 && lv_radiusIter >= autoFEFA8409_ae) ) ; lv_radiusIter += autoFEFA8409_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto8F3F2CF9_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto8F3F2CF9_ai >= 0 && lv_angleIter <= auto8F3F2CF9_ae) || (auto8F3F2CF9_ai < 0 && lv_angleIter >= auto8F3F2CF9_ae) ) ; lv_angleIter += auto8F3F2CF9_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer])) || (DistanceBetweenPoints(UnitGetPosition(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libA8FDA37D_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto7605239F_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto7605239F_u = UnitGroupCount(auto7605239F_g, c_unitCountAll);
                    for (;; auto7605239F_u -= 1) {
                        auto7605239F_var = UnitGroupUnitFromEnd(auto7605239F_g, auto7605239F_u);
                        if (auto7605239F_var == null) { break; }
                        if (((UnitFilterMatch(auto7605239F_var, UnitGetOwner(auto7605239F_var), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto7605239F_var) == "PhotonCannon") || (UnitGetType(auto7605239F_var) == "SpineCrawler") || (UnitGetType(auto7605239F_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto7605239F_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto7605239F_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    lv_validPointsCount += 1;
                    if ((UnitGroupCount(UnitGroup("ShapeSphere", c_playerAny, RegionCircle(lv_pointIter, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeSphere", 0, libA8FDA37D_gv_uT_ArtSpawnPlayer, lv_pointIter);
                        UnitSetTeamColorIndex(UnitLastCreated(), libA8FDA37D_gv_uT_ArtSpawnColor);
                    }

                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                    }

                }

            }
        }
    }
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_A8FDA37D_764BA4C1"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 0.0);
    }

    return lv_pickedPoint;
}

int libA8FDA37D_gf_UT_TotalDamageHeal (int lp_pPlayer, int lp_pDamageHeal) {
    // Variable Declarations
    int lv_vTotalDamageHeal;
    int lv_vDamageHeal;

    // Automatic Variable Declarations
    const int auto45F8EDE8_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto45F8EDE8_var;

    // Variable Initialization

    // Implementation
    if ((lp_pDamageHeal == libA8FDA37D_ge_DamageHeal_Damage)) {
        lv_vDamageHeal = 0;
    }
    else {
        lv_vDamageHeal = 1;
    }
    auto45F8EDE8_var = 1;
    for ( ; auto45F8EDE8_var <= auto45F8EDE8_ae; auto45F8EDE8_var += 1 ) {
        if ((libA8FDA37D_gv_uT_DL_Data[auto45F8EDE8_var][lv_vDamageHeal][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamageHeal += libA8FDA37D_gf_UT_DL_SumHealingDamage(auto45F8EDE8_var, lv_vDamageHeal, lp_pPlayer);
        }

    }
    return lv_vTotalDamageHeal;
}

string libA8FDA37D_gf_UT_CommanderScoreSelfStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticSelf", 1);
}

string libA8FDA37D_gf_UT_CommanderScoreCoopStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticCoop", 1);
}

string libA8FDA37D_gf_UT_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOOC_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

void libA8FDA37D_gf_UT_CreatePieChartfromDamageLog (int lp_pPlayer, int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift) {
    // Variable Declarations
    const int lv_vMaxChartUnits = 15;
    const int lv_vMinimumPromile = 10;
    text lv_vTotalDamageName;
    int lv_vIndex;
    int lv_vTotalDamage;
    int[lv_vMaxChartUnits + 1] lv_vTempDamage;
    text[lv_vMaxChartUnits + 1] lv_vTempUnitTypeName;
    text lv_vTitle;

    // Automatic Variable Declarations
    const int auto9AF843E3_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto9AF843E3_var;
    const int auto7EE5EFD2_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto7EE5EFD2_var;

    // Variable Initialization
    lv_vTotalDamageName = StringExternal("Param/Value/lib_A8FDA37D_D5C4B66B");
    lv_vTotalDamage = 1;

    // Implementation
    lv_vTotalDamage = 0;
    auto9AF843E3_var = 1;
    for ( ; auto9AF843E3_var <= auto9AF843E3_ae; auto9AF843E3_var += 1 ) {
        if ((libA8FDA37D_gv_uT_DL_Data[auto9AF843E3_var][0][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamage += libA8FDA37D_gf_UT_DL_SumHealingDamage(auto9AF843E3_var, 0, lp_pPlayer);
        }

    }
    if ((lv_vTotalDamage <= 1)) {
        return ;
    }

    auto7EE5EFD2_var = 1;
    for ( ; auto7EE5EFD2_var <= auto7EE5EFD2_ae; auto7EE5EFD2_var += 1 ) {
        if ((libA8FDA37D_gv_uT_DL_Data[auto7EE5EFD2_var][0][lp_pPlayer].lv_unitType != null) && (lv_vMinimumPromile <= (libA8FDA37D_gf_UT_DL_SumHealingDamage(auto7EE5EFD2_var, 0, lp_pPlayer) / (lv_vTotalDamage/1000)))) {
            lv_vIndex += 1;
            lv_vTempDamage[lv_vIndex] = libA8FDA37D_gf_UT_DL_SumHealingDamage(auto7EE5EFD2_var, 0, lp_pPlayer);
            lv_vTempUnitTypeName[lv_vIndex] = libA8FDA37D_gf_UT_NameOfUnitType(libA8FDA37D_gv_uT_DL_Data[auto7EE5EFD2_var][0][lp_pPlayer].lv_unitType);
            if ((lv_vIndex == lv_vMaxChartUnits)) {
                break;
            }

        }

    }
    if ((PlayerStatus(lp_pPlayer) != c_playerStatusUnused)) {
        lv_vTitle = PlayerName(lp_pPlayer);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_052E18BF", "A", IntToText(lp_pPlayer));
        lv_vTitle = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_052E18BF");
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_12EABF67", "B", lv_vTotalDamageName);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_12EABF67", "A", StringToText(libA8FDA37D_gf_UT_FormatInteger(lv_vTotalDamage, " ")));
    libA8FDA37D_gf_UT_CreatePieChart(lp_pOffsetX, lp_pOffsetY, lp_pAnchor, lp_pColorShift, lv_vTitle, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_pPlayer, false)), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_12EABF67"), lp_pPlayer, lv_vTempUnitTypeName[1], lv_vTempDamage[1], lv_vTempUnitTypeName[2], lv_vTempDamage[2], lv_vTempUnitTypeName[3], lv_vTempDamage[3], lv_vTempUnitTypeName[4], lv_vTempDamage[4], lv_vTempUnitTypeName[5], lv_vTempDamage[5], lv_vTempUnitTypeName[6], lv_vTempDamage[6], lv_vTempUnitTypeName[7], lv_vTempDamage[7], lv_vTempUnitTypeName[8], lv_vTempDamage[8], lv_vTempUnitTypeName[9], lv_vTempDamage[9], lv_vTempUnitTypeName[10], lv_vTempDamage[10], lv_vTempUnitTypeName[11], lv_vTempDamage[11], lv_vTempUnitTypeName[12], lv_vTempDamage[12], lv_vTempUnitTypeName[13], lv_vTempDamage[13], lv_vTempUnitTypeName[14], lv_vTempDamage[14], lv_vTempUnitTypeName[15], lv_vTempDamage[15]);
}

void libA8FDA37D_gf_UT_CreatePieChart (int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift, text lp_pTitle, color lp_pTitleColor, text lp_pSubTitle, int lp_pPlayer, text lp_pLabel1, int lp_pDamage1, text lp_pLabel2, int lp_pDamage2, text lp_pLabel3, int lp_pDamage3, text lp_pLabel4, int lp_pDamage4, text lp_pLabel5, int lp_pDamage5, text lp_pLabel6, int lp_pDamage6, text lp_pLabel7, int lp_pDamage7, text lp_pLabel8, int lp_pDamage8, text lp_pLabel9, int lp_pDamage9, text lp_pLabel10, int lp_pDamage10, text lp_pLabel11, int lp_pDamage11, text lp_pLabel12, int lp_pDamage12, text lp_pLabel13, int lp_pDamage13, text lp_pLabel14, int lp_pDamage14, text lp_pLabel15, int lp_pDamage15) {
    // Variable Declarations
    const int lv_cMAXUNITS = 15;
    const int lv_cPARTS = 360;
    const fixed lv_cHALF = 72.0;
    int[lv_cMAXUNITS + 1] lv_vDamage;
    text[lv_cMAXUNITS + 1] lv_vLabel;
    int lv_vSum;
    int lv_vActiveUnits;
    int lv_vCurrentUnit;
    int lv_vUnitPhase;
    int lv_vMin;
    int lv_vMax;
    color lv_vColor;
    int lv_vSlice;
    int lv_vAngle;
    const fixed lv_cPercentDistance = 1.5;
    const fixed lv_cNameDistance = 3.3;
    fixed lv_vPercent;
    int[lv_cMAXUNITS + 1] lv_vLabelX;
    int[lv_cMAXUNITS + 1] lv_vLabelY;
    int[lv_cMAXUNITS + 1] lv_vPercentX;
    int[lv_cMAXUNITS + 1] lv_vPercentY;
    fixed lv_vSpread;
    fixed lv_vPercentDistanceIter;
    text lv_vAdditionalScore;

    // Automatic Variable Declarations
    const int auto9D29D94B_ae = lv_cMAXUNITS;
    int auto9D29D94B_var;
    const int auto9234137C_ae = lv_cMAXUNITS;
    const int auto9234137C_ai = 1;
    int auto60A11DD6_ae;
    const int auto60A11DD6_ai = 1;
    const int auto6B677101_n = 200;
    int auto6B677101_i;
    int auto14814943_ae;
    int auto14814943_var;
    int auto491634C6_val;
    const int autoA2EB7115_ae = 50;
    int autoA2EB7115_var;
    const int auto9075FD10_n = 200;
    int auto9075FD10_i;
    int autoC0D4C8DA_ae;
    int autoC0D4C8DA_var;

    // Variable Initialization
    lv_vSum = 10;
    lv_vMax = -1;
    lv_vColor = Color(0,0,0);
    lv_vPercentDistanceIter = 1.5;

    // Implementation
    lv_vDamage[1] = lp_pDamage1;
    lv_vDamage[2] = lp_pDamage2;
    lv_vDamage[3] = lp_pDamage3;
    lv_vDamage[4] = lp_pDamage4;
    lv_vDamage[5] = lp_pDamage5;
    lv_vDamage[6] = lp_pDamage6;
    lv_vDamage[7] = lp_pDamage7;
    lv_vDamage[8] = lp_pDamage8;
    lv_vDamage[9] = lp_pDamage9;
    lv_vDamage[10] = lp_pDamage10;
    lv_vDamage[11] = lp_pDamage11;
    lv_vDamage[12] = lp_pDamage12;
    lv_vDamage[13] = lp_pDamage13;
    lv_vDamage[14] = lp_pDamage14;
    lv_vDamage[15] = lp_pDamage15;
    lv_vLabel[1] = lp_pLabel1;
    lv_vLabel[2] = lp_pLabel2;
    lv_vLabel[3] = lp_pLabel3;
    lv_vLabel[4] = lp_pLabel4;
    lv_vLabel[5] = lp_pLabel5;
    lv_vLabel[6] = lp_pLabel6;
    lv_vLabel[7] = lp_pLabel7;
    lv_vLabel[8] = lp_pLabel8;
    lv_vLabel[9] = lp_pLabel9;
    lv_vLabel[10] = lp_pLabel10;
    lv_vLabel[11] = lp_pLabel11;
    lv_vLabel[12] = lp_pLabel12;
    lv_vLabel[13] = lp_pLabel13;
    lv_vLabel[14] = lp_pLabel14;
    lv_vLabel[15] = lp_pLabel15;
    lv_vLabel[15] = lp_pLabel15;
    lv_vSum = 0;
    auto9D29D94B_var = 1;
    for ( ; auto9D29D94B_var <= auto9D29D94B_ae; auto9D29D94B_var += 1 ) {
        if ((lv_vDamage[auto9D29D94B_var] > 0)) {
            lv_vSum += lv_vDamage[auto9D29D94B_var];
            lv_vActiveUnits += 1;
        }

    }
    if ((lv_vSum <= 10)) {
        return ;
    }

    DialogCreate(800, 800, lp_pAnchor, lp_pOffsetX, lp_pOffsetY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 555);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 0, lp_pTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_pTitleColor, PlayerGroupAll());
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == "ZergDehaka")) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_759189D7", "A", libA8FDA37D_gf_UT_RealSecondsIntoTimeFormat(PlayerScoreValueGetAsFixed(lp_pPlayer, "Devouroffcooldown")));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_759189D7");
    }

    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == "TerranMengsk")) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_93628187", "A", FixedToText(PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike"), 0));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_93628187", "B", FixedToText((100*PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike")/libA8FDA37D_gf_UT_TotalDamageHeal(lp_pPlayer, libA8FDA37D_ge_DamageHeal_Damage)), 0));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_93628187");
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3D1ED70B", "A", null);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 80, c_anchorTop, 0, 0, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_3D1ED70B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "A", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "B", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsTrainedCount")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "D", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "UnitsLostCount")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "C", FixedToText((IntToFixed(libA8FDA37D_gf_UT_TotalDamageHeal(2, libA8FDA37D_ge_DamageHeal_Heal)) - PlayerScoreValueGetAsFixed(lp_pPlayer, "ShieldsHealedTotal")), 0));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "E", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "ShieldsHealedTotal")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "I", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "EnergySpentTotal")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "F", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "MineralsCollected")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "G", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, "VespeneCollected")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "H", IntToText((PlayerScoreValueGetAsInt(lp_pPlayer, "MineralsSpent") + PlayerScoreValueGetAsInt(lp_pPlayer, "VespeneSpent"))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "J", StringExternal(("ScoreValue/Name/" + (libA8FDA37D_gf_UT_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer))))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "K", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libA8FDA37D_gf_UT_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "L", StringExternal(("ScoreValue/Name/" + (libA8FDA37D_gf_UT_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer))))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "M", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libA8FDA37D_gf_UT_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "N", StringExternal(("ScoreValue/Name/" + (libA8FDA37D_gf_UT_MapScoreStatistic(libCOOC_gf_CC_CurrentMap())))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "O", IntToText(PlayerScoreValueGetAsInt(lp_pPlayer, libA8FDA37D_gf_UT_MapScoreStatistic(libCOOC_gf_CC_CurrentMap()))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B7DD8450", "P", lv_vAdditionalScore);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B7DD8450"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 32, lp_pSubTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieSubtitle", PlayerGroupAll());
    lv_vUnitPhase = 1;
    for ( ; ( (auto9234137C_ai >= 0 && lv_vUnitPhase <= auto9234137C_ae) || (auto9234137C_ai < 0 && lv_vUnitPhase >= auto9234137C_ae) ) ; lv_vUnitPhase += auto9234137C_ai ) {
        if ((lv_vDamage[lv_vUnitPhase] > 0)) {
            lv_vPercent = (IntToFixed((lv_vDamage[lv_vUnitPhase] / ((lv_vSum / 1000)))) / 10);
            lv_vColor = libA8FDA37D_gf_UT_NewColor((lp_pColorShift + lv_vUnitPhase));
            lv_vCurrentUnit += 1;
            lv_vMin = (lv_vMax + 1);
            if ((lv_vCurrentUnit == lv_vActiveUnits)) {
                lv_vMax = (lv_cPARTS - 2);
            }
            else {
                lv_vMax = (lv_vMin - 1 + (lv_cPARTS * (lv_vDamage[lv_vUnitPhase]  / ((lv_vSum / 1000)))) / 1000);
            }
            auto60A11DD6_ae = lv_vMax;
            lv_vSlice = lv_vMin;
            for ( ; ( (auto60A11DD6_ai >= 0 && lv_vSlice <= auto60A11DD6_ae) || (auto60A11DD6_ai < 0 && lv_vSlice >= auto60A11DD6_ae) ) ; lv_vSlice += auto60A11DD6_ai ) {
                lv_vAngle = RoundI((IntToFixed(lv_vSlice) * (360 / IntToFixed(lv_cPARTS))));
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 144, c_anchorTopLeft, 0, 0, StringToText(""), "AF_slice.dds", c_triggerImageTypeNormal, false, lv_vColor, c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), lv_vAngle, PlayerGroupAll());
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, FixedToInt((lv_cHALF * Sin(IntToFixed(lv_vAngle)))), FixedToInt((- lv_cHALF * Cos(IntToFixed(lv_vAngle)))));
            }
            lv_vAngle = RoundI(((IntToFixed(((lv_vMin + lv_vMax ) /2)) + 0.5) * (360 / IntToFixed(lv_cPARTS))));
            lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vLabelX[lv_vUnitPhase] = FixedToInt((lv_cNameDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vSpread = 10.0;
            for (auto6B677101_i = 1; auto6B677101_i <= auto6B677101_n; auto6B677101_i += 1) {
                lv_vSpread += 0.3;
                auto14814943_ae = (lv_vUnitPhase - 1);
                auto14814943_var = 1;
                for ( ; auto14814943_var <= auto14814943_ae; auto14814943_var += 1 ) {
                    if ((libA8FDA37D_gf_UT_LabelsTooClose(lv_vLabelX[auto14814943_var], lv_vLabelY[auto14814943_var], lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]) == true)) {
                        lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        auto491634C6_val = RandomInt(1, 2);
                        if (auto491634C6_val == 1) {
                            lv_vLabelY[lv_vUnitPhase] += FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        else {
                            lv_vLabelY[lv_vUnitPhase] -= FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        break;
                    }

                }
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 30, c_anchorCenter, 0, 0, lv_vLabel[lv_vUnitPhase], ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieName", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3E6C7315", "A", lv_vLabel[lv_vUnitPhase]);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3E6C7315", "B", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_3E6C7315", "C", StringToText(libA8FDA37D_gf_UT_FormatInteger(lv_vDamage[lv_vUnitPhase], " ")));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_3E6C7315"), PlayerGroupAll());
            lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_cPercentDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_cPercentDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vSpread = 0.1;
            autoA2EB7115_var = 1;
            for ( ; autoA2EB7115_var <= autoA2EB7115_ae; autoA2EB7115_var += 1 ) {
            }
            for (auto9075FD10_i = 1; auto9075FD10_i <= auto9075FD10_n; auto9075FD10_i += 1) {
                autoC0D4C8DA_ae = (lv_vUnitPhase - 1);
                autoC0D4C8DA_var = 1;
                for ( ; autoC0D4C8DA_var <= autoC0D4C8DA_ae; autoC0D4C8DA_var += 1 ) {
                    if ((libA8FDA37D_gf_UT_PercentsTooClose(lv_vPercentX[autoC0D4C8DA_var], lv_vPercentY[autoC0D4C8DA_var], lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]) == false)) {
                    }
                    else {
                        lv_vSpread += 0.02;
                        if ((RandomInt(0, 1) == 1)) {
                            lv_vPercentDistanceIter = (lv_cPercentDistance + RandomFixed(0.1, lv_vSpread));
                        }
                        else {
                            lv_vPercentDistanceIter = (lv_cPercentDistance - RandomFixed(0.1, lv_vSpread));
                        }
                        lv_vPercentDistanceIter = libNtve_gf_ArithmeticRealClamp(lv_vPercentDistanceIter, 0.35, 1.8);
                        lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_vPercentDistanceIter * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
                        lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_vPercentDistanceIter* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        break;
                    }
                }
            }
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_A1BFE3E8", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_A1BFE3E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_7DDB4325", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_7DDB4325"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeLighten, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
        }

    }
}

color libA8FDA37D_gf_UT_NewColor (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[31] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 16);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#198100");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#4DC32C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#BEF43D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#387E73");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#33C199");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#87FF9D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#2469BA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#75CFFA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#BD5DFD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#891BB0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#F16391");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#FEADC0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#C6281C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#F95A00");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#FF9E32");
    lv_vA += 1;
    lv_vColor[0] = libA8FDA37D_gf_UT_HexToColor("#FFE07A");
    return lv_vColor[lv_vINT];
}

color libA8FDA37D_gf_UT_NewColorOld (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[21] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 13);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(0.39, 68.63, 27.84);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(34.12, 80.78, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(84.71, 86.67, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(93.33, 47.84, 6.67);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(82.35, 5.10, 5.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(65.88, 5.88, 32.94);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(77.25, 7.06, 65.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(51.76, 9.02, 65.88);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(58.04, 36.08, 87.06);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(12.16, 23.92, 79.61);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(14.12, 45.88, 77.65);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(11.37, 63.53, 80.39);
    lv_vA += 1;
    lv_vColor[0] = Color(20.39, 71.37, 50.98);
    return lv_vColor[lv_vINT];
}

color libA8FDA37D_gf_UT_NewColorMuted (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[23] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 22; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 22);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#B2B8AC");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#4D8D77");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#81C99D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#A8A47F");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#DEB267");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#EAD270");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#DF8D4D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#F19670");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#E16552");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#BF3A3A");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#C86E81");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#9A456E");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#C2568B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#65387D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#8944C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#714595");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#E485AB");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#E0598B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#92AFBD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#5698C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libA8FDA37D_gf_UT_HexToColor("#A7C798");
    return lv_vColor[lv_vINT];
}

bool libA8FDA37D_gf_UT_LabelsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -18) && ((lp_pIterY - lp_pBaseY) <= 18)) && (((lp_pBaseX - lp_pIterX) >= -150) && ((lp_pBaseX - lp_pIterX) <= 150))) {
        return true;
    }
    else {
        return false;
    }
}

bool libA8FDA37D_gf_UT_PercentsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -15) && ((lp_pIterY - lp_pBaseY) <= 15)) && (((lp_pBaseX - lp_pIterX) >= -50) && ((lp_pBaseX - lp_pIterX) <= 50))) {
        return true;
    }
    else {
        return false;
    }
}

void libA8FDA37D_gf_UT_Graph_DefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement) {
    // Variable Declarations
    int lv_graph;
    int lv_bar;
    int lv_timeLabel;
    int lv_valueLabel;
    int lv_count;
    text lv_vPlayer2Name;

    // Automatic Variable Declarations
    const int auto1A23778A_ae = 0;
    const int auto1A23778A_ai = 1;

    // Variable Initialization
    lv_graph = lp_iD;

    // Implementation
    libA8FDA37D_gv_graphsGeneral.lv_totalGraphs += 1;
    libA8FDA37D_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libA8FDA37D_gv_graphsData[lv_graph].lv_style = lp_style;
    libA8FDA37D_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libA8FDA37D_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libA8FDA37D_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string));
    libA8FDA37D_gv_graphsData[lv_graph].lv_highFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/GraphFrame"));
    libA8FDA37D_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Title"));
    libA8FDA37D_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorLeft"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorRight"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player1Name"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(1), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player2Name"));
    if ((PlayerStatus(2) != c_playerStatusUnused)) {
        lv_vPlayer2Name = PlayerName(2);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D8C005E9", "A", IntToText(2));
        lv_vPlayer2Name = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_D8C005E9");
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_vPlayer2Name, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libA8FDA37D_gv_graphsData[lv_graph].lv_title, lp_title, PlayerGroupAll());
    lv_count = (0 - libA8FDA37D_gv_graphsTotalNodes);
    for ( ; ( (auto1A23778A_ai >= 0 && lv_count <= auto1A23778A_ae) || (auto1A23778A_ai < 0 && lv_count >= auto1A23778A_ae) ) ; lv_count += auto1A23778A_ai ) {
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 1);
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 2);
    }
}

void libA8FDA37D_gf_UT_Graph_UpdateDataDifferential (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    int lv_maxValue;
    fixed lv_differential;

    // Automatic Variable Declarations
    int autoE6E16FFF_ae;
    const int autoE6E16FFF_ai = 1;

    // Variable Initialization

    // Implementation
    autoE6E16FFF_ae = libA8FDA37D_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (autoE6E16FFF_ai >= 0 && lv_count <= autoE6E16FFF_ae) || (autoE6E16FFF_ai < 0 && lv_count >= autoE6E16FFF_ae) ) ; lv_count += autoE6E16FFF_ai ) {
        lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]+libA8FDA37D_gv_graphsData[lp_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight]+libA8FDA37D_gv_graphsData[lp_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]/libA8FDA37D_gv_graphsGeneral.lv_intervals);
    lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight]/libA8FDA37D_gv_graphsGeneral.lv_intervals);
    lv_difference = ((lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libA8FDA37D_gv_graphsData[lp_graph].lv_team = 0;
        libA8FDA37D_gv_graphsData[lp_graph].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libA8FDA37D_gv_graphsData[lp_graph].lv_team = libA8FDA37D_gv_graphsGeneral.lv_teamLeft;
        libA8FDA37D_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libA8FDA37D_gv_graphsData[lp_graph].lv_team = libA8FDA37D_gv_graphsGeneral.lv_teamRight;
        libA8FDA37D_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libA8FDA37D_gv_graphsData[lp_graph].lv_team == libA8FDA37D_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, libA8FDA37D_gv_graphsData[lp_graph].lv_value[0], 1);
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, (0 - libA8FDA37D_gv_graphsData[lp_graph].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, (0 - libA8FDA37D_gv_graphsData[lp_graph].lv_value[0]), 1);
        DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, libA8FDA37D_gv_graphsData[lp_graph].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= (0.0 - DialogControlGetMaxYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll())))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll());
    }
    if ((lv_differential < libA8FDA37D_gv_graphsData[lp_graph].lv_minimumValue)) {
        lv_differential = libA8FDA37D_gv_graphsData[lp_graph].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libA8FDA37D_gv_graphsData[lp_graph].lv_rangeIncrement)) * libA8FDA37D_gv_graphsData[lp_graph].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_differential);
    DialogControlSetMinYVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (0.0 - lv_differential));
    DialogControlSetMinXVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libA8FDA37D_gv_graphsGeneral.lv_currentNode - libA8FDA37D_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode);
}

void libA8FDA37D_gf_UT_Graph_UpdateDataComparative (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_maxValue;

    // Automatic Variable Declarations
    int autoDF5BB07D_ae;
    const int autoDF5BB07D_ai = 1;

    // Variable Initialization

    // Implementation
    autoDF5BB07D_ae = libA8FDA37D_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (autoDF5BB07D_ai >= 0 && lv_count <= autoDF5BB07D_ae) || (autoDF5BB07D_ai < 0 && lv_count >= autoDF5BB07D_ae) ) ; lv_count += autoDF5BB07D_ai ) {
        lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]+libA8FDA37D_gv_graphsData[lp_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight]+libA8FDA37D_gv_graphsData[lp_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    libA8FDA37D_gv_graphsData[lp_graph].lv_value[libA8FDA37D_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamLeft]/libA8FDA37D_gv_graphsGeneral.lv_intervals);
    libA8FDA37D_gv_graphsData[lp_graph].lv_value[libA8FDA37D_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libA8FDA37D_gv_graphsGeneral.lv_teamRight]/libA8FDA37D_gv_graphsGeneral.lv_intervals);
    DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, libA8FDA37D_gv_graphsData[lp_graph].lv_value[libA8FDA37D_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode, libA8FDA37D_gv_graphsData[lp_graph].lv_value[libA8FDA37D_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libA8FDA37D_gv_graphsGeneral.lv_currentNode - libA8FDA37D_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), 0.0);
    if ((DialogControlGetMaxYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= libA8FDA37D_gv_graphsData[lp_graph].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libA8FDA37D_gv_graphsData[lp_graph].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libA8FDA37D_gv_graphsData[lp_graph].lv_rangeIncrement)) * libA8FDA37D_gv_graphsData[lp_graph].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libA8FDA37D_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_maxValue);
    }
}

void libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept (int lp_pGraph, int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int autoAC8C1724_ae = libA8FDA37D_gv_maxGraphs;
    const int autoAC8C1724_ai = 1;

    // Variable Initialization

    // Implementation
    lv_a = 1;
    for ( ; ( (autoAC8C1724_ai >= 0 && lv_a <= autoAC8C1724_ae) || (autoAC8C1724_ai < 0 && lv_a >= autoAC8C1724_ae) ) ; lv_a += autoAC8C1724_ai ) {
        if ((lp_pGraph != lv_a)) {
            DialogControlSetVisible(libA8FDA37D_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), false);
        }
        else {
            DialogControlSetVisible(libA8FDA37D_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), true);
        }
    }
}

void libA8FDA37D_gf_UT_Horde_Multiply (unit lp_pUnit, fixed lp_pCoef) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    const int autoF96C9929_ae = 1000;
    int autoF96C9929_var;

    // Variable Initialization

    // Implementation
    if ((UnitGroupHasUnit(libA8FDA37D_gv_uT_Horde_UG, lp_pUnit) == true)) {
        return ;
    }

    if ((PointPathingIsConnected(UnitGetPosition(lp_pUnit), PlayerStartLocation(1)) == false)) {
        autoF96C9929_var = 2;
        for ( ; autoF96C9929_var <= autoF96C9929_ae; autoF96C9929_var += 1 ) {
            lv_vIndexPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), (autoF96C9929_var * 2), PlayerStartLocation(1));
            if ((PathingType(lv_vIndexPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vIndexPoint, PlayerStartLocation(1)) == true)) {
                break;
            }

        }
    }
    else {
        lv_vIndexPoint = UnitGetPosition(lp_pUnit);
    }
    lv_vAmount = (TruncI(lp_pCoef) - 1);
    if ((lv_vAmount >= 1)) {
        UnitCreate(lv_vAmount, UnitGetType(lp_pUnit), 0, 3, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAddUnitGroup(libA8FDA37D_gv_uT_Horde_UG, UnitLastCreatedGroup());
    }

    if ((RandomFixed(0.0, 1.0) <= (lp_pCoef - Trunc(lp_pCoef)))) {
        UnitCreate(1, UnitGetType(lp_pUnit), 0, 3, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAdd(libA8FDA37D_gv_uT_Horde_UG, UnitLastCreated());
    }

}

void libA8FDA37D_gf_UT_MasteryPointsUpdate (int lp_pTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vTotalMastery;

    // Automatic Variable Declarations
    int auto7BC2FB1C_ai;
    int auto7BC2FB1C_ae;
    int auto7BC2FB1C_ac;

    // Variable Initialization

    // Implementation
    auto7BC2FB1C_ai = 0;
    auto7BC2FB1C_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto7BC2FB1C_ai < auto7BC2FB1C_ae) {
        auto7BC2FB1C_ai = auto7BC2FB1C_ai+1;
        auto7BC2FB1C_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto7BC2FB1C_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_pTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto7BC2FB1C_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto7BC2FB1C_ai);
            lv_vIndex += 1;
            libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevelSet(lp_pTargetPlayer, lv_indexMasteryUpgrade, StringToInt(libNtve_gf_DialogItemEditValue(libA8FDA37D_gv_uT_MasteryBoxes[lv_vIndex], 1)));
            lv_vTotalMastery += StringToInt(libNtve_gf_DialogItemEditValue(libA8FDA37D_gv_uT_MasteryBoxes[lv_vIndex], 1));
        }    
    }
    if ((GameGetMissionTime() >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_64DB74A6"));
        libA8FDA37D_gf_UT_ApplyMasteryTech(lp_pTargetPlayer);
    }
    else {
        if ((PlayerStatus(2) != c_playerStatusActive)) {
            DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeLabel, "CompositionInfoAlly/Level/MasteryLevelLabel");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_vTotalMastery), PlayerGroupAll());
        }

    }
}

void libA8FDA37D_gf_UT_MasteryChoiceCreateUpdate (int lp_vTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vXButtonOffset;
    int lv_vYButtonOffset;

    // Automatic Variable Declarations
    int autoC7863FD4_ai;
    int autoC7863FD4_ae;
    int autoC7863FD4_ac;
    int auto331BF57E_ai;
    int auto331BF57E_ae;
    int auto331BF57E_ac;

    // Variable Initialization
    lv_vXButtonOffset = 45;
    lv_vYButtonOffset = 45;

    // Implementation
    if ((libA8FDA37D_gv_uT_MasteryDialog == c_invalidDialogId)) {
        TriggerEnable(libA8FDA37D_gt_UT_MasteryButtonClicked, true);
        DialogCreate(600, 460, c_anchorRight, 250, -75, true);
        libA8FDA37D_gv_uT_MasteryDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetRenderPriority(DialogLastCreated(), 1050);
        DialogSetFullscreen(DialogLastCreated(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 420, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_1DB9717E", "A", IntToText(libA8FDA37D_gv_uT_MasteryTargetPlayer));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, 194, -142, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_1DB9717E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        auto331BF57E_ai = 0;
        auto331BF57E_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (auto331BF57E_ai < auto331BF57E_ae) {
            auto331BF57E_ai = auto331BF57E_ai+1;
            auto331BF57E_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto331BF57E_ai), "Category", 1);
            if( libCOOC_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto331BF57E_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto331BF57E_ai);
                lv_vIndex += 1;
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, -10, (-125 + (50 * lv_vIndex)), libA8FDA37D_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), ColorWithAlpha(0,0,0,0), false, 2.0);
                libA8FDA37D_gv_uT_MasteryLabels[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOOC_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 65);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 200, (50*lv_vIndex -140));
                DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeEditBox);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 50);
                libA8FDA37D_gv_uT_MasteryBoxes[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 0, 210, StringToText(""), StringExternal("Param/Value/lib_A8FDA37D_FFB2D7B6"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libA8FDA37D_gv_uT_MasteryButton = DialogControlLastCreated();
    }
    else {
        autoC7863FD4_ai = 0;
        autoC7863FD4_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (autoC7863FD4_ai < autoC7863FD4_ae) {
            autoC7863FD4_ai = autoC7863FD4_ai+1;
            autoC7863FD4_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoC7863FD4_ai), "Category", 1);
            if( libCOOC_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoC7863FD4_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoC7863FD4_ai);
                lv_vIndex += 1;
                libNtve_gf_SetDialogItemText(libA8FDA37D_gv_uT_MasteryLabels[lv_vIndex], libA8FDA37D_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(libA8FDA37D_gv_uT_MasteryLabels[lv_vIndex], libCOOC_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemEditorValue(libA8FDA37D_gv_uT_MasteryBoxes[lv_vIndex], IntToString(libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
    }
}

void libA8FDA37D_gf_UT_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto9C43C311_ai;
    int auto9C43C311_ae;
    int auto9C43C311_ac;

    // Variable Initialization

    // Implementation
    auto9C43C311_ai = 0;
    auto9C43C311_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto9C43C311_ai < auto9C43C311_ae) {
        auto9C43C311_ai = auto9C43C311_ai+1;
        auto9C43C311_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto9C43C311_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto9C43C311_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto9C43C311_ai);
            if ((libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCOOC_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

int libA8FDA37D_gf_UT_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

text libA8FDA37D_gf_UT_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", 1));
}

void libA8FDA37D_gf_UT_Cooldown (int lp_pPlayer) {
    // Automatic Variable Declarations
    unitgroup auto81475143_g;
    int auto81475143_u;
    unit auto81475143_var;
    string autoA79F4948_val;

    // Implementation
    UnitSetPropertyFixed(libA8FDA37D_gf_CM_PlayerGetGlobalCaster(lp_pPlayer), c_unitPropEnergyPercent, 100.0);
    if ((libA8FDA37D_gf_ActiveCommanderForPlayer3(lp_pPlayer) == "Mengsk")) {
        libCOMI_gf_CM_Mengsk_EnergyChanged(lp_pPlayer);
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Time", lp_pPlayer, "0");
    libCOMI_gf_ApplyTychusMaxChargesPerk(lp_pPlayer);
    libNtve_gf_PlayerRemoveChargeUsed(lp_pPlayer, "Abil/TychusTrain");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/TychusCalldownOdinTargeted");
    PlayerAddChargeUsed(lp_pPlayer, "Abil/DeployPowerTowerStetmann", -3.0);
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZeratulTopBarUltimateWarpTrain");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZeratulMapWideStasis");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/AlarakEmpower");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "ZagaraVoidCoopInfestedPods");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/BansheeAirstrike");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/VoidCoopSummonHyperion");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
    libNtve_gf_PlayerRemoveChargeUsed(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaDakrunTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaMurvarTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DehakaGlevigTopBar");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/HHSummonMercenarySpaceStation");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/HornerAirFleetActivate");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/StukovSummonApocalisk");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/StukovSummonAleksander");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/KerriganVoidCoopCrushingGripWave");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/KerriganVoidCoopEconDrop");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/SpecialDelivery");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZagaraVoidCoopMassRoachDrop");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ZagaraVoidCoopMassFrenzy");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenix");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenixDragoon");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "SOASummonFenixArbiter");
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/HHTrainTopBar", -60.0);
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/HHStarportTrainWraith", -300.0);
    PlayerAddChargeRegenRemaining(lp_pPlayer, "Abil/TychusReaperBomb", -300.0);
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillBFG");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillNuke");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/SpecialDelivery");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/AlarakACSummonDeathfleetTarget");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/TychusCalldownOdin");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOADarkPylon", "Abil/SOADarkPylon");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
    libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_pPlayer], "SOATimeFreeze", "Abil/SOATimeFreeze");
    libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer)));
    auto81475143_g = UnitGroup(null, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81475143_u = UnitGroupCount(auto81475143_g, c_unitCountAll);
    for (;; auto81475143_u -= 1) {
        auto81475143_var = UnitGroupUnitFromEnd(auto81475143_g, auto81475143_u);
        if (auto81475143_var == null) { break; }
        UnitClearCooldowns(auto81475143_var, true);
        if ((UnitGetProgressComplete(auto81475143_var, 1) < 99.0)) {
            UnitSetProgressComplete(auto81475143_var, 1, 99);
        }

        UnitAbilityReset(auto81475143_var, AbilityCommand("AlarakStructureOvercharge", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SoASuperShield", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SOAStrafeAttackActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SOAPylonPower", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("NovaGriffinBombingRunActivate", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SIStukovInfestStructure", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("AbathurMend", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("SpawnToxicNest", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("NovaCoopCasterNuke", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("HHStarportTrainHorner", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("HHStarportTrainHorner", 2), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("HHStarportTrainHorner", 3), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("HHStarportTrainHorner", 1), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("StarportTrainNova", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("FactoryTrainNova", 0), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("BarracksTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("StarportTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("StarportTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("BarracksTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("FactoryTrainNova", 2), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("FactoryTrainNova", 1), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("BarracksTrainNova", 0), c_spendLocationAll);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "DrakkenLaserDrillDisablePulseCannon", 0.5);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "DrakkenLaserDrillDisableConcentratedBeam", 0.5);
        UnitAbilityReset(auto81475143_var, AbilityCommand("StargateWarpTrain", 12), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("RoboticsFacilityWarpTrain", 3), c_spendLocationAll);
        UnitAbilityReset(auto81475143_var, AbilityCommand("WarpGateTrain", 0), c_spendLocationAll);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "StargateMorph", 0.5);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "StargateWarpMorph", 0.5);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "StargateWarpMorphInstant", 0.5);
        UnitBehaviorSetDurationRemaining(auto81475143_var, "StargateWarpMorphInstant", 0.5);
        autoA79F4948_val = UnitGetType(auto81475143_var);
        if (autoA79F4948_val == "UnfinishedDrakkenLaserDrillCoop") {
            libNtve_gf_ReplaceUnit(auto81475143_var, "DrakkenLaserDrillCoop", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
            libCOMI_gv_cM_LaserDrillUnit[1] = libNtve_gf_LastReplacedUnit();
            libCOMI_gv_cM_LaserDrillUnitGroup[1] = libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit());
            libCOMI_gv_cM_LaserDrillUnit[2] = libNtve_gf_LastReplacedUnit();
            libCOMI_gv_cM_LaserDrillUnitGroup[2] = libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit());
        }
        else if (autoA79F4948_val == "SoACasterArtanis") {
            UnitSetPropertyFixed(auto81475143_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoA79F4948_val == "SoACasterKarax") {
            UnitSetPropertyFixed(auto81475143_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoA79F4948_val == "SoACasterVorazun") {
            UnitSetPropertyFixed(auto81475143_var, c_unitPropEnergyPercent, 100.0);
        }
        else if (autoA79F4948_val == "DehakaBarracks") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("DehakaBarracksTrainEgg", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "SIStarport") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("SIStarportTrain", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "SIFactory") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("SIFactoryTrain", 2), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "SIBarracks") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("SIBarracksTrain", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "SICommandCenter") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("SICommandCenterTrain", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "DehakaHatchery") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("DehakaHatcheryTrainEgg", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "TychusReaper") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("TychusReaperBomb", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "TychusWarhound") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("TychusWarhoundBuildAutoTurret", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "TychusMarauder") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("TychusMarauderBuildHealingWard", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "TychusGhost") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("TychusGhostDominate", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "TychusSpectre") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("TychusSpectreUltrasonicPulse", 0), c_spendLocationAll);
        }
        else if (autoA79F4948_val == "ZeratulCoop") {
            UnitAbilityReset(auto81475143_var, AbilityCommand("ProphecyVision", 0), c_spendLocationAll);
            libNtve_gf_PlayerRemoveCooldown(lp_pPlayer, "Abil/ProphecyVision");
            UnitAbilityReset(auto81475143_var, AbilityCommand("ZeratulTeleport", 0), c_spendLocationAll);
            libCOMI_gv_cM_ZeratulArtifact_1_Hint_3_Timing = 0.0;
            libCOMI_gv_cM_ZeratulArtifact_2_Hint_3_Timing = 0.0;
            libCOMI_gv_cM_ZeratulArtifact_3_Hint_3_Timing = 0.0;
        }
        else {
        }
    }
}

void libA8FDA37D_gf_UT_DL_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libA8FDA37D_gv_uT_DL_LogDialog == c_invalidDialogId)) {
        DialogCreate(960, 1000, c_anchorTopLeft, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libA8FDA37D_gv_uT_DL_LogDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 960, 500, c_anchorTop, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libA8FDA37D_gv_uT_DL_LogDialogItem = DialogControlLastCreated();
    }

}

void libA8FDA37D_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow) {
    // Variable Declarations
    text lv_vText;
    int lv_vTotalDamage;
    fixed lv_vTotalHeal;
    int lv_vLines;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int autoA0623A44_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int autoA0623A44_var;
    const int auto233E13E2_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto233E13E2_var;
    const int autoD5BBC7A9_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int autoD5BBC7A9_var;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/lib_A8FDA37D_2F1F6559");
    lv_vTotalHeal = 1.0;
    lv_vLines = 1;

    // Implementation
    autoA0623A44_var = 1;
    for ( ; autoA0623A44_var <= autoA0623A44_ae; autoA0623A44_var += 1 ) {
        if ((libA8FDA37D_gv_uT_DL_Data[autoA0623A44_var][0][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalDamage += libA8FDA37D_gf_UT_DL_SumHealingDamage(autoA0623A44_var, 0, lp_pPlayerData);
        }

        if ((libA8FDA37D_gv_uT_DL_Data[autoA0623A44_var][1][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalHeal += libA8FDA37D_gf_UT_DL_SumHealingDamage(autoA0623A44_var, 1, lp_pPlayerData);
        }

    }
    lv_vText = (lv_vText + (StringToText(libA8FDA37D_gf_UT_FormatInteger(lv_vTotalDamage, " ")) + StringExternal("Param/Value/lib_A8FDA37D_6A66D919")));
    auto233E13E2_var = 1;
    for ( ; auto233E13E2_var <= auto233E13E2_ae; auto233E13E2_var += 1 ) {
        if ((libA8FDA37D_gv_uT_DL_Data[auto233E13E2_var][0][lp_pPlayerData].lv_unitType != null)) {
            if ((libA8FDA37D_gf_UT_DL_SumHealingDamage(auto233E13E2_var, 0, lp_pPlayerData) >= 524000)) {
                lv_vPercent = ((libA8FDA37D_gf_UT_DL_SumHealingDamage(auto233E13E2_var, 0, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
            }
            else {
                lv_vPercent = (libA8FDA37D_gv_uT_DL_Data[auto233E13E2_var][0][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9B7EC205", "A", libA8FDA37D_gf_UT_NameOfUnitType(libA8FDA37D_gv_uT_DL_Data[auto233E13E2_var][0][lp_pPlayerData].lv_unitType));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9B7EC205", "D", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9B7EC205", "C", StringToText(libA8FDA37D_gf_UT_FormatInteger(libA8FDA37D_gf_UT_DL_SumHealingDamage(auto233E13E2_var, 0, lp_pPlayerData), " ")));
            lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_A8FDA37D_9B7EC205"));
            lv_vLines += 1;
        }
        else {
            break;
        }
    }
    if ((libA8FDA37D_gv_uT_DL_Data[1][1][lp_pPlayerData].lv_unitType != null)) {
        lv_vText = (lv_vText + (StringExternal("Param/Value/lib_A8FDA37D_D7C02D1E") + (StringExternal("Param/Value/lib_A8FDA37D_92F9964B") + (FixedToText(lv_vTotalHeal, 0) + StringExternal("Param/Value/lib_A8FDA37D_53570DE8")))));
        lv_vLines += 2;
        autoD5BBC7A9_var = 1;
        for ( ; autoD5BBC7A9_var <= autoD5BBC7A9_ae; autoD5BBC7A9_var += 1 ) {
            if ((libA8FDA37D_gv_uT_DL_Data[autoD5BBC7A9_var][1][lp_pPlayerData].lv_unitType != null)) {
                if ((libA8FDA37D_gf_UT_DL_SumHealingDamage(autoD5BBC7A9_var, 1, lp_pPlayerData) >= 524000)) {
                    lv_vPercent = ((libA8FDA37D_gf_UT_DL_SumHealingDamage(autoD5BBC7A9_var, 1, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
                }
                else {
                    lv_vPercent = (libA8FDA37D_gv_uT_DL_Data[autoD5BBC7A9_var][1][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
                }
                lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_DDD8F8C0", "A", UnitTypeGetName(libA8FDA37D_gv_uT_DL_Data[autoD5BBC7A9_var][1][lp_pPlayerData].lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_DDD8F8C0", "D", FixedToText(lv_vPercent, 1));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_DDD8F8C0", "C", StringToText(libA8FDA37D_gf_UT_FormatInteger(libA8FDA37D_gf_UT_DL_SumHealingDamage(autoD5BBC7A9_var, 1, lp_pPlayerData), " ")));
                lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_A8FDA37D_DDD8F8C0"));
                lv_vLines += 1;
            }
            else {
                break;
            }
        }
    }

    libNtve_gf_SetDialogItemText(libA8FDA37D_gv_uT_DL_LogDialogItem, lv_vText, PlayerGroupSingle(lp_pPlayerShow));
}

void libA8FDA37D_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount) {
    // Automatic Variable Declarations
    // Implementation
    if (((FixedToInt(libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real) + FixedToInt(lp_pAdd_Amount)) >= 500000)) {
        libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer += FixedToInt(libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real);
        libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real = lp_pAdd_Amount;
    }
    else {
        libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real += lp_pAdd_Amount;
    }
}

int libA8FDA37D_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer + FixedToInt(libA8FDA37D_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real));
}

void libA8FDA37D_gf_UT_DL_LogClear (int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int autoB112C3CC_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int autoB112C3CC_var;

    // Variable Initialization

    // Implementation
    autoB112C3CC_var = 1;
    for ( ; autoB112C3CC_var <= autoB112C3CC_ae; autoB112C3CC_var += 1 ) {
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][0][lp_pPlayer].lv_integer = 0;
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][1][lp_pPlayer].lv_integer = 0;
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][0][lp_pPlayer].lv_real = 0;
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][1][lp_pPlayer].lv_real = 0;
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][0][lp_pPlayer].lv_unitType = null;
        libA8FDA37D_gv_uT_DL_Data[autoB112C3CC_var][1][lp_pPlayer].lv_unitType = null;
    }
    UIDisplayMessage(PlayerGroupSingle(lp_pPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_A3731774"));
    libA8FDA37D_gf_UT_DL_DialogUpdate(libA8FDA37D_gv_uT_DL_PlayerData[lp_pPlayer], lp_pPlayer);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "effect")) {
        TriggerEnable(libA8FDA37D_gt_EffectUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "behavior")) {
        TriggerEnable(libA8FDA37D_gt_BehaviorChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "upgrade")) {
        TriggerEnable(libA8FDA37D_gt_UpgradeChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "ability")) {
        TriggerEnable(libA8FDA37D_gt_AbilityUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "unit")) {
        TriggerEnable(libA8FDA37D_gt_UnitCreated, true);
        TriggerEnable(libA8FDA37D_gt_UnitDied, true);
        TriggerEnable(libA8FDA37D_gt_UnitRevived, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "stop")) {
        TriggerEnable(libA8FDA37D_gt_UnitCreated, false);
        TriggerEnable(libA8FDA37D_gt_UnitDied, false);
        TriggerEnable(libA8FDA37D_gt_UnitRevived, false);
        TriggerEnable(libA8FDA37D_gt_EffectUsed, false);
        TriggerEnable(libA8FDA37D_gt_BehaviorChanged, false);
        TriggerEnable(libA8FDA37D_gt_UpgradeChanged, false);
        TriggerEnable(libA8FDA37D_gt_AbilityUsed, false);
    }
    else if (true) {
        TriggerEnable(libA8FDA37D_gt_UnitCreated, true);
        TriggerEnable(libA8FDA37D_gt_UnitDied, true);
        TriggerEnable(libA8FDA37D_gt_UnitRevived, true);
        TriggerEnable(libA8FDA37D_gt_EffectUsed, true);
        TriggerEnable(libA8FDA37D_gt_BehaviorChanged, true);
        TriggerEnable(libA8FDA37D_gt_UpgradeChanged, true);
        TriggerEnable(libA8FDA37D_gt_AbilityUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Debug_Init () {
    libA8FDA37D_gt_UT_Debug = TriggerCreate("libA8FDA37D_gt_UT_Debug_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Debug, c_playerAny, "-debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EnableDev Commands
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_EnableDevCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib01833E95_gf_AF_MyAcc(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_DevCommands[EventPlayer()] = libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_EnableDevCommands_Init () {
    libA8FDA37D_gt_UT_EnableDevCommands = TriggerCreate("libA8FDA37D_gt_UT_EnableDevCommands_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_EnableDevCommands, c_playerAny, "-dc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DisableDev Commands for ally
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DisableDevCommandsforally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_DevCommands[2] = libA8FDA37D_ge_UT_DevCommandTypes_No;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DisableDevCommandsforally_Init () {
    libA8FDA37D_gt_UT_DisableDevCommandsforally = TriggerCreate("libA8FDA37D_gt_UT_DisableDevCommandsforally_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DisableDevCommandsforally, c_playerAny, "-jail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_NukeTest
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_NukeTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto658C45BA_n = 20000;
    int auto658C45BA_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    if ((GameIsOnline() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_00CA34D9"));
    }

    for (auto658C45BA_i = 1; auto658C45BA_i <= auto658C45BA_n; auto658C45BA_i += 1) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCOMU_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || ((UnitCount(null, 1, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, 2, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)))) {
        }
        else {
            PlayerCreateEffectPoint(3, "NukeTestDamageCP", lv_spawnLocation);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_NukeTest_Init () {
    libA8FDA37D_gt_UT_NukeTest = TriggerCreate("libA8FDA37D_gt_UT_NukeTest_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_NukeTest, c_playerAny, "-nuketest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Used
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_AbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("attack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("stop", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9DEA0A45", "A", StringToText((AbilityCommandGetAbility(EventUnitAbility()))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9DEA0A45", "B", StringToText(libA8FDA37D_gf_UT_StageToString(EventUnitAbilityStage())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_9DEA0A45"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_AbilityUsed_Init () {
    libA8FDA37D_gt_AbilityUsed = TriggerCreate("libA8FDA37D_gt_AbilityUsed_Func");
    TriggerEnable(libA8FDA37D_gt_AbilityUsed, false);
    TriggerAddEventUnitAbility(libA8FDA37D_gt_AbilityUsed, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9036C52A", "C", StringToText((UnitGetType(EventUnitCreatedUnit()))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9036C52A", "D", IntToText(UnitGetOwner(EventUnitCreatedUnit())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9036C52A", "A", FixedToText(PointGetX(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_9036C52A", "B", FixedToText(PointGetY(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_9036C52A"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UnitCreated_Init () {
    libA8FDA37D_gt_UnitCreated = TriggerCreate("libA8FDA37D_gt_UnitCreated_Func");
    TriggerEnable(libA8FDA37D_gt_UnitCreated, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Died
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_76E980E7", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_76E980E7", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_76E980E7", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_76E980E7", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_76E980E7"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UnitDied_Init () {
    libA8FDA37D_gt_UnitDied = TriggerCreate("libA8FDA37D_gt_UnitDied_Func");
    TriggerEnable(libA8FDA37D_gt_UnitDied, false);
    TriggerAddEventUnitDied(libA8FDA37D_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Revived
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BECEDA96", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BECEDA96", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BECEDA96", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BECEDA96", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_BECEDA96"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UnitRevived_Init () {
    libA8FDA37D_gt_UnitRevived = TriggerCreate("libA8FDA37D_gt_UnitRevived_Func");
    TriggerEnable(libA8FDA37D_gt_UnitRevived, false);
    TriggerAddEventUnitRevive(libA8FDA37D_gt_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Used
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_EffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_751FAFF3", "A", StringToText((EventPlayerEffectUsed())));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_751FAFF3", "B", FixedToText(EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false), 1));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_751FAFF3"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_6AA1982B", "A", StringToText((EventPlayerEffectUsed())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_6AA1982B"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_EffectUsed_Init () {
    libA8FDA37D_gt_EffectUsed = TriggerCreate("libA8FDA37D_gt_EffectUsed_Func");
    TriggerEnable(libA8FDA37D_gt_EffectUsed, false);
    TriggerAddEventPlayerEffectUsed(libA8FDA37D_gt_EffectUsed, 1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Changed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_BehaviorChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vChange;

    // Automatic Variable Declarations
    int autoD2936FC7_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryMineralFieldMinerals"))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryHarvestableVespeneGeyserGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD2936FC7_val = EventUnitBehaviorChange();
    if (autoD2936FC7_val == c_unitBehaviorChangeRefresh) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_CCDF7949");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeIncrease) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_1D0E2C94");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeDestroy) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_4D8965C5");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeDecrease) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_C49068D4");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeDeactivate) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_D2E95E61");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeCreate) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_A37FB968");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeAny) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_5E0D78A3");
    }
    else if (autoD2936FC7_val == c_unitBehaviorChangeActivate) {
        lv_vChange = StringExternal("Param/Value/lib_A8FDA37D_A34DFC10");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_2B6C13AB", "A", lv_vChange);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_2B6C13AB", "B", StringToText((EventUnitBehavior())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_2B6C13AB", "C", StringToText((UnitGetType(EventUnit()))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_2B6C13AB"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_BehaviorChanged_Init () {
    libA8FDA37D_gt_BehaviorChanged = TriggerCreate("libA8FDA37D_gt_BehaviorChanged_Func");
    TriggerEnable(libA8FDA37D_gt_BehaviorChanged, false);
    TriggerAddEventUnitBehaviorChange(libA8FDA37D_gt_BehaviorChanged, null, null, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_51C336DA", "A", StringToText(IntToString(EventUpgradeLevelDelta())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_51C336DA", "B", StringToText((EventUpgradeName())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_51C336DA", "C", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_51C336DA"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UpgradeChanged_Init () {
    libA8FDA37D_gt_UpgradeChanged = TriggerCreate("libA8FDA37D_gt_UpgradeChanged_Func");
    TriggerEnable(libA8FDA37D_gt_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(libA8FDA37D_gt_UpgradeChanged, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Dealing Damage
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_EffectDealingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_A4B92414", "A", StringToText((EventUnitDamageEffect())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_A4B92414", "B", FixedToText(EventUnitDamageAttempted(), 1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_A4B92414"));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_C5C8775A", "A", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsHidden(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_C5C8775A", "B", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsInvulnerable(EventUnit())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_C5C8775A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_EffectDealingDamage_Init () {
    libA8FDA37D_gt_EffectDealingDamage = TriggerCreate("libA8FDA37D_gt_EffectDealingDamage_Func");
    TriggerEnable(libA8FDA37D_gt_EffectDealingDamage, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_EffectDealingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_OldMengsk
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_OldMengsk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vMengskPlayer;
    int lv_vBonusMandate;

    // Automatic Variable Declarations
    const int auto3BF3F8BD_ae = 3;
    int auto3BF3F8BD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_273F62B9"));
    while (!((GameGetMissionTime() > 0.0))) {
        Wait(0.0625, c_timeGame);
    }
    auto3BF3F8BD_var = 1;
    for ( ; auto3BF3F8BD_var <= auto3BF3F8BD_ae; auto3BF3F8BD_var += 1 ) {
        if ((PlayerCommander(auto3BF3F8BD_var) == "Mengsk")) {
            lv_vMengskPlayer = auto3BF3F8BD_var;
            break;
        }

    }
    if ((lv_vMengskPlayer == 0)) {
        return true;
    }

    libA8FDA37D_gf_CM_Mengsk_GlobalCasterEnergyRegen(libA8FDA37D_gf_CM_PlayerGetGlobalCaster(lv_vMengskPlayer));
    lv_vBonusMandate = TechTreeUpgradeCount(lv_vMengskPlayer, "MasteryMengskStartingImperialMandate", c_techCountCompleteOnly);
    UnitSetPropertyFixed(libA8FDA37D_gf_CM_PlayerGetGlobalCaster(lv_vMengskPlayer), c_unitPropEnergy, (IntToFixed(lv_vBonusMandate)+UnitGetPropertyFixed(libA8FDA37D_gf_CM_PlayerGetGlobalCaster(lv_vMengskPlayer), c_unitPropEnergy, c_unitPropCurrent)));
    TechTreeUpgradeAddLevel(lv_vMengskPlayer, "OldMengsk", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_OldMengsk_Init () {
    libA8FDA37D_gt_UT_OldMengsk = TriggerCreate("libA8FDA37D_gt_UT_OldMengsk_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_OldMengsk, c_playerAny, "-oldmengsk", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoSave
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_InfoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "General commands");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-info");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides available commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pai");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses AI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cdr");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes cooldowns");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-fastbuild");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables fast build");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-money");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives resources");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-vision");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "reveals whole map");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-god");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "invulnerability");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-speed X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes game speed to X = \"slower/slow/normal/fast/faster\"");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ally");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-share");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units + spending");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pvp");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets player 01 and 02 as enemies (or disables that)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-caster");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "creates the caster of top bar abilities for player 2");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mastery X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes masteries for player X; might not work 100% during the game");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-light");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "cycles through game lighting with \"+\" and \"-\" keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables smartcasting for Bile Launchers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unload");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables button for unloading only heroic units from Nydus");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-outlaws");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables creating more outlaws of the same type; experimental");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-artspawn");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "provides visualization for artifact spawn; \"-artspawn clear\" clears spawned units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-randommut X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts X random mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-alarakcdr X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes the range of Alarak's CDR to X (if X > 15)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-solo");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Removes allied units. Don't use on CoA and LnL.");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-supply X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets supply limit to X for player Y (optional)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-nuketest");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Launches many nukes as in Going Nuclear mutator");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-techreset X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "resets tech (upgrades/research) for player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-startswitch");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "switches starting positions");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-spawnartifacts");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns all Zeratul's artifacts at camera location");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mutsel");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you add more mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bioreport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows info about biomass");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pause");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-resource X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets resouces to X minerals and Y vespene");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unitinfo");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "show/hides additional information for all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-voidrifts X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows where void rifts can spawn; if X=clear, clears; if X=time in minutes limits time spawning");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-replace X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "replaces unit type X seamlessly");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-sbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "saves units and upgrade into bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "restores units and upgrade from the bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearscreen X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes ALL units at the camera target location owned by player X (default=Any), 15 radius");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-soundlimit X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "limits sound emotes to one each X seconds");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Measuring and logging");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dummy X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns a dummy that calculates DPS; X= additional armored/light/structure attribute");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides log; shows other player if X=\"2\" ");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log clear");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "clears log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pie");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows pie charts for damage log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts and resets DPS counting for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dpsstop");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "stops DPS counting");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gincome");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of income rate");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-garmy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of army value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gapm");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of APM");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gkills");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of kills");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-glost");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of unit value lost");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pathcheck");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Checks pathing between selected unit and camera target");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-eco");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts economic testing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-val");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows economic value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Units");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-copypaste");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables copypasting of units with Ctrl+C; Ctrl+V");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-spawn X Y Z");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns units; X= unitID, Y= amount; Z= for player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-getid");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "get unitID for units onscreen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aw X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns attack wave; X= size, Y= tech");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-attack");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "orders spawned attack waves to attack");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remw");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes spawned attack waves");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aichoice");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "selects enemy unit comp");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-refill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills enemy pre-placed units; X=\"all\" to include rocks");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-horde X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiplies the amount of pre-placed and attack wave units by X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remhorde");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes units spawned by horde command");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-empower X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "increases health +X*100% and damage +Y*100% of all enemy units and structures");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cost X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "calculates resouce and supply cost of units on screen; X= optional distance");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-kill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "kills selected units; X= killing player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remove");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-give X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-switchowner X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X; unit keeps upgrades");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-restore");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills health, shields and energy");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-teleport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "teleports selected units to camera location");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-control X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you control all enemy units; alliance status is unaffected; if X=ally, control allies");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearenemy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes all enemy units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "User interface");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-toprefresh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes topbar; use if you encounter issues after resuming from replay");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-slim");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides custom user interface");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-look X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "makes all selected units look at X angle");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-topbar");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "hides/shows topbar notifications (right-click)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-numbers");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides damage and healing numbers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-meme");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides meme faces");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables full camera control with Q,W,E,A,S,D keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "X=\"reset\" resets camera position; X=\"top\" top view");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tychui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables reordering outlaws");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-terin");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides Terin's UI for basic commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unlock");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "unlocks camera from victory/defeat screen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trigdebug");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows debugging window");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trace");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides visual debug tracing of effects");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "actorinfodisplay");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides actor info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-allysupply");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides player 2 supply UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listdead");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all dead units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listhidden");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all hidden units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listmissile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all missiles (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listall");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all units and structures (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-encomps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of enemy AI comps");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-emotes");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of emotes available for twitch integration with !message");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-buttons");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables showing which buttons are you pressing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-hotkey X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes the hotkey for button X to Y. This is saved between games.");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Unit modifications");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ms X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets movement speed of selected units to X; -ms alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-acc X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets unit acceleration of selected unit types to X; -acc alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-range X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets weapon range for selected unit types to X; Y can specify weapon; -range alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-arange X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets ability range for selected unit types to X; Y can specify weapon; -arange alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-as X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiply attack speed for selected unit types by X; -as alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mm X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes projectile speed for a group of units by X; just \"-mm\" adds units to group; \"-mm clear\" clears");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-life X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets max life to X for selected units; shields if Y=2; -life alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-energy X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets selected units max energy to X. If Y == 'regen', set energy regen to Y. -energy alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-armor X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes armor to X for selected unit types; shield armor if Y=2; -armor alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tint X,Y,Z ");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets tint color to X,Y,Z in RGB for selected units; in decimal");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-scale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets actor scale to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-height X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets height offset to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-timescale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Changes timescale for selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-actorsend X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sends actor message X to selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cannon X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "SetsTesseract Cannon Projection damage to X%. E.g. -cannon 0.2 sets their damage to 20%");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-xp X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Adds X amount of experience for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rad X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets movement radius for unit types of all selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-airbeh/-groundbeh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Selected units will be a valid target as air or ground exclusively");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Dead of Night");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pick X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the first (X) and the second (Y) special infested -hunterling/spotter/kaboomer/choker");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bosspick X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the boss type (X) -stank/nydus");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Scythe of Amon");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetSliverAbility X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets a fixed order of abilities on Slivers. X =  first ability (deathgrip / shockwave / unstableenergy )");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Cradle of Death");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "cheats");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows cheat info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetBranch X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets branch for main objective; X=one/two; Y=right/left");
    lv_a += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_InfoSave_Init () {
    libA8FDA37D_gt_UT_InfoSave = TriggerCreate("libA8FDA37D_gt_UT_InfoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA8FDA37D_gt_UT_InfoCreate, true, true);
    TriggerEnable(libA8FDA37D_gt_UT_InfoButton, true);
    if ((DialogIsVisible(libA8FDA37D_gv_uT_InfoDialog, EventPlayer()) == false)) {
        DialogSetVisible(libA8FDA37D_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(libA8FDA37D_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Info_Init () {
    libA8FDA37D_gt_UT_Info = TriggerCreate("libA8FDA37D_gt_UT_Info_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoButton
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_InfoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libA8FDA37D_gv_uT_InfoButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libA8FDA37D_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_InfoButton_Init () {
    libA8FDA37D_gt_UT_InfoButton = TriggerCreate("libA8FDA37D_gt_UT_InfoButton_Func");
    TriggerEnable(libA8FDA37D_gt_UT_InfoButton, false);
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_InfoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info Create
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_InfoCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vListBox;
    int lv_a;
    string lv_vString;
    string lv_vDesc;

    // Automatic Variable Declarations
    const int autoD3B064D2_ae = 200;
    const int autoD3B064D2_ai = 1;

    // Variable Initialization
    lv_vListBox = c_invalidDialogControlId;
    lv_vDesc = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(960, 600, c_anchorCenter, 0, -500, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1050);
    DialogSetFullscreen(DialogLastCreated(), true);
    libA8FDA37D_gv_uT_InfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 964, 546, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_71433331", "B", GameMapName());
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_71433331", "A", IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, -15, -205, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_71433331"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorCenter, 460, -210, StringToText(""), StringToText(""), "");
    libA8FDA37D_gv_uT_InfoButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 31, c_anchorCenter, 460, -210, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_closebuttonhover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 60);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 960, 500);
    lv_vListBox = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (autoD3B064D2_ai >= 0 && lv_a <= autoD3B064D2_ae) || (autoD3B064D2_ai < 0 && lv_a >= autoD3B064D2_ae) ) ; lv_a += autoD3B064D2_ai ) {
        lv_vString = DataTableGetString(true, ("UT_command" + IntToString(lv_a)));
        if ((lv_vString != "")) {
            lv_vDesc = DataTableGetString(true, ("UT_desc" + IntToString(lv_a)));
            if ((lv_vDesc != "")) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_CC8F3C76", "A", StringToText(lv_vString));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_CC8F3C76", "B", StringToText(lv_vDesc));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_CC8F3C76"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F5D6B9C2", "A", StringToText(lv_vString));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F5D6B9C2"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_InfoCreate_Init () {
    libA8FDA37D_gt_UT_InfoCreate = TriggerCreate("libA8FDA37D_gt_UT_InfoCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mengsk_ContaminatedStrikeDmgScore
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromFixed(EventUnitDamageSourcePlayer(), "DamageDealtbyContaminatedStrike", (PlayerScoreValueGetAsFixed(EventUnitDamageSourcePlayer(), "DamageDealtbyContaminatedStrike")+EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Init () {
    libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore = TriggerCreate("libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore, null, c_unitDamageTypeAny, c_unitDamageEither, "ArtilleryMengskExperimentalStrikePeriodicDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto977228C6_ae = 100;
    const int auto977228C6_ai = 1;
    const int autoB95B5581_ae = 100;
    const int autoB95B5581_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Cheat();
    lv_mutatorIndex = 1;
    for ( ; ( (auto977228C6_ai >= 0 && lv_mutatorIndex <= auto977228C6_ae) || (auto977228C6_ai < 0 && lv_mutatorIndex >= auto977228C6_ae) ) ; lv_mutatorIndex += auto977228C6_ai ) {
        lv_mutatorChoices[lv_mutatorIndex] = libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex));
    }
    libCOUI_gf_CU_MutatorDisplay(EventPlayer());
    while (!(((libCOUI_gv_cU_MutatorDialog == c_invalidDialogId) || (DialogIsVisible(libCOUI_gv_cU_MutatorDialog, EventPlayer()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (autoB95B5581_ai >= 0 && lv_mutatorIndex <= autoB95B5581_ae) || (autoB95B5581_ai < 0 && lv_mutatorIndex >= autoB95B5581_ae) ) ; lv_mutatorIndex += autoB95B5581_ai ) {
        if ((libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)) == true) && (lv_mutatorChoices[lv_mutatorIndex] != libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)))) {
            TriggerExecute(libCOMU_gf_CT_MutatorInitTrigger(UserDataInstance("Mutators", lv_mutatorIndex)), true, false);
        }

    }
    libCOUI_gf_CU_MutatorListInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DebugMutatorSelect_Init () {
    libA8FDA37D_gt_UT_DebugMutatorSelect = TriggerCreate("libA8FDA37D_gt_UT_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DebugMutatorSelect, c_playerAny, "-mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Rad
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Rad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRadius;

    // Automatic Variable Declarations
    unitgroup autoEA2B6370_g;
    int autoEA2B6370_u;
    unit autoEA2B6370_var;
    unitgroup auto1FD49483_g;
    int auto1FD49483_u;
    unit auto1FD49483_var;

    // Variable Initialization
    lv_vRadius = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRadius >= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_6B20DDEF", "A", FixedToText(lv_vRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_6B20DDEF"));
        auto1FD49483_g = UnitGroupSelected(EventPlayer());
        auto1FD49483_u = UnitGroupCount(auto1FD49483_g, c_unitCountAll);
        for (;; auto1FD49483_u -= 1) {
            auto1FD49483_var = UnitGroupUnitFromEnd(auto1FD49483_g, auto1FD49483_u);
            if (auto1FD49483_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto1FD49483_var), "Radius", 1, FixedToString(lv_vRadius, 2));
        }
        libA8FDA37D_gf_UT_Cheat();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_66717EA8"));
        autoEA2B6370_g = UnitGroupSelected(EventPlayer());
        autoEA2B6370_u = UnitGroupCount(autoEA2B6370_g, c_unitCountAll);
        for (;; autoEA2B6370_u -= 1) {
            autoEA2B6370_var = UnitGroupUnitFromEnd(autoEA2B6370_g, autoEA2B6370_u);
            if (autoEA2B6370_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoEA2B6370_var), "Radius", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoEA2B6370_var), "Radius", 0));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Rad_Init () {
    libA8FDA37D_gt_UT_Rad = TriggerCreate("libA8FDA37D_gt_UT_Rad_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Rad, c_playerAny, "-rad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Share Control
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ShareControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(2, c_allianceIdSpend, 1) == true)) {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_7CE75239"));
    }
    else {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_76D30838"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ShareControl_Init () {
    libA8FDA37D_gt_UT_ShareControl = TriggerCreate("libA8FDA37D_gt_UT_ShareControl_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ShareControl, c_playerAny, "-share", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup auto11AE77CF_g;
    int auto11AE77CF_u;
    unit auto11AE77CF_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto11AE77CF_g = UnitGroupSelected(EventPlayer());
    auto11AE77CF_u = UnitGroupCount(auto11AE77CF_g, c_unitCountAll);
    for (;; auto11AE77CF_u -= 1) {
        auto11AE77CF_var = UnitGroupUnitFromEnd(auto11AE77CF_g, auto11AE77CF_u);
        if (auto11AE77CF_var == null) { break; }
        UnitXPAddXP(auto11AE77CF_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_XP_Init () {
    libA8FDA37D_gt_UT_XP = TriggerCreate("libA8FDA37D_gt_UT_XP_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListDead
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ListDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto398DA51A_ae = 15;
    int auto398DA51A_var;
    unitgroup auto989C89FF_g;
    int auto989C89FF_u;
    unit auto989C89FF_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_A8FDA37D_FF098F75"), true);
    auto398DA51A_var = 0;
    for ( ; auto398DA51A_var <= auto398DA51A_ae; auto398DA51A_var += 1 ) {
        auto989C89FF_g = UnitGroup(null, auto398DA51A_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto989C89FF_u = UnitGroupCount(auto989C89FF_g, c_unitCountAll);
        for (;; auto989C89FF_u -= 1) {
            auto989C89FF_var = UnitGroupUnitFromEnd(auto989C89FF_g, auto989C89FF_u);
            if (auto989C89FF_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_599FD105", "A", UnitGetName(auto989C89FF_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_599FD105", "B", IntToText(UnitGetOwner(auto989C89FF_var)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_599FD105", "C", FixedToText(PointGetX(UnitGetPosition(auto989C89FF_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_599FD105", "D", FixedToText(PointGetY(UnitGetPosition(auto989C89FF_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_599FD105"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ListDead_Init () {
    libA8FDA37D_gt_UT_ListDead = TriggerCreate("libA8FDA37D_gt_UT_ListDead_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ListDead, c_playerAny, "-listdead", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListHidden
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ListHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoEB066ADB_ae = 15;
    int autoEB066ADB_var;
    unitgroup autoB92843E4_g;
    int autoB92843E4_u;
    unit autoB92843E4_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_A8FDA37D_A93F0EC2"), true);
    autoEB066ADB_var = 0;
    for ( ; autoEB066ADB_var <= autoEB066ADB_ae; autoEB066ADB_var += 1 ) {
        autoB92843E4_g = UnitGroup(null, autoEB066ADB_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), 0), 0);
        autoB92843E4_u = UnitGroupCount(autoB92843E4_g, c_unitCountAll);
        for (;; autoB92843E4_u -= 1) {
            autoB92843E4_var = UnitGroupUnitFromEnd(autoB92843E4_g, autoB92843E4_u);
            if (autoB92843E4_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(autoB92843E4_var) == true)) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BA903A3E", "A", UnitGetName(autoB92843E4_var));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BA903A3E", "B", IntToText(UnitGetOwner(autoB92843E4_var)));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BA903A3E", "C", FixedToText(PointGetX(UnitGetPosition(autoB92843E4_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BA903A3E", "D", FixedToText(PointGetY(UnitGetPosition(autoB92843E4_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_BA903A3E"), true);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EAB3B9C5", "A", UnitGetName(autoB92843E4_var));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EAB3B9C5", "B", IntToText(UnitGetOwner(autoB92843E4_var)));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EAB3B9C5", "C", FixedToText(PointGetX(UnitGetPosition(autoB92843E4_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EAB3B9C5", "D", FixedToText(PointGetY(UnitGetPosition(autoB92843E4_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EAB3B9C5"), true);
            }
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ListHidden_Init () {
    libA8FDA37D_gt_UT_ListHidden = TriggerCreate("libA8FDA37D_gt_UT_ListHidden_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ListHidden, c_playerAny, "-listhidden", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListMissile
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ListMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD9AEDCE6_ae = 15;
    int autoD9AEDCE6_var;
    unitgroup auto6A1E6E0D_g;
    int auto6A1E6E0D_u;
    unit auto6A1E6E0D_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_A8FDA37D_8BE1A6A1"), true);
    autoD9AEDCE6_var = 0;
    for ( ; autoD9AEDCE6_var <= autoD9AEDCE6_ae; autoD9AEDCE6_var += 1 ) {
        auto6A1E6E0D_g = UnitGroup(null, autoD9AEDCE6_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        auto6A1E6E0D_u = UnitGroupCount(auto6A1E6E0D_g, c_unitCountAll);
        for (;; auto6A1E6E0D_u -= 1) {
            auto6A1E6E0D_var = UnitGroupUnitFromEnd(auto6A1E6E0D_g, auto6A1E6E0D_u);
            if (auto6A1E6E0D_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EC3406F4", "A", UnitGetName(auto6A1E6E0D_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EC3406F4", "B", IntToText(UnitGetOwner(auto6A1E6E0D_var)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EC3406F4", "C", FixedToText(PointGetX(UnitGetPosition(auto6A1E6E0D_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EC3406F4", "D", FixedToText(PointGetY(UnitGetPosition(auto6A1E6E0D_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EC3406F4"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ListMissile_Init () {
    libA8FDA37D_gt_UT_ListMissile = TriggerCreate("libA8FDA37D_gt_UT_ListMissile_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ListMissile, c_playerAny, "-listmissile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListAll
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ListAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    int lv_vB;
    playergroup lv_vPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto231144CA_g;
    int auto231144CA_var;
    unitgroup auto1B5384E2_g;
    int auto1B5384E2_u;
    unit auto1B5384E2_var;
    playergroup autoFB381E6B_g;
    int autoFB381E6B_var;
    unitgroup autoA254E857_g;
    int autoA254E857_u;
    unit autoA254E857_var;

    // Variable Initialization
    lv_vB = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EA0A3F80", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EA0A3F80"));
    if ((StringWord(EventChatMessage(false), 2) != "") && (lv_vB >= 0)) {
        PlayerGroupAdd(lv_vPlayerGroup, lv_vB);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_vPlayerGroup);
    }
    auto231144CA_g = lv_vPlayerGroup;
    auto231144CA_var = -1;
    while (true) {
        auto231144CA_var = PlayerGroupNextPlayer(auto231144CA_g, auto231144CA_var);
        if (auto231144CA_var < 0) { break; }
        auto1B5384E2_g = UnitGroup(null, auto231144CA_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1B5384E2_u = UnitGroupCount(auto1B5384E2_g, c_unitCountAll);
        for (;; auto1B5384E2_u -= 1) {
            auto1B5384E2_var = UnitGroupUnitFromEnd(auto1B5384E2_g, auto1B5384E2_u);
            if (auto1B5384E2_var == null) { break; }
            lv_vA += 1;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_BE42D010", "A", IntToText(lv_vA));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_BE42D010"), true);
    Wait(0.5, c_timeGame);
    autoFB381E6B_g = lv_vPlayerGroup;
    autoFB381E6B_var = -1;
    while (true) {
        autoFB381E6B_var = PlayerGroupNextPlayer(autoFB381E6B_g, autoFB381E6B_var);
        if (autoFB381E6B_var < 0) { break; }
        autoA254E857_g = UnitGroup(null, autoFB381E6B_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoA254E857_u = UnitGroupCount(autoA254E857_g, c_unitCountAll);
        for (;; autoA254E857_u -= 1) {
            autoA254E857_var = UnitGroupUnitFromEnd(autoA254E857_g, autoA254E857_u);
            if (autoA254E857_var == null) { break; }
            Wait(0.001, c_timeGame);
            lv_vText = StringToText("");
            if ((libNtve_gf_UnitIsHidden(autoA254E857_var) == true)) {
                lv_vText = StringExternal("Param/Value/lib_A8FDA37D_D85E618E");
            }

            if ((UnitIsAlive(autoA254E857_var) == false)) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_EAD9539C", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_EAD9539C");
            }

            if ((UnitTypeTestFlag(UnitGetType(autoA254E857_var), c_unitFlagMissile) == true)) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F03B72F9", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F03B72F9");
            }

            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D6E7D37E", "A", UnitGetName(autoA254E857_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D6E7D37E", "B", IntToText(autoFB381E6B_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D6E7D37E", "C", FixedToText(PointGetX(UnitGetPosition(autoA254E857_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D6E7D37E", "D", FixedToText(PointGetY(UnitGetPosition(autoA254E857_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_D6E7D37E", "E", lv_vText);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_D6E7D37E"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ListAll_Init () {
    libA8FDA37D_gt_UT_ListAll = TriggerCreate("libA8FDA37D_gt_UT_ListAll_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ListAll, c_playerAny, "-listall", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TesseractCannonTEST
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_TesseractCannonTEST_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vAmount = (-1.0 + StringToFixed(StringWord(EventChatMessage(false), 2)));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount > -1.0)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TesseractCannonTestBehavior", "Modification.UnifiedDamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", EventPlayer(), FixedToString(lv_vAmount, 3));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TesseractCannonTestBehavior", "Modification.UnifiedDamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", EventPlayer(), "-0.5");
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_TesseractCannonTEST_Init () {
    libA8FDA37D_gt_UT_TesseractCannonTEST = TriggerCreate("libA8FDA37D_gt_UT_TesseractCannonTEST_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_TesseractCannonTEST, c_playerAny, "-cannon", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Resource
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 3)));
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Resource_Init () {
    libA8FDA37D_gt_UT_Resource = TriggerCreate("libA8FDA37D_gt_UT_Resource_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Resource, c_playerAny, "-resource", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllySupply
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AllySupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    if ((DialogControlIsVisible(EventDialogControl(), EventPlayer()) == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AllySupply_Init () {
    libA8FDA37D_gt_UT_AllySupply = TriggerCreate("libA8FDA37D_gt_UT_AllySupply_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AllySupply, c_playerAny, "-allysupply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SpawnArtifacts
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_SpawnArtifacts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup1", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup2", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZeratulArtifactPickup3", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_SpawnArtifacts_Init () {
    libA8FDA37D_gt_UT_SpawnArtifacts = TriggerCreate("libA8FDA37D_gt_UT_SpawnArtifacts_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_SpawnArtifacts, c_playerAny, "-spawnartifacts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Pause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsPaused(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_03DF2DF7"));
        UnitPauseAll(false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_BD27237F"));
        UnitPauseAll(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Pause_Init () {
    libA8FDA37D_gt_UT_Pause = TriggerCreate("libA8FDA37D_gt_UT_Pause_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Pause, c_playerAny, "-pause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TechReset
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_TechReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;
    int lv_vPlayer;

    // Automatic Variable Declarations
    int auto348ACD23_catalog;
    int auto348ACD23_i;

    // Variable Initialization
    lv_vPlayer = 1;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_040D6B35"));
    if ((StringToInt(StringWord(EventChatMessage(false), 2)) != 0)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    auto348ACD23_catalog = c_gameCatalogUpgrade;
    auto348ACD23_i = 1;
    for ( ; auto348ACD23_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto348ACD23_i += 1 ) {
        lv_vUpgrade = CatalogEntryGet(auto348ACD23_catalog, auto348ACD23_i);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_vPlayer, lv_vUpgrade, 0);
    }
    libCOOC_gf_CC_ApplyTech(lv_vPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_TechReset_Init () {
    libA8FDA37D_gt_UT_TechReset = TriggerCreate("libA8FDA37D_gt_UT_TechReset_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_TechReset, c_playerAny, "-techreset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Money
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Money_Init () {
    libA8FDA37D_gt_UT_Money = TriggerCreate("libA8FDA37D_gt_UT_Money_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Look
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Look_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto40035A56_g;
    int auto40035A56_u;
    unit auto40035A56_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto40035A56_g = UnitGroupSelected(EventPlayer());
    auto40035A56_u = UnitGroupCount(auto40035A56_g, c_unitCountAll);
    for (;; auto40035A56_u -= 1) {
        auto40035A56_var = UnitGroupUnitFromEnd(auto40035A56_g, auto40035A56_u);
        if (auto40035A56_var == null) { break; }
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_MainActorofUnit(auto40035A56_var), StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Look_Init () {
    libA8FDA37D_gt_UT_Look = TriggerCreate("libA8FDA37D_gt_UT_Look_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Look, c_playerAny, "-look", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_sight
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_sight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto95B3BE83_g;
    int auto95B3BE83_u;
    unit auto95B3BE83_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_7BF642DA", "A", StringToText(StringWord(EventChatMessage(false), 1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_7BF642DA"));
    auto95B3BE83_g = UnitGroupSelected(EventPlayer());
    auto95B3BE83_u = UnitGroupCount(auto95B3BE83_g, c_unitCountAll);
    for (;; auto95B3BE83_u -= 1) {
        auto95B3BE83_var = UnitGroupUnitFromEnd(auto95B3BE83_g, auto95B3BE83_u);
        if (auto95B3BE83_var == null) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto95B3BE83_var), "Sight", EventPlayer(), StringWord(EventChatMessage(false), 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_sight_Init () {
    libA8FDA37D_gt_UT_sight = TriggerCreate("libA8FDA37D_gt_UT_sight_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_sight, c_playerAny, "-sight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill Units
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_KillUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto2ECDFBA5_g;
    int auto2ECDFBA5_u;
    unit auto2ECDFBA5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    auto2ECDFBA5_g = UnitGroupSelected(EventPlayer());
    auto2ECDFBA5_u = UnitGroupCount(auto2ECDFBA5_g, c_unitCountAll);
    for (;; auto2ECDFBA5_u -= 1) {
        auto2ECDFBA5_var = UnitGroupUnitFromEnd(auto2ECDFBA5_g, auto2ECDFBA5_u);
        if (auto2ECDFBA5_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", auto2ECDFBA5_var);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_KillUnits_Init () {
    libA8FDA37D_gt_UT_KillUnits = TriggerCreate("libA8FDA37D_gt_UT_KillUnits_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_KillUnits, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup auto7427B541_g;
    int auto7427B541_u;
    unit auto7427B541_var;
    const int auto09E5BFF5_ae = 10;
    int auto09E5BFF5_var;
    unitgroup autoCE447456_g;
    int autoCE447456_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7427B541_g = UnitGroupSelected(EventPlayer());
    auto7427B541_u = UnitGroupCount(auto7427B541_g, c_unitCountAll);
    for (;; auto7427B541_u -= 1) {
        auto7427B541_var = UnitGroupUnitFromEnd(auto7427B541_g, auto7427B541_u);
        if (auto7427B541_var == null) { break; }
        auto09E5BFF5_var = 0;
        for ( ; auto09E5BFF5_var <= auto09E5BFF5_ae; auto09E5BFF5_var += 1 ) {
            if ((libHots_gf_TextTagForUnit(auto7427B541_var, auto09E5BFF5_var) != c_textTagNone)) {
                TextTagDestroy(libHots_gf_TextTagForUnit(auto7427B541_var, auto09E5BFF5_var));
            }

        }
        autoCE447456_g = UnitCargoGroup(auto7427B541_var);
        autoCE447456_u = UnitGroupCount(autoCE447456_g, c_unitCountAll);
        for (;; autoCE447456_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(autoCE447456_g, autoCE447456_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto7427B541_var);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Remove_Init () {
    libA8FDA37D_gt_UT_Remove = TriggerCreate("libA8FDA37D_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_clearscreen
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_clearscreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup auto8C852E3C_g;
    int auto8C852E3C_u;
    unit auto8C852E3C_var;
    const int autoE502429B_ae = 10;
    int autoE502429B_var;
    unitgroup auto7577D415_g;
    int auto7577D415_u;
    unitgroup auto0881611F_g;
    int auto0881611F_u;
    unit auto0881611F_var;
    const int autoE2312A2D_ae = 10;
    int autoE2312A2D_var;
    unitgroup autoDB8597C3_g;
    int autoDB8597C3_u;

    // Variable Initialization
    lv_vPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "unsel")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_15DBFF9F"));
        auto8C852E3C_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
        auto8C852E3C_u = UnitGroupCount(auto8C852E3C_g, c_unitCountAll);
        for (;; auto8C852E3C_u -= 1) {
            auto8C852E3C_var = UnitGroupUnitFromEnd(auto8C852E3C_g, auto8C852E3C_u);
            if (auto8C852E3C_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(auto8C852E3C_var), c_unitFlagUnselectable) == true)) {
                autoE502429B_var = 0;
                for ( ; autoE502429B_var <= autoE502429B_ae; autoE502429B_var += 1 ) {
                    if ((libHots_gf_TextTagForUnit(auto8C852E3C_var, autoE502429B_var) != c_textTagNone)) {
                        TextTagDestroy(libHots_gf_TextTagForUnit(auto8C852E3C_var, autoE502429B_var));
                    }

                }
                auto7577D415_g = UnitCargoGroup(auto8C852E3C_var);
                auto7577D415_u = UnitGroupCount(auto7577D415_g, c_unitCountAll);
                for (;; auto7577D415_u -= 1) {
                    lv_vInnerUnit = UnitGroupUnitFromEnd(auto7577D415_g, auto7577D415_u);
                    if (lv_vInnerUnit == null) { break; }
                    UnitRemove(lv_vInnerUnit);
                }
                UnitRemove(auto8C852E3C_var);
            }

        }
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_41E02741", "A", IntToText(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_41E02741"));
    auto0881611F_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
    auto0881611F_u = UnitGroupCount(auto0881611F_g, c_unitCountAll);
    for (;; auto0881611F_u -= 1) {
        auto0881611F_var = UnitGroupUnitFromEnd(auto0881611F_g, auto0881611F_u);
        if (auto0881611F_var == null) { break; }
        autoE2312A2D_var = 0;
        for ( ; autoE2312A2D_var <= autoE2312A2D_ae; autoE2312A2D_var += 1 ) {
            if ((libHots_gf_TextTagForUnit(auto0881611F_var, autoE2312A2D_var) != c_textTagNone)) {
                TextTagDestroy(libHots_gf_TextTagForUnit(auto0881611F_var, autoE2312A2D_var));
            }

        }
        autoDB8597C3_g = UnitCargoGroup(auto0881611F_var);
        autoDB8597C3_u = UnitGroupCount(autoDB8597C3_g, c_unitCountAll);
        for (;; autoDB8597C3_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(autoDB8597C3_g, autoDB8597C3_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto0881611F_var);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_clearscreen_Init () {
    libA8FDA37D_gt_UT_clearscreen = TriggerCreate("libA8FDA37D_gt_UT_clearscreen_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_clearscreen, c_playerAny, "-clearscreen", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause AI
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_PauseAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        AITimePause(true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_56BBB127"));
    }
    else {
        AITimePause(false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B39D86B2"));
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_PauseAI_Init () {
    libA8FDA37D_gt_UT_PauseAI = TriggerCreate("libA8FDA37D_gt_UT_PauseAI_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_PauseAI, c_playerAny, "-pai", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Speed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto9CC246FF_val;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9CC246FF_val = StringWord(EventChatMessage(false), 2);
    if (auto9CC246FF_val == "slower") {
        GameSetSpeedValue(c_gameSpeedSlower);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_CF1C53BF"));
    }
    else if (auto9CC246FF_val == "slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_18C655A0"));
    }
    else if (auto9CC246FF_val == "normal") {
        GameSetSpeedValue(c_gameSpeedNormal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_8F2DB9C9"));
    }
    else if (auto9CC246FF_val == "fast") {
        GameSetSpeedValue(c_gameSpeedFast);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_140E0478"));
    }
    else if (auto9CC246FF_val == "faster") {
        GameSetSpeedValue(c_gameSpeedFaster);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_76B0FD28"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Speed_Init () {
    libA8FDA37D_gt_UT_Speed = TriggerCreate("libA8FDA37D_gt_UT_Speed_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Speed, c_playerAny, "-speed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_153723D4", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_153723D4"));
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Supply_Init () {
    libA8FDA37D_gt_UT_Supply = TriggerCreate("libA8FDA37D_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Give_Init () {
    libA8FDA37D_gt_UT_Give = TriggerCreate("libA8FDA37D_gt_UT_Give_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SwitchOwner
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_SwitchOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto862E1E84_g;
    int auto862E1E84_u;
    unit auto862E1E84_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto862E1E84_g = UnitGroupSelected(EventPlayer());
    auto862E1E84_u = UnitGroupCount(auto862E1E84_g, c_unitCountAll);
    for (;; auto862E1E84_u -= 1) {
        auto862E1E84_var = UnitGroupUnitFromEnd(auto862E1E84_g, auto862E1E84_u);
        if (auto862E1E84_var == null) { break; }
        UnitBehaviorAddPlayer(auto862E1E84_var, "PXOwnership", lv_vPlayer, 1);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_SwitchOwner_Init () {
    libA8FDA37D_gt_UT_SwitchOwner = TriggerCreate("libA8FDA37D_gt_UT_SwitchOwner_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_SwitchOwner, c_playerAny, "-switchowner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cost
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Cost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[21] lv_vSupply;
    fixed[21] lv_vCost;
    fixed lv_vDistance;
    string lv_vRace;

    // Automatic Variable Declarations
    unitgroup auto1C68048D_g;
    int auto1C68048D_u;
    unit auto1C68048D_var;
    const int auto1EED0D1E_ae = 19;
    int auto1EED0D1E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vDistance = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_vDistance >= 1)) {
    }
    else {
        lv_vDistance = 12.0;
    }
    auto1C68048D_g = UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(EventPlayer()), lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto1C68048D_u = UnitGroupCount(auto1C68048D_g, c_unitCountAll);
    for (;; auto1C68048D_u -= 1) {
        auto1C68048D_var = UnitGroupUnitFromEnd(auto1C68048D_g, auto1C68048D_u);
        if (auto1C68048D_var == null) { break; }
        lv_vSupply[UnitGetOwner(auto1C68048D_var)] += UnitGetPropertyFixed(auto1C68048D_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vCost[UnitGetOwner(auto1C68048D_var)] += UnitTypeGetCost(UnitGetType(auto1C68048D_var), c_unitCostSumMineralsVespene);
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_694F9FFD", "A", FixedToText(UnitGetPropertyFixed(auto1C68048D_var, c_unitPropSuppliesUsed, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_694F9FFD", "B", FixedToText(UnitTypeGetCost(UnitGetType(auto1C68048D_var), c_unitCostSumMineralsVespene), c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_A8FDA37D_694F9FFD"), 24, UnitGetPosition(auto1C68048D_var), 1.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        lv_vRace = libCOMI_gf_GetUnitRace(auto1C68048D_var);
    }
    auto1EED0D1E_var = 1;
    for ( ; auto1EED0D1E_var <= auto1EED0D1E_ae; auto1EED0D1E_var += 1 ) {
        if ((lv_vSupply[auto1EED0D1E_var] != 0.0) && (lv_vCost[auto1EED0D1E_var] != 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_ADD1852E", "A", IntToText(auto1EED0D1E_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_ADD1852E", "D", StringToText((lv_vRace)));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_ADD1852E", "B", FixedToText(lv_vSupply[auto1EED0D1E_var], c_fixedPrecisionAny));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_ADD1852E", "C", FixedToText(lv_vCost[auto1EED0D1E_var], c_fixedPrecisionAny));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_ADD1852E"));
            lv_vCost[20] += lv_vCost[auto1EED0D1E_var];
            lv_vSupply[20] += lv_vSupply[auto1EED0D1E_var];
        }

    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_11BFF935", "B", FixedToText(lv_vSupply[20], c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_11BFF935", "C", FixedToText(lv_vCost[20], c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_11BFF935"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Cost_Init () {
    libA8FDA37D_gt_UT_Cost = TriggerCreate("libA8FDA37D_gt_UT_Cost_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Cost, c_playerAny, "-cost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Unlock
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Unlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, true);
    CameraLockInput(EventPlayer(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
    DialogControlHookup(libCOUI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Unlock_Init () {
    libA8FDA37D_gt_UT_Unlock = TriggerCreate("libA8FDA37D_gt_UT_Unlock_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Unlock, c_playerAny, "-unlock", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trigdebug
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Trigdebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_FBD69225"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Trigdebug_Init () {
    libA8FDA37D_gt_UT_Trigdebug = TriggerCreate("libA8FDA37D_gt_UT_Trigdebug_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Trigdebug, c_playerAny, "-trigdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_GetID
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_GetID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5B22CF0A_g;
    int auto5B22CF0A_u;
    unit auto5B22CF0A_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5B22CF0A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5B22CF0A_u = UnitGroupCount(auto5B22CF0A_g, c_unitCountAll);
    for (;; auto5B22CF0A_u -= 1) {
        auto5B22CF0A_var = UnitGroupUnitFromEnd(auto5B22CF0A_g, auto5B22CF0A_u);
        if (auto5B22CF0A_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto5B22CF0A_var) == true)) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B791DBD3", "A", StringToText((UnitGetType(auto5B22CF0A_var))));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B791DBD3", "B", IntToText(UnitGetOwner(auto5B22CF0A_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B791DBD3"), 24, UnitGetPosition(auto5B22CF0A_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_5F53C889", "A", StringToText((UnitGetType(auto5B22CF0A_var))));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_5F53C889", "B", IntToText(UnitGetOwner(auto5B22CF0A_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_A8FDA37D_5F53C889"), 24, UnitGetPosition(auto5B22CF0A_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagAttachToUnit(TextTagLastCreated(), auto5B22CF0A_var, 1.5);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_GetID_Init () {
    libA8FDA37D_gt_UT_GetID = TriggerCreate("libA8FDA37D_gt_UT_GetID_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_GetID, c_playerAny, "-getid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restore
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Restore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto344AD9AD_g;
    int auto344AD9AD_u;
    unit auto344AD9AD_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto344AD9AD_g = UnitGroupSelected(EventPlayer());
    auto344AD9AD_u = UnitGroupCount(auto344AD9AD_g, c_unitCountAll);
    for (;; auto344AD9AD_u -= 1) {
        auto344AD9AD_var = UnitGroupUnitFromEnd(auto344AD9AD_g, auto344AD9AD_u);
        if (auto344AD9AD_var == null) { break; }
        UnitSetPropertyFixed(auto344AD9AD_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto344AD9AD_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(auto344AD9AD_var, c_unitPropShieldsPercent, 100.0);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Restore_Init () {
    libA8FDA37D_gt_UT_Restore = TriggerCreate("libA8FDA37D_gt_UT_Restore_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Restore, c_playerAny, "-restore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clear Enemy
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ClearEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto981B33D5_g;
    int auto981B33D5_u;
    unit auto981B33D5_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto981B33D5_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto981B33D5_u = UnitGroupCount(auto981B33D5_g, c_unitCountAll);
    for (;; auto981B33D5_u -= 1) {
        auto981B33D5_var = UnitGroupUnitFromEnd(auto981B33D5_g, auto981B33D5_u);
        if (auto981B33D5_var == null) { break; }
        UnitRemove(auto981B33D5_var);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ClearEnemy_Init () {
    libA8FDA37D_gt_UT_ClearEnemy = TriggerCreate("libA8FDA37D_gt_UT_ClearEnemy_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ClearEnemy, c_playerAny, "-clearenemy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }

        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_SpawnUnits_Init () {
    libA8FDA37D_gt_UT_SpawnUnits = TriggerCreate("libA8FDA37D_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0FAF85EE_g;
    int auto0FAF85EE_u;
    unit auto0FAF85EE_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0FAF85EE_g = UnitGroupSelected(EventPlayer());
    auto0FAF85EE_u = UnitGroupCount(auto0FAF85EE_g, c_unitCountAll);
    for (;; auto0FAF85EE_u -= 1) {
        auto0FAF85EE_var = UnitGroupUnitFromEnd(auto0FAF85EE_g, auto0FAF85EE_u);
        if (auto0FAF85EE_var == null) { break; }
        UnitSetPosition(auto0FAF85EE_var, CameraGetTarget(EventPlayer()), true);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Teleport_Init () {
    libA8FDA37D_gt_UT_Teleport = TriggerCreate("libA8FDA37D_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restart
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RestartGame(PlayerGroupAll());
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Restart_Init () {
    libA8FDA37D_gt_UT_Restart = TriggerCreate("libA8FDA37D_gt_UT_Restart_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Restart, c_playerAny, "-restart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Caster
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Caster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto82BA7D42_n = 200;
    int auto82BA7D42_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto82BA7D42_i = 1; auto82BA7D42_i <= auto82BA7D42_n; auto82BA7D42_i += 1) {
        lv_vPoint = RegionRandomPoint(RegionCircle(PlayerStartLocation(2), 8.0));
        if ((UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 7.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            break;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetGameLink("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(2), "GlobalCastUnit", 1), 0, 2, lv_vPoint);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B26B4E2B"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Caster_Init () {
    libA8FDA37D_gt_UT_Caster = TriggerCreate("libA8FDA37D_gt_UT_Caster_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Caster, c_playerAny, "-caster", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Control
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Control_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5BDAB6AD_g;
    int auto5BDAB6AD_var;
    playergroup autoDD149304_g;
    int autoDD149304_var;
    playergroup auto4364958C_g;
    int auto4364958C_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "other")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_331158DE"));
        auto5BDAB6AD_g = PlayerGroupAll();
        auto5BDAB6AD_var = -1;
        while (true) {
            auto5BDAB6AD_var = PlayerGroupNextPlayer(auto5BDAB6AD_g, auto5BDAB6AD_var);
            if (auto5BDAB6AD_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(auto5BDAB6AD_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false)) {
                PlayerSetAlliance(auto5BDAB6AD_var, c_allianceIdControl, EventPlayer(), true);
            }

        }
    }
    else {
        if ((PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_9DBBC96F"));
            auto4364958C_g = PlayerGroupAll();
            auto4364958C_var = -1;
            while (true) {
                auto4364958C_var = PlayerGroupNextPlayer(auto4364958C_g, auto4364958C_var);
                if (auto4364958C_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto4364958C_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto4364958C_var, c_allianceIdControl, EventPlayer(), true);
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_78E2C844"));
            autoDD149304_g = PlayerGroupAll();
            autoDD149304_var = -1;
            while (true) {
                autoDD149304_var = PlayerGroupNextPlayer(autoDD149304_g, autoDD149304_var);
                if (autoDD149304_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(autoDD149304_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(autoDD149304_var, c_allianceIdControl, EventPlayer(), false);
                }

            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Control_Init () {
    libA8FDA37D_gt_UT_Control = TriggerCreate("libA8FDA37D_gt_UT_Control_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Control, c_playerAny, "-control", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Ally
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Ally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    playergroup autoE7C8A72D_g;
    playergroup autoE6B93882_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7C8A72D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_a = -1;
    while (true) {
        lv_a = PlayerGroupNextPlayer(autoE7C8A72D_g, lv_a);
        if (lv_a < 0) { break; }
        autoE6B93882_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_b = -1;
        while (true) {
            lv_b = PlayerGroupNextPlayer(autoE6B93882_g, lv_b);
            if (lv_b < 0) { break; }
            if ((lv_a == lv_b)) {
                continue;
            }

            if ((PlayerGetAlliance(lv_a, c_allianceIdControl, lv_b) == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_58446429"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, true);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, true);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_3A64B597"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, false);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Ally_Init () {
    libA8FDA37D_gt_UT_Ally = TriggerCreate("libA8FDA37D_gt_UT_Ally_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Ally, c_playerAny, "-ally", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PvP
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_PvP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(1, 2, libNtve_ge_PlayerRelation_Enemy) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_F21A2A84"));
        if (((PlayerGetAlliance(2, c_allianceIdControl, 1) == true) || (PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == true))) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            PlayerSetAlliance(2, c_allianceIdControl, 1, true);
            PlayerSetAlliance(1, c_allianceIdControl, 2, true);
            PlayerSetAlliance(2, c_allianceIdSpend, 1, true);
            PlayerSetAlliance(1, c_allianceIdSpend, 2, true);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_5D2D02C7"));
        if ((PlayerGetAlliance(2, c_allianceIdControl, 1) == true)) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_PvP_Init () {
    libA8FDA37D_gt_UT_PvP = TriggerCreate("libA8FDA37D_gt_UT_PvP_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_PvP, c_playerAny, "-pvp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListEmotes
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ListEmotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vString;
    string lv_vStyle;

    // Automatic Variable Declarations
    const int autoE0AE25B5_ae = 30;
    int autoE0AE25B5_var;
    const int auto1086EAFF_ae = libA8FDA37D_gv_uT_MAXEMOTES;
    int auto1086EAFF_var;
    const int autoF78353D8_ae = 30;
    int autoF78353D8_var;
    const int auto6FB95192_ae = libA8FDA37D_gv_uT_MAXEMOTES;
    int auto6FB95192_var;

    // Variable Initialization
    lv_vString = "";
    lv_vStyle = "<s val=\"EmoteListNormal\">";

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libA8FDA37D_gv_uT_Emote_Dialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 5000);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, -350, 50, StringExternal("Param/Value/lib_A8FDA37D_2FEC98E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    autoE0AE25B5_var = 1;
    for ( ; autoE0AE25B5_var <= autoE0AE25B5_ae; autoE0AE25B5_var += 1 ) {
        if ((libA8FDA37D_gv_uT_SC_Emoticons[autoE0AE25B5_var] != "")) {
            lv_vString = (lv_vString + libA8FDA37D_gf_UT_ReplaceEmotes(("(" + libA8FDA37D_gv_uT_SC_Emoticons[autoE0AE25B5_var] + ")")) + " " + lv_vStyle + "(" + libA8FDA37D_gv_uT_SC_Emoticons[autoE0AE25B5_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -250, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vString = "</n>";
    auto1086EAFF_var = 31;
    for ( ; auto1086EAFF_var <= auto1086EAFF_ae; auto1086EAFF_var += 1 ) {
        if ((libA8FDA37D_gv_uT_SC_Emoticons[auto1086EAFF_var] != "")) {
            lv_vString = (lv_vString + libA8FDA37D_gf_UT_ReplaceEmotes(("(" + libA8FDA37D_gv_uT_SC_Emoticons[auto1086EAFF_var] + ")")) + " " + lv_vStyle + "(" + libA8FDA37D_gv_uT_SC_Emoticons[auto1086EAFF_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -500, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, 250, 50, StringExternal("Param/Value/lib_A8FDA37D_44D9E30C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    lv_vString = "";
    autoF78353D8_var = 1;
    for ( ; autoF78353D8_var <= autoF78353D8_ae; autoF78353D8_var += 1 ) {
        if ((libA8FDA37D_gv_uT_CS_Emoticons[autoF78353D8_var] != "")) {
            lv_vString = (lv_vString + libA8FDA37D_gf_UT_ReplaceEmotes((" " + libA8FDA37D_gv_uT_CS_Emoticons[autoF78353D8_var])) + "  " + lv_vStyle + libA8FDA37D_gv_uT_CS_Emoticons[autoF78353D8_var] + "</s></n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 300, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    lv_vString = "";
    auto6FB95192_var = 31;
    for ( ; auto6FB95192_var <= auto6FB95192_ae; auto6FB95192_var += 1 ) {
        if ((libA8FDA37D_gv_uT_CS_Emoticons[auto6FB95192_var] != "")) {
            lv_vString = (lv_vString + libA8FDA37D_gf_UT_ReplaceEmotes((" " + libA8FDA37D_gv_uT_CS_Emoticons[auto6FB95192_var])) + "  " + lv_vStyle + libA8FDA37D_gv_uT_CS_Emoticons[auto6FB95192_var] + "</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 600, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_A8FDA37D_5A849428"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libA8FDA37D_gv_uT_Emote_CloseButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ListEmotes_Init () {
    libA8FDA37D_gt_UT_ListEmotes = TriggerCreate("libA8FDA37D_gt_UT_ListEmotes_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ListEmotes, c_playerAny, "-emotes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Emote_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Emote_ButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libA8FDA37D_gv_uT_Emote_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libA8FDA37D_gv_uT_Emote_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Emote_ButtonClicked_Init () {
    libA8FDA37D_gt_UT_Emote_ButtonClicked = TriggerCreate("libA8FDA37D_gt_UT_Emote_ButtonClicked_Func");
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_Emote_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Solo
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Solo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9D53CCF2_g;
    int auto9D53CCF2_u;
    unit auto9D53CCF2_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }

        if (!((libA8FDA37D_gv_uT_SoloActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(libA8FDA37D_gf_UT_OtherPlayer(EventPlayer())) == c_playerStatusActive)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_6C5D8729"));
        return true;
    }
    else if ((GameGetMissionTime() < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_4AEA1B1E"));
        libA8FDA37D_gv_uT_SoloActive = true;
        while (!((GameGetMissionTime() > 1))) {
            Wait(0.5, c_timeGame);
        }
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_54DD12EB"));
        libA8FDA37D_gv_uT_SoloActive = true;
    }
    if ((libCOMU_gf_MutatorIsEnabled("MissileBarrage") == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_801A1EBD"));
        TriggerExecute(libCOMU_gt_CT_MissileBarrage, false, false);
    }

    TriggerEnable(libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummy", 0, libA8FDA37D_gf_UT_OtherPlayer(EventPlayer()), PlayerStartLocation(EventPlayer()));
    libA8FDA37D_gv_uT_CoreDummy = UnitLastCreated();
    PlayerSetAlliance(libA8FDA37D_gf_UT_OtherPlayer(EventPlayer()), c_allianceIdControl, EventPlayer(), true);
    PlayerSetAlliance(libA8FDA37D_gf_UT_OtherPlayer(EventPlayer()), c_allianceIdPushable, EventPlayer(), true);
    auto9D53CCF2_g = UnitGroup(null, libA8FDA37D_gf_UT_OtherPlayer(EventPlayer()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D53CCF2_u = UnitGroupCount(auto9D53CCF2_g, c_unitCountAll);
    for (;; auto9D53CCF2_u -= 1) {
        auto9D53CCF2_var = UnitGroupUnitFromEnd(auto9D53CCF2_g, auto9D53CCF2_u);
        if (auto9D53CCF2_var == null) { break; }
        if ((UnitGetType(auto9D53CCF2_var) != "SoloDummy") && (UnitGetType(auto9D53CCF2_var) != "CODFlatbedTruck") && (UnitGetType(auto9D53CCF2_var) != "CODResearchFacility")) {
            UnitRemove(auto9D53CCF2_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Solo_Init () {
    libA8FDA37D_gt_UT_Solo = TriggerCreate("libA8FDA37D_gt_UT_Solo_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Solo, c_playerAny, "-solo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Solo_LnL_CoA_Fix
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vPOI_UG;
    unitgroup lv_vDummies;
    fixed lv_vPlayerDistance;
    unit lv_vIterUnit;
    bool lv_vStranded;

    // Automatic Variable Declarations
    unitgroup autoF9A5782C_g;
    int autoF9A5782C_u;
    unit autoF9A5782C_var;
    unitgroup autoF91C905C_g;
    int autoF91C905C_u;
    unit autoF91C905C_var;
    unitgroup auto4B0ED323_g;
    int auto4B0ED323_u;

    // Variable Initialization
    lv_vPOI_UG = UnitGroupEmpty();
    lv_vDummies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_vPOI_UG, UnitGroup("CelestialLock", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vPOI_UG, UnitGroup("PitAlarak", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoF9A5782C_g = lv_vPOI_UG;
    autoF9A5782C_u = UnitGroupCount(autoF9A5782C_g, c_unitCountAll);
    for (;; autoF9A5782C_u -= 1) {
        autoF9A5782C_var = UnitGroupUnitFromEnd(autoF9A5782C_g, autoF9A5782C_u);
        if (autoF9A5782C_var == null) { break; }
        if ((UnitGetType(autoF9A5782C_var) == "PitAlarak")) {
            lv_vPlayerDistance = 12.0;
        }
        else {
            lv_vPlayerDistance = 6.0;
        }
        lv_vDummies = UnitGroup("SoloDummy", 2, RegionCircle(UnitGetPosition(autoF9A5782C_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(autoF9A5782C_var), lv_vPlayerDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(lv_vDummies, c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SoloDummy", 0, 2, UnitGetPosition(autoF9A5782C_var));
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        }
        else if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(autoF9A5782C_var), lv_vPlayerDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(lv_vDummies, c_unitCountAlive) > 0)) {
            UnitRemove(UnitGroupRandomUnit(UnitGroup("SoloDummy", 2, RegionCircle(UnitGetPosition(autoF9A5782C_var), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
    }
    autoF91C905C_g = UnitGroup("SoloDummy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0);
    autoF91C905C_u = UnitGroupCount(autoF91C905C_g, c_unitCountAll);
    for (;; autoF91C905C_u -= 1) {
        autoF91C905C_var = UnitGroupUnitFromEnd(autoF91C905C_g, autoF91C905C_u);
        if (autoF91C905C_var == null) { break; }
        if ((autoF91C905C_var == libA8FDA37D_gv_uT_CoreDummy)) {
            continue;
        }

        lv_vStranded = true;
        auto4B0ED323_g = lv_vPOI_UG;
        auto4B0ED323_u = UnitGroupCount(auto4B0ED323_g, c_unitCountAll);
        for (;; auto4B0ED323_u -= 1) {
            lv_vIterUnit = UnitGroupUnitFromEnd(auto4B0ED323_g, auto4B0ED323_u);
            if (lv_vIterUnit == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoF91C905C_var), UnitGetPosition(lv_vIterUnit)) < 7.0)) {
                lv_vStranded = false;
                break;
            }

        }
        if ((lv_vStranded == true)) {
            UnitRemove(autoF91C905C_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix_Init () {
    libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix = TriggerCreate("libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix, false);
    TriggerAddEventTimePeriodic(libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Toggle Eco
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ToggleEco_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_EconomyTest == false)) {
        libA8FDA37D_gv_uT_EconomyTest = true;
        TriggerEnable(libA8FDA37D_gt_UT_WorkerSaturation, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_7BE2F282"));
    }
    else {
        libA8FDA37D_gv_uT_EconomyTest = false;
        TriggerEnable(libA8FDA37D_gt_UT_WorkerSaturation, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_12105A8E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ToggleEco_Init () {
    libA8FDA37D_gt_UT_ToggleEco = TriggerCreate("libA8FDA37D_gt_UT_ToggleEco_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ToggleEco, c_playerAny, "-eco", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Economy Value
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_EconomyValue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineral_count;
    fixed lv_gas_count;
    fixed lv_energy_count;

    // Automatic Variable Declarations
    unitgroup auto600C70CE_g;
    int auto600C70CE_u;
    unit auto600C70CE_var;
    string auto709C2B35_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto600C70CE_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto600C70CE_u = UnitGroupCount(auto600C70CE_g, c_unitCountAll);
    for (;; auto600C70CE_u -= 1) {
        auto600C70CE_var = UnitGroupUnitFromEnd(auto600C70CE_g, auto600C70CE_u);
        if (auto600C70CE_var == null) { break; }
        auto709C2B35_val = UnitGetType(auto600C70CE_var);
        if (auto709C2B35_val == "Zergling") {
            lv_mineral_count = (lv_mineral_count+14.6667);
        }
        else if (auto709C2B35_val == "Baneling") {
            lv_mineral_count = (lv_mineral_count+36.6667);
            lv_gas_count = (lv_gas_count+14.0);
        }
        else if (auto709C2B35_val == "Drone") {
            lv_mineral_count = (lv_mineral_count+37.5);
        }
        else if (auto709C2B35_val == "GhostAcademyNova") {
        }
        else if (auto709C2B35_val == "OrbitalCommand") {
            lv_mineral_count = (lv_mineral_count+550);
            lv_energy_count = (lv_energy_count+UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }
        else {
            lv_mineral_count = (lv_mineral_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto600C70CE_var), "CostResource[" + IntToString(0) + "]", c_playerAny)));
            lv_gas_count = (lv_gas_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto600C70CE_var), "CostResource[" + IntToString(1) + "]", c_playerAny)));
        }
    }
    lv_mineral_count = (lv_mineral_count+lv_energy_count*4.43+PlayerGetPropertyFixed(1, c_playerPropMinerals));
    lv_gas_count = (lv_gas_count+PlayerGetPropertyFixed(1, c_playerPropVespene));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_04C8A53E", "A", IntToText(FixedToInt(lv_mineral_count)));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_04C8A53E", "B", IntToText(FixedToInt(lv_gas_count)));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_04C8A53E", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_04C8A53E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_EconomyValue_Init () {
    libA8FDA37D_gt_UT_EconomyValue = TriggerCreate("libA8FDA37D_gt_UT_EconomyValue_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_EconomyValue, c_playerAny, "-val", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Worker Saturation
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_WorkerSaturation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_worker_count;
    int lv_saturation_count;

    // Automatic Variable Declarations
    unitgroup auto48BAEDB8_g;
    int auto48BAEDB8_u;
    unit auto48BAEDB8_var;
    unitgroup auto7AC3F871_g;
    int auto7AC3F871_u;
    unit auto7AC3F871_var;

    // Variable Initialization
    lv_saturation_count = 48;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SISCV") || (UnitGetType(EventUnitCreatedUnit()) == "DehakaDrone") || (UnitGetType(EventUnitCreatedUnit()) == "HHSCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto48BAEDB8_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto48BAEDB8_u = UnitGroupCount(auto48BAEDB8_g, c_unitCountAll);
    for (;; auto48BAEDB8_u -= 1) {
        auto48BAEDB8_var = UnitGroupUnitFromEnd(auto48BAEDB8_g, auto48BAEDB8_u);
        if (auto48BAEDB8_var == null) { break; }
        if (((UnitGetType(auto48BAEDB8_var) == "AutomatedRefinery") || (UnitGetType(auto48BAEDB8_var) == "AutomatedAssimilator"))) {
            lv_saturation_count = 36;
        }

    }
    auto7AC3F871_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7AC3F871_u = UnitGroupCount(auto7AC3F871_g, c_unitCountAll);
    for (;; auto7AC3F871_u -= 1) {
        auto7AC3F871_var = UnitGroupUnitFromEnd(auto7AC3F871_g, auto7AC3F871_u);
        if (auto7AC3F871_var == null) { break; }
        if (((UnitGetType(auto7AC3F871_var) == "SCV") || (UnitGetType(auto7AC3F871_var) == "Probe") || (UnitGetType(auto7AC3F871_var) == "Drone") || (UnitGetType(auto7AC3F871_var) == "SISCV") || (UnitGetType(auto7AC3F871_var) == "DehakaDrone") || (UnitGetType(auto7AC3F871_var) == "HHSCV"))) {
            lv_worker_count = (lv_worker_count+1);
            if ((lv_worker_count >= lv_saturation_count)) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_10F5C814", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_10F5C814"));
                TriggerExecute(libA8FDA37D_gt_UT_EconomyValue, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_BF800A87"));
                SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_WorkerSaturation_Init () {
    libA8FDA37D_gt_UT_WorkerSaturation = TriggerCreate("libA8FDA37D_gt_UT_WorkerSaturation_Func");
    TriggerEnable(libA8FDA37D_gt_UT_WorkerSaturation, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_WorkerSaturation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 1) || (UnitGetOwner(EventUnitProgressUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastConstruction_Init () {
    libA8FDA37D_gt_UT_FastConstruction = TriggerCreate("libA8FDA37D_gt_UT_FastConstruction_Func");
    TriggerEnable(libA8FDA37D_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(libA8FDA37D_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastTrain_Init () {
    libA8FDA37D_gt_UT_FastTrain = TriggerCreate("libA8FDA37D_gt_UT_FastTrain_Func");
    TriggerEnable(libA8FDA37D_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(libA8FDA37D_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastResearch_Init () {
    libA8FDA37D_gt_UT_FastResearch = TriggerCreate("libA8FDA37D_gt_UT_FastResearch_Func");
    TriggerEnable(libA8FDA37D_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(libA8FDA37D_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastArrm_Init () {
    libA8FDA37D_gt_UT_FastArrm = TriggerCreate("libA8FDA37D_gt_UT_FastArrm_Func");
    TriggerEnable(libA8FDA37D_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(libA8FDA37D_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastRevive_Init () {
    libA8FDA37D_gt_UT_FastRevive = TriggerCreate("libA8FDA37D_gt_UT_FastRevive_Func");
    TriggerEnable(libA8FDA37D_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(libA8FDA37D_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_FastBuildCheat == false)) {
        libA8FDA37D_gv_uT_FastBuildCheat = true;
        TechTreeUpgradeAddLevel(1, "FastBuild", 1);
        TechTreeUpgradeAddLevel(2, "FastBuild", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_E873E6B7"));
        TriggerEnable(libA8FDA37D_gt_UT_FastArrm, true);
        TriggerEnable(libA8FDA37D_gt_UT_FastConstruction, true);
        TriggerEnable(libA8FDA37D_gt_UT_FastResearch, true);
        TriggerEnable(libA8FDA37D_gt_UT_FastRevive, true);
        TriggerEnable(libA8FDA37D_gt_UT_FastTrain, true);
    }
    else {
        libA8FDA37D_gv_uT_FastBuildCheat = false;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "FastBuild", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(2, "FastBuild", 0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_462733E2"));
        TriggerEnable(libA8FDA37D_gt_UT_FastArrm, false);
        TriggerEnable(libA8FDA37D_gt_UT_FastConstruction, false);
        TriggerEnable(libA8FDA37D_gt_UT_FastResearch, false);
        TriggerEnable(libA8FDA37D_gt_UT_FastRevive, false);
        TriggerEnable(libA8FDA37D_gt_UT_FastTrain, false);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_FastBuild_Init () {
    libA8FDA37D_gt_UT_FastBuild = TriggerCreate("libA8FDA37D_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_encomps
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_encomps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_offsetBase = 50;
    int lv_offsetX;
    int lv_offsetY;
    const int lv_buttonSize = 54;
    int lv_iconSize;
    int lv_compositionCounter;
    int lv_iconCounter;
    string lv_enemyComp;
    color lv_color1;
    color lv_color2;
    color lv_color3;
    playergroup lv_vPG;

    // Automatic Variable Declarations
    fixed auto14F0FD5C_at;
    string auto9983694E_userType;
    int auto9983694E_i;
    const int autoC099B865_ae = 9;
    const int autoC099B865_ai = 1;
    int auto80DCE183_val;
    int auto3021EAB3_val;

    // Variable Initialization
    lv_iconSize = (lv_buttonSize-4);
    lv_enemyComp = "BioMechStar";
    lv_color1 = Color(1.57, 55.69, 100.00);
    lv_color2 = Color(0.00, 80.39, 22.75);
    lv_color3 = Color(90.59, 33.73, 12.16);
    lv_vPG = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 2.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        auto14F0FD5C_at = 0;
        while (!((GameGetMissionTime() >= 2.0)) && auto14F0FD5C_at <= 5.0) {
            Wait(0.5, c_timeGame);
            auto14F0FD5C_at = auto14F0FD5C_at + 0.5;
        }
        TriggerEnable(TriggerGetCurrent(), true);
    }

    if ((DialogIsVisible(libA8FDA37D_gv_uT_encompsDialogs, EventPlayer()) == true)) {
        DialogSetVisible(libA8FDA37D_gv_uT_encompsDialogs, lv_vPG, false);
        libNtve_gf_HideGameUI(true, lv_vPG);
        return true;
    }

    if ((libA8FDA37D_gv_uT_encompsDialogs != c_invalidDialogId)) {
        DialogSetVisible(libA8FDA37D_gv_uT_encompsDialogs, lv_vPG, true);
        libNtve_gf_HideGameUI(false, lv_vPG);
        return true;
    }

    libNtve_gf_HideGameUI(false, lv_vPG);
    DialogCreate(1920, 1120, c_anchorCenter, 0, -10, false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_vPG, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libA8FDA37D_gv_uT_encompsDialogs = DialogLastCreated();
    auto9983694E_userType = "XUT_encomps_CoopEnemyUnitsFormation";
    auto9983694E_i = 1;
    for ( ; auto9983694E_i <= UserDataInstanceCount(auto9983694E_userType) ; auto9983694E_i += 1 ) {
        lv_enemyComp = UserDataInstance(auto9983694E_userType, auto9983694E_i);
        lv_iconCounter = 1;
        for ( ; ( (autoC099B865_ai >= 0 && lv_iconCounter <= autoC099B865_ae) || (autoC099B865_ai < 0 && lv_iconCounter >= autoC099B865_ae) ) ; lv_iconCounter += autoC099B865_ai ) {
            if ((UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter) >= 1)) {
                lv_offsetX = (lv_offsetBase+lv_buttonSize*(lv_iconCounter - 1) - 10);
                lv_offsetY = (lv_offsetBase+lv_buttonSize*lv_compositionCounter);
                auto80DCE183_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto80DCE183_val == 1) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonP");
                }
                else if (auto80DCE183_val == 2) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonT");
                }
                else if (auto80DCE183_val == 3) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonZ");
                }
                else {
                }
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonSize, lv_buttonSize);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_offsetX, lv_offsetY);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 33.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_iconSize, lv_iconSize, c_anchorTop, lv_offsetX, lv_offsetY, StringToText(""), UserDataGetImagePath("XUT_encomps_CoopEnemyUnits", UserDataInstance("XUT_encomps_CoopEnemyUnits", UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter)), "Unit", 1), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EnemyCompStyle", PlayerGroupAll());
                auto3021EAB3_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto3021EAB3_val == 1) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color1, PlayerGroupAll());
                }
                else if (auto3021EAB3_val == 2) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color2, PlayerGroupAll());
                }
                else if (auto3021EAB3_val == 3) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color3, PlayerGroupAll());
                }
                else {
                }
            }
            else {
                break;
            }
        }
        lv_compositionCounter = (lv_compositionCounter+1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_encomps_Init () {
    libA8FDA37D_gt_UT_encomps = TriggerCreate("libA8FDA37D_gt_UT_encomps_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_encomps, c_playerAny, "-encomps", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-sbank
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_sbank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Bank_SaveBank(EventPlayer(), StringWord(EventChatMessage(false), 2), libA8FDA37D_gv_uT_Bank_DefaultBankName);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_3235147C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_sbank_Init () {
    libA8FDA37D_gt_UT_sbank = TriggerCreate("libA8FDA37D_gt_UT_sbank_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_sbank, c_playerAny, "-sbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-rbank
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_rbank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vPG = PlayerGroupAll();
    }
    else {
        lv_vPG = PlayerGroupSingle(StringToInt(StringWord(EventChatMessage(false), 3)));
    }
    libA8FDA37D_gf_UT_Bank_RestoreBank(EventPlayer(), StringWord(EventChatMessage(false), 2), lv_vPG, libA8FDA37D_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_rbank_Init () {
    libA8FDA37D_gt_UT_rbank = TriggerCreate("libA8FDA37D_gt_UT_rbank_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_rbank, c_playerAny, "-rbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill Init
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_RefillInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libA8FDA37D_gf_UT_Bank_SaveBank(1, libA8FDA37D_gv_uT_Bank_RefillSectionName, libA8FDA37D_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_RefillInit_Init () {
    libA8FDA37D_gt_UT_RefillInit = TriggerCreate("libA8FDA37D_gt_UT_RefillInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Refill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Bank_RestoreBank(1, libA8FDA37D_gv_uT_Bank_RefillSectionName, PlayerGroupAlliance(c_playerGroupEnemy, 1), libA8FDA37D_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Refill_Init () {
    libA8FDA37D_gt_UT_Refill = TriggerCreate("libA8FDA37D_gt_UT_Refill_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Refill, c_playerAny, "-refill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Replace
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Replace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vLife;
    unitgroup lv_vUG;
    int lv_vB;

    // Automatic Variable Declarations
    unitgroup autoFDDFF3EE_g;
    int autoFDDFF3EE_u;
    unit autoFDDFF3EE_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }

    autoFDDFF3EE_g = UnitGroup(UnitTypeFromString(StringWord(EventChatMessage(false), 2)), c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFDDFF3EE_u = UnitGroupCount(autoFDDFF3EE_g, c_unitCountAll);
    for (;; autoFDDFF3EE_u -= 1) {
        autoFDDFF3EE_var = UnitGroupUnitFromEnd(autoFDDFF3EE_g, autoFDDFF3EE_u);
        if (autoFDDFF3EE_var == null) { break; }
        if ((UnitGetType(autoFDDFF3EE_var) != "SoloDummy") && (autoFDDFF3EE_var != lib01833E95_gf_CM_PlayerGetGlobalCaster(1)) && (autoFDDFF3EE_var != lib01833E95_gf_CM_PlayerGetGlobalCaster(2)) && (UnitGroupHasUnit(lv_vUG, autoFDDFF3EE_var) == false)) {
            UnitIssueOrder(autoFDDFF3EE_var, Order(AbilityCommand("que1", 1)), c_orderQueueReplace);
            UnitCreate(1, UnitGetType(autoFDDFF3EE_var), c_unitCreateIgnorePlacement, UnitGetOwner(autoFDDFF3EE_var), UnitGetPosition(autoFDDFF3EE_var), UnitGetFacing(autoFDDFF3EE_var));
            UnitGroupAdd(lv_vUG, UnitLastCreated());
            libA8FDA37D_gf_UT_CopyProperties(autoFDDFF3EE_var, UnitLastCreated());
            UnitRemove(autoFDDFF3EE_var);
            lv_vB += 1;
        }

    }
    if ((lv_vB == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_2CE2D24D"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_21F6B4A8", "C", IntToText(lv_vB));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_21F6B4A8", "A", UnitTypeGetName((StringWord(EventChatMessage(false), 2))));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_21F6B4A8", "B", StringToText(StringWord(EventChatMessage(false), 2)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_21F6B4A8"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Replace_Init () {
    libA8FDA37D_gt_UT_Replace = TriggerCreate("libA8FDA37D_gt_UT_Replace_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Replace, c_playerAny, "-replace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_VoidRiftDebug
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_VoidRiftDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vTime;

    // Automatic Variable Declarations
    unitgroup auto068E3687_g;
    int auto068E3687_u;
    unit auto068E3687_var;
    const int autoDE17C8BB_n = 250;
    int autoDE17C8BB_i;
    const int auto0F00CC20_n = 10;
    int auto0F00CC20_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        auto068E3687_g = UnitGroup("ShapeSphere", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto068E3687_u = UnitGroupCount(auto068E3687_g, c_unitCountAll);
        for (;; auto068E3687_u -= 1) {
            auto068E3687_var = UnitGroupUnitFromEnd(auto068E3687_g, auto068E3687_u);
            if (auto068E3687_var == null) { break; }
            UnitRemove(auto068E3687_var);
        }
        TriggerStop(TriggerGetCurrent());
        return true;
    }

    lv_vTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    if (((lv_vTime >= 1) && (lv_vTime <= 30))) {
        lv_vTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    }
    else {
        lv_vTime = 15.0;
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_817519F2", "A", FixedToText(lv_vTime, 0));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_817519F2"));
    for (autoDE17C8BB_i = 1; autoDE17C8BB_i <= autoDE17C8BB_n; autoDE17C8BB_i += 1) {
        for (auto0F00CC20_i = 1; auto0F00CC20_i <= auto0F00CC20_n; auto0F00CC20_i += 1) {
            libA8FDA37D_gf_UT_VoidRiftDebugSpawn(1, lv_vTime);
            libA8FDA37D_gf_UT_VoidRiftDebugSpawn(2, lv_vTime);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_VoidRiftDebug_Init () {
    libA8FDA37D_gt_UT_VoidRiftDebug = TriggerCreate("libA8FDA37D_gt_UT_VoidRiftDebug_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_VoidRiftDebug, c_playerAny, "-voidrift", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfo
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_UnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto675E7332_g;
    int auto675E7332_u;
    unit auto675E7332_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_UnitInfoUpdate) == true)) {
        TriggerEnable(libA8FDA37D_gt_UT_UnitInfoUpdate, false);
        auto675E7332_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto675E7332_u = UnitGroupCount(auto675E7332_g, c_unitCountAll);
        for (;; auto675E7332_u -= 1) {
            auto675E7332_var = UnitGroupUnitFromEnd(auto675E7332_g, auto675E7332_u);
            if (auto675E7332_var == null) { break; }
            libA8FDA37D_gf_UT_RemoveUnitInfo(auto675E7332_var);
        }
    }
    else {
        TriggerEnable(libA8FDA37D_gt_UT_UnitInfoUpdate, true);
        TriggerEnable(lib860A1A1F_gt_MM_UnitDiesFix, true);
        TriggerEnable(lib860A1A1F_gt_MM_UnitRemovedFix, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_UnitInfo_Init () {
    libA8FDA37D_gt_UT_UnitInfo = TriggerCreate("libA8FDA37D_gt_UT_UnitInfo_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_UnitInfo, c_playerAny, "-unitinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfoUpdate
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_UnitInfoUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto20663C7A_g;
    int auto20663C7A_u;
    unit auto20663C7A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto20663C7A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto20663C7A_u = UnitGroupCount(auto20663C7A_g, c_unitCountAll);
    for (;; auto20663C7A_u -= 1) {
        auto20663C7A_var = UnitGroupUnitFromEnd(auto20663C7A_g, auto20663C7A_u);
        if (auto20663C7A_var == null) { break; }
        libA8FDA37D_gf_UT_UpdateUnitInfo(auto20663C7A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_UnitInfoUpdate_Init () {
    libA8FDA37D_gt_UT_UnitInfoUpdate = TriggerCreate("libA8FDA37D_gt_UT_UnitInfoUpdate_Func");
    TriggerEnable(libA8FDA37D_gt_UT_UnitInfoUpdate, false);
    TriggerAddEventTimePeriodic(libA8FDA37D_gt_UT_UnitInfoUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(libA8FDA37D_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_128FA8CB"));
    }
    else {
        TriggerEnable(libA8FDA37D_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_A3CD7C5D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_UI_Init () {
    libA8FDA37D_gt_UT_UI = TriggerCreate("libA8FDA37D_gt_UT_UI_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_UI, c_playerAny, "-ui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool auto5BC32443_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5BC32443_val = PlayerGroupHasPlayer(libA8FDA37D_gv_uT_UI_Hidden, EventPlayer());
    if (auto5BC32443_val == false) {
        PlayerGroupAdd(libA8FDA37D_gv_uT_UI_Hidden, EventPlayer());
        libCOUI_gf_CU_GPVisibilitySet(false, EventPlayer(), 1.0);
        DialogSetVisible(lib01833E95_gv_aF_TopBarIconsDialog, lv_vPGroup, false);
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, false);
        lv_vShowHide = false;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, -3000);
    }
    else if (auto5BC32443_val == true) {
        PlayerGroupRemove(libA8FDA37D_gv_uT_UI_Hidden, EventPlayer());
        libCOUI_gf_CU_GPVisibilitySet(true, EventPlayer(), 1.0);
        Wait(1.0, c_timeReal);
        DialogSetVisible(lib01833E95_gv_aF_TopBarIconsDialog, lv_vPGroup, true);
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, true);
        lv_vShowHide = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, 0);
    }
    else {
    }
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeConsolePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeSupply, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeMenuBar, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeResourcePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeObjectivePanel, lv_vShowHide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_UI_CtrlH_Init () {
    libA8FDA37D_gt_UT_UI_CtrlH = TriggerCreate("libA8FDA37D_gt_UT_UI_CtrlH_Func");
    TriggerEnable(libA8FDA37D_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonMonitor
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ButtonMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_ButtonUsagePlayerGroup, EventPlayer()) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_45FFA85F"));
        PlayerGroupRemove(libA8FDA37D_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        if ((PlayerGroupCount(libA8FDA37D_gv_uT_ButtonUsagePlayerGroup) == 0)) {
            TriggerEnable(libA8FDA37D_gt_UT_ButtonUsage, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_DDE2ED4E"));
        PlayerGroupAdd(libA8FDA37D_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        TriggerEnable(libA8FDA37D_gt_UT_ButtonUsage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ButtonMonitor_Init () {
    libA8FDA37D_gt_UT_ButtonMonitor = TriggerCreate("libA8FDA37D_gt_UT_ButtonMonitor_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ButtonMonitor, c_playerAny, "-buttons", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonUsage
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ButtonUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vButton = EventButtonPressed();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_35CC670B", "A", StringToText((lv_vButton)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_35CC670B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ButtonUsage_Init () {
    libA8FDA37D_gt_UT_ButtonUsage = TriggerCreate("libA8FDA37D_gt_UT_ButtonUsage_Func");
    TriggerEnable(libA8FDA37D_gt_UT_ButtonUsage, false);
    TriggerAddEventButtonPressed(libA8FDA37D_gt_UT_ButtonUsage, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_HotkeyChange
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_HotkeyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIdx;

    // Automatic Variable Declarations
    const int autoA0A40AC2_ae = libA8FDA37D_gv_uT_HotkeyStoreLength;
    const int autoA0A40AC2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((StringContains(StringWord(EventChatMessage(false), 3), "Ctrl+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Alt+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Shift+", c_stringAnywhere, c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_0371A0B0"));
        return true;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_6AE78EF3", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_6AE78EF3", "B", StringToText(StringWord(EventChatMessage(false), 3)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_6AE78EF3"));
    }
    CatalogFieldValueSet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Hotkey", EventPlayer(), ("Letter/" + StringWord(EventChatMessage(false), 3)));
    lv_vIdx = 1;
    for ( ; ( (autoA0A40AC2_ai >= 0 && lv_vIdx <= autoA0A40AC2_ae) || (autoA0A40AC2_ai < 0 && lv_vIdx >= autoA0A40AC2_ae) ) ; lv_vIdx += autoA0A40AC2_ai ) {
        if ((libA8FDA37D_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] == "")) {
            libA8FDA37D_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 2);
            libA8FDA37D_gv_uT_HotkeyToStoreValue[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 3);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_HotkeyChange_Init () {
    libA8FDA37D_gt_UT_HotkeyChange = TriggerCreate("libA8FDA37D_gt_UT_HotkeyChange_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_HotkeyChange, c_playerAny, "-hotkey", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Godmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6C9936D4_g;
    int auto6C9936D4_u;
    unit auto6C9936D4_var;
    unitgroup auto66E3EA8D_g;
    int auto66E3EA8D_u;
    unit auto66E3EA8D_var;
    unitgroup auto0AF4A5E1_g;
    int auto0AF4A5E1_u;
    unit auto0AF4A5E1_var;
    unitgroup auto80721A69_g;
    int auto80721A69_u;
    unit auto80721A69_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_GodMode == false)) {
        libA8FDA37D_gv_uT_GodMode = true;
        TriggerEnable(libA8FDA37D_gt_UT_Godmode_unit_created, true);
        auto0AF4A5E1_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0AF4A5E1_u = UnitGroupCount(auto0AF4A5E1_g, c_unitCountAll);
        for (;; auto0AF4A5E1_u -= 1) {
            auto0AF4A5E1_var = UnitGroupUnitFromEnd(auto0AF4A5E1_g, auto0AF4A5E1_u);
            if (auto0AF4A5E1_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto0AF4A5E1_var, true);
        }
        auto80721A69_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto80721A69_u = UnitGroupCount(auto80721A69_g, c_unitCountAll);
        for (;; auto80721A69_u -= 1) {
            auto80721A69_var = UnitGroupUnitFromEnd(auto80721A69_g, auto80721A69_u);
            if (auto80721A69_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto80721A69_var, true);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_DD3FCEC2"));
    }
    else {
        libA8FDA37D_gv_uT_GodMode = false;
        TriggerEnable(libA8FDA37D_gt_UT_Godmode_unit_created, false);
        auto6C9936D4_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6C9936D4_u = UnitGroupCount(auto6C9936D4_g, c_unitCountAll);
        for (;; auto6C9936D4_u -= 1) {
            auto6C9936D4_var = UnitGroupUnitFromEnd(auto6C9936D4_g, auto6C9936D4_u);
            if (auto6C9936D4_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto6C9936D4_var, false);
        }
        auto66E3EA8D_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto66E3EA8D_u = UnitGroupCount(auto66E3EA8D_g, c_unitCountAll);
        for (;; auto66E3EA8D_u -= 1) {
            auto66E3EA8D_var = UnitGroupUnitFromEnd(auto66E3EA8D_g, auto66E3EA8D_u);
            if (auto66E3EA8D_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto66E3EA8D_var, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_6EE2C253"));
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Godmode_Init () {
    libA8FDA37D_gt_UT_Godmode = TriggerCreate("libA8FDA37D_gt_UT_Godmode_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Godmode, c_playerAny, "-god", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode_unit_created
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Godmode_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gv_uT_GodMode == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Godmode_unit_created_Init () {
    libA8FDA37D_gt_UT_Godmode_unit_created = TriggerCreate("libA8FDA37D_gt_UT_Godmode_unit_created_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Godmode_unit_created, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_Godmode_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DifficultySet
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DifficultySet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxplayers;

    // Automatic Variable Declarations
    string autoF9E0E35E_val;
    const int auto101F55A8_ae = 4;
    int auto101F55A8_var;
    int autoFC1EF6FB_ae;
    int autoFC1EF6FB_var;
    int auto0CC15CF1_ae;
    int auto0CC15CF1_var;
    int auto49285E98_ae;
    int auto49285E98_var;
    int autoCE0FC14D_ae;
    int autoCE0FC14D_var;

    // Variable Initialization
    lv_maxplayers = 14;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9E0E35E_val = StringWord(EventChatMessage(false), 2);
    if (autoF9E0E35E_val == "casual") {
        autoFC1EF6FB_ae = lv_maxplayers;
        autoFC1EF6FB_var = 1;
        for ( ; autoFC1EF6FB_var <= autoFC1EF6FB_ae; autoFC1EF6FB_var += 1 ) {
            PlayerSetDifficulty(autoFC1EF6FB_var, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_A8FDA37D_E9371190") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoF9E0E35E_val == "normal") {
        auto0CC15CF1_ae = lv_maxplayers;
        auto0CC15CF1_var = 1;
        for ( ; auto0CC15CF1_var <= auto0CC15CF1_ae; auto0CC15CF1_var += 1 ) {
            PlayerSetDifficulty(auto0CC15CF1_var, 2);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_A8FDA37D_76470557") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoF9E0E35E_val == "hard") {
        auto49285E98_ae = lv_maxplayers;
        auto49285E98_var = 1;
        for ( ; auto49285E98_var <= auto49285E98_ae; auto49285E98_var += 1 ) {
            PlayerSetDifficulty(auto49285E98_var, 3);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_A8FDA37D_5183011E") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else if (autoF9E0E35E_val == "brutal") {
        autoCE0FC14D_ae = lv_maxplayers;
        autoCE0FC14D_var = 1;
        for ( ; autoCE0FC14D_var <= autoCE0FC14D_ae; autoCE0FC14D_var += 1 ) {
            PlayerSetDifficulty(autoCE0FC14D_var, 4);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_A8FDA37D_B7726F5B") + StringToText(StringWord(EventChatMessage(false), 2))));
    }
    else {
        auto101F55A8_var = 1;
        for ( ; auto101F55A8_var <= auto101F55A8_ae; auto101F55A8_var += 1 ) {
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0C3DE458", "A", IntToText(auto101F55A8_var));
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0C3DE458", "B", IntToText(libA8FDA37D_gf_UT_DiffForPlayer(auto101F55A8_var)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_0C3DE458"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_35EF6B20"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DifficultySet_Init () {
    libA8FDA37D_gt_UT_DifficultySet = TriggerCreate("libA8FDA37D_gt_UT_DifficultySet_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DifficultySet, c_playerAny, "-diff", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AlarakCDR
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AlarakCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vRange = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRange <= 15.0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_21F9FE4F"));
        lv_vRange = 0.0;
        PlayerGroupRemove(libA8FDA37D_gv_uT_AlarakCDRPlayers, EventPlayer());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B6699809", "A", FixedToText(lv_vRange, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B6699809"));
        libA8FDA37D_gv_uT_AlarakCDRRange = lv_vRange;
        PlayerGroupAdd(libA8FDA37D_gv_uT_AlarakCDRPlayers, EventPlayer());
        TriggerEnable(libA8FDA37D_gt_UT_AlarakCDREffectUsed, true);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AlarakCDR_Init () {
    libA8FDA37D_gt_UT_AlarakCDR = TriggerCreate("libA8FDA37D_gt_UT_AlarakCDR_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AlarakCDR, c_playerAny, "-alarakcdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AlarakCDR EffectUsed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AlarakCDREffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1BCD726D_g;
    int auto1BCD726D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1BCD726D_g = libA8FDA37D_gv_uT_AlarakCDRPlayers;
    auto1BCD726D_var = -1;
    while (true) {
        auto1BCD726D_var = PlayerGroupNextPlayer(auto1BCD726D_g, auto1BCD726D_var);
        if (auto1BCD726D_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup("AlarakCoop", auto1BCD726D_var, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libA8FDA37D_gv_uT_AlarakCDRRange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            libNtve_gf_PlayerRemoveCooldown(auto1BCD726D_var, "Abil/AlarakACDeadlyCharge");
            libNtve_gf_PlayerRemoveCooldown(auto1BCD726D_var, "Abil/AlarakKnockback");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AlarakCDREffectUsed_Init () {
    libA8FDA37D_gt_UT_AlarakCDREffectUsed = TriggerCreate("libA8FDA37D_gt_UT_AlarakCDREffectUsed_Func");
    TriggerEnable(libA8FDA37D_gt_UT_AlarakCDREffectUsed, false);
    TriggerAddEventPlayerEffectUsed(libA8FDA37D_gt_UT_AlarakCDREffectUsed, c_playerAny, "AlarakSupplicantSacrificeCDR");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TopRefresh
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_TopRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto068089C7_val;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_FB8350B2"));
    auto068089C7_val = libCOOC_gf_ActiveCommanderForPlayer(EventPlayer());
    if (auto068089C7_val == "ProtossZeratul") {
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), false);
        libCOUI_gf_CU_GPInitZeratul(EventPlayer());
        libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], EventPlayer());
        libA8FDA37D_gf_UT_RefreshTopBarZeratul(EventPlayer());
    }
    else if (auto068089C7_val == "TerranTychus") {
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), false);
        libCOUI_gf_CU_GPInitTychus(EventPlayer());
        libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], EventPlayer());
        DialogControlSetVisible(libCOUI_gv_cU_GPPanel[EventPlayer()], PlayerGroupAll(), true);
        libA8FDA37D_gf_UT_RefreshTopBarTychus(EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_TopRefresh_Init () {
    libA8FDA37D_gt_UT_TopRefresh = TriggerCreate("libA8FDA37D_gt_UT_TopRefresh_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_TopRefresh, c_playerAny, "-toprefresh", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AIChoice
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AIChoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_AIChoiceDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AIChoice_Init () {
    libA8FDA37D_gt_UT_AIChoice = TriggerCreate("libA8FDA37D_gt_UT_AIChoice_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AIChoice, c_playerAny, "-aichoice", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AIChoiceOK_Player02
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AIChoiceOK_Player02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_AIChoiceOKButton))) {
            return false;
        }

        if (!((EventPlayer() == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.05, c_timeReal);
    libCOUI_gf_CU_AIChoiceClose(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AIChoiceOK_Player02_Init () {
    libA8FDA37D_gt_UT_AIChoiceOK_Player02 = TriggerCreate("libA8FDA37D_gt_UT_AIChoiceOK_Player02_Func");
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_AIChoiceOK_Player02, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trace
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Trace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_Tracing) == true)) {
        TriggerEnable(libA8FDA37D_gt_UT_Tracing, false);
        TriggerEnable(libA8FDA37D_gt_UT_DeTracing, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_D7103AB9"));
    }
    else {
        TriggerEnable(libA8FDA37D_gt_UT_Tracing, true);
        TriggerEnable(libA8FDA37D_gt_UT_DeTracing, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_E1BB9A89"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Trace_Init () {
    libA8FDA37D_gt_UT_Trace = TriggerCreate("libA8FDA37D_gt_UT_Trace_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Trace, c_playerAny, "-trace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Tracing
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Tracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Tracing_Init () {
    libA8FDA37D_gt_UT_Tracing = TriggerCreate("libA8FDA37D_gt_UT_Tracing_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Tracing, false);
    TriggerAddEventPlayerEffectUsed(libA8FDA37D_gt_UT_Tracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DeTracing
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DeTracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DeTracing_Init () {
    libA8FDA37D_gt_UT_DeTracing = TriggerCreate("libA8FDA37D_gt_UT_DeTracing_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DeTracing, false);
    TriggerAddEventPlayerEffectUsed(libA8FDA37D_gt_UT_DeTracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CopyPaste
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_CopyPaste_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_CTRLC) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_9AE2AFF9"));
        TriggerEnable(libA8FDA37D_gt_UT_CTRLC, false);
        TriggerEnable(libA8FDA37D_gt_UT_CTRLV, false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_281E1265"));
        TriggerEnable(libA8FDA37D_gt_UT_CTRLC, true);
        TriggerEnable(libA8FDA37D_gt_UT_CTRLV, true);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_CopyPaste_Init () {
    libA8FDA37D_gt_UT_CopyPaste = TriggerCreate("libA8FDA37D_gt_UT_CopyPaste_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_CopyPaste, c_playerAny, "-copypaste", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+C
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vSelectedUnits;
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    unitgroup autoFA214EBC_g;
    int autoFA214EBC_u;
    unit autoFA214EBC_var;
    int auto13FF88F1_ae;
    const int auto13FF88F1_ai = 1;
    int auto2556161E_ae;
    const int auto2556161E_ai = 1;
    int autoBFBA388B_ae;
    const int autoBFBA388B_ai = 1;

    // Variable Initialization
    lv_vSelectedUnits = UnitGroupSelected(EventPlayer());
    lv_vCenter = UnitGroupCenterOfGroup(UnitGroupSelected(1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA214EBC_g = lv_vSelectedUnits;
    autoFA214EBC_u = UnitGroupCount(autoFA214EBC_g, c_unitCountAll);
    for (;; autoFA214EBC_u -= 1) {
        autoFA214EBC_var = UnitGroupUnitFromEnd(autoFA214EBC_g, autoFA214EBC_u);
        if (autoFA214EBC_var == null) { break; }
        lv_vA += 1;
        DataTableSetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)), (UnitGetType(autoFA214EBC_var)));
        DataTableSetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA)), UnitGetOwner(autoFA214EBC_var));
        DataTableSetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA)), UnitGetFacing(autoFA214EBC_var));
        DataTableSetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)), AngleBetweenPoints(lv_vCenter, UnitGetPosition(autoFA214EBC_var)));
        DataTableSetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA)), DistanceBetweenPoints(UnitGetPosition(autoFA214EBC_var), lv_vCenter));
        DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropLife, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropLifeMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropEnergy, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropEnergyMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropShields, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoFA214EBC_var, c_unitPropShieldsMax, c_unitPropCurrent));
        DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)), UnitBehaviorCountAll(autoFA214EBC_var));
        auto13FF88F1_ae = UnitBehaviorCountAll(autoFA214EBC_var);
        lv_vB = 0;
        for ( ; ( (auto13FF88F1_ai >= 0 && lv_vB <= auto13FF88F1_ae) || (auto13FF88F1_ai < 0 && lv_vB >= auto13FF88F1_ae) ) ; lv_vB += auto13FF88F1_ai ) {
            DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitBehaviorGet(autoFA214EBC_var, lv_vB)));
            DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s"), UnitBehaviorCount(autoFA214EBC_var, UnitBehaviorGet(autoFA214EBC_var, lv_vB)));
        }
        DataTableSetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)), UnitCargoValue(autoFA214EBC_var, c_unitCargoUnitCount));
        auto2556161E_ae = UnitCargoValue(autoFA214EBC_var, c_unitCargoUnitCount);
        lv_vB = 0;
        for ( ; ( (auto2556161E_ai >= 0 && lv_vB <= auto2556161E_ae) || (auto2556161E_ai < 0 && lv_vB >= auto2556161E_ae) ) ; lv_vB += auto2556161E_ai ) {
            DataTableSetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitGetType(UnitCargo(autoFA214EBC_var, lv_vB))));
            DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitBehaviorCountAll(UnitCargo(autoFA214EBC_var, lv_vB)));
            DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitGetPropertyFixed(UnitCargo(autoFA214EBC_var, lv_vB), c_unitPropLifePercent, c_unitPropCurrent));
            autoBFBA388B_ae = UnitBehaviorCountAll(UnitCargo(autoFA214EBC_var, lv_vB));
            lv_vC = 0;
            for ( ; ( (autoBFBA388B_ai >= 0 && lv_vC <= autoBFBA388B_ae) || (autoBFBA388B_ai < 0 && lv_vC >= autoBFBA388B_ae) ) ; lv_vC += autoBFBA388B_ai ) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)), (UnitBehaviorGet(UnitCargo(autoFA214EBC_var, lv_vB), lv_vC)));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s"), UnitBehaviorCount(UnitCargo(autoFA214EBC_var, lv_vB), UnitBehaviorGet(UnitCargo(autoFA214EBC_var, lv_vB), lv_vC)));
            }
        }
    }
    DataTableSetInt(true, ("CopyPaste_UnitCount"), lv_vA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_CTRLC_Init () {
    libA8FDA37D_gt_UT_CTRLC = TriggerCreate("libA8FDA37D_gt_UT_CTRLC_Func");
    TriggerEnable(libA8FDA37D_gt_UT_CTRLC, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+V
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_CTRLV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    int auto04F994E0_ae;
    int auto04F994E0_var;
    int auto8CBBCF75_ae;
    const int auto8CBBCF75_ai = 1;
    int auto9461C824_ae;
    const int auto9461C824_ai = 1;
    int autoDB9FB285_ae;
    const int autoDB9FB285_ai = 1;

    // Variable Initialization
    lv_vCenter = CameraGetTarget(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto04F994E0_ae = DataTableGetInt(true, "CopyPaste_UnitCount");
    auto04F994E0_var = 1;
    for ( ; auto04F994E0_var <= auto04F994E0_ae; auto04F994E0_var += 1 ) {
        lv_vA += 1;
        UnitCreate(1, UnitTypeFromString(DataTableGetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)))), 0, DataTableGetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA))), PointWithOffsetPolar(lv_vCenter, DataTableGetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA))), DataTableGetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)))), DataTableGetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA))));
        auto8CBBCF75_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)));
        lv_vB = 0;
        for ( ; ( (auto8CBBCF75_ai >= 0 && lv_vB <= auto8CBBCF75_ae) || (auto8CBBCF75_ai < 0 && lv_vB >= auto8CBBCF75_ae) ) ; lv_vB += auto8CBBCF75_ai ) {
            UnitBehaviorAddPlayer(UnitLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), UnitGetOwner(UnitLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s")));
        }
        auto9461C824_ae = DataTableGetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)));
        lv_vB = 1;
        for ( ; ( (auto9461C824_ai >= 0 && lv_vB <= auto9461C824_ae) || (auto9461C824_ai < 0 && lv_vB >= auto9461C824_ae) ) ; lv_vB += auto9461C824_ai ) {
            UnitCargoCreate(UnitLastCreated(), UnitTypeFromString(DataTableGetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), 1);
            autoDB9FB285_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)));
            lv_vC = 0;
            for ( ; ( (autoDB9FB285_ai >= 0 && lv_vC <= autoDB9FB285_ae) || (autoDB9FB285_ai < 0 && lv_vC >= autoDB9FB285_ae) ) ; lv_vC += autoDB9FB285_ai ) {
                UnitBehaviorAddPlayer(UnitCargoLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)))), UnitGetOwner(UnitCargoLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s")));
            }
            UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropLifePercent, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB))));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, DataTableGetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, DataTableGetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, DataTableGetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, DataTableGetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, DataTableGetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_CTRLV_Init () {
    libA8FDA37D_gt_UT_CTRLV = TriggerCreate("libA8FDA37D_gt_UT_CTRLV_Func");
    TriggerEnable(libA8FDA37D_gt_UT_CTRLV, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_CTRLV, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheck
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_PathCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_PathCheckTAB) == false)) {
        TriggerEnable(libA8FDA37D_gt_UT_PathCheckTAB, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_0299FB77"));
    }
    else {
        TriggerEnable(libA8FDA37D_gt_UT_PathCheckTAB, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_E0FE90E2"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_PathCheck_Init () {
    libA8FDA37D_gt_UT_PathCheck = TriggerCreate("libA8FDA37D_gt_UT_PathCheck_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_PathCheck, c_playerAny, "-pathcheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheckTAB
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_PathCheckTAB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    point lv_vPoint;
    bool lv_vPointsConnectedByPathing;
    int lv_vPathingCostBetweenPoints;
    bool lv_vUnitCanPathToPoint11000;
    bool lv_vPointIsPassable;
    fixed lv_vPathingCostBetweenPointsReal;
    fixed lv_vAIPathingCostUnit;
    int lv_vGround;
    text lv_vGroundType;

    // Automatic Variable Declarations
    int auto075B79E8_val;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_vPoint = CameraGetTarget(EventPlayer());
    lv_vPointsConnectedByPathing = PointPathingIsConnected(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vPathingCostBetweenPoints = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vUnitCanPathToPoint11000 = UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 1000.0);
    lv_vPointIsPassable = PointPathingPassable(lv_vPoint);
    lv_vPathingCostBetweenPointsReal = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vAIPathingCostUnit = AIPathingCostUnit(lv_vUnit, lv_vPoint, c_includeAllBuildings);
    lv_vGround = PathingType(lv_vPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    auto075B79E8_val = lv_vGround;
    if (auto075B79E8_val == c_pathingGround) {
        lv_vGroundType = StringExternal("Param/Value/lib_A8FDA37D_B3975B2A");
    }
    else if (auto075B79E8_val == c_pathingCliff) {
        lv_vGroundType = StringExternal("Param/Value/lib_A8FDA37D_2BA9C0C4");
    }
    else if (auto075B79E8_val == c_pathingBuilding) {
        lv_vGroundType = StringExternal("Param/Value/lib_A8FDA37D_814FA17C");
    }
    else if (auto075B79E8_val == c_pathingUnpathable) {
        lv_vGroundType = StringExternal("Param/Value/lib_A8FDA37D_9D4B9E9C");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "B", IntToText(lv_vPathingCostBetweenPoints));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "C", libNtve_gf_ConvertBooleanToText(lv_vUnitCanPathToPoint11000));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "G", FixedToText(lv_vAIPathingCostUnit, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "A", libNtve_gf_ConvertBooleanToText(lv_vPointsConnectedByPathing));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "E", libNtve_gf_ConvertBooleanToText(lv_vPointIsPassable));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0D44BE84", "D", lv_vGroundType);
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_0D44BE84"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_PathCheckTAB_Init () {
    libA8FDA37D_gt_UT_PathCheckTAB = TriggerCreate("libA8FDA37D_gt_UT_PathCheckTAB_Func");
    TriggerEnable(libA8FDA37D_gt_UT_PathCheckTAB, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_PathCheckTAB, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ArtSpawn
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ArtSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const string lv_vUnitType = "ShapeSphere";
    int lv_vIndex;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int autoB14BA2AC_ae = 15;
    int autoB14BA2AC_var;
    unitgroup autoA836F82A_g;
    int autoA836F82A_u;
    unit autoA836F82A_var;
    const int auto1A3460ED_n = 200;
    int auto1A3460ED_i;
    int auto1B17DC68_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(PlayerGroupSingle(EventPlayer()), c_unitColorStyleNormal);
    UIUnitColorStyleClearOverride(PlayerGroupSingle(EventPlayer()));
    autoB14BA2AC_var = 1;
    for ( ; autoB14BA2AC_var <= autoB14BA2AC_ae; autoB14BA2AC_var += 1 ) {
        libNtve_gf_SetAlliance(autoB14BA2AC_var, libA8FDA37D_gv_uT_ArtSpawnPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        autoA836F82A_g = UnitGroup(null, libA8FDA37D_gv_uT_ArtSpawnPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA836F82A_u = UnitGroupCount(autoA836F82A_g, c_unitCountAll);
        for (;; autoA836F82A_u -= 1) {
            autoA836F82A_var = UnitGroupUnitFromEnd(autoA836F82A_g, autoA836F82A_u);
            if (autoA836F82A_var == null) { break; }
            UnitRemove(autoA836F82A_var);
        }
    }
    else {
        for (auto1A3460ED_i = 1; auto1A3460ED_i <= auto1A3460ED_n; auto1A3460ED_i += 1) {
            lv_vIndex = RandomInt(1, 3);
            auto1B17DC68_val = lv_vIndex;
            if (auto1B17DC68_val == 1) {
                libA8FDA37D_gv_uT_ArtSpawnColor = 6;
            }
            else if (auto1B17DC68_val == 2) {
                libA8FDA37D_gv_uT_ArtSpawnColor = 4;
            }
            else {
                libA8FDA37D_gv_uT_ArtSpawnColor = 3;
            }
            lv_vPoint = libA8FDA37D_gf_UT_Zeratul_FindArtifactPlacementPointNewDebug(lv_vIndex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ArtSpawn_Init () {
    libA8FDA37D_gt_UT_ArtSpawn = TriggerCreate("libA8FDA37D_gt_UT_ArtSpawn_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ArtSpawn, c_playerAny, "-artspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pie
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Pie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_Pie[1][EventPlayer()] == c_invalidDialogId) && (libA8FDA37D_gv_uT_Pie[2][EventPlayer()] == c_invalidDialogId)) {
        libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
        libA8FDA37D_gf_UT_CreatePieChartfromDamageLog(1, -350, 50, c_anchorCenter, 0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libA8FDA37D_gv_uT_Pie[1][EventPlayer()] = DialogLastCreated();
        libA8FDA37D_gf_UT_CreatePieChartfromDamageLog(2, 350, 50, c_anchorCenter, 8);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libA8FDA37D_gv_uT_Pie[2][EventPlayer()] = DialogLastCreated();
    }
    else {
        DialogDestroy(libA8FDA37D_gv_uT_Pie[1][EventPlayer()]);
        libA8FDA37D_gv_uT_Pie[1][EventPlayer()] = c_invalidDialogId;
        DialogDestroy(libA8FDA37D_gv_uT_Pie[2][EventPlayer()]);
        libA8FDA37D_gv_uT_Pie[2][EventPlayer()] = c_invalidDialogId;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Pie_Init () {
    libA8FDA37D_gt_UT_Pie = TriggerCreate("libA8FDA37D_gt_UT_Pie_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Pie, c_playerAny, "-pie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Light
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Light_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libA8FDA37D_gt_UT_Plus) == false)) {
        TriggerEnable(libA8FDA37D_gt_UT_Plus, true);
        TriggerEnable(libA8FDA37D_gt_UT_Minus, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_37D3CDF5"));
        GameSetSpeedLocked(true);
    }
    else {
        TriggerEnable(libA8FDA37D_gt_UT_Plus, false);
        TriggerEnable(libA8FDA37D_gt_UT_Minus, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_92471B0A"));
        GameSetSpeedLocked(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Light_Init () {
    libA8FDA37D_gt_UT_Light = TriggerCreate("libA8FDA37D_gt_UT_Light_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Light, c_playerAny, "-light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Plus
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Plus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_LighIndex += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libA8FDA37D_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libA8FDA37D_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Plus_Init () {
    libA8FDA37D_gt_UT_Plus = TriggerCreate("libA8FDA37D_gt_UT_Plus_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Plus, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_Plus, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Minus
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Minus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_LighIndex -= 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libA8FDA37D_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libA8FDA37D_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Minus_Init () {
    libA8FDA37D_gt_UT_Minus = TriggerCreate("libA8FDA37D_gt_UT_Minus_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Minus, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_Minus, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Initialization
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libA8FDA37D_gv_graphsGeneral.lv_active = true;
    libA8FDA37D_gv_graphsGeneral.lv_playerLeft = 1;
    libA8FDA37D_gv_graphsGeneral.lv_teamLeft = 1;
    libA8FDA37D_gv_graphsGeneral.lv_playerRight = 2;
    libA8FDA37D_gv_graphsGeneral.lv_teamRight = 2;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
    libA8FDA37D_gv_graphsGeneral.lv_container = DialogControlLastCreated();
    libA8FDA37D_gf_UT_Graph_DefineGraph(1, StringExternal("Param/Value/lib_A8FDA37D_97B3777E"), "IncomeGraph", "ResourceCollectionRate", libA8FDA37D_ge_GraphStyle_Comparative, 350.0, 400.0, 200.0);
    libA8FDA37D_gf_UT_Graph_DefineGraph(2, StringExternal("Param/Value/lib_A8FDA37D_FC109E9D"), "ArmySizeGraph", "ResourceValueArmySampled", libA8FDA37D_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libA8FDA37D_gf_UT_Graph_DefineGraph(3, StringExternal("Param/Value/lib_A8FDA37D_F9E4FE9F"), "ApmGraph", "APM", libA8FDA37D_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libA8FDA37D_gf_UT_Graph_DefineGraph(4, StringExternal("Param/Value/lib_A8FDA37D_BCDB198C"), "KillsGraph", "UnitsKilledCount", libA8FDA37D_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libA8FDA37D_gf_UT_Graph_DefineGraph(5, StringExternal("Param/Value/lib_A8FDA37D_58BA76F4"), "ValueLostGraph", "ResourceLostArmy", libA8FDA37D_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_Initialization_Init () {
    libA8FDA37D_gt_UT_Graph_Initialization = TriggerCreate("libA8FDA37D_gt_UT_Graph_Initialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Timer
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_Timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bar;
    int lv_graph;
    int lv_count;
    int lv_count2;

    // Automatic Variable Declarations
    int autoF99308E6_ae;
    const int autoF99308E6_ai = 1;
    int auto5E284C07_val;
    int autoBC8F8B64_ae;
    const int autoBC8F8B64_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/AdditionalGraphInfo"));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_2368A0DA", "A", IntToText(PlayerScoreValueGetAsInt(1, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_2368A0DA", "B", IntToText(PlayerScoreValueGetAsInt(2, "UnitsKilledCount")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_2368A0DA"), PlayerGroupAll());
    libA8FDA37D_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libA8FDA37D_gv_graphsGeneral.lv_currentInterval == libA8FDA37D_gv_graphsGeneral.lv_intervals)) {
        libA8FDA37D_gv_graphsGeneral.lv_currentNode += 1;
    }

    autoF99308E6_ae = libA8FDA37D_gv_graphsGeneral.lv_totalGraphs;
    lv_graph = 1;
    for ( ; ( (autoF99308E6_ai >= 0 && lv_graph <= autoF99308E6_ae) || (autoF99308E6_ai < 0 && lv_graph >= autoF99308E6_ae) ) ; lv_graph += autoF99308E6_ai ) {
        libA8FDA37D_gv_graphsData[lv_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamLeft][libA8FDA37D_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libA8FDA37D_gv_graphsGeneral.lv_playerLeft, libA8FDA37D_gv_graphsData[lv_graph].lv_scoreType);
        libA8FDA37D_gv_graphsData[lv_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamRight][libA8FDA37D_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libA8FDA37D_gv_graphsGeneral.lv_playerRight, libA8FDA37D_gv_graphsData[lv_graph].lv_scoreType);
        if ((libA8FDA37D_gv_graphsGeneral.lv_currentInterval == libA8FDA37D_gv_graphsGeneral.lv_intervals)) {
            auto5E284C07_val = libA8FDA37D_gv_graphsData[lv_graph].lv_style;
            if (auto5E284C07_val == libA8FDA37D_ge_GraphStyle_Comparative) {
                libA8FDA37D_gf_UT_Graph_UpdateDataComparative(lv_graph);
            }
            else if (auto5E284C07_val == libA8FDA37D_ge_GraphStyle_Differential) {
                libA8FDA37D_gf_UT_Graph_UpdateDataDifferential(lv_graph);
            }
            else {
            }
            autoBC8F8B64_ae = libA8FDA37D_gv_graphsGeneral.lv_intervals;
            lv_count = 1;
            for ( ; ( (autoBC8F8B64_ai >= 0 && lv_count <= autoBC8F8B64_ae) || (autoBC8F8B64_ai < 0 && lv_count >= autoBC8F8B64_ae) ) ; lv_count += autoBC8F8B64_ai ) {
                libA8FDA37D_gv_graphsData[lv_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamLeft][lv_count] = 0;
                libA8FDA37D_gv_graphsData[lv_graph].lv_tempValues[libA8FDA37D_gv_graphsGeneral.lv_teamRight][lv_count] = 0;
            }
        }

    }
    if ((libA8FDA37D_gv_graphsGeneral.lv_currentInterval == libA8FDA37D_gv_graphsGeneral.lv_intervals)) {
        libA8FDA37D_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_Timer_Init () {
    libA8FDA37D_gt_UT_Graph_Timer = TriggerCreate("libA8FDA37D_gt_UT_Graph_Timer_Func");
    TriggerAddEventTimePeriodic(libA8FDA37D_gt_UT_Graph_Timer, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowIncome
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ShowIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(1, EventPlayer());
    TriggerExecute(libA8FDA37D_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ShowIncome_Init () {
    libA8FDA37D_gt_UT_Graph_ShowIncome = TriggerCreate("libA8FDA37D_gt_UT_Graph_ShowIncome_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Graph_ShowIncome, c_playerAny, "-gincome", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowArmyValue
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ShowArmyValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(2, EventPlayer());
    TriggerExecute(libA8FDA37D_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ShowArmyValue_Init () {
    libA8FDA37D_gt_UT_Graph_ShowArmyValue = TriggerCreate("libA8FDA37D_gt_UT_Graph_ShowArmyValue_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Graph_ShowArmyValue, c_playerAny, "-garmy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowAPM
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ShowAPM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(3, EventPlayer());
    TriggerExecute(libA8FDA37D_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ShowAPM_Init () {
    libA8FDA37D_gt_UT_Graph_ShowAPM = TriggerCreate("libA8FDA37D_gt_UT_Graph_ShowAPM_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Graph_ShowAPM, c_playerAny, "-gapm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowKills
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ShowKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(4, EventPlayer());
    TriggerExecute(libA8FDA37D_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ShowKills_Init () {
    libA8FDA37D_gt_UT_Graph_ShowKills = TriggerCreate("libA8FDA37D_gt_UT_Graph_ShowKills_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Graph_ShowKills, c_playerAny, "-gkills", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowValueLost
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ShowValueLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(5, EventPlayer());
    TriggerExecute(libA8FDA37D_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ShowValueLost_Init () {
    libA8FDA37D_gt_UT_Graph_ShowValueLost = TriggerCreate("libA8FDA37D_gt_UT_Graph_ShowValueLost_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Graph_ShowValueLost, c_playerAny, "-glost", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Button Create
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Graph_ButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(50, 50, c_anchorCenter, 530, -400, true);
    libA8FDA37D_gv_uT_Graph_ButtonDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 2000);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    libA8FDA37D_gv_uT_Graph_Button = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Graph_ButtonCreate_Init () {
    libA8FDA37D_gt_UT_Graph_ButtonCreate = TriggerCreate("libA8FDA37D_gt_UT_Graph_ButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clicked
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Clicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libA8FDA37D_gv_uT_Graph_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
    DialogSetVisible(libA8FDA37D_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Clicked_Init () {
    libA8FDA37D_gt_UT_Clicked = TriggerCreate("libA8FDA37D_gt_UT_Clicked_Func");
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_Clicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(libA8FDA37D_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(libA8FDA37D_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(libA8FDA37D_gv_uT_MissileCreators);
        TriggerEnable(libA8FDA37D_gt_UT_MissileCreated, false);
    }

    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_MissileMovers_Init () {
    libA8FDA37D_gt_UT_MissileMovers = TriggerCreate("libA8FDA37D_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_MissileCreated_Init () {
    libA8FDA37D_gt_UT_MissileCreated = TriggerCreate("libA8FDA37D_gt_UT_MissileCreated_Func");
    TriggerEnable(libA8FDA37D_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEF9AC1DC_g;
    int autoEF9AC1DC_u;
    unit autoEF9AC1DC_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF9AC1DC_g = UnitGroupSelected(EventPlayer());
    autoEF9AC1DC_u = UnitGroupCount(autoEF9AC1DC_g, c_unitCountAll);
    for (;; autoEF9AC1DC_u -= 1) {
        autoEF9AC1DC_var = UnitGroupUnitFromEnd(autoEF9AC1DC_g, autoEF9AC1DC_u);
        if (autoEF9AC1DC_var == null) { break; }
        UnitSetPropertyFixed(autoEF9AC1DC_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Height_Init () {
    libA8FDA37D_gt_UT_Height = TriggerCreate("libA8FDA37D_gt_UT_Height_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup auto41944DCE_g;
    int auto41944DCE_u;
    unit auto41944DCE_var;
    int auto90C56233_ae;
    const int auto90C56233_ai = 1;
    unitgroup autoE7EEF85C_g;
    int autoE7EEF85C_u;
    unit autoE7EEF85C_var;
    int autoBBB61210_ae;
    const int autoBBB61210_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoE7EEF85C_g = UnitGroupSelected(EventPlayer());
        autoE7EEF85C_u = UnitGroupCount(autoE7EEF85C_g, c_unitCountAll);
        for (;; autoE7EEF85C_u -= 1) {
            autoE7EEF85C_var = UnitGroupUnitFromEnd(autoE7EEF85C_g, autoE7EEF85C_u);
            if (autoE7EEF85C_var == null) { break; }
            autoBBB61210_ae = UnitWeaponCount(autoE7EEF85C_var);
            lv_a = 1;
            for ( ; ( (autoBBB61210_ai >= 0 && lv_a <= autoBBB61210_ae) || (autoBBB61210_ai < 0 && lv_a >= autoBBB61210_ae) ) ; lv_a += autoBBB61210_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoE7EEF85C_var, lv_a), "RateMultiplier", UnitGetOwner(autoE7EEF85C_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto41944DCE_g = UnitGroupSelected(EventPlayer());
        auto41944DCE_u = UnitGroupCount(auto41944DCE_g, c_unitCountAll);
        for (;; auto41944DCE_u -= 1) {
            auto41944DCE_var = UnitGroupUnitFromEnd(auto41944DCE_g, auto41944DCE_u);
            if (auto41944DCE_var == null) { break; }
            auto90C56233_ae = UnitWeaponCount(auto41944DCE_var);
            lv_a = 1;
            for ( ; ( (auto90C56233_ai >= 0 && lv_a <= auto90C56233_ae) || (auto90C56233_ai < 0 && lv_a >= auto90C56233_ae) ) ; lv_a += auto90C56233_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto41944DCE_var, lv_a), "RateMultiplier", UnitGetOwner(auto41944DCE_var), "1", c_upgradeOperationSet);
            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AttackSpeed_Init () {
    libA8FDA37D_gt_UT_AttackSpeed = TriggerCreate("libA8FDA37D_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA9CA2E79_g;
    int autoA9CA2E79_u;
    unit autoA9CA2E79_var;
    unitgroup auto6A24A4DC_g;
    int auto6A24A4DC_u;
    unit auto6A24A4DC_var;
    unitgroup auto9681956C_g;
    int auto9681956C_u;
    unit auto9681956C_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoA9CA2E79_g = UnitGroupSelected(EventPlayer());
        autoA9CA2E79_u = UnitGroupCount(autoA9CA2E79_g, c_unitCountAll);
        for (;; autoA9CA2E79_u -= 1) {
            autoA9CA2E79_var = UnitGroupUnitFromEnd(autoA9CA2E79_g, autoA9CA2E79_u);
            if (autoA9CA2E79_var == null) { break; }
            UnitSetPropertyFixed(autoA9CA2E79_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(autoA9CA2E79_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(autoA9CA2E79_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(autoA9CA2E79_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(autoA9CA2E79_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(autoA9CA2E79_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            auto6A24A4DC_g = UnitGroupSelected(EventPlayer());
            auto6A24A4DC_u = UnitGroupCount(auto6A24A4DC_g, c_unitCountAll);
            for (;; auto6A24A4DC_u -= 1) {
                auto6A24A4DC_var = UnitGroupUnitFromEnd(auto6A24A4DC_g, auto6A24A4DC_u);
                if (auto6A24A4DC_var == null) { break; }
                UnitSetPropertyFixed(auto6A24A4DC_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto6A24A4DC_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            auto9681956C_g = UnitGroupSelected(EventPlayer());
            auto9681956C_u = UnitGroupCount(auto9681956C_g, c_unitCountAll);
            for (;; auto9681956C_u -= 1) {
                auto9681956C_var = UnitGroupUnitFromEnd(auto9681956C_g, auto9681956C_u);
                if (auto9681956C_var == null) { break; }
                UnitSetPropertyFixed(auto9681956C_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto9681956C_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Life_Init () {
    libA8FDA37D_gt_UT_Life = TriggerCreate("libA8FDA37D_gt_UT_Life_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2F2928D2_g;
    int auto2F2928D2_u;
    unit auto2F2928D2_var;
    unitgroup autoC76208D1_g;
    int autoC76208D1_u;
    unit autoC76208D1_var;
    unitgroup auto07CC9999_g;
    int auto07CC9999_u;
    unit auto07CC9999_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto2F2928D2_g = UnitGroupSelected(EventPlayer());
        auto2F2928D2_u = UnitGroupCount(auto2F2928D2_g, c_unitCountAll);
        for (;; auto2F2928D2_u -= 1) {
            auto2F2928D2_var = UnitGroupUnitFromEnd(auto2F2928D2_g, auto2F2928D2_u);
            if (auto2F2928D2_var == null) { break; }
            UnitSetPropertyFixed(auto2F2928D2_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(auto2F2928D2_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(auto2F2928D2_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(auto2F2928D2_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(auto2F2928D2_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            autoC76208D1_g = UnitGroupSelected(EventPlayer());
            autoC76208D1_u = UnitGroupCount(autoC76208D1_g, c_unitCountAll);
            for (;; autoC76208D1_u -= 1) {
                autoC76208D1_var = UnitGroupUnitFromEnd(autoC76208D1_g, autoC76208D1_u);
                if (autoC76208D1_var == null) { break; }
                UnitSetPropertyFixed(autoC76208D1_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            auto07CC9999_g = UnitGroupSelected(EventPlayer());
            auto07CC9999_u = UnitGroupCount(auto07CC9999_g, c_unitCountAll);
            for (;; auto07CC9999_u -= 1) {
                auto07CC9999_var = UnitGroupUnitFromEnd(auto07CC9999_g, auto07CC9999_u);
                if (auto07CC9999_var == null) { break; }
                UnitSetPropertyFixed(auto07CC9999_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto07CC9999_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Energy_Init () {
    libA8FDA37D_gt_UT_Energy = TriggerCreate("libA8FDA37D_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCBB42D2D_g;
    int autoCBB42D2D_u;
    unit autoCBB42D2D_var;
    unitgroup autoE3C6C702_g;
    int autoE3C6C702_u;
    unit autoE3C6C702_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoCBB42D2D_g = UnitGroupSelected(EventPlayer());
        autoCBB42D2D_u = UnitGroupCount(autoCBB42D2D_g, c_unitCountAll);
        for (;; autoCBB42D2D_u -= 1) {
            autoCBB42D2D_var = UnitGroupUnitFromEnd(autoCBB42D2D_g, autoCBB42D2D_u);
            if (autoCBB42D2D_var == null) { break; }
            UnitSetPropertyFixed(autoCBB42D2D_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(autoCBB42D2D_var), c_unitPropMovementSpeed));
        }
    }
    else {
        autoE3C6C702_g = UnitGroupSelected(EventPlayer());
        autoE3C6C702_u = UnitGroupCount(autoE3C6C702_g, c_unitCountAll);
        for (;; autoE3C6C702_u -= 1) {
            autoE3C6C702_var = UnitGroupUnitFromEnd(autoE3C6C702_g, autoE3C6C702_u);
            if (autoE3C6C702_var == null) { break; }
            UnitSetPropertyFixed(autoE3C6C702_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_MovementSpeed_Init () {
    libA8FDA37D_gt_UT_MovementSpeed = TriggerCreate("libA8FDA37D_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCD99C3FD_g;
    int autoCD99C3FD_u;
    unit autoCD99C3FD_var;
    unitgroup auto23B578AA_g;
    int auto23B578AA_u;
    unit auto23B578AA_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoCD99C3FD_g = UnitGroupSelected(EventPlayer());
        autoCD99C3FD_u = UnitGroupCount(autoCD99C3FD_g, c_unitCountAll);
        for (;; autoCD99C3FD_u -= 1) {
            autoCD99C3FD_var = UnitGroupUnitFromEnd(autoCD99C3FD_g, autoCD99C3FD_u);
            if (autoCD99C3FD_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoCD99C3FD_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoCD99C3FD_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagCreate(StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoCD99C3FD_var), "Acceleration", 3)), 24, UnitGetPosition(autoCD99C3FD_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoCD99C3FD_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        auto23B578AA_g = UnitGroupSelected(EventPlayer());
        auto23B578AA_u = UnitGroupCount(auto23B578AA_g, c_unitCountAll);
        for (;; auto23B578AA_u -= 1) {
            auto23B578AA_var = UnitGroupUnitFromEnd(auto23B578AA_g, auto23B578AA_u);
            if (auto23B578AA_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto23B578AA_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Acceleration_Init () {
    libA8FDA37D_gt_UT_Acceleration = TriggerCreate("libA8FDA37D_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto1A1F6CCA_g;
    int auto1A1F6CCA_u;
    unit auto1A1F6CCA_var;
    int auto87586095_ae;
    const int auto87586095_ai = 1;
    unitgroup auto3DFC81CB_g;
    int auto3DFC81CB_u;
    unit auto3DFC81CB_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto3DFC81CB_g = UnitGroupSelected(EventPlayer());
        auto3DFC81CB_u = UnitGroupCount(auto3DFC81CB_g, c_unitCountAll);
        for (;; auto3DFC81CB_u -= 1) {
            auto3DFC81CB_var = UnitGroupUnitFromEnd(auto3DFC81CB_g, auto3DFC81CB_u);
            if (auto3DFC81CB_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto3DFC81CB_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(auto3DFC81CB_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto3DFC81CB_var, 1), "Range", UnitGetOwner(auto3DFC81CB_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto1A1F6CCA_g = UnitGroupSelected(EventPlayer());
        auto1A1F6CCA_u = UnitGroupCount(auto1A1F6CCA_g, c_unitCountAll);
        for (;; auto1A1F6CCA_u -= 1) {
            auto1A1F6CCA_var = UnitGroupUnitFromEnd(auto1A1F6CCA_g, auto1A1F6CCA_u);
            if (auto1A1F6CCA_var == null) { break; }
            auto87586095_ae = UnitWeaponCount(auto1A1F6CCA_var);
            lv_i = 1;
            for ( ; ( (auto87586095_ai >= 0 && lv_i <= auto87586095_ae) || (auto87586095_ai < 0 && lv_i >= auto87586095_ae) ) ; lv_i += auto87586095_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto1A1F6CCA_var, lv_i), "Range", UnitGetOwner(auto1A1F6CCA_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(auto1A1F6CCA_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Range_Init () {
    libA8FDA37D_gt_UT_Range = TriggerCreate("libA8FDA37D_gt_UT_Range_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vAbv;

    // Automatic Variable Declarations
    unitgroup autoD257ADE2_g;
    int autoD257ADE2_u;
    unit autoD257ADE2_var;
    unit auto67D841B9_unit;
    int auto67D841B9_i;
    unitgroup auto0DCE50E8_g;
    int auto0DCE50E8_u;
    unit auto0DCE50E8_var;
    unit auto5C7AB134_unit;
    int auto5C7AB134_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoD257ADE2_g = UnitGroupSelected(EventPlayer());
        autoD257ADE2_u = UnitGroupCount(autoD257ADE2_g, c_unitCountAll);
        for (;; autoD257ADE2_u -= 1) {
            autoD257ADE2_var = UnitGroupUnitFromEnd(autoD257ADE2_g, autoD257ADE2_u);
            if (autoD257ADE2_var == null) { break; }
            auto67D841B9_unit = autoD257ADE2_var;
            auto67D841B9_i = 1;
            for ( ; auto67D841B9_i <= UnitAbilityCount(auto67D841B9_unit) ; auto67D841B9_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto67D841B9_unit, auto67D841B9_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(autoD257ADE2_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_5079C3AA", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_5079C3AA", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_5079C3AA"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B9A585F4"));
        auto0DCE50E8_g = UnitGroupSelected(EventPlayer());
        auto0DCE50E8_u = UnitGroupCount(auto0DCE50E8_g, c_unitCountAll);
        for (;; auto0DCE50E8_u -= 1) {
            auto0DCE50E8_var = UnitGroupUnitFromEnd(auto0DCE50E8_g, auto0DCE50E8_u);
            if (auto0DCE50E8_var == null) { break; }
            auto5C7AB134_unit = auto0DCE50E8_var;
            auto5C7AB134_i = 1;
            for ( ; auto5C7AB134_i <= UnitAbilityCount(auto5C7AB134_unit) ; auto5C7AB134_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto5C7AB134_unit, auto5C7AB134_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto0DCE50E8_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F968CCB1", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_F968CCB1", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_F968CCB1"), false);
                }

            }
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ARange_Init () {
    libA8FDA37D_gt_UT_ARange = TriggerCreate("libA8FDA37D_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD798CB11_g;
    int autoD798CB11_u;
    unit autoD798CB11_var;
    unitgroup auto6165378C_g;
    int auto6165378C_u;
    unit auto6165378C_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto6165378C_g = UnitGroupSelected(EventPlayer());
        auto6165378C_u = UnitGroupCount(auto6165378C_g, c_unitCountAll);
        for (;; auto6165378C_u -= 1) {
            auto6165378C_var = UnitGroupUnitFromEnd(auto6165378C_g, auto6165378C_u);
            if (auto6165378C_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto6165378C_var), "ShieldArmor", UnitGetOwner(auto6165378C_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto6165378C_var), "LifeArmor", UnitGetOwner(auto6165378C_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoD798CB11_g = UnitGroupSelected(EventPlayer());
        autoD798CB11_u = UnitGroupCount(autoD798CB11_g, c_unitCountAll);
        for (;; autoD798CB11_u -= 1) {
            autoD798CB11_var = UnitGroupUnitFromEnd(autoD798CB11_g, autoD798CB11_u);
            if (autoD798CB11_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoD798CB11_var), "LifeArmor", UnitGetOwner(autoD798CB11_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoD798CB11_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoD798CB11_var), "ShieldArmor", UnitGetOwner(autoD798CB11_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoD798CB11_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Armor_Init () {
    libA8FDA37D_gt_UT_Armor = TriggerCreate("libA8FDA37D_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto15C28FB1_g;
    int auto15C28FB1_u;
    unit auto15C28FB1_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto15C28FB1_g = UnitGroupSelected(EventPlayer());
    auto15C28FB1_u = UnitGroupCount(auto15C28FB1_g, c_unitCountAll);
    for (;; auto15C28FB1_u -= 1) {
        auto15C28FB1_var = UnitGroupUnitFromEnd(auto15C28FB1_g, auto15C28FB1_u);
        if (auto15C28FB1_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto15C28FB1_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_TintColor_Init () {
    libA8FDA37D_gt_UT_TintColor = TriggerCreate("libA8FDA37D_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5C207D24_g;
    int auto5C207D24_u;
    unit auto5C207D24_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C207D24_g = UnitGroupSelected(EventPlayer());
    auto5C207D24_u = UnitGroupCount(auto5C207D24_g, c_unitCountAll);
    for (;; auto5C207D24_u -= 1) {
        auto5C207D24_var = UnitGroupUnitFromEnd(auto5C207D24_g, auto5C207D24_u);
        if (auto5C207D24_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto5C207D24_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Scale_Init () {
    libA8FDA37D_gt_UT_Scale = TriggerCreate("libA8FDA37D_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TimeScale
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_TimeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    unitgroup autoF63488AA_g;
    int autoF63488AA_u;
    unit autoF63488AA_var;

    // Variable Initialization
    lv_vAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount >= 0.01)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TimeScaleIncreased", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4330E4DD", "A", FixedToText(lv_vAmount, 2));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_4330E4DD"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_E32707AB", "A", StringExternal("Param/Value/lib_A8FDA37D_F7D5F512"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_E32707AB"));
    }
    autoF63488AA_g = UnitGroupSelected(EventPlayer());
    autoF63488AA_u = UnitGroupCount(autoF63488AA_g, c_unitCountAll);
    for (;; autoF63488AA_u -= 1) {
        autoF63488AA_var = UnitGroupUnitFromEnd(autoF63488AA_g, autoF63488AA_u);
        if (autoF63488AA_var == null) { break; }
        UnitBehaviorAddPlayer(autoF63488AA_var, "TimeScaleIncreased", EventPlayer(), 1);
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_TimeScale_Init () {
    libA8FDA37D_gt_UT_TimeScale = TriggerCreate("libA8FDA37D_gt_UT_TimeScale_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_TimeScale, c_playerAny, "-timescale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3350FA06_g;
    int auto3350FA06_u;
    unit auto3350FA06_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3350FA06_g = UnitGroupSelected(EventPlayer());
    auto3350FA06_u = UnitGroupCount(auto3350FA06_g, c_unitCountAll);
    for (;; auto3350FA06_u -= 1) {
        auto3350FA06_var = UnitGroupUnitFromEnd(auto3350FA06_g, auto3350FA06_u);
        if (auto3350FA06_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto3350FA06_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_ActorMsg_Init () {
    libA8FDA37D_gt_UT_ActorMsg = TriggerCreate("libA8FDA37D_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Air & Ground
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AirGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEAEDE868_g;
    int autoEAEDE868_u;
    unit autoEAEDE868_var;
    unitgroup auto3CB488FF_g;
    int auto3CB488FF_u;
    unit auto3CB488FF_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-airbeh")) {
        auto3CB488FF_g = UnitGroupSelected(EventPlayer());
        auto3CB488FF_u = UnitGroupCount(auto3CB488FF_g, c_unitCountAll);
        for (;; auto3CB488FF_u -= 1) {
            auto3CB488FF_var = UnitGroupUnitFromEnd(auto3CB488FF_g, auto3CB488FF_u);
            if (auto3CB488FF_var == null) { break; }
            if ((UnitBehaviorCount(auto3CB488FF_var, "GroundBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto3CB488FF_var, "GroundBeh", 1, 1);
            }

            UnitBehaviorAddPlayer(auto3CB488FF_var, "AirBeh", 1, 1);
        }
    }
    else {
        autoEAEDE868_g = UnitGroupSelected(EventPlayer());
        autoEAEDE868_u = UnitGroupCount(autoEAEDE868_g, c_unitCountAll);
        for (;; autoEAEDE868_u -= 1) {
            autoEAEDE868_var = UnitGroupUnitFromEnd(autoEAEDE868_g, autoEAEDE868_u);
            if (autoEAEDE868_var == null) { break; }
            if ((UnitBehaviorCount(autoEAEDE868_var, "AirBeh") > 0)) {
                UnitBehaviorRemovePlayer(autoEAEDE868_var, "AirBeh", 1, 1);
            }

            UnitBehaviorAddPlayer(autoEAEDE868_var, "GroundBeh", 1, 1);
        }
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AirGround_Init () {
    libA8FDA37D_gt_UT_AirGround = TriggerCreate("libA8FDA37D_gt_UT_AirGround_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AirGround, c_playerAny, "-airbeh", false);
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AirGround, c_playerAny, "-groundbeh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerInit
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_EmpowerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vHeath;
    string lv_vDamage;

    // Automatic Variable Declarations
    playergroup auto641D3926_g;
    int auto641D3926_var;
    unitgroup auto94B1D145_g;
    int auto94B1D145_u;
    unit auto94B1D145_var;

    // Variable Initialization
    lv_vHeath = "1";
    lv_vDamage = "1";

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vHeath = StringWord(EventChatMessage(false), 2);
    lv_vDamage = StringWord(EventChatMessage(false), 3);
    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vHeath = "0";
    }

    if ((StringWord(EventChatMessage(false), 3) == null)) {
        lv_vDamage = "0";
    }

    auto641D3926_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto641D3926_var = -1;
    while (true) {
        auto641D3926_var = PlayerGroupNextPlayer(auto641D3926_g, auto641D3926_var);
        if (auto641D3926_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSpell) + "]", auto641D3926_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", auto641D3926_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeMelee) + "]", auto641D3926_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSplash) + "]", auto641D3926_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalLife) + "]", auto641D3926_var, lv_vHeath);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalShields) + "]", auto641D3926_var, lv_vHeath);
    }
    auto94B1D145_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto94B1D145_u = UnitGroupCount(auto94B1D145_g, c_unitCountAll);
    for (;; auto94B1D145_u -= 1) {
        auto94B1D145_var = UnitGroupUnitFromEnd(auto94B1D145_g, auto94B1D145_u);
        if (auto94B1D145_var == null) { break; }
        UnitBehaviorAddPlayer(auto94B1D145_var, "Empower", 3, 1);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_C10C2D22"));
    TriggerEnable(libA8FDA37D_gt_UT_EmpowerUnitCreated, true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_EmpowerInit_Init () {
    libA8FDA37D_gt_UT_EmpowerInit = TriggerCreate("libA8FDA37D_gt_UT_EmpowerInit_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_EmpowerInit, c_playerAny, "-empower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerUnitCreated
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_EmpowerUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Empower", 3, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_EmpowerUnitCreated_Init () {
    libA8FDA37D_gt_UT_EmpowerUnitCreated = TriggerCreate("libA8FDA37D_gt_UT_EmpowerUnitCreated_Func");
    TriggerEnable(libA8FDA37D_gt_UT_EmpowerUnitCreated, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_EmpowerUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Init
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Horde_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto30C4C93B_g;
    int auto30C4C93B_u;
    unit auto30C4C93B_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_Horde_Chance = StringToFixed(StringWord(EventChatMessage(false), 2));
    auto30C4C93B_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto30C4C93B_u = UnitGroupCount(auto30C4C93B_g, c_unitCountAll);
    for (;; auto30C4C93B_u -= 1) {
        auto30C4C93B_var = UnitGroupUnitFromEnd(auto30C4C93B_g, auto30C4C93B_u);
        if (auto30C4C93B_var == null) { break; }
        libA8FDA37D_gf_UT_Horde_Multiply(auto30C4C93B_var, libA8FDA37D_gv_uT_Horde_Chance);
    }
    TextExpressionSetToken("Param/Expression/lib_A8FDA37D_B347FADC", "A", IntToText(UnitGroupCount(libA8FDA37D_gv_uT_Horde_UG, c_unitCountAlive)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_A8FDA37D_B347FADC"));
    TriggerEnable(libA8FDA37D_gt_UT_Horde_UnitCreated, true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Horde_Init_Init () {
    libA8FDA37D_gt_UT_Horde_Init = TriggerCreate("libA8FDA37D_gt_UT_Horde_Init_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Horde_Init, c_playerAny, "-horde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Remove
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Horde_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vCreated;

    // Automatic Variable Declarations
    unitgroup autoA2363625_g;
    int autoA2363625_u;
    unit autoA2363625_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2363625_g = libA8FDA37D_gv_uT_Horde_UG;
    autoA2363625_u = UnitGroupCount(autoA2363625_g, c_unitCountAll);
    for (;; autoA2363625_u -= 1) {
        autoA2363625_var = UnitGroupUnitFromEnd(autoA2363625_g, autoA2363625_u);
        if (autoA2363625_var == null) { break; }
        UnitRemove(autoA2363625_var);
        UnitGroupRemove(libA8FDA37D_gv_uT_Horde_UG, autoA2363625_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Horde_Remove_Init () {
    libA8FDA37D_gt_UT_Horde_Remove = TriggerCreate("libA8FDA37D_gt_UT_Horde_Remove_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Horde_Remove, c_playerAny, "-remhorde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Unit Created
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Horde_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_Horde_UG, EventUnitCreatedUnit()) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InterceptorAiur"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DehakaLarva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "StukovInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BroodlingEscort"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Horde_Multiply(EventUnitCreatedUnit(), libA8FDA37D_gv_uT_Horde_Chance);
    UnitGroupAddUnitGroup(libA8FDA37D_gv_uT_Horde_UG_Wave, UnitLastCreatedGroup());
    TriggerExecute(libA8FDA37D_gt_UT_Horde_SendWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Horde_UnitCreated_Init () {
    libA8FDA37D_gt_UT_Horde_UnitCreated = TriggerCreate("libA8FDA37D_gt_UT_Horde_UnitCreated_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Horde_UnitCreated, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_Horde_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_SendWave
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Horde_SendWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    AIAttackWaveUseGroup(3, libA8FDA37D_gv_uT_Horde_UG_Wave);
    AIAttackWaveSetGatherPoint(3, UnitGroupCenterOfGroup(libA8FDA37D_gv_uT_Horde_UG_Wave));
    AIAttackWaveSetTargetPoint(3, PlayerStartLocation(RandomInt(1, 2)));
    AIAttackWaveSend(3, 1, false);
    UnitGroupClear(libA8FDA37D_gv_uT_Horde_UG_Wave);
    Wait(2.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Horde_SendWave_Init () {
    libA8FDA37D_gt_UT_Horde_SendWave = TriggerCreate("libA8FDA37D_gt_UT_Horde_SendWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mastery
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Mastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_v2String;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v2String = StringWord(EventChatMessage(false), 2);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_v2String == null)) {
        libA8FDA37D_gv_uT_MasteryTargetPlayer = 1;
    }
    else {
        libA8FDA37D_gv_uT_MasteryTargetPlayer = StringToInt(lv_v2String);
    }
    TriggerEnable(libA8FDA37D_gt_UT_CommanderSwitched, true);
    libA8FDA37D_gf_UT_MasteryChoiceCreateUpdate(libA8FDA37D_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libA8FDA37D_gv_uT_MasteryDialog, PlayerGroupSingle(EventPlayer()), true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Mastery_Init () {
    libA8FDA37D_gt_UT_Mastery = TriggerCreate("libA8FDA37D_gt_UT_Mastery_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Mastery, c_playerAny, "-mastery", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_MasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libA8FDA37D_gv_uT_MasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_MasteryPointsUpdate(libA8FDA37D_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libA8FDA37D_gv_uT_MasteryDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_MasteryButtonClicked_Init () {
    libA8FDA37D_gt_UT_MasteryButtonClicked = TriggerCreate("libA8FDA37D_gt_UT_MasteryButtonClicked_Func");
    TriggerEnable(libA8FDA37D_gt_UT_MasteryButtonClicked, false);
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_MasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderSwitched
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_CommanderSwitched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto93720171_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto93720171_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto93720171_ai >= 0 && lv_commIndex <= auto93720171_ae) || (auto93720171_ai < 0 && lv_commIndex >= auto93720171_ae) ) ; lv_commIndex += auto93720171_ai ) {
        if ((EventDialogControl() == libCOUI_gv_cU_CommanderButton[lv_commIndex])) {
            libA8FDA37D_gf_UT_MasteryPointsUpdate(libA8FDA37D_gv_uT_MasteryTargetPlayer);
            libA8FDA37D_gf_UT_MasteryChoiceCreateUpdate(libA8FDA37D_gv_uT_MasteryTargetPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_CommanderSwitched_Init () {
    libA8FDA37D_gt_UT_CommanderSwitched = TriggerCreate("libA8FDA37D_gt_UT_CommanderSwitched_Func");
    TriggerEnable(libA8FDA37D_gt_UT_CommanderSwitched, false);
    TriggerAddEventDialogControl(libA8FDA37D_gt_UT_CommanderSwitched, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Attack Wave
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_SpawnAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vTech;
    int lv_vSize;
    fixed lv_vSupply;
    fixed lv_vVitals;
    int lv_vCost;

    // Automatic Variable Declarations
    string autoA10DAD8B_val;
    string auto0495A4A6_val;
    unitgroup auto0A2B7AF9_g;
    int auto0A2B7AF9_u;
    unit auto0A2B7AF9_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA10DAD8B_val = StringWord(EventChatMessage(false), 2);
    if (autoA10DAD8B_val == "1") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (autoA10DAD8B_val == "2") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (autoA10DAD8B_val == "3") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (autoA10DAD8B_val == "4") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (autoA10DAD8B_val == "5") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (autoA10DAD8B_val == "6") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    auto0495A4A6_val = StringWord(EventChatMessage(false), 3);
    if (auto0495A4A6_val == "1") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto0495A4A6_val == "2") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto0495A4A6_val == "3") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto0495A4A6_val == "4") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto0495A4A6_val == "5") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (auto0495A4A6_val == "6") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(3, 4, lv_vSize, lv_vTech, CameraGetTarget(EventPlayer()), false);
    auto0A2B7AF9_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto0A2B7AF9_u = UnitGroupCount(auto0A2B7AF9_g, c_unitCountAll);
    for (;; auto0A2B7AF9_u -= 1) {
        auto0A2B7AF9_var = UnitGroupUnitFromEnd(auto0A2B7AF9_g, auto0A2B7AF9_u);
        if (auto0A2B7AF9_var == null) { break; }
        lv_vCost += UnitTypeGetCost(UnitGetType(auto0A2B7AF9_var), c_unitCostSumMineralsVespene);
        lv_vSupply += UnitGetPropertyFixed(auto0A2B7AF9_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vVitals += UnitGetPropertyFixed(auto0A2B7AF9_var, c_unitPropVitality, c_unitPropCurrent);
    }
    UnitGroupAddUnitGroup(libA8FDA37D_gv_uT_LastAttackWave, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((StringContains(EventChatMessage(false), "none", c_stringAnywhere, c_stringNoCase) == false)) {
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_20617466", "A", IntToText(lv_vCost));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_20617466", "B", FixedToText(lv_vSupply, c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_A8FDA37D_20617466", "C", FixedToText(lv_vVitals, c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_A8FDA37D_20617466"), 30, UnitGroupCenterOfGroup(libCOMI_gf_LastCreatedCoopAttackForce()), 5.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 30.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_SpawnAttackWave_Init () {
    libA8FDA37D_gt_UT_SpawnAttackWave = TriggerCreate("libA8FDA37D_gt_UT_SpawnAttackWave_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_SpawnAttackWave, c_playerAny, "-aw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackWaveAttack
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_AttackWaveAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int auto80F64F9F_ae = 4;
    const int auto80F64F9F_ai = 1;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B4446C53"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_EBC827FC"));
        lv_vPlayer = 3;
        for ( ; ( (auto80F64F9F_ai >= 0 && lv_vPlayer <= auto80F64F9F_ae) || (auto80F64F9F_ai < 0 && lv_vPlayer >= auto80F64F9F_ae) ) ; lv_vPlayer += auto80F64F9F_ai ) {
            lv_vUG = UnitGroupFilterPlayer(libA8FDA37D_gv_uT_LastAttackWave, lv_vPlayer, 0);
            AIAttackWaveUseGroup(lv_vPlayer, lv_vUG);
            AIAttackWaveSetGatherPoint(lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
            AIAttackWaveSetTargetPoint(lv_vPlayer, PlayerStartLocation(EventPlayer()));
            AIAttackWaveSend(lv_vPlayer, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_AttackWaveAttack_Init () {
    libA8FDA37D_gt_UT_AttackWaveAttack = TriggerCreate("libA8FDA37D_gt_UT_AttackWaveAttack_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_AttackWaveAttack, c_playerAny, "-attack", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove Wave
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_RemoveWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29221947_g;
    int auto29221947_u;
    unit auto29221947_var;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto29221947_g = libA8FDA37D_gv_uT_LastAttackWave;
    auto29221947_u = UnitGroupCount(auto29221947_g, c_unitCountAll);
    for (;; auto29221947_u -= 1) {
        auto29221947_var = UnitGroupUnitFromEnd(auto29221947_g, auto29221947_u);
        if (auto29221947_var == null) { break; }
        UnitRemove(auto29221947_var);
        UnitGroupRemove(libA8FDA37D_gv_uT_LastAttackWave, auto29221947_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_RemoveWave_Init () {
    libA8FDA37D_gt_UT_RemoveWave = TriggerCreate("libA8FDA37D_gt_UT_RemoveWave_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_RemoveWave, c_playerAny, "-remw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_TurnOnOff
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_TurnOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_Camera_CameraActive == false)) {
        libA8FDA37D_gv_uT_Camera_CameraActive = true;
        TriggerExecute(libA8FDA37D_gt_UT_Camera_PeriodicUpdate, true, false);
        TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyDown, true);
        TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyUp, true);
        UnitClearSelection(EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_D4D5406D"));
    }
    else {
        libA8FDA37D_gv_uT_Camera_CameraActive = false;
        TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyDown, false);
        TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyUp, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B7FCE738"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_TurnOnOff_Init () {
    libA8FDA37D_gt_UT_Camera_TurnOnOff = TriggerCreate("libA8FDA37D_gt_UT_Camera_TurnOnOff_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Camera_TurnOnOff, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Reset
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_Reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 1.0, -1, 10.0);
    libA8FDA37D_gv_uT_Camera_AngleofAttack[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    libA8FDA37D_gv_uT_Camera_Rotation[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_E5319053"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_Reset_Init () {
    libA8FDA37D_gt_UT_Camera_Reset = TriggerCreate("libA8FDA37D_gt_UT_Camera_Reset_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Camera_Reset, c_playerAny, "-cam reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Top
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_Top_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), RegionGetCenter(RegionPlayableMap()), 2.0, -1, 10.0, false);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 45.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * 1.5), 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 2.0, -1, 10.0);
    libA8FDA37D_gv_uT_Camera_AngleofAttack[EventPlayer()] = 90.0;
    CameraSetValue(EventPlayer(), c_cameraValueYaw, 90.0, 2.0, -1, 10.0);
    libA8FDA37D_gv_uT_Camera_Rotation[EventPlayer()] = 90.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_Top_Init () {
    libA8FDA37D_gt_UT_Camera_Top = TriggerCreate("libA8FDA37D_gt_UT_Camera_Top_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Camera_Top, c_playerAny, "-cam top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Up
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_KeyUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE72299D2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE72299D2_val = EventKeyPressed();
    if (autoE72299D2_val == c_keyQ) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_Q)][EventPlayer()] = false;
    }
    else if (autoE72299D2_val == c_keyE) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_E)][EventPlayer()] = false;
    }
    else if (autoE72299D2_val == c_keyW) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_W)][EventPlayer()] = false;
    }
    else if (autoE72299D2_val == c_keyS) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_S)][EventPlayer()] = false;
    }
    else if (autoE72299D2_val == c_keyA) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_A)][EventPlayer()] = false;
    }
    else if (autoE72299D2_val == c_keyD) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_D)][EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_KeyUp_Init () {
    libA8FDA37D_gt_UT_Camera_KeyUp = TriggerCreate("libA8FDA37D_gt_UT_Camera_KeyUp_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyUp, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_Camera_KeyUp, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Down
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_KeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto19B48AA9_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto19B48AA9_val = EventKeyPressed();
    if (auto19B48AA9_val == c_keyQ) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_Q)][EventPlayer()] = true;
    }
    else if (auto19B48AA9_val == c_keyE) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_E)][EventPlayer()] = true;
    }
    else if (auto19B48AA9_val == c_keyW) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_W)][EventPlayer()] = true;
    }
    else if (auto19B48AA9_val == c_keyS) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_S)][EventPlayer()] = true;
    }
    else if (auto19B48AA9_val == c_keyA) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_A)][EventPlayer()] = true;
    }
    else if (auto19B48AA9_val == c_keyD) {
        libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_D)][EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_KeyDown_Init () {
    libA8FDA37D_gt_UT_Camera_KeyDown = TriggerCreate("libA8FDA37D_gt_UT_Camera_KeyDown_Func");
    TriggerEnable(libA8FDA37D_gt_UT_Camera_KeyDown, false);
    TriggerAddEventKeyPressed(libA8FDA37D_gt_UT_Camera_KeyDown, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Camera_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vDuration;
    fixed lv_vDistanceStep;
    fixed lv_vBaseDistanceStep;
    fixed lv_vAngleStep;
    fixed lv_vRotationStep;
    int lv_vPlayer;

    // Automatic Variable Declarations
    const int auto11D0B70C_ae = 2;
    const int auto11D0B70C_ai = 1;

    // Variable Initialization
    lv_vDuration = 0.5;
    lv_vDistanceStep = 6.0;
    lv_vBaseDistanceStep = 8.0;
    lv_vAngleStep = 0.5;
    lv_vRotationStep = 1.5;
    lv_vPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libA8FDA37D_gv_uT_Camera_CameraActive == true)) {
        lv_vPlayer = 1;
        for ( ; ( (auto11D0B70C_ai >= 0 && lv_vPlayer <= auto11D0B70C_ae) || (auto11D0B70C_ai < 0 && lv_vPlayer >= auto11D0B70C_ae) ) ; lv_vPlayer += auto11D0B70C_ai ) {
            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_Q)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) - lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_E)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) + lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_W)][lv_vPlayer] == true)) {
                libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] += lv_vAngleStep;
                if ((libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] > 90.0)) {
                    libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] = 90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_S)][lv_vPlayer] == true)) {
                libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] -= lv_vAngleStep;
                if ((libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] < -90.0)) {
                    libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer] = -90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libA8FDA37D_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_A)][lv_vPlayer] == true)) {
                libA8FDA37D_gv_uT_Camera_Rotation[lv_vPlayer] -= lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libA8FDA37D_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libA8FDA37D_gv_uT_Camera_ActiveKeys[(libA8FDA37D_ge_UT_Camera_Keys_D)][lv_vPlayer] == true)) {
                libA8FDA37D_gv_uT_Camera_Rotation[lv_vPlayer] += lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libA8FDA37D_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Camera_PeriodicUpdate_Init () {
    libA8FDA37D_gt_UT_Camera_PeriodicUpdate = TriggerCreate("libA8FDA37D_gt_UT_Camera_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Dummy
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Dummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    string auto40A967FC_val;
    const int auto7964A6DB_ae = 20;
    int auto7964A6DB_var;

    // Variable Initialization
    lv_vPlayer = 3;

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto40A967FC_val = StringWord(EventChatMessage(false), 2);
    if (auto40A967FC_val == "armored") {
        UnitCreate(1, "DummyArmored", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto40A967FC_val == "light") {
        UnitCreate(1, "DummyLight", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto40A967FC_val == "structure") {
        UnitCreate(1, "DummyStructure", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else {
        UnitCreate(1, "Dummy", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    TextTagCreate(StringExternal("Param/Value/lib_A8FDA37D_CE4E1243"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\void_pure_black_backgroundcolor_diff.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    libHots_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    auto7964A6DB_var = 1;
    for ( ; auto7964A6DB_var <= auto7964A6DB_ae; auto7964A6DB_var += 1 ) {
        if ((UnitIsAlive(libA8FDA37D_gv_uT_DummyUnits[auto7964A6DB_var]) == false)) {
            libA8FDA37D_gv_uT_DummyUnits[auto7964A6DB_var] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), libA8FDA37D_gv_uT_DummyCustomValue, auto7964A6DB_var);
            break;
        }

    }
    UnitGroupAdd(libA8FDA37D_gv_uT_Dummies, UnitLastCreated());
    TriggerEnable(libA8FDA37D_gt_UT_DummyTakesDamage, true);
    TriggerEnable(libA8FDA37D_gt_UT_DummyUpdate, true);
    TriggerEnable(libA8FDA37D_gt_UT_DummyDestroyed, true);
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Dummy_Init () {
    libA8FDA37D_gt_UT_Dummy = TriggerCreate("libA8FDA37D_gt_UT_Dummy_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Dummy, c_playerAny, "-dummy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyTakesDamage
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = FixedToInt(UnitGetCustomValue(EventUnit(), libA8FDA37D_gv_uT_DummyCustomValue));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gv_uT_DummyDamage[lv_vIndex][0] += EventUnitDamageAmount();
    libA8FDA37D_gv_uT_DummyDamage[lv_vIndex][1] += EventUnitDamageAmount();
    if ((TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_vIndex][0]) <= 0.0)) {
        TimerStart(libA8FDA37D_gv_uT_DummyTimer[lv_vIndex][0], 5.0, false, c_timeGame);
        if ((TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_vIndex][1]) <= 0.0)) {
            TimerStart(libA8FDA37D_gv_uT_DummyTimer[lv_vIndex][1], 524287.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DummyTakesDamage_Init () {
    libA8FDA37D_gt_UT_DummyTakesDamage = TriggerCreate("libA8FDA37D_gt_UT_DummyTakesDamage_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DummyTakesDamage, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_UT_DummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyUpdate
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DummyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto254D6258_ae = 20;
    const int auto254D6258_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto254D6258_ai >= 0 && lv_index <= auto254D6258_ae) || (auto254D6258_ai < 0 && lv_index >= auto254D6258_ae) ) ; lv_index += auto254D6258_ai ) {
        if ((EventTimer() == libA8FDA37D_gv_uT_DummyTimer[lv_index][0])) {
            if ((libA8FDA37D_gv_uT_DummyDamage[lv_index][0] <= 0.5)) {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_665EA40E", "A", FixedToText((libA8FDA37D_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_665EA40E", "B", FixedToText((TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_index][1]) - 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_665EA40E", "C", FixedToText((libA8FDA37D_gv_uT_DummyDamage[lv_index][1] / (TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_index][1]) - 5.0)), 1));
                TextTagSetText(libHots_gf_TextTagForUnit(libA8FDA37D_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_665EA40E"));
                libA8FDA37D_gv_uT_DummyDamage[lv_index][0] = 0.0;
                libA8FDA37D_gv_uT_DummyDamage[lv_index][1] = 0.0;
                TimerStart(libA8FDA37D_gv_uT_DummyTimer[lv_index][1], 524287.0, false, c_timeGame);
                TimerPause(libA8FDA37D_gv_uT_DummyTimer[lv_index][1], true);
                TimerStart(libA8FDA37D_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                TimerPause(libA8FDA37D_gv_uT_DummyTimer[lv_index][0], true);
                break;
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4A3833A8", "A", FixedToText((libA8FDA37D_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4A3833A8", "B", FixedToText(TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_index][1]), 0));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_4A3833A8", "C", FixedToText((libA8FDA37D_gv_uT_DummyDamage[lv_index][1] / TimerGetElapsed(libA8FDA37D_gv_uT_DummyTimer[lv_index][1])), 1));
                TextTagSetText(libHots_gf_TextTagForUnit(libA8FDA37D_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_4A3833A8"));
                libA8FDA37D_gv_uT_DummyDamage[lv_index][0] = 0.0;
                TimerStart(libA8FDA37D_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DummyUpdate_Init () {
    libA8FDA37D_gt_UT_DummyUpdate = TriggerCreate("libA8FDA37D_gt_UT_DummyUpdate_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DummyUpdate, false);
    TriggerAddEventTimer(libA8FDA37D_gt_UT_DummyUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyDestroyed
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DummyDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(libHots_gf_TextTagForUnit(EventUnit(), 1), PlayerGroupAll(), false);
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DummyDestroyed_Init () {
    libA8FDA37D_gt_UT_DummyDestroyed = TriggerCreate("libA8FDA37D_gt_UT_DummyDestroyed_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DummyDestroyed, false);
    TriggerAddEventUnitDied(libA8FDA37D_gt_UT_DummyDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int autoCBEEC2FA_ae = libA8FDA37D_gv_uT_DPS_MaxUnits;
    const int autoCBEEC2FA_ai = 1;
    unitgroup autoA8004090_g;
    int autoA8004090_u;
    unit autoA8004090_var;
    const int auto5DC42369_ae = libA8FDA37D_gv_uT_DPS_MaxUnits;
    const int auto5DC42369_ai = 1;
    unitgroup autoE28651AF_g;
    int autoE28651AF_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libA8FDA37D_gv_uT_DPS_UG, UnitGroupSelected(EventPlayer()));
    lv_i = 1;
    for ( ; ( (autoCBEEC2FA_ai >= 0 && lv_i <= autoCBEEC2FA_ae) || (autoCBEEC2FA_ai < 0 && lv_i >= autoCBEEC2FA_ae) ) ; lv_i += autoCBEEC2FA_ai ) {
        libA8FDA37D_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libA8FDA37D_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libA8FDA37D_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libA8FDA37D_gv_uT_DPS_Timer[lv_i][1]);
    }
    autoA8004090_g = UnitGroupSelected(EventPlayer());
    autoA8004090_u = UnitGroupCount(autoA8004090_g, c_unitCountAll);
    for (;; autoA8004090_u -= 1) {
        autoA8004090_var = UnitGroupUnitFromEnd(autoA8004090_g, autoA8004090_u);
        if (autoA8004090_var == null) { break; }
        if ((TextTagVisible(libHots_gf_TextTagForUnit(autoA8004090_var, 1), EventPlayer()) == false)) {
            lv_i = 1;
            for ( ; ( (auto5DC42369_ai >= 0 && lv_i <= auto5DC42369_ae) || (auto5DC42369_ai < 0 && lv_i >= auto5DC42369_ae) ) ; lv_i += auto5DC42369_ai ) {
                if ((libA8FDA37D_gv_uT_DPS_Units[lv_i] == null)) {
                    libA8FDA37D_gv_uT_DPS_Units[lv_i] = autoA8004090_var;
                    UnitSetCustomValue(autoA8004090_var, libA8FDA37D_gv_uT_DPS_CustomValueIndex, lv_i);
                    UnitBehaviorAddPlayer(autoA8004090_var, "DPSTESTBEGH", 1, 1);
                    libCOMI_gf_CopyBehaviorToMagazineAmmos(autoA8004090_var, "DPSTESTBEGH");
                    autoE28651AF_g = UnitGroup(null, UnitGetOwner(autoA8004090_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoE28651AF_u = UnitGroupCount(autoE28651AF_g, c_unitCountAll);
                    for (;; autoE28651AF_u -= 1) {
                        lv_vUnit = UnitGroupUnitFromEnd(autoE28651AF_g, autoE28651AF_u);
                        if (lv_vUnit == null) { break; }
                        if ((UnitHasBehavior2(lv_vUnit, "DPSTESTBEGH") == true)) {
                            UnitSetCustomValue(lv_vUnit, libA8FDA37D_gv_uT_DPS_CustomValueIndex, lv_i);
                            UnitGroupAdd(libA8FDA37D_gv_uT_DPS_UG, lv_vUnit);
                            UnitBehaviorRemovePlayer(lv_vUnit, "DPSTESTBEGH", 1, 1);
                        }

                    }
                    break;
                }

            }
            TextTagCreate(StringExternal("Param/Value/lib_A8FDA37D_5812FC89"), 24, UnitGetPosition(autoA8004090_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoA8004090_var, 1.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            libHots_gf_StoreTextTagForUnit(autoA8004090_var, 1, TextTagLastCreated());
        }

    }
    TriggerEnable(libA8FDA37D_gt_UT_DPS_DealsDamage, true);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Summon, true);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Dies, true);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_PauseGlobal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_Init () {
    libA8FDA37D_gt_UT_DPS = TriggerCreate("libA8FDA37D_gt_UT_DPS_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DPS, c_playerAny, "-dps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Stop
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_Stop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoDEA349C0_g;
    int autoDEA349C0_u;
    unit autoDEA349C0_var;
    const int auto7206642A_ae = libA8FDA37D_gv_uT_DPS_MaxUnits;
    const int auto7206642A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDEA349C0_g = libA8FDA37D_gv_uT_DPS_UG;
    autoDEA349C0_u = UnitGroupCount(autoDEA349C0_g, c_unitCountAll);
    for (;; autoDEA349C0_u -= 1) {
        autoDEA349C0_var = UnitGroupUnitFromEnd(autoDEA349C0_g, autoDEA349C0_u);
        if (autoDEA349C0_var == null) { break; }
        UnitGroupRemove(libA8FDA37D_gv_uT_DPS_UG, autoDEA349C0_var);
        TextTagDestroy(libHots_gf_TextTagForUnit(autoDEA349C0_var, 1));
    }
    lv_i = 1;
    for ( ; ( (auto7206642A_ai >= 0 && lv_i <= auto7206642A_ae) || (auto7206642A_ai < 0 && lv_i >= auto7206642A_ae) ) ; lv_i += auto7206642A_ai ) {
        libA8FDA37D_gv_uT_DPS_Units[lv_i] = null;
        libA8FDA37D_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libA8FDA37D_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libA8FDA37D_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libA8FDA37D_gv_uT_DPS_Timer[lv_i][1]);
    }
    TriggerEnable(libA8FDA37D_gt_UT_DPS_DealsDamage, false);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Summon, false);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_PauseGlobal, false);
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_Stop_Init () {
    libA8FDA37D_gt_UT_DPS_Stop = TriggerCreate("libA8FDA37D_gt_UT_DPS_Stop_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DPS_Stop, c_playerAny, "-dpsstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_DealsDamage
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_DealsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vCustomValue;
    fixed lv_vElapsedTime;
    fixed lv_vDPS_Now;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_DPS_UG, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCustomValue = FixedToInt(UnitGetCustomValue(EventUnitDamageSourceUnit(), libA8FDA37D_gv_uT_DPS_CustomValueIndex));
    lv_vElapsedTime = TimerGetElapsed(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][0]);
    if ((TimerGetElapsed(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][1]) <= 0.0)) {
        TimerStart(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][1], 524287.0, false, c_timeGame);
        TimerStart(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][0], 5.0, false, c_timeGame);
    }
    else {
        if ((TimerIsPaused(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][1]) == true)) {
            TimerRestart(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][1]);
            libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][1] = 0.0;
        }
        else {
            libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][0] += EventUnitDamageAmount();
            libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][1] += EventUnitDamageAmount();
            if ((lv_vElapsedTime >= 2.0)) {
                lv_vDPS_Now = (libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][0] / lv_vElapsedTime);
                libA8FDA37D_gv_uT_DPS_Avg[lv_vCustomValue] = (libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][1] / TimerGetElapsed(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][1]));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0916509A", "A", FixedToText(libA8FDA37D_gv_uT_DPS_Avg[lv_vCustomValue], 1));
                TextExpressionSetToken("Param/Expression/lib_A8FDA37D_0916509A", "B", FixedToText(lv_vDPS_Now, 1));
                TextTagSetText(libHots_gf_TextTagForUnit(libA8FDA37D_gv_uT_DPS_Units[lv_vCustomValue], 1), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_0916509A"));
                libA8FDA37D_gv_uT_DPS_Damage[lv_vCustomValue][0] = 0.0;
                TimerRestart(libA8FDA37D_gv_uT_DPS_Timer[lv_vCustomValue][0]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_DealsDamage_Init () {
    libA8FDA37D_gt_UT_DPS_DealsDamage = TriggerCreate("libA8FDA37D_gt_UT_DPS_DealsDamage_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DPS_DealsDamage, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_UT_DPS_DealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Summon
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_Summon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libA8FDA37D_gv_uT_DPS_UG, EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), libA8FDA37D_gv_uT_DPS_CustomValueIndex, UnitGetCustomValue(EventUnit(), libA8FDA37D_gv_uT_DPS_CustomValueIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_Summon_Init () {
    libA8FDA37D_gt_UT_DPS_Summon = TriggerCreate("libA8FDA37D_gt_UT_DPS_Summon_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Summon, false);
    TriggerAddEventUnitCreated(libA8FDA37D_gt_UT_DPS_Summon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Dies
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libA8FDA37D_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_Dies_Init () {
    libA8FDA37D_gt_UT_DPS_Dies = TriggerCreate("libA8FDA37D_gt_UT_DPS_Dies_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DPS_Dies, false);
    TriggerAddEventUnitDied(libA8FDA37D_gt_UT_DPS_Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_PauseGlobal
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DPS_PauseGlobal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9A07E091_ae = libA8FDA37D_gv_uT_DPS_MaxUnits;
    int auto9A07E091_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A07E091_var = 1;
    for ( ; auto9A07E091_var <= auto9A07E091_ae; auto9A07E091_var += 1 ) {
        if ((EventTimer() == libA8FDA37D_gv_uT_DPS_Timer[auto9A07E091_var][0])) {
            TimerPause(libA8FDA37D_gv_uT_DPS_Timer[auto9A07E091_var][1], true);
            TextExpressionSetToken("Param/Expression/lib_A8FDA37D_011A685D", "A", FixedToText(libA8FDA37D_gv_uT_DPS_Avg[auto9A07E091_var], 1));
            TextTagSetText(libHots_gf_TextTagForUnit(libA8FDA37D_gv_uT_DPS_Units[auto9A07E091_var], 1), TextExpressionAssemble("Param/Expression/lib_A8FDA37D_011A685D"));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DPS_PauseGlobal_Init () {
    libA8FDA37D_gt_UT_DPS_PauseGlobal = TriggerCreate("libA8FDA37D_gt_UT_DPS_PauseGlobal_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DPS_PauseGlobal, false);
    TriggerAddEventTimer(libA8FDA37D_gt_UT_DPS_PauseGlobal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Vision
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libA8FDA37D_gv_uT_Revealed == false)) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        libA8FDA37D_gv_uT_Revealer = VisRevealerLastCreated();
        libA8FDA37D_gv_uT_Revealed = true;
    }
    else {
        VisRevealerDestroy(libA8FDA37D_gv_uT_Revealer);
        libA8FDA37D_gv_uT_Revealed = false;
    }
    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Vision_Init () {
    libA8FDA37D_gt_UT_Vision = TriggerCreate("libA8FDA37D_gt_UT_Vision_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Vision, c_playerAny, "-vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cooldown
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Cooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA8FDA37D_gf_UT_Cooldown(EventPlayer());
    if ((PlayerGetAlliance(1, c_allianceIdControl, 2) == true)) {
        libA8FDA37D_gf_UT_Cooldown(2);
    }

    libA8FDA37D_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Cooldown_Init () {
    libA8FDA37D_gt_UT_Cooldown = TriggerCreate("libA8FDA37D_gt_UT_Cooldown_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Cooldown, c_playerAny, "-cdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers toggle
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_Numberstoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_PlayersWithNumbers, EventPlayer()) == false) || (TriggerIsEnabled(libA8FDA37D_gt_UT_NumbersHeal) == false))) {
        PlayerGroupAdd(libA8FDA37D_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_B93DE69F"));
        TriggerEnable(libA8FDA37D_gt_UT_NumbersDamage, true);
        TriggerEnable(libA8FDA37D_gt_UT_NumbersHeal, true);
    }
    else {
        PlayerGroupRemove(libA8FDA37D_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_92BACCAD"));
        if ((PlayerGroupCount(libA8FDA37D_gv_uT_PlayersWithNumbers) == 0)) {
            TriggerEnable(libA8FDA37D_gt_UT_NumbersDamage, false);
            TriggerEnable(libA8FDA37D_gt_UT_NumbersHeal, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_Numberstoggle_Init () {
    libA8FDA37D_gt_UT_Numberstoggle = TriggerCreate("libA8FDA37D_gt_UT_Numberstoggle_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_Numberstoggle, c_playerAny, "-numbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libA8FDA37D_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libA8FDA37D_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_NumbersDamage_Init () {
    libA8FDA37D_gt_UT_NumbersDamage = TriggerCreate("libA8FDA37D_gt_UT_NumbersDamage_Func");
    TriggerEnable(libA8FDA37D_gt_UT_NumbersDamage, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_UT_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Heal
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_NumbersHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitHealAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libA8FDA37D_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    if ((EventUnitHealAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        if ((EventUnitHealAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        }

    }
    else {
        if ((EventUnitHealAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 12);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libA8FDA37D_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_NumbersHeal_Init () {
    libA8FDA37D_gt_UT_NumbersHeal = TriggerCreate("libA8FDA37D_gt_UT_NumbersHeal_Func");
    TriggerEnable(libA8FDA37D_gt_UT_NumbersHeal, false);
    TriggerAddEventUnitHealed(libA8FDA37D_gt_UT_NumbersHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_LogDisplay
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DL_LogDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vChangeInDataPlayer;

    // Automatic Variable Declarations
    string autoEE91CC15_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA8FDA37D_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libA8FDA37D_gt_UT_DL_HealLogging, true);
    autoEE91CC15_val = StringWord(EventChatMessage(false), 2);
    if (autoEE91CC15_val == "2") {
        if ((libA8FDA37D_gv_uT_DL_PlayerData[EventPlayer()] != libA8FDA37D_gf_UT_OtherPlayer(EventPlayer()))) {
            libA8FDA37D_gv_uT_DL_PlayerData[EventPlayer()] = libA8FDA37D_gf_UT_OtherPlayer(EventPlayer());
            lv_vChangeInDataPlayer = true;
        }

    }
    else if (autoEE91CC15_val == "clear") {
        libA8FDA37D_gf_UT_DL_LogClear(EventPlayer());
        return true;
    }
    else if (autoEE91CC15_val == "stop") {
        PlayerGroupRemove(libA8FDA37D_gv_uT_DL_LoggingPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_9872D9F9"));
        if (((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_DL_LoggingPlayers, 1) == false) || (PlayerStatus(1) != c_playerStatusActive)) && ((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_DL_LoggingPlayers, 2) == false) || (PlayerStatus(2) != c_playerStatusActive))) {
            TriggerEnable(libA8FDA37D_gt_UT_DL_DamageLogging, false);
            TriggerEnable(libA8FDA37D_gt_UT_DL_HealLogging, false);
        }

        return true;
    }
    else {
        if ((libA8FDA37D_gv_uT_DL_PlayerData[EventPlayer()] != EventPlayer())) {
            libA8FDA37D_gv_uT_DL_PlayerData[EventPlayer()] = EventPlayer();
            lv_vChangeInDataPlayer = true;
        }

    }
    if (((libA8FDA37D_gv_uT_DL_LogDialog == c_invalidDialogId) || (lv_vChangeInDataPlayer == true) || (DialogIsVisible(libA8FDA37D_gv_uT_DL_LogDialog, EventPlayer()) == false))) {
        libA8FDA37D_gf_UT_DL_DialogCreate();
        libA8FDA37D_gf_UT_DL_DialogUpdate(libA8FDA37D_gv_uT_DL_PlayerData[EventPlayer()], EventPlayer());
        DialogSetVisible(libA8FDA37D_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), true);
        TriggerExecute(libA8FDA37D_gt_UT_DL_PeriodicUpdate, true, false);
    }
    else {
        DialogSetVisible(libA8FDA37D_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DL_LogDisplay_Init () {
    libA8FDA37D_gt_UT_DL_LogDisplay = TriggerCreate("libA8FDA37D_gt_UT_DL_LogDisplay_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_UT_DL_LogDisplay, c_playerAny, "-log", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DL_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (((DialogIsVisible(libA8FDA37D_gv_uT_DL_LogDialog, 1) == true) || (DialogIsVisible(libA8FDA37D_gv_uT_DL_LogDialog, 2) == true))) {
        libA8FDA37D_gf_UT_DL_DialogUpdate(libA8FDA37D_gv_uT_DL_PlayerData[1], 1);
        libA8FDA37D_gf_UT_DL_DialogUpdate(libA8FDA37D_gv_uT_DL_PlayerData[2], 2);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DL_PeriodicUpdate_Init () {
    libA8FDA37D_gt_UT_DL_PeriodicUpdate = TriggerCreate("libA8FDA37D_gt_UT_DL_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Damage Logging
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DL_DamageLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1485A5BD_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto1485A5BD_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_DL_LoggingPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != EventUnit()))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1485A5BD_var = 1;
    for ( ; auto1485A5BD_var <= auto1485A5BD_ae; auto1485A5BD_var += 1 ) {
        if (((UnitGetType(EventUnitDamageSourceUnit()) == libA8FDA37D_gv_uT_DL_Data[auto1485A5BD_var][0][EventUnitDamageSourcePlayer()].lv_unitType) || (libA8FDA37D_gf_UT_AreMorphUnits(UnitGetType(EventUnitDamageSourceUnit()), libA8FDA37D_gv_uT_DL_Data[auto1485A5BD_var][0][EventUnitDamageSourcePlayer()].lv_unitType) == true))) {
            libA8FDA37D_gf_UT_DL_AddHealingDamage(auto1485A5BD_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
            break;
        }
        else {
            if ((libA8FDA37D_gv_uT_DL_Data[auto1485A5BD_var][0][EventUnitDamageSourcePlayer()].lv_unitType == null)) {
                libA8FDA37D_gv_uT_DL_Data[auto1485A5BD_var][0][EventUnitDamageSourcePlayer()].lv_unitType = UnitGetType(EventUnitDamageSourceUnit());
                libA8FDA37D_gf_UT_DL_AddHealingDamage(auto1485A5BD_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
                break;
            }
            else {
                if ((auto1485A5BD_var == libA8FDA37D_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitDamageSourcePlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_A5C286B0"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DL_DamageLogging_Init () {
    libA8FDA37D_gt_UT_DL_DamageLogging = TriggerCreate("libA8FDA37D_gt_UT_DL_DamageLogging_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DL_DamageLogging, false);
    TriggerAddEventUnitDamaged(libA8FDA37D_gt_UT_DL_DamageLogging, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Heal Logging
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_DL_HealLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto430A647C_ae = libA8FDA37D_gv_uT_DL_MaxUnits;
    int auto430A647C_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libA8FDA37D_gv_uT_DL_LoggingPlayers, EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto430A647C_var = 1;
    for ( ; auto430A647C_var <= auto430A647C_ae; auto430A647C_var += 1 ) {
        if ((UnitGetType(EventUnitHealLaunchUnit()) == libA8FDA37D_gv_uT_DL_Data[auto430A647C_var][1][EventUnitHealLaunchPlayer()].lv_unitType)) {
            libA8FDA37D_gf_UT_DL_AddHealingDamage(auto430A647C_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
            break;
        }
        else {
            if ((libA8FDA37D_gv_uT_DL_Data[auto430A647C_var][1][EventUnitHealLaunchPlayer()].lv_unitType == null)) {
                libA8FDA37D_gv_uT_DL_Data[auto430A647C_var][1][EventUnitHealLaunchPlayer()].lv_unitType = UnitGetType(EventUnitHealLaunchUnit());
                libA8FDA37D_gf_UT_DL_AddHealingDamage(auto430A647C_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
                break;
            }
            else {
                if ((auto430A647C_var == libA8FDA37D_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitHealLaunchPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_A8FDA37D_8B369CB9"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_DL_HealLogging_Init () {
    libA8FDA37D_gt_UT_DL_HealLogging = TriggerCreate("libA8FDA37D_gt_UT_DL_HealLogging_Func");
    TriggerEnable(libA8FDA37D_gt_UT_DL_HealLogging, false);
    TriggerAddEventUnitHealed(libA8FDA37D_gt_UT_DL_HealLogging, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugSelectCommanders
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_CT_DebugSelectCommanders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", libA8FDA37D_gt_UT_StartTrigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_CT_DebugSelectCommanders_Init () {
    libA8FDA37D_gt_CT_DebugSelectCommanders = TriggerCreate("libA8FDA37D_gt_CT_DebugSelectCommanders_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_CT_DebugSelectCommanders, c_playerAny, "select commanders", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_StartTrigger
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_UT_StartTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_UT_StartTrigger_Init () {
    libA8FDA37D_gt_UT_StartTrigger = TriggerCreate("libA8FDA37D_gt_UT_StartTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_DROP
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_gt_SimpleDropAttackExample_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto91E2514B_g;
    int auto91E2514B_u;
    int autoFB1C8E42_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91E2514B_g = UnitGroup(null, c_playerAny, RegionCircle(RegionGetCenter(RegionPlayableMap()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91E2514B_u = UnitGroupCount(auto91E2514B_g, c_unitCountAll);
    for (;; auto91E2514B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto91E2514B_g, auto91E2514B_u);
        if (lv_unit == null) { break; }
        UnitKill(lv_unit);
    }
    autoFB1C8E42_val = StringToInt(StringWord(EventChatMessage(false), 2));
    if (autoFB1C8E42_val == 1) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 2) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 3) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 4) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 5) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 6) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoFB1C8E42_val == 7) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA8FDA37D_gt_SimpleDropAttackExample_Init () {
    libA8FDA37D_gt_SimpleDropAttackExample = TriggerCreate("libA8FDA37D_gt_SimpleDropAttackExample_Func");
    TriggerAddEventChatMessage(libA8FDA37D_gt_SimpleDropAttackExample, c_playerAny, "-drop", false);
}

void libA8FDA37D_InitTriggers () {
    libA8FDA37D_gt_UT_Debug_Init();
    libA8FDA37D_gt_UT_EnableDevCommands_Init();
    libA8FDA37D_gt_UT_DisableDevCommandsforally_Init();
    libA8FDA37D_gt_UT_NukeTest_Init();
    libA8FDA37D_gt_AbilityUsed_Init();
    libA8FDA37D_gt_UnitCreated_Init();
    libA8FDA37D_gt_UnitDied_Init();
    libA8FDA37D_gt_UnitRevived_Init();
    libA8FDA37D_gt_EffectUsed_Init();
    libA8FDA37D_gt_BehaviorChanged_Init();
    libA8FDA37D_gt_UpgradeChanged_Init();
    libA8FDA37D_gt_EffectDealingDamage_Init();
    libA8FDA37D_gt_UT_OldMengsk_Init();
    libA8FDA37D_gt_UT_InfoSave_Init();
    libA8FDA37D_gt_UT_Info_Init();
    libA8FDA37D_gt_UT_InfoButton_Init();
    libA8FDA37D_gt_UT_InfoCreate_Init();
    libA8FDA37D_gt_UT_Mengsk_ContaminatedStrikeDmgScore_Init();
    libA8FDA37D_gt_UT_DebugMutatorSelect_Init();
    libA8FDA37D_gt_UT_Rad_Init();
    libA8FDA37D_gt_UT_ShareControl_Init();
    libA8FDA37D_gt_UT_XP_Init();
    libA8FDA37D_gt_UT_ListDead_Init();
    libA8FDA37D_gt_UT_ListHidden_Init();
    libA8FDA37D_gt_UT_ListMissile_Init();
    libA8FDA37D_gt_UT_ListAll_Init();
    libA8FDA37D_gt_UT_TesseractCannonTEST_Init();
    libA8FDA37D_gt_UT_Resource_Init();
    libA8FDA37D_gt_UT_AllySupply_Init();
    libA8FDA37D_gt_UT_SpawnArtifacts_Init();
    libA8FDA37D_gt_UT_Pause_Init();
    libA8FDA37D_gt_UT_TechReset_Init();
    libA8FDA37D_gt_UT_Money_Init();
    libA8FDA37D_gt_UT_Look_Init();
    libA8FDA37D_gt_UT_sight_Init();
    libA8FDA37D_gt_UT_KillUnits_Init();
    libA8FDA37D_gt_UT_Remove_Init();
    libA8FDA37D_gt_UT_clearscreen_Init();
    libA8FDA37D_gt_UT_PauseAI_Init();
    libA8FDA37D_gt_UT_Speed_Init();
    libA8FDA37D_gt_UT_Supply_Init();
    libA8FDA37D_gt_UT_Give_Init();
    libA8FDA37D_gt_UT_SwitchOwner_Init();
    libA8FDA37D_gt_UT_Cost_Init();
    libA8FDA37D_gt_UT_Unlock_Init();
    libA8FDA37D_gt_UT_Trigdebug_Init();
    libA8FDA37D_gt_UT_GetID_Init();
    libA8FDA37D_gt_UT_Restore_Init();
    libA8FDA37D_gt_UT_ClearEnemy_Init();
    libA8FDA37D_gt_UT_SpawnUnits_Init();
    libA8FDA37D_gt_UT_Teleport_Init();
    libA8FDA37D_gt_UT_Restart_Init();
    libA8FDA37D_gt_UT_Caster_Init();
    libA8FDA37D_gt_UT_Control_Init();
    libA8FDA37D_gt_UT_Ally_Init();
    libA8FDA37D_gt_UT_PvP_Init();
    libA8FDA37D_gt_UT_ListEmotes_Init();
    libA8FDA37D_gt_UT_Emote_ButtonClicked_Init();
    libA8FDA37D_gt_UT_Solo_Init();
    libA8FDA37D_gt_UT_Solo_LnL_CoA_Fix_Init();
    libA8FDA37D_gt_UT_ToggleEco_Init();
    libA8FDA37D_gt_UT_EconomyValue_Init();
    libA8FDA37D_gt_UT_WorkerSaturation_Init();
    libA8FDA37D_gt_UT_FastConstruction_Init();
    libA8FDA37D_gt_UT_FastTrain_Init();
    libA8FDA37D_gt_UT_FastResearch_Init();
    libA8FDA37D_gt_UT_FastArrm_Init();
    libA8FDA37D_gt_UT_FastRevive_Init();
    libA8FDA37D_gt_UT_FastBuild_Init();
    libA8FDA37D_gt_UT_encomps_Init();
    libA8FDA37D_gt_UT_sbank_Init();
    libA8FDA37D_gt_UT_rbank_Init();
    libA8FDA37D_gt_UT_RefillInit_Init();
    libA8FDA37D_gt_UT_Refill_Init();
    libA8FDA37D_gt_UT_Replace_Init();
    libA8FDA37D_gt_UT_VoidRiftDebug_Init();
    libA8FDA37D_gt_UT_UnitInfo_Init();
    libA8FDA37D_gt_UT_UnitInfoUpdate_Init();
    libA8FDA37D_gt_UT_UI_Init();
    libA8FDA37D_gt_UT_UI_CtrlH_Init();
    libA8FDA37D_gt_UT_ButtonMonitor_Init();
    libA8FDA37D_gt_UT_ButtonUsage_Init();
    libA8FDA37D_gt_UT_HotkeyChange_Init();
    libA8FDA37D_gt_UT_Godmode_Init();
    libA8FDA37D_gt_UT_Godmode_unit_created_Init();
    libA8FDA37D_gt_UT_DifficultySet_Init();
    libA8FDA37D_gt_UT_AlarakCDR_Init();
    libA8FDA37D_gt_UT_AlarakCDREffectUsed_Init();
    libA8FDA37D_gt_UT_TopRefresh_Init();
    libA8FDA37D_gt_UT_AIChoice_Init();
    libA8FDA37D_gt_UT_AIChoiceOK_Player02_Init();
    libA8FDA37D_gt_UT_Trace_Init();
    libA8FDA37D_gt_UT_Tracing_Init();
    libA8FDA37D_gt_UT_DeTracing_Init();
    libA8FDA37D_gt_UT_CopyPaste_Init();
    libA8FDA37D_gt_UT_CTRLC_Init();
    libA8FDA37D_gt_UT_CTRLV_Init();
    libA8FDA37D_gt_UT_PathCheck_Init();
    libA8FDA37D_gt_UT_PathCheckTAB_Init();
    libA8FDA37D_gt_UT_ArtSpawn_Init();
    libA8FDA37D_gt_UT_Pie_Init();
    libA8FDA37D_gt_UT_Light_Init();
    libA8FDA37D_gt_UT_Plus_Init();
    libA8FDA37D_gt_UT_Minus_Init();
    libA8FDA37D_gt_UT_Graph_Initialization_Init();
    libA8FDA37D_gt_UT_Graph_Timer_Init();
    libA8FDA37D_gt_UT_Graph_ShowIncome_Init();
    libA8FDA37D_gt_UT_Graph_ShowArmyValue_Init();
    libA8FDA37D_gt_UT_Graph_ShowAPM_Init();
    libA8FDA37D_gt_UT_Graph_ShowKills_Init();
    libA8FDA37D_gt_UT_Graph_ShowValueLost_Init();
    libA8FDA37D_gt_UT_Graph_ButtonCreate_Init();
    libA8FDA37D_gt_UT_Clicked_Init();
    libA8FDA37D_gt_UT_MissileMovers_Init();
    libA8FDA37D_gt_UT_MissileCreated_Init();
    libA8FDA37D_gt_UT_Height_Init();
    libA8FDA37D_gt_UT_AttackSpeed_Init();
    libA8FDA37D_gt_UT_Life_Init();
    libA8FDA37D_gt_UT_Energy_Init();
    libA8FDA37D_gt_UT_MovementSpeed_Init();
    libA8FDA37D_gt_UT_Acceleration_Init();
    libA8FDA37D_gt_UT_Range_Init();
    libA8FDA37D_gt_UT_ARange_Init();
    libA8FDA37D_gt_UT_Armor_Init();
    libA8FDA37D_gt_UT_TintColor_Init();
    libA8FDA37D_gt_UT_Scale_Init();
    libA8FDA37D_gt_UT_TimeScale_Init();
    libA8FDA37D_gt_UT_ActorMsg_Init();
    libA8FDA37D_gt_UT_AirGround_Init();
    libA8FDA37D_gt_UT_EmpowerInit_Init();
    libA8FDA37D_gt_UT_EmpowerUnitCreated_Init();
    libA8FDA37D_gt_UT_Horde_Init_Init();
    libA8FDA37D_gt_UT_Horde_Remove_Init();
    libA8FDA37D_gt_UT_Horde_UnitCreated_Init();
    libA8FDA37D_gt_UT_Horde_SendWave_Init();
    libA8FDA37D_gt_UT_Mastery_Init();
    libA8FDA37D_gt_UT_MasteryButtonClicked_Init();
    libA8FDA37D_gt_UT_CommanderSwitched_Init();
    libA8FDA37D_gt_UT_SpawnAttackWave_Init();
    libA8FDA37D_gt_UT_AttackWaveAttack_Init();
    libA8FDA37D_gt_UT_RemoveWave_Init();
    libA8FDA37D_gt_UT_Camera_TurnOnOff_Init();
    libA8FDA37D_gt_UT_Camera_Reset_Init();
    libA8FDA37D_gt_UT_Camera_Top_Init();
    libA8FDA37D_gt_UT_Camera_KeyUp_Init();
    libA8FDA37D_gt_UT_Camera_KeyDown_Init();
    libA8FDA37D_gt_UT_Camera_PeriodicUpdate_Init();
    libA8FDA37D_gt_UT_Dummy_Init();
    libA8FDA37D_gt_UT_DummyTakesDamage_Init();
    libA8FDA37D_gt_UT_DummyUpdate_Init();
    libA8FDA37D_gt_UT_DummyDestroyed_Init();
    libA8FDA37D_gt_UT_DPS_Init();
    libA8FDA37D_gt_UT_DPS_Stop_Init();
    libA8FDA37D_gt_UT_DPS_DealsDamage_Init();
    libA8FDA37D_gt_UT_DPS_Summon_Init();
    libA8FDA37D_gt_UT_DPS_Dies_Init();
    libA8FDA37D_gt_UT_DPS_PauseGlobal_Init();
    libA8FDA37D_gt_UT_Vision_Init();
    libA8FDA37D_gt_UT_Cooldown_Init();
    libA8FDA37D_gt_UT_Numberstoggle_Init();
    libA8FDA37D_gt_UT_NumbersDamage_Init();
    libA8FDA37D_gt_UT_NumbersHeal_Init();
    libA8FDA37D_gt_UT_DL_LogDisplay_Init();
    libA8FDA37D_gt_UT_DL_PeriodicUpdate_Init();
    libA8FDA37D_gt_UT_DL_DamageLogging_Init();
    libA8FDA37D_gt_UT_DL_HealLogging_Init();
    libA8FDA37D_gt_CT_DebugSelectCommanders_Init();
    libA8FDA37D_gt_UT_StartTrigger_Init();
    libA8FDA37D_gt_SimpleDropAttackExample_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libA8FDA37D_InitLib_completed = false;

void libA8FDA37D_InitLib () {
    if (libA8FDA37D_InitLib_completed) {
        return;
    }

    libA8FDA37D_InitLib_completed = true;

    libA8FDA37D_InitLibraries();
    libA8FDA37D_InitVariables();
    libA8FDA37D_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"
include "LibCOUI"
include "LibCOMU"
include "Lib01833E95"
include "Lib860A1A1F"

