include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC_h"
include "LibCOMI_h"
include "LibCOMU_h"
include "LibCOUT_h"

include "LibCOUI_h"

//--------------------------------------------------------------------------------------------------
// Library: UI (COOP)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOUI_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
    libCOMU_InitVariables();
    libCOUT_InitVariables();
}

// Variable Initialization
bool libCOUI_InitVariables_completed = false;

void libCOUI_InitVariables () {
    int init_i;
    int init_j;

    if (libCOUI_InitVariables_completed) {
        return;
    }

    libCOUI_InitVariables_completed = true;

    libCOUI_gv_wEBSITE = StringExternal("Param/Value/lib_COUI_E47C407D");
    libCOUI_gv_aNNOUNCE_MESSAGE = StringExternal("Param/Value/lib_COUI_0CFCCE04");
    libCOUI_gv_dialog = c_invalidDialogId;
    libCOUI_gv_startMissionDialogButton = c_invalidDialogControlId;
    libCOUI_gv_selectMissionDialog = c_invalidDialogId;
    libCOUI_gv_selectMissionDialogBig = c_invalidDialogId;
    libCOUI_gv_selectMissionPulldownDialog = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCOUI_gv_mapFiles[init_i] = "";
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCOUI_gv_missionButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCOUI_gv_missionImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCOUI_gv_missionText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libCOUI_gv_mapBorder[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_missionsButton = c_invalidDialogControlId;
    libCOUI_gv_amonFactionsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCOUI_gv_mAX_FACTIONS; init_i += 1) {
        libCOUI_gv_raceButton[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_cC_WorldCoverDlg = c_invalidDialogId;
    libCOUI_gv_aF_CS_News = StringExternal("Param/Value/lib_COUI_D665D144");
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOUI_gv_aF_CS_CutsceneDialog[init_i] = c_invalidDialogId;
    }
    libCOUI_gv_aF_CS_CommanderMiraDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOUI_gv_aF_CS_CommanderCutscenes[init_i] = c_cutsceneNone;
    }
    libCOUI_gv_aF_CS_NewsDialog = c_invalidDialogId;
    libCOUI_gv_aF_CS_PatchDialog = c_invalidDialogId;
    libCOUI_gv_aF_CS_NewsControlButton = c_invalidDialogControlId;
    libCOUI_gv_aF_CS_NewsDialogPanel = c_invalidDialogControlId;
    libCOUI_gv_aF_CS_AllyPrestigeDialog = c_invalidDialogId;
    libCOUI_gv_uT_CommandsButton = c_invalidDialogControlId;
    libCOUI_gv_playAmonButton = c_invalidDialogControlId;
    libCOUI_gv_playRandomButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libCOUI_gv_chosenTeam[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_COMMSELECTMAX; init_i += 1) {
        libCOUI_gv_commanderOption[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_commanderOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOUI_gv_commanderOption[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_commanderOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOUI_gv_commanderOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOUI_gv_commanderOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOUI_gv_amonOption[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_amonOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOUI_gv_amonOption[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_amonOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOUI_gv_amonOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOUI_gv_amonOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOUI_gv_randomOption[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_randomOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOUI_gv_randomOption[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_randomOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOUI_gv_randomOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOUI_gv_randomOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    libCOUI_gv_cU_CommanderSelectionPanel = c_invalidDialogControlId;
    libCOUI_gv_uT_AllyMasteryButton = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsContainer = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsTabControl = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsTabInfoButton = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsTabUnitsButton = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsTabResearchButton = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsBackground = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsInfoContainer = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsUnitsContainer = c_invalidDialogControlId;
    libCOUI_gv_vU_DetailsResearchContainer = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderDialog = c_invalidDialogId;
    libCOUI_gv_cU_CommanderPanel = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderReadyButton = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderReadyCheckMark = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderReadyLabelSelf = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderReadyLabelAlly = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderInfoPanel = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderSelectedNameSelf = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderAccountNameSelf = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderSelectedPrestigeSelf = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderLevelLabelSelf = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMasteryLabelSelf = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOUI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOUI_gv_cU_CommanderAbilitiesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderAbilitiesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderAbilitiesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderAbilitiesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOUI_gv_cU_CommanderUnitsButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUnitsButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUnitsButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUnitsButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOUI_gv_cU_CommanderUpgradesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUpgradesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUpgradesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderUpgradesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOUI_gv_cU_CommanderLevelUpButton = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderLevelDownButton = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderPanelUpgrade = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMasteryButton = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMasteryCheckbox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK; init_i += 1) {
        libCOUI_gv_cU_CommanderPrestigesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderPrestigesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderPrestigesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOUI_gv_cU_CommanderPrestigesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOUI_gv_aF_CS_AllyPrestigeButton = c_invalidDialogControlId;
    libCOUI_gv_cU_MasteryDialog = c_invalidDialogId;
    libCOUI_gv_cU_MasteryPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryItemPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryNameLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryPointLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryValueLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryPlusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOUI_gv_cU_MasteryMinusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MASTERY_CATEGORIES; init_i += 1) {
        libCOUI_gv_cU_MasteryCategoryPoints[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_cU_MasteryAcceptButton = c_invalidDialogControlId;
    libCOUI_gv_cU_MasteryResetButton = c_invalidDialogControlId;
    libCOUI_gv_cU_MasteryLevelUpButton = c_invalidDialogControlId;
    libCOUI_gv_cU_MasteryLevelDownButton = c_invalidDialogControlId;
    libCOUI_gv_cU_MasteryLevelLabel = c_invalidDialogControlId;
    libCOUI_gv_vU_GameModePulldown = c_invalidDialogControlId;
    libCOUI_gv_vU_CommanderDifficultyPulldown = c_invalidDialogControlId;
    libCOUI_gv_vU_CommanderEnemyFactionPulldown = c_invalidDialogControlId;
    libCOUI_gv_vU_CommanderPanelSettings = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMutatorButton = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMutatorCountLabel = c_invalidDialogControlId;
    libCOUI_gv_cU_CommanderMutatorChallengePulldown = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOUI_gv_cU_PlayerPrestigeBrief[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOUI_gv_cU_PlayerPrestigeBriefImage[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_cU_EnemyBrief = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOUI_gv_cU_MinimapAllyViewPing[init_i] = c_invalidPingId;
    }
    libCOUI_gv_cU_MinimapAllyViewEnabled = true;
    libCOUI_gv_cU_ArmyButton = c_invalidDialogControlId;
    libCOUI_gv_cU_ArmyButtonTipPanel = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_Style = libCOUI_ge_SingularBossBarStyle_Objective;
    libCOUI_gv_cU_BB_Panel = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_TitleLabel = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_HpLabel = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_HpFullImage = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_HpCurrentImage = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_HpBackground = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_HpBackground2 = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_BossBG = c_invalidDialogControlId;
    libCOUI_gv_cU_BB_ObjectiveBG = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOUI_gv_cU_HeroReviveTimer[init_i][init_j] = 60.0;
        }
    }
    libCOUI_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOUI_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOUI_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOUI_gv_cU_HeroShowLevel[init_i][init_j] = true;
        }
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        libCOUI_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOUI_gv_cU_VoidHeroUIRevivable[init_i][init_j] = true;
        }
    }
    libCOUI_gv_cU_HeroAutomaticIndex = 1;
    libCOUI_gv_cU_HealthWatchDialog = c_invalidDialogId;
    libCOUI_gv_cU_HealthWatchImage = c_invalidDialogControlId;
    libCOUI_gv_cU_MissionUIContainer = c_invalidDialogControlId;
    libCOUI_gv_cU_ObjectivePanel = c_invalidDialogControlId;
    libCOUI_gv_cU_ProgressBarPanel = c_invalidDialogControlId;
    libCOUI_gv_cU_ProgressBarLabelTitle = c_invalidDialogControlId;
    libCOUI_gv_cU_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libCOUI_gv_cU_ProgressBarImageBar = c_invalidDialogControlId;
    libCOUI_gv_cU_ProgressBarMax = 100;
    libCOUI_gv_pUC_ProgressBarWidth = 399;
    libCOUI_gv_pUC_ProgressBarHeight = 27;
    libCOUI_gv_cU_TimerWindowHighlightFrame = c_invalidDialogControlId;
    libCOUI_gv_cU_TimerWindowDangerThreshold = 90.0;
    libCOUI_gv_cU_TimerWindowTimer = TimerCreate();
    libCOUI_gv_cU_TimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= libCOUI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOUI_gv_cU_WaveTimerWindows[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOUI_gv_cU_WaveTimerWindowTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOUI_gv_cU_WaveTimerWindowTitle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOUI_gv_cU_WaveTimerWindowTime[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOUI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        for (init_j = 0; init_j <= libCOUI_gv_cUC_WAVETIMERUNITMAX; init_j += 1) {
            libCOUI_gv_cU_WaveTimerWindowIcon[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOUI_gv_cU_FanfareFlash = c_invalidDialogControlId;
    libCOUI_gv_cU_FanfareCloseButton = c_invalidDialogControlId;
    libCOUI_gv_cU_FanfareConvertToReplayButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOUI_gv_cU_FanfareResult[init_i] = c_gameOverVictory;
    }
    libCOUI_gv_cU_FanfarePanel = c_invalidDialogControlId;
    libCOUI_gv_cU_FanfareDialog = c_invalidDialogId;
    libCOUI_gv_cU_ScoreDialog = c_invalidDialogId;
    libCOUI_gv_cU_ScorePanel = c_invalidDialogControlId;
    libCOUI_gv_cU_ScoreTitleLabel = c_invalidDialogControlId;
    libCOUI_gv_cU_ScoreContinueButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOUI_gv_cU_ScoreCategoryTitleLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOUI_gv_cU_ScoreCategoryValueLabel[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_cU_ScoreTotalValueLabel = c_invalidDialogControlId;
    libCOUI_gv_aF_ScoreButton = c_invalidDialogControlId;
    libCOUI_gv_aF_Score_KillGraph = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOUI_gv_aF_Score_PieCharts[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOUI_gv_aF_Score_FinalButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOUI_gv_aF_Score_FinalButtonLabel[init_i] = c_invalidDialogControlId;
    }
    libCOUI_gv_aF_KillNumbers = c_invalidDialogId;
    libCOUI_gv_aF_SlimUI_PlayerGroup = PlayerGroupEmpty();
}

// Presets
// Functions
int libCOUI_gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parent, lp_type, lp_name);
    if ((lp_players == PlayerGroupEmpty())) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), lp_players, true);
    }
    return DialogControlLastCreated();
}

void libCOUI_gf_UpdateMapSelection (int lp_player, int lp_mapIndex) {
    // Variable Declarations
    int lv_i;
    color lv_color;
    int lv_p;
    int lv_votes;
    int lv_mapIndex;
    int lv_old;

    // Automatic Variable Declarations
    int autoF0DC52B4_ae;
    const int autoF0DC52B4_ai = 1;
    playergroup auto41CE6B1A_g;
    int auto0FFF1602_val;

    // Variable Initialization
    lv_color = Color(0,0,0);
    lv_mapIndex = lp_mapIndex;
    lv_old = libCOUI_gv_selected[lp_player];

    // Implementation
    libCOUI_gv_selected[lp_player] = lv_mapIndex;
    autoF0DC52B4_ae = libCOUI_gv_totalMaps;
    lv_i = 1;
    for ( ; ( (autoF0DC52B4_ai >= 0 && lv_i <= autoF0DC52B4_ae) || (autoF0DC52B4_ai < 0 && lv_i >= autoF0DC52B4_ae) ) ; lv_i += autoF0DC52B4_ai ) {
        lv_votes = 0;
        auto41CE6B1A_g = PlayerGroupAll();
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(auto41CE6B1A_g, lv_p);
            if (lv_p < 0) { break; }
            if ((PlayerType(lv_p) == c_playerTypeUser) && (libCOUI_gv_selected[lv_p] == lv_i)) {
                lv_votes += 1;
                lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false));
            }

        }
        auto0FFF1602_val = lv_votes;
        if (auto0FFF1602_val == 0) {
            DialogControlSetVisible(libCOUI_gv_mapBorder[lv_i], libCOMI_gv_all, false);
        }
        else if (auto0FFF1602_val == 1) {
            libNtve_gf_SetDialogItemColor(libCOUI_gv_mapBorder[lv_i], lv_color, libCOMI_gv_all);
            DialogControlSetVisible(libCOUI_gv_mapBorder[lv_i], libCOMI_gv_all, true);
        }
        else {
            libNtve_gf_SetDialogItemColor(libCOUI_gv_mapBorder[lv_i], Color(100.00, 100.00, 100.00), libCOMI_gv_all);
            DialogControlSetVisible(libCOUI_gv_mapBorder[lv_i], libCOMI_gv_all, true);
        }
    }
    DialogControlSelectItem(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, lv_mapIndex);
}

void libCOUI_gf_CreateFactionsDialog () {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;
    string lv_faction;

    // Automatic Variable Declarations
    int auto9244B874_ae;
    int auto9244B874_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1800, 100, c_anchorBottomLeft, 130, 30, true);
    libCOUI_gv_amonFactionsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    auto9244B874_ae = UserDataInstanceCount("CoopAIFactions");
    auto9244B874_var = 1;
    for ( ; auto9244B874_var <= auto9244B874_ae; auto9244B874_var += 1 ) {
        lv_faction = UserDataInstance("CoopAIFactions", auto9244B874_var);
        if ((UserDataGetInt("CoopAIFactions", lv_faction, "HideInLauncher", 1) == 1)) {
            continue;
        }

        if ((auto9244B874_var > libCOUI_gv_mAX_FACTIONS)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_4F4CF9F9"), true);
            break;
        }

        libCOUI_gv_totalFactions += 1;
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/UnitIconFrameTemplate");
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 60, 60);
        DialogControlSetPosition(DialogControlLastCreated(), libCOMI_gv_all, c_anchorBottomLeft, (130 + (libCOUI_gv_totalFactions * 70)), 0);
        libCOUI_gv_raceFaction[libCOUI_gv_totalFactions] = lv_faction;
        libCOUI_gv_raceButton[libCOUI_gv_totalFactions] = DialogControlLastCreated();
        lv_image = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_raceButton[libCOUI_gv_totalFactions], libCOMI_gv_all);
        libNtve_gf_SetDialogItemImage(lv_image, UserDataGetImagePath("CoopAIFactions", lv_faction, "Icon", 1), libCOMI_gv_all);
        libNtve_gf_SetDialogItemTooltip(libCOUI_gv_raceButton[libCOUI_gv_totalFactions], UserDataGetText("CoopAIFactions", lv_faction, "Name", 1), libCOMI_gv_all);
    }
    DialogSetVisible(libCOUI_gv_amonFactionsDialog, PlayerGroupAll(), true);
}

void libCOUI_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player) {
    // Variable Declarations
    playergroup lv_coverPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coverPlayers = PlayerGroupEmpty();

    // Implementation
    lv_coverPlayers = PlayerGroupSingle(lp_player);
    if ((libCOUI_gv_cC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libCOUI_gv_cC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libCOUI_gv_cC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libCOUI_gv_cC_WorldCoverDlg, lv_coverPlayers, lp_showHide);
}

trigger auto_libCOUI_gf_AF_CS_NewsCreate_Trigger = null;

void libCOUI_gf_AF_CS_NewsCreate () {
    if (auto_libCOUI_gf_AF_CS_NewsCreate_Trigger == null) {
        auto_libCOUI_gf_AF_CS_NewsCreate_Trigger = TriggerCreate("auto_libCOUI_gf_AF_CS_NewsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_AF_CS_NewsCreate_Trigger, false, false);
}

bool auto_libCOUI_gf_AF_CS_NewsCreate_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 600, c_anchorTopRight, 0, -40, true);
    libCOUI_gv_aF_CS_NewsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOUT_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/NewsSection");
    libCOUI_gv_aF_CS_NewsDialogPanel = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeLabel, "NewsText");
    TextExpressionSetToken("Param/Expression/lib_COUI_BD844EC0", "A", libCOUI_gv_aF_CS_News);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COUI_BD844EC0"), PlayerGroupAll());
    DialogControlHookup(libCOUI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeButton, "ControlButton");
    libCOUI_gv_aF_CS_NewsControlButton = DialogControlLastCreated();
    DialogCreate(200, 50, c_anchorBottomRight, 0, 0, true);
    libCOUI_gv_aF_CS_PatchDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOUT_gf_UT_ActiveCommanderPlayers(), true);
    TextExpressionSetToken("Param/Expression/lib_COUI_81B1D938", "A", StringToText(FixedToString(libCOUI_gv_cURRENT_VERSION, c_fixedPrecisionAny)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottomRight, 10, 10, TextExpressionAssemble("Param/Expression/lib_COUI_81B1D938"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchStyle", PlayerGroupAll());
    Wait(3.5, c_timeGame);
    DialogControlSendAnimationEvent(libCOUI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "ShowEv");
    Wait(20.0, c_timeGame);
    if ((libCOUI_gv_aF_CS_NewsControlButtonClicked == false)) {
        DialogControlSendAnimationEvent(libCOUI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "HideEv");
    }

    return true;
}

void libCOUI_gf_AF_CS_CommanderCutscenes () {
    // Variable Declarations
    int lv_vA;

    // Automatic Variable Declarations
    const int auto971FE4F1_ae = 2;
    const int auto971FE4F1_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1000, 1050, c_anchorBottomRight, 0, -75, true);
    libCOUI_gv_aF_CS_CutsceneDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), libCOUT_gf_UT_ActiveCommanderPlayers(), true);
    CutsceneSetGlobalFilter("Standard");
    lv_vA = 1;
    for ( ; ( (auto971FE4F1_ai >= 0 && lv_vA <= auto971FE4F1_ae) || (auto971FE4F1_ai < 0 && lv_vA >= auto971FE4F1_ae) ) ; lv_vA += auto971FE4F1_ai ) {
        if ((PlayerStatus(lv_vA) == c_playerStatusActive)) {
            libCOUI_gv_aF_CS_LastActiveCommander[lv_vA] = libCOUT_gf_ActiveCommanderForPlayer3(lv_vA);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_AlliedCommander_Foreground.SC2Cutscene", PlayerGroupAll());
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCOUT_gf_UT_OtherPlayer(lv_vA)), false);
            libCOUI_gv_aF_CS_CommanderCutscenes[lv_vA] = CutsceneGetTriggerControl(DialogControlLastCreated());
            if ((libCOUT_gf_ActiveCommanderForPlayer3(lv_vA) == "Horner")) {
                DialogSetVisible(libCOUI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lv_vA), true);
                CutsceneSetFilter(libCOUI_gv_aF_CS_CommanderCutscenes[lv_vA], "");
            }
            else {
                CutsceneSetFilter(libCOUI_gv_aF_CS_CommanderCutscenes[lv_vA], (libCOUT_gf_ActiveCommanderForPlayer3(lv_vA)));
            }
            CutsceneGoToBookmark(libCOUI_gv_aF_CS_CommanderCutscenes[lv_vA], "CharacterLoopStart");
            CutscenePlay(libCOUI_gv_aF_CS_CommanderCutscenes[lv_vA]);
        }

    }
}

void libCOUI_gf_AF_CS_MiraDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 500, c_anchorRight, 200, 0, true);
    libCOUI_gv_aF_CS_CommanderMiraDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/MiraBRB");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "MiraLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_COUI_866AA99F"), PlayerGroupAll());
}

void libCOUI_gf_CreateGameBriefingRoom () {
    int init_i;

    // Variable Declarations
    int lv_indexPlayer;
    int lv_activePlayers;
    string lv_vCommander;
    int[6] lv_colors;

    // Automatic Variable Declarations
    playergroup auto8DB42E2E_g;
    int autoB53E731A_ae;
    int autoB53E731A_var;
    playergroup autoAF4BA8E4_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_colors[init_i] = 1;
    }

    // Implementation
    lv_colors[1] = 1;
    lv_colors[2] = 2;
    lv_colors[3] = 7;
    lv_colors[4] = 5;
    lv_colors[5] = 6;
    libCOMI_gf_Pause();
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto8DB42E2E_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8DB42E2E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCOUI_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    autoB53E731A_ae = PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers);
    autoB53E731A_var = 1;
    for ( ; autoB53E731A_var <= autoB53E731A_ae; autoB53E731A_var += 1 ) {
        PlayerSetColorIndex(PlayerGroupPlayer(libCOMI_gv_vU_SlotsPlayers, autoB53E731A_var), lv_colors[autoB53E731A_var], true);
    }
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapName(), PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Objective");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapDescription(), PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/DiscordURL");
    TextExpressionSetToken("Param/Expression/lib_COUI_27CD94CD", "A", libCOUI_gv_wEBSITE);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COUI_27CD94CD"), PlayerGroupAll());
    libCOUI_gf_CreateCommandersList();
    libCOUI_gf_UpdateDifficultiesList();
    libCOUI_gf_UpdateGameModeList();
    libCOUI_gf_VU_UpdateEnemyFactionsList();
    libCOUI_gf_CreateCommandersList();
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeImage, "BackgroundImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    Wait(0.0, c_timeGame);
    PlayerSetRace(1, "Prot");
    PlayerSetRace(2, "Prot");
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOUI_gv_aF_CS_CutsceneDialog[0] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), libCOUT_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_CampaignMode_Background.SC2Cutscene", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOUI_gv_aF_CS_CommanderCutscenes[0] = CutsceneGetTriggerControl(DialogControlLastCreated());
    CutscenePlay(CutsceneGetTriggerControl(DialogControlLastCreated()));
    libCOUI_gf_AF_CS_MiraDialogCreate();
    Wait(0.2, c_timeGame);
    libCOUI_gf_AF_CS_CommanderCutscenes();
    libCOUI_gf_CU_MasteryCreate();
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    autoAF4BA8E4_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAF4BA8E4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_SetFreeCommander(lv_indexPlayer, libCOOC_gv_cCX_PlayerCommander[lv_indexPlayer]);
        libCOUI_gf_CU_MasteryInitFromData(lv_indexPlayer);
        libCOUI_gf_CU_MasteryUpdatePoints(lv_indexPlayer);
        libCOUI_gf_CU_MasteryUpdate(lv_indexPlayer);
        libCOUI_gv_cU_CommanderSelect_RefCount += 1;
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            libCOUI_gf_CU_CommanderPlayerReadySet(lv_indexPlayer, true);
        }

        libCOUI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    libCOUI_gf_UpdateCommandersList();
    Wait(0.0, c_timeGame);
    libCOUT_gf_UT_Init_Emoticons();
    TriggerExecute(libCOUT_gt_UT_InfoSave, true, false);
    TriggerExecute(libCOUT_gt_UT_RefillInit, true, false);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gv_vU_HumanPlayers, libCOUT_gv_uT_DL_LoggingPlayers);
    TriggerEnable(libCOUT_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libCOUT_gt_UT_DL_HealLogging, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TriggerEnable(libCOUI_gt_ReadyButtonClicked, true);
    TriggerEnable(libCOUI_gt_CommanderButtonClicked, true);
    TriggerEnable(libCOUI_gt_CU_CommandeAllyLeft, true);
    TriggerEnable(libCOUI_gt_CU_CommanderLevelUpClicked, true);
    TriggerEnable(libCOUI_gt_CU_CommanderLevelDownClicked, true);
    TriggerEnable(libCOUI_gt_CU_CommanderMasteryClicked, true);
    TriggerEnable(libCOUI_gt_CU_CommanderMasteryCheckboxToggle, true);
    TriggerEnable(libCOUI_gt_CU_CommanderMutatorChallengeSelected, true);
    TriggerEnable(libCOUI_gt_CU_PrestigeButtonClicked, true);
    TriggerEnable(libCOUI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOUI_gf_CreateCommandersList () {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;
    int lv_tierIndex;
    int lv_index;
    int lv_levelFrame;
    int lv_compositionSelf;
    int lv_compositionAlly;
    int lv_lastFrame;
    int lv_commandersCount;
    playergroup lv_nobody;
    playergroup lv_all;
    playergroup lv_leaderPlayer;
    int lv_commIndex;
    string lv_indexCommander;
    playergroup lv_team1;
    playergroup lv_team2;

    // Automatic Variable Declarations
    const int auto0C01739E_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto0C01739E_ai = 1;
    const int autoC5EAA611_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int autoC5EAA611_ai = 1;
    const int autoA9D97EF8_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int autoA9D97EF8_ai = 1;
    playergroup auto55B154E9_g;
    int auto55B154E9_var;
    const int autoC2A94121_ae = libCOUI_gv_cUC_UNITSMAXCOUNT;
    const int autoC2A94121_ai = 1;
    const int auto55252B65_ae = libCOUI_gv_cUC_COMMUPGRADETIERCOUNT;
    const int auto55252B65_ai = 1;
    const int auto6F57597E_ae = libCOUI_gv_cUC_ABILITIESMAXCOUNT;
    const int auto6F57597E_ai = 1;
    const int auto4540F4E1_ae = libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto4540F4E1_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;
    lv_levelFrame = c_invalidDialogControlId;
    lv_compositionSelf = c_invalidDialogControlId;
    lv_compositionAlly = c_invalidDialogControlId;
    lv_lastFrame = c_invalidDialogControlId;
    lv_nobody = PlayerGroupEmpty();
    lv_all = PlayerGroupAll();
    lv_leaderPlayer = PlayerGroupSingle(1);
    lv_team1 = GameAttributePlayersForTeam(1);
    lv_team2 = GameAttributePlayersForTeam(2);

    // Implementation
    if ((libCOUI_gv_cU_CommanderDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOUI_gv_cU_CommanderDialog = DialogLastCreated();
    DialogSetVisible(libCOUI_gv_cU_CommanderDialog, libCOMI_gv_vU_HumanPlayers, true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_CommanderSelection/CommanderSelectionTemplate");
    libCOUI_gv_cU_CommanderPanel = DialogControlLastCreated();
    lv_commanderButtons = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderButtons", c_triggerControlTypePanel, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_playAmonButton = libCOUI_gf_HookUpDialogItemandshowforplayers("PlayAmon", c_triggerControlTypeButton, lv_commanderButtons, lv_team1);
    libCOUI_gv_playRandomButton = libCOUI_gf_HookUpDialogItemandshowforplayers("PlayRandom", c_triggerControlTypeButton, lv_commanderButtons, lv_team1);
    lv_commandersCount = UserDataInstanceCount("PlayerCommanders");
    lv_commanderIndex = 1;
    for ( ; ( (auto0C01739E_ai >= 0 && lv_commanderIndex <= auto0C01739E_ae) || (auto0C01739E_ai < 0 && lv_commanderIndex >= auto0C01739E_ae) ) ; lv_commanderIndex += auto0C01739E_ai ) {
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderButton" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_team1);
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_title = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_selection = libCOUI_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_lock = libCOUI_gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOUI_gv_commanderOption[lv_commanderIndex].lv_ready = libCOUI_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        if ((UserDataGetInt("PlayerCommanders", UserDataInstance("PlayerCommanders", lv_commanderIndex), "hidden", 1) == 1)) {
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        }
        else {
            if ((UserDataGetInt("PlayerCommanders", UserDataInstance("PlayerCommanders", lv_commanderIndex), "locked", 1) == 1)) {
                DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, true);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, false);
            }
        }
        if ((lv_commanderIndex > lv_commandersCount)) {
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        }

        libCOUI_gv_cU_CommanderList[lv_commanderIndex] = UserDataInstance("PlayerCommanders", lv_commanderIndex);
        PortraitSetModel(PortraitGetTriggerControl(libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOOC_gf_CC_CommanderPortraitModel(libCOUI_gv_cU_CommanderList[lv_commanderIndex]), false);
        if ((libCOOC_gf_CC_CommanderPortraitActor(libCOUI_gv_cU_CommanderList[lv_commanderIndex]) != null)) {
            PortraitSetActor(PortraitGetTriggerControl(libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOOC_gf_CC_CommanderPortraitActor(libCOUI_gv_cU_CommanderList[lv_commanderIndex]));
        }
        else {
            PortraitSetActor(PortraitGetTriggerControl(libCOUI_gv_commanderOption[lv_commanderIndex].lv_portrait), "PortraitActor");
        }
    }
    lv_commanderIndex = 1;
    for ( ; ( (autoC5EAA611_ai >= 0 && lv_commanderIndex <= autoC5EAA611_ae) || (autoC5EAA611_ai < 0 && lv_commanderIndex >= autoC5EAA611_ae) ) ; lv_commanderIndex += autoC5EAA611_ai ) {
        libCOUI_gv_amonOption[lv_commanderIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderButtonAmon" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOUI_gv_amonOption[lv_commanderIndex].lv_selection = libCOUI_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOUI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOUI_gv_amonOption[lv_commanderIndex].lv_lock = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOUI_gv_amonOption[lv_commanderIndex].lv_ready = libCOUI_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOUI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOUI_gv_amonOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOUI_gv_amonOption[lv_commanderIndex].lv_lock, "Assets\\Factions\\AmonsArmadaLogo.dds", lv_all);
        DialogControlSetVisible(libCOUI_gv_amonOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOUI_gv_amonOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOUI_gv_amonOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    lv_commanderIndex = 1;
    for ( ; ( (autoA9D97EF8_ai >= 0 && lv_commanderIndex <= autoA9D97EF8_ae) || (autoA9D97EF8_ai < 0 && lv_commanderIndex >= autoA9D97EF8_ae) ) ; lv_commanderIndex += autoA9D97EF8_ai ) {
        libCOUI_gv_randomOption[lv_commanderIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderButtonRandom" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOUI_gv_randomOption[lv_commanderIndex].lv_selection = libCOUI_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOUI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOUI_gv_randomOption[lv_commanderIndex].lv_lock = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOUI_gv_randomOption[lv_commanderIndex].lv_ready = libCOUI_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOUI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOUI_gv_randomOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOUI_gv_randomOption[lv_commanderIndex].lv_lock, "Assets\\Textures\\ui_commanderportrait_random.dds", lv_all);
        DialogControlSetVisible(libCOUI_gv_randomOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOUI_gv_randomOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOUI_gv_randomOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    libCOUI_gv_cU_CommanderInfoPanel = libCOUI_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_cU_CommanderSelectedNameSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderInfoPanel, lv_all);
    libCOUI_gv_cU_CommanderSelectedPrestigeSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("PrestigeLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderInfoPanel, lv_all);
    libCOUI_gv_cU_CommanderAccountNameSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("AccountLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderInfoPanel, lv_all);
    auto55B154E9_g = libCOMI_gf_GetHumanPlayers();
    auto55B154E9_var = -1;
    while (true) {
        auto55B154E9_var = PlayerGroupNextPlayer(auto55B154E9_g, auto55B154E9_var);
        if (auto55B154E9_var < 0) { break; }
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(auto55B154E9_var), PlayerGroupSingle(auto55B154E9_var));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto55B154E9_var, false)), PlayerGroupSingle(auto55B154E9_var));
    }
    libCOUI_gv_vU_DetailsContainer = libCOUI_gf_HookUpDialogItemandshowforplayers("DetailsContainer", c_triggerControlTypePanel, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_vU_DetailsTabControl = libCOUI_gf_HookUpDialogItemandshowforplayers("TabControl", c_triggerControlTypePanel, libCOUI_gv_vU_DetailsContainer, lv_all);
    libCOUI_gv_vU_DetailsTabInfoButton = libCOUI_gf_HookUpDialogItemandshowforplayers("InfoButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsContainer, lv_all);
    libCOUI_gv_vU_DetailsTabUnitsButton = libCOUI_gf_HookUpDialogItemandshowforplayers("UnitsButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsContainer, lv_all);
    libCOUI_gv_vU_DetailsTabResearchButton = libCOUI_gf_HookUpDialogItemandshowforplayers("ResearchButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsContainer, lv_all);
    libCOUI_gv_vU_DetailsInfoContainer = libCOUI_gf_HookUpDialogItemandshowforplayers("InfoContainer", c_triggerControlTypePanel, libCOUI_gv_vU_DetailsContainer, lv_nobody);
    libCOUI_gv_vU_DetailsUnitsContainer = libCOUI_gf_HookUpDialogItemandshowforplayers("UnitsContainer", c_triggerControlTypePanel, libCOUI_gv_vU_DetailsContainer, lv_nobody);
    libCOUI_gv_vU_DetailsResearchContainer = libCOUI_gf_HookUpDialogItemandshowforplayers("ResearchContainer", c_triggerControlTypePanel, libCOUI_gv_vU_DetailsContainer, lv_nobody);
    lv_tierIndex = 1;
    for ( ; ( (autoC2A94121_ai >= 0 && lv_tierIndex <= autoC2A94121_ae) || (autoC2A94121_ai < 0 && lv_tierIndex >= autoC2A94121_ae) ) ; lv_tierIndex += autoC2A94121_ai ) {
        libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("Unit" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOUI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_icon = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_all);
        libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_title = libCOUI_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_description = libCOUI_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto55252B65_ai >= 0 && lv_tierIndex <= auto55252B65_ae) || (auto55252B65_ai < 0 && lv_tierIndex >= auto55252B65_ae) ) ; lv_tierIndex += auto55252B65_ai ) {
        libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("Upgrade" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOUI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_icon = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_all);
        libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_title = libCOUI_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_description = libCOUI_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto6F57597E_ai >= 0 && lv_tierIndex <= auto6F57597E_ae) || (auto6F57597E_ai < 0 && lv_tierIndex >= auto6F57597E_ae) ) ; lv_tierIndex += auto6F57597E_ai ) {
        libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers("Ability" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOUI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_icon = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_all);
        libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_title = libCOUI_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_description = libCOUI_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto4540F4E1_ai >= 0 && lv_tierIndex <= auto4540F4E1_ae) || (auto4540F4E1_ai < 0 && lv_tierIndex >= auto4540F4E1_ae) ) ; lv_tierIndex += auto4540F4E1_ai ) {
        libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button = libCOUI_gf_HookUpDialogItemandshowforplayers(libNtve_gf_ConvertStringToUILayoutFrameName(("Prestige" + IntToString(lv_tierIndex))), c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
        libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_icon = libCOUI_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_all);
        libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_title = libCOUI_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_description = libCOUI_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOUI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    libCOUI_gv_cU_CommanderMasteryButton = libCOUI_gf_HookUpDialogItemandshowforplayers("MasterySetButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_nobody);
    libCOUI_gv_cU_CommanderMasteryCheckbox = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryCheckbox", c_triggerControlTypeCheckBox, libCOUI_gv_vU_DetailsResearchContainer, lv_nobody);
    libNtve_gf_SetDialogItemChecked(libCOUI_gv_cU_CommanderMasteryCheckbox, true, PlayerGroupAll());
    libCOUI_gv_cU_CommanderLevelUpButton = libCOUI_gf_HookUpDialogItemandshowforplayers("LevelUpButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
    libCOUI_gv_cU_CommanderLevelDownButton = libCOUI_gf_HookUpDialogItemandshowforplayers("LevelDownButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
    libCOUI_gv_vU_CommanderPanelSettings = libCOUI_gf_HookUpDialogItemandshowforplayers("SettingsList", c_triggerControlTypePanel, libCOUI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOUI_gv_cU_CommanderMutatorButton = libCOUI_gf_HookUpDialogItemandshowforplayers("MutatorButton", c_triggerControlTypeButton, libCOUI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOUI_gv_vU_CommanderDifficultyPulldown = libCOUI_gf_HookUpDialogItemandshowforplayers("DifficultyPulldown", c_triggerControlTypePulldown, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_vU_CommanderEnemyFactionPulldown = libCOUI_gf_HookUpDialogItemandshowforplayers("EnemyFactionPulldown", c_triggerControlTypePulldown, libCOUI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    libCOUI_gv_vU_GameModePulldown = libCOUI_gf_HookUpDialogItemandshowforplayers("GameModPulldown", c_triggerControlTypePulldown, libCOUI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    lv_compositionSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_cU_CommanderReadyButton = libCOUI_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOUI_gv_cU_CommanderPanel, lv_all);
    lv_levelFrame = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderLevelLabel", c_triggerControlTypePanel, lv_compositionSelf, lv_all);
    libCOUI_gv_cU_CommanderLevelLabelSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("LevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOUI_gv_cU_CommanderMasteryLabelSelf = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOUI_gv_cU_CommanderReadyButton = libCOUI_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOUI_gv_cU_CommanderPanel, lv_all);
    libCOUI_gv_cU_CommanderReadyCheckMark = libCOUI_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOUI_gv_cU_CommanderReadyButton, lv_nobody);
}

void libCOUI_gf_SetFreeCommander (int lp_player, string lp_commander) {
    // Variable Declarations
    bool lv_isOccupied;
    int lv_indexPlayer;
    int lv_indexCommander;
    string lv_indexCommanderInstance;

    // Automatic Variable Declarations
    playergroup auto9D91397A_g;
    int auto90A0537D_ae;
    const int auto90A0537D_ai = 1;
    playergroup auto13479D51_g;

    // Variable Initialization

    // Implementation
    if ((lp_commander != null)) {
        auto9D91397A_g = libCOMI_gv_vU_SlotsPlayers;
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto9D91397A_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((lv_indexPlayer == lp_player)) {
                break;
            }

            if ((libCOOC_gv_cCX_PlayerCommander[lv_indexPlayer] == libCOOC_gv_cCX_PlayerCommander[lp_player])) {
                lv_isOccupied = true;
                break;
            }

        }
    }
    else {
        lv_isOccupied = true;
    }
    if ((lv_isOccupied == false)) {
        libCOUI_gf_CU_CommanderSelect(lp_player, libCOOC_gv_cCX_PlayerCommander[lp_player]);
    }
    else {
        auto90A0537D_ae = UserDataInstanceCount("PlayerCommanders");
        lv_indexCommander = 1;
        for ( ; ( (auto90A0537D_ai >= 0 && lv_indexCommander <= auto90A0537D_ae) || (auto90A0537D_ai < 0 && lv_indexCommander >= auto90A0537D_ae) ) ; lv_indexCommander += auto90A0537D_ai ) {
            lv_indexCommanderInstance = UserDataInstance("PlayerCommanders", lv_indexCommander);
            lv_isOccupied = false;
            auto13479D51_g = libCOMI_gv_vU_SlotsPlayers;
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto13479D51_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((lv_indexPlayer == lp_player)) {
                    break;
                }

                if ((libCOOC_gv_cCX_PlayerCommander[lv_indexPlayer] == lv_indexCommanderInstance)) {
                    lv_isOccupied = true;
                    break;
                }

            }
            if ((lv_isOccupied == false)) {
                libCOUI_gf_CU_CommanderSelect(lp_player, lv_indexCommanderInstance);
                return ;
            }

        }
    }
}

playergroup libCOUI_gf_GetPlayingPlayers () {
    // Variable Declarations
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    playergroup auto3E4EF7EC_g;
    int auto3E4EF7EC_var;
    playergroup auto5ED670EB_g;
    int auto5ED670EB_var;

    // Variable Initialization
    lv_playingPlayers = PlayerGroupEmpty();

    // Implementation
    auto3E4EF7EC_g = libCOMI_gv_vU_SlotsPlayers;
    auto3E4EF7EC_var = -1;
    while (true) {
        auto3E4EF7EC_var = PlayerGroupNextPlayer(auto3E4EF7EC_g, auto3E4EF7EC_var);
        if (auto3E4EF7EC_var < 0) { break; }
        if ((PlayerType(auto3E4EF7EC_var) == c_playerTypeUser) && (PlayerStatus(auto3E4EF7EC_var) != c_playerStatusLeft)) {
            PlayerGroupAdd(lv_playingPlayers, auto3E4EF7EC_var);
        }

    }
    auto5ED670EB_g = libCOMI_gv_vU_SlotsPlayers;
    auto5ED670EB_var = -1;
    while (true) {
        auto5ED670EB_var = PlayerGroupNextPlayer(auto5ED670EB_g, auto5ED670EB_var);
        if (auto5ED670EB_var < 0) { break; }
        if (((PlayerType(auto5ED670EB_var) != c_playerTypeUser) || (PlayerStatus(auto5ED670EB_var) == c_playerStatusLeft)) && (libCOMI_gv_gameMode > PlayerGroupCount(lv_playingPlayers))) {
            PlayerGroupAdd(lv_playingPlayers, auto5ED670EB_var);
        }

    }
    return lv_playingPlayers;
}

void libCOUI_gf_UpdateCommandersList () {
    // Variable Declarations
    text lv_commanderDscription;
    int lv_commIndex;
    playergroup lv_otherPlayers;
    playergroup lv_chosenPlayer;
    text lv_availableTooltip;
    text lv_unavailableTooltip;
    int lv_owner;
    int lv_alliesPlayersCount;
    int lv_ownerIndex;
    string lv_commander;
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    const int auto685D2F52_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto685D2F52_ai = 1;
    playergroup auto731B3ACF_g;
    int auto731B3ACF_var;
    playergroup auto3CF0DB57_g;
    int auto3CF0DB57_var;
    const int auto9C577AD7_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int auto9C577AD7_var;
    playergroup auto64187F3C_g;
    int auto64187F3C_var;
    playergroup autoCBB77C43_g;
    int autoCBB77C43_var;
    const int autoD8E02674_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int autoD8E02674_var;
    playergroup autoE9398060_g;
    int autoE9398060_var;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupEmpty();
    lv_chosenPlayer = PlayerGroupEmpty();
    TextExpressionSetToken("Param/Expression/lib_COUI_F5D4CF06", "A", lv_availableTooltip);
    lv_unavailableTooltip = TextExpressionAssemble("Param/Expression/lib_COUI_F5D4CF06");
    lv_playingPlayers = libCOUI_gf_GetPlayingPlayers();

    // Implementation
    if ((libCOUI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_commIndex = 1;
    for ( ; ( (auto685D2F52_ai >= 0 && lv_commIndex <= auto685D2F52_ae) || (auto685D2F52_ai < 0 && lv_commIndex >= auto685D2F52_ae) ) ; lv_commIndex += auto685D2F52_ai ) {
        lv_commander = libCOUI_gv_cU_CommanderList[lv_commIndex];
        if ((lv_commander == null)) {
            continue;
        }

        lv_owner = 0;
        lv_ownerIndex = 0;
        auto731B3ACF_g = lv_playingPlayers;
        auto731B3ACF_var = -1;
        while (true) {
            auto731B3ACF_var = PlayerGroupNextPlayer(auto731B3ACF_g, auto731B3ACF_var);
            if (auto731B3ACF_var < 0) { break; }
            lv_ownerIndex += 1;
            if ((libCOUI_gv_cU_CommanderList[lv_commIndex] == libCOOC_gv_cCX_PlayerCommander[auto731B3ACF_var])) {
                lv_owner = auto731B3ACF_var;
                break;
            }

        }
        TextExpressionSetToken("Param/Expression/lib_COUI_5FA327C8", "A", libCOOC_gf_CC_CommanderName(UserDataInstance("PlayerCommanders", lv_commIndex)));
        TextExpressionSetToken("Param/Expression/lib_COUI_5FA327C8", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, libCOOC_gf_CC_CommanderRace(UserDataInstance("PlayerCommanders", lv_commIndex)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_COUI_5FA327C8", "C", lv_commanderDscription);
        lv_availableTooltip = TextExpressionAssemble("Param/Expression/lib_COUI_5FA327C8");
        if ((lv_owner != 0)) {
            lv_otherPlayers = PlayerGroupAll();
            PlayerGroupRemove(lv_otherPlayers, lv_owner);
            lv_chosenPlayer = PlayerGroupSingle(lv_owner);
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_commanderOption[lv_commIndex].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOUI_gv_commanderOption[lv_commIndex].lv_portrait, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_commanderOption[lv_commIndex].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            libNtve_gf_SetDialogItemTintColor(libCOUI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), lv_chosenPlayer);
            libNtve_gf_SetDialogItemTintColor(libCOUI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100.00, 0.00, 0.00), lv_otherPlayers);
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, true);
            libNtve_gf_SetDialogItemColor(libCOUI_gv_commanderOption[lv_commIndex].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false)), libCOMI_gv_all);
            if (((libCOUI_gv_cU_CommanderSelect_PlayerReady[lv_owner] == true) || (PlayerType(lv_owner) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            DialogControlSetVisible(libCOUI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, false);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTintColor(libCOUI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), libCOMI_gv_all);
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_commanderOption[lv_commIndex].lv_button, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOUI_gv_commanderOption[lv_commIndex].lv_portrait, true, libCOMI_gv_all);
        }
    }
    libCOUI_gv_randomPlayersCount = 0;
    auto3CF0DB57_g = lv_playingPlayers;
    auto3CF0DB57_var = -1;
    while (true) {
        auto3CF0DB57_var = PlayerGroupNextPlayer(auto3CF0DB57_g, auto3CF0DB57_var);
        if (auto3CF0DB57_var < 0) { break; }
        if ((libCOOC_gv_cCX_PlayerCommander[auto3CF0DB57_var] == null) && (libCOUI_gv_chosenTeam[auto3CF0DB57_var] == 1)) {
            libCOUI_gv_randomPlayersCount += 1;
            libCOUI_gv_randomPlayers[libCOUI_gv_amonPlayersCount] = auto3CF0DB57_var;
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto3CF0DB57_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOUI_gv_cU_CommanderSelect_PlayerReady[auto3CF0DB57_var] == true) || (PlayerType(auto3CF0DB57_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_randomOption[libCOUI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }

    }
    auto9C577AD7_var = (libCOUI_gv_randomPlayersCount + 1);
    for ( ; auto9C577AD7_var <= auto9C577AD7_ae; auto9C577AD7_var += 1 ) {
        DialogControlSetVisible(libCOUI_gv_randomOption[auto9C577AD7_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOUI_gv_randomOption[auto9C577AD7_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOUI_gv_randomPlayersCount >= libCOMI_gv_maxAlliesPlayersOnMap)) {
        DialogControlSetVisible(libCOUI_gv_playRandomButton, PlayerGroupAll(), false);
    }
    else {
        auto64187F3C_g = lv_playingPlayers;
        auto64187F3C_var = -1;
        while (true) {
            auto64187F3C_var = PlayerGroupNextPlayer(auto64187F3C_g, auto64187F3C_var);
            if (auto64187F3C_var < 0) { break; }
            if ((libCOOC_gv_cCX_PlayerCommander[auto64187F3C_var] == null) && (libCOUI_gv_chosenTeam[auto64187F3C_var] == 1)) {
                DialogControlSetVisible(libCOUI_gv_playRandomButton, PlayerGroupSingle(auto64187F3C_var), false);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_playRandomButton, PlayerGroupSingle(auto64187F3C_var), true);
            }
        }
    }
    libCOUI_gv_amonPlayersCount = 0;
    autoCBB77C43_g = lv_playingPlayers;
    autoCBB77C43_var = -1;
    while (true) {
        autoCBB77C43_var = PlayerGroupNextPlayer(autoCBB77C43_g, autoCBB77C43_var);
        if (autoCBB77C43_var < 0) { break; }
        if ((libCOUI_gv_chosenTeam[autoCBB77C43_var] == 2)) {
            libCOUI_gv_amonPlayersCount += 1;
            libCOUI_gv_amonPlayers[libCOUI_gv_amonPlayersCount] = autoCBB77C43_var;
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoCBB77C43_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOUI_gv_cU_CommanderSelect_PlayerReady[autoCBB77C43_var] == true) || (PlayerType(autoCBB77C43_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_amonOption[libCOUI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            lv_alliesPlayersCount += 1;
        }
    }
    autoD8E02674_var = (libCOUI_gv_amonPlayersCount + 1);
    for ( ; autoD8E02674_var <= autoD8E02674_ae; autoD8E02674_var += 1 ) {
        DialogControlSetVisible(libCOUI_gv_amonOption[autoD8E02674_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOUI_gv_amonOption[autoD8E02674_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOUI_gv_amonPlayersCount >= libCOMI_gv_maxAmonPlayersOnMap)) {
        DialogControlSetVisible(libCOUI_gv_playAmonButton, PlayerGroupAll(), false);
    }
    else {
        autoE9398060_g = lv_playingPlayers;
        autoE9398060_var = -1;
        while (true) {
            autoE9398060_var = PlayerGroupNextPlayer(autoE9398060_g, autoE9398060_var);
            if (autoE9398060_var < 0) { break; }
            if ((libCOUI_gv_chosenTeam[autoE9398060_var] == 2)) {
                DialogControlSetVisible(libCOUI_gv_playAmonButton, PlayerGroupSingle(autoE9398060_var), false);
            }
            else {
                DialogControlSetVisible(libCOUI_gv_playAmonButton, PlayerGroupSingle(autoE9398060_var), true);
            }
        }
    }
    if (((libCOUI_gv_amonPlayersCount > libCOMI_gv_maxAmonPlayersOnMap) || (lv_alliesPlayersCount > libCOMI_gv_maxAlliesPlayersOnMap))) {
        DialogControlSetVisible(libCOUI_gv_cU_CommanderReadyButton, libCOMI_gv_all, false);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_CommanderReadyButton, libCOMI_gv_all, true);
    }
}

void libCOUI_gf_CU_CommanderSelect (int lp_player, string lp_chosenCommander) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_PlayerCommanderSet(lp_player, lp_chosenCommander);
    libCOUI_gf_CU_PrestigeSelect(lp_player, DataTableGetInt(true, libCOOC_gf_CC_PrestigeCommanderTableKey(lp_chosenCommander, lp_player)));
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        libCOUI_gf_CU_CommanderPlayerReadySet(lp_player, false);
    }
    else {
        libCOUI_gf_CU_CommanderPlayerReadySet(lp_player, true);
    }
    if ((UserDataGetInt("PlayerCommanders", lp_chosenCommander, "locked", 1) == 1)) {
        DialogControlSetEnabled(libCOUI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(libCOUI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), true);
    }
    libCOUI_gf_CU_MasteryInitFromData(lp_player);
    libCOUI_gf_CU_MasteryUpdatePoints(lp_player);
    libCOUI_gf_CU_MasteryUpdate(lp_player);
    libCOUI_gf_UpdatePlayerCommander(lp_player);
}

void libCOUI_gf_UpdatePlayerCommander (int lp_player) {
    // Variable Declarations
    playergroup lv_playerSelf;
    playergroup lv_playerAlly;
    int lv_tierIndex;
    string lv_indexPerk;
    text lv_PerkName;
    text lv_PerkDescription;
    text lv_PerkTooltip;
    string lv_perkLevel;
    string lv_playerCommander;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;
    int lv_upgradesCuunt;
    string lv_perkIcon;
    string lv_perkButton;

    // Automatic Variable Declarations
    const int auto79D1C7CE_ae = libCOUI_gv_cUC_COMMUPGRADETIERCOUNT;
    const int auto79D1C7CE_ai = 1;
    int autoE6E922E5_ae;
    int autoE6E922E5_var;

    // Variable Initialization
    lv_playerSelf = PlayerGroupEmpty();
    lv_playerAlly = PlayerGroupEmpty();

    // Implementation
    if ((libCOUI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_playerSelf = PlayerGroupSingle(lp_player);
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderLevelLabelSelf, IntToText(libCOOC_gf_CC_CommanderLevel(lp_player, libCOMI_gf_GetPlayerCommanderUserData(lp_player))), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderMasteryLabelSelf, IntToText(libCOUI_gv_cU_MasteryLevelCurrent[lp_player]), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderSelectedNameSelf, libCOOC_gf_CC_CommanderName(libCOMI_gf_GetPlayerCommanderUserData(lp_player)), lv_playerSelf);
    libCOUI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
    lv_upgradesCuunt = 0;
    lv_playerCommander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    lv_tierIndex = 1;
    for ( ; ( (auto79D1C7CE_ai >= 0 && lv_tierIndex <= auto79D1C7CE_ae) || (auto79D1C7CE_ai < 0 && lv_tierIndex >= auto79D1C7CE_ae) ) ; lv_tierIndex += auto79D1C7CE_ai ) {
        DialogControlSetVisible(libCOUI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_playerSelf, false);
    }
    autoE6E922E5_ae = UserDataFieldValueCount("PlayerCommanders", "PerkButton");
    autoE6E922E5_var = 1;
    for ( ; autoE6E922E5_var <= autoE6E922E5_ae; autoE6E922E5_var += 1 ) {
        lv_perkButton = UserDataGetGameLink("PlayerCommanders", lv_playerCommander, "PerkButton", autoE6E922E5_var);
        if ((lv_perkButton == null)) {
            continue;
        }

        lv_perkIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Icon", c_playerAny));
        if ((lv_perkIcon == null)) {
            lv_perkIcon = "Assets\\Textures\\btn-missing-kaeo.dds";
        }

        lv_PerkName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Name", c_playerAny));
        lv_PerkDescription = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Tooltip", c_playerAny));
        TextExpressionSetToken("Param/Expression/lib_COUI_6AF68ABF", "NAME", lv_PerkName);
        TextExpressionSetToken("Param/Expression/lib_COUI_6AF68ABF", "DESCRIPTION", lv_PerkDescription);
        lv_PerkTooltip = TextExpressionAssemble("Param/Expression/lib_COUI_6AF68ABF");
        libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_icon, lv_perkIcon, lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_title, lv_PerkName, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_description, lv_PerkDescription, PlayerGroupAll());
        DialogControlSetVisible(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_button, lv_playerSelf, true);
        if ((autoE6E922E5_var <= libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)))) {
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_button, true, lv_playerSelf);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libCOUI_gv_cU_CommanderUpgradesButtons[autoE6E922E5_var].lv_button, false, lv_playerSelf);
        }
    }
    libCOUI_gf_CU_PrestigeUpdate2(lp_player);
    libCOUI_gf_CU_PrestigeUpdate3(lp_player);
    if ((libCOMU_gf_CT_MutatorEnabledCount() == 0)) {
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderMutatorButton, StringExternal("Param/Value/lib_COUI_3DC5A8E7"), lv_playerSelf);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COUI_15573DA1", "A", IntToText(libCOMU_gf_CT_MutatorEnabledCount()));
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderMutatorButton, TextExpressionAssemble("Param/Expression/lib_COUI_15573DA1"), lv_playerSelf);
    }
    libCOUI_gf_CU_PrestigeUpdate(lp_player);
}

void libCOUI_gf_CU_CommanderClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOUI_gv_cUC_CommChoiceEventClosed);
}

void libCOUI_gf_CU_CommanderPlayerReadySet (int lp_player, bool lp_ready) {
    // Variable Declarations
    int lv_ready;
    int lv_notReady;
    int lv_indexPlayer2;
    int lv_ally;
    int lv_ally2;

    // Automatic Variable Declarations
    playergroup auto0DA377BC_g;
    int auto0DA377BC_var;

    // Variable Initialization
    lv_ally = libCOOC_gf_CC_PlayerAllyNew(lp_player);
    lv_ally2 = libCOOC_gf_CC_PlayerAllyNew2(lp_player);

    // Implementation
    if ((libCOUI_gv_cU_CommanderSelect_PlayerReady[lp_player] == lp_ready)) {
        return ;
    }

    libCOUI_gv_cU_CommanderSelect_PlayerReady[lp_player] = lp_ready;
    if ((libCOUI_gv_cU_CommanderSelect_PlayerReady[lp_player] == true)) {
        DialogControlSetVisible(libCOUI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), true);
        auto0DA377BC_g = libCOMI_gv_vU_HumanPlayers;
        auto0DA377BC_var = -1;
        while (true) {
            auto0DA377BC_var = PlayerGroupNextPlayer(auto0DA377BC_g, auto0DA377BC_var);
            if (auto0DA377BC_var < 0) { break; }
            if ((PlayerType(auto0DA377BC_var) == c_playerTypeUser) && (PlayerStatus(auto0DA377BC_var) == c_playerStatusActive)) {
                if ((libCOUI_gv_cU_CommanderSelect_PlayerReady[auto0DA377BC_var] == true)) {
                    lv_ready += 1;
                }
                else {
                    lv_notReady += 1;
                }
            }

        }
        if ((lv_notReady == 0)) {
            libCOUI_gf_VU_Ready();
        }

    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), false);
    }
    libCOUI_gf_UpdateCommandersList();
}

void libCOUI_gf_VU_Ready () {
    // Variable Declarations
    int lv_slotIndex;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB234CFEC_g;
    playergroup autoE017512C_g;

    // Variable Initialization

    // Implementation
    autoB234CFEC_g = libCOUI_gf_GetPlayingPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB234CFEC_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOUI_gv_chosenTeam[lv_player] == 2)) {
            PlayerGroupAdd(libCOMI_gv_vU_EnemyPlayers, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
        }
        else {
            if ((libCOOC_gv_cCX_PlayerCommander[lv_player] == null)) {
                libCOOC_gf_CC_PlayerCommanderSet(lv_player, libCOUI_gf_RandomCommander());
                libCOUI_gf_CU_PrestigeSelect(lv_player, DataTableGetInt(true, libCOOC_gf_CC_PrestigeCommanderTableKey(libCOOC_gv_cCX_PlayerCommander[lv_player], lv_player)));
                libCOUI_gf_CU_MasteryInitFromData(lv_player);
                libCOUI_gf_CU_MasteryUpdatePoints(lv_player);
                libCOUI_gf_CU_MasteryUpdate(lv_player);
            }

            PlayerGroupAdd(libCOMI_gv_vU_Allies, lv_player);
            libCOMI_gf_AddAlliedCommanderPlayer(lv_player);
            libCOOC_gf_CC_PlayerMasteryEnabledSet(lv_player, libNtve_gf_DialogItemIsChecked(libCOUI_gv_cU_CommanderMasteryCheckbox, lv_player));
            libCOOC_gf_CC_PlayerCommanderSet(lv_player, libCOOC_gv_cCX_PlayerCommander[lv_player]);
            PlayerSetRace(lv_player, libCOOC_gf_CC_CommanderRace(libCOOC_gv_cCX_PlayerCommander[lv_player]));
        }
    }
    autoE017512C_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE017512C_g, lv_player);
        if (lv_player < 0) { break; }
        libCOUI_gf_ShowHideWorldCover(false, 0.0, lv_player);
    }
    libCOMI_gf_SaveMapOptions();
    TriggerSendEvent(libCOUI_gv_cUC_CommChoiceEventClosed);
    TriggerExecute(libCOUT_gt_UT_Graph_Initialization, true, false);
    CutsceneStop(libCOUI_gv_aF_CS_CommanderCutscenes[0]);
    CutsceneStop(libCOUI_gv_aF_CS_CommanderCutscenes[1]);
    CutsceneStop(libCOUI_gv_aF_CS_CommanderCutscenes[2]);
    CutsceneClearGlobalFilters();
    DialogSetVisible(libCOUI_gv_aF_CS_CutsceneDialog[0], PlayerGroupAll(), false);
    DialogSetVisible(libCOUI_gv_aF_CS_CutsceneDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(libCOUI_gv_aF_CS_CommanderMiraDialog, PlayerGroupAll(), false);
    TriggerEnable(libCOUI_gt_AF_CS_CommanderSelected, false);
    TriggerEnable(libCOUI_gt_AF_CS_NewsControlButtonClicked, false);
    TriggerDebugOutputEnable(true);
    DialogSetVisible(libCOUI_gv_cU_CommanderDialog, libCOMI_gv_all, false);
    TriggerEnable(libCOUI_gt_UT_CommanderClicked, false);
    TriggerEnable(libCOUI_gt_ReadyButtonClicked, false);
    TriggerEnable(libCOUI_gt_CommanderButtonClicked, false);
    TriggerEnable(libCOUI_gt_CU_CommandeAllyLeft, false);
    TriggerEnable(libCOUI_gt_CU_CommanderMasteryClicked, false);
    TriggerEnable(libCOUI_gt_CU_CommanderLevelDownClicked, false);
    TriggerEnable(libCOUI_gt_CU_CommanderLevelUpClicked, false);
    TriggerEnable(libCOUI_gt_CU_CommanderMasteryCheckboxToggle, false);
    TriggerEnable(libCOUI_gt_CU_CommanderMutatorChallengeSelected, false);
    TriggerEnable(libCOUI_gt_CU_PrestigeButtonClicked, false);
    TriggerExecute(libCOMI_gt_CM_CampaignMissionInitialize, true, false);
}

void libCOUI_gf_UT_ChangeAllyPrestige () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(2) != c_playerStatusActive)) {
        if (libCOUI_gv_uT_PrestigeIndex >= 3) {
            libCOUI_gv_uT_PrestigeIndex = 0;
        }
        else {
            libCOUI_gv_uT_PrestigeIndex = libCOUI_gv_uT_PrestigeIndex + 1;
        }
        libCOOC_gv_cCX_PlayerPrestigeIndex[2] = libCOUI_gv_uT_PrestigeIndex;
        libCOUI_gf_CU_CommanderUpdatePrestigeLabels(1);
        libCOUI_gf_CU_CommanderUpdatePrestigeLabels(2);
        TriggerEnable(libCOUI_gt_UT_CommanderClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COUI_518CF18E"));
    }
}

string libCOUI_gf_CC_CommanderPrestigeIndexFace3 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_prestigefacestring4;
    string lv_prestigefacestring2;
    int lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOUI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny);
        lv_prestigefacestring4 = (lv_prestigefacestring);
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_prestigefacestring4) == true)) {
            return (CatalogFieldValueGet(c_gameCatalogActor, lv_prestigefacestring4, "UnitIcon", c_playerAny));
        }

    }

    return null;
}

text libCOUI_gf_CC_CommanderPrestigeIndexFace2 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring5;
    string lv_prestigefacestring2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOUI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COUI_AD4A6A0B", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_COUI_AD4A6A0B", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Description", c_playerAny)));
            return TextExpressionAssemble("Param/Expression/lib_COUI_AD4A6A0B");
        }

    }

    return null;
}

void libCOUI_gf_CU_PrestigeUpdate2 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_actor;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int autoA8433D75_ae = libCOUI_gv_cUC_UNITSMAXCOUNT;
    const int autoA8433D75_ai = 1;

    // Variable Initialization
    lv_prestigefacestring = "";
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer4(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (autoA8433D75_ai >= 0 && lv_itemIndex <= autoA8433D75_ae) || (autoA8433D75_ai < 0 && lv_itemIndex >= autoA8433D75_ae) ) ; lv_itemIndex += autoA8433D75_ai ) {
        lv_face = libCOUI_gf_CC_CommanderPrestigeIndexFace4(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lv_commander, "UnitArray[" + IntToString((lv_itemIndex - 1)) + "].Unit", c_playerAny);
            lv_actor = (lv_prestigefacestring);
            if ((CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
                libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny)), lv_playerSelf);
            }
            else {
                libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, "Assets\\Textures\\umojanlabzergdisplay_05.dds", lv_playerSelf);
            }
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Description", c_playerAny)), lv_playerSelf);
        }
    }
}

void libCOUI_gf_CU_PrestigeUpdate3 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int auto919D90DE_ae = libCOUI_gv_cUC_ABILITIESMAXCOUNT;
    const int auto919D90DE_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer4(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (auto919D90DE_ai >= 0 && lv_itemIndex <= auto919D90DE_ae) || (auto919D90DE_ai < 0 && lv_itemIndex >= auto919D90DE_ae) ) ; lv_itemIndex += auto919D90DE_ai ) {
        lv_face = libCOUI_gf_CC_CommanderPrestigeIndexFace5(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOUI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOUI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", c_playerAny)), lv_playerSelf);
        }
    }
}

string libCOUI_gf_RandomCommander () {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    playergroup autoE45DF3C2_g;
    int autoE45DF3C2_var;

    // Variable Initialization
    lv_commander = UserDataInstance("PlayerCommanders", RandomInt(1, UserDataInstanceCount("PlayerCommanders")));

    // Implementation
    autoE45DF3C2_g = libCOMI_gv_vU_SlotsPlayers;
    autoE45DF3C2_var = -1;
    while (true) {
        autoE45DF3C2_var = PlayerGroupNextPlayer(autoE45DF3C2_g, autoE45DF3C2_var);
        if (autoE45DF3C2_var < 0) { break; }
        if (((lv_commander == libCOOC_gv_cCX_PlayerCommander[autoE45DF3C2_var]) || (UserDataGetInt("PlayerCommanders", lv_commander, "IsCommander", 1) == 0))) {
            return libCOUI_gf_RandomCommander();
        }

    }
    return lv_commander;
}

void libCOUI_gf_CU_MasteryDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gf_CU_MasteryCreate();
    libCOUI_gf_CU_MasteryInitFromData(lp_player);
    libCOUI_gf_CU_MasteryUpdatePoints(lp_player);
    libCOUI_gf_CU_MasteryUpdate(lp_player);
    libCOUI_gv_cU_MasteryRefCount += 1;
    DialogSetVisible(libCOUI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOUI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOUI_gf_CU_MasteryCreate () {
    // Variable Declarations
    bool lv_inline;
    int lv_itemIndex;
    int lv_categoryIndex;
    int lv_listPanel;
    playergroup lv_all;

    // Automatic Variable Declarations
    const int auto5AB63541_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto5AB63541_ai = 1;
    const int autoE6EE6A9D_ae = libCOOC_gv_cCC_MASTERY_CATEGORIES;
    const int autoE6EE6A9D_ai = 1;
    const int auto75907ECB_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto75907ECB_ai = 1;
    const int auto4B0B9D81_ae = libCOOC_gv_cCC_MASTERY_CATEGORIES;
    const int auto4B0B9D81_ai = 1;

    // Variable Initialization
    lv_inline = true;
    lv_listPanel = c_invalidDialogControlId;
    lv_all = PlayerGroupAll();

    // Implementation
    if ((lv_inline == true)) {
        lv_listPanel = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryList", c_triggerControlTypePanel, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
        lv_itemIndex = 1;
        for ( ; ( (auto5AB63541_ai >= 0 && lv_itemIndex <= auto5AB63541_ae) || (auto5AB63541_ai < 0 && lv_itemIndex >= auto5AB63541_ae) ) ; lv_itemIndex += auto5AB63541_ai ) {
            libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("Item" + IntToString(lv_itemIndex), c_triggerControlTypePanel, lv_listPanel, lv_all);
            libCOUI_gv_cU_MasteryPlusButtons[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("PlusButton", c_triggerControlTypeButton, libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOUI_gv_cU_MasteryMinusButtons[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("MinusButton", c_triggerControlTypeButton, libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOUI_gv_cU_MasteryNameLabels[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("NameLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOUI_gv_cU_MasteryValueLabels[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("ValueLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOUI_gv_cU_MasteryPointLabels[lv_itemIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("PointsLabel", c_triggerControlTypeLabel, libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
        }
        libCOUI_gv_cU_MasteryLevelUpButton = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryLevelPlusButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
        libCOUI_gv_cU_MasteryLevelLabel = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
        lv_categoryIndex = 1;
        for ( ; ( (autoE6EE6A9D_ai >= 0 && lv_categoryIndex <= autoE6EE6A9D_ae) || (autoE6EE6A9D_ai < 0 && lv_categoryIndex >= autoE6EE6A9D_ae) ) ; lv_categoryIndex += autoE6EE6A9D_ai ) {
            libCOUI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = libCOUI_gf_HookUpDialogItemandshowforplayers("Category" + IntToString(lv_categoryIndex)+ "Points", c_triggerControlTypeLabel, lv_listPanel, lv_all);
        }
        libCOUI_gv_cU_MasteryLevelDownButton = libCOUI_gf_HookUpDialogItemandshowforplayers("MasteryLevelMinusButton", c_triggerControlTypeButton, libCOUI_gv_vU_DetailsResearchContainer, lv_all);
    }
    else {
        DialogCreate(1000, 800, c_anchorBottomLeft, 0, 0, true);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libCOUI_gv_cU_MasteryDialog = DialogLastCreated();
        DialogControlCreateFromTemplate(libCOUI_gv_cU_MasteryDialog, c_triggerControlTypePanel, "Coop_CommanderMasterySelection/MasteryLevelTemplate");
        libCOUI_gv_cU_MasteryPanel = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypePanel, "MasteryList");
        lv_listPanel = DialogControlLastCreated();
        lv_itemIndex = 1;
        for ( ; ( (auto75907ECB_ai >= 0 && lv_itemIndex <= auto75907ECB_ae) || (auto75907ECB_ai < 0 && lv_itemIndex >= auto75907ECB_ae) ) ; lv_itemIndex += auto75907ECB_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypePanel, "Item" + IntToString(lv_itemIndex));
            libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "PlusButton");
            libCOUI_gv_cU_MasteryPlusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "MinusButton");
            libCOUI_gv_cU_MasteryMinusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "NameLabel");
            libCOUI_gv_cU_MasteryNameLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "ValueLabel");
            libCOUI_gv_cU_MasteryValueLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "PointsLabel");
            libCOUI_gv_cU_MasteryPointLabels[lv_itemIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelPlusButton");
        libCOUI_gv_cU_MasteryLevelUpButton = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelMinusButton");
        libCOUI_gv_cU_MasteryLevelDownButton = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypeLabel, "MasteryLevelLabel");
        libCOUI_gv_cU_MasteryLevelLabel = DialogControlLastCreated();
        lv_categoryIndex = 1;
        for ( ; ( (auto4B0B9D81_ai >= 0 && lv_categoryIndex <= auto4B0B9D81_ae) || (auto4B0B9D81_ai < 0 && lv_categoryIndex >= auto4B0B9D81_ae) ) ; lv_categoryIndex += auto4B0B9D81_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypeLabel, "Category" + IntToString(lv_categoryIndex)+ "Points");
            libCOUI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "AcceptButton");
        libCOUI_gv_cU_MasteryAcceptButton = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "ResetButton");
        libCOUI_gv_cU_MasteryResetButton = DialogControlLastCreated();
    }
}

void libCOUI_gf_CU_MasteryUpdateData (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoD2E61070_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoD2E61070_ai = 1;

    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_PlayerMasteryLevelSet(lp_player, libCOUI_gv_cU_MasteryLevelCurrent[lp_player]);
    lv_itemIndex = 1;
    for ( ; ( (autoD2E61070_ai >= 0 && lv_itemIndex <= autoD2E61070_ae) || (autoD2E61070_ai < 0 && lv_itemIndex >= autoD2E61070_ae) ) ; lv_itemIndex += autoD2E61070_ai ) {
        libCOOC_gf_CC_PlayerMasteryUpgradeLevelSet(lp_player, libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]);
    }
}

void libCOUI_gf_CU_MasteryInitFromData (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_masteryIndex;

    // Automatic Variable Declarations
    int autoF3EFE70C_ae;
    const int autoF3EFE70C_ai = 1;

    // Variable Initialization

    // Implementation
    libCOUI_gv_cU_MasteryShiftPressed[lp_player] = false;
    libCOUI_gv_cU_MasteryLevelCurrent[lp_player] = libCOOC_gf_CC_PlayerMasteryLevel(lp_player);
    autoF3EFE70C_ae = UserDataFieldValueCount("PlayerCommanders", "Mastery");
    lv_masteryIndex = 1;
    for ( ; ( (autoF3EFE70C_ai >= 0 && lv_masteryIndex <= autoF3EFE70C_ae) || (autoF3EFE70C_ai < 0 && lv_masteryIndex >= autoF3EFE70C_ae) ) ; lv_masteryIndex += autoF3EFE70C_ai ) {
        lv_indexMasteryUpgrade = UserDataGetUserInstance("PlayerCommanders", libCOOC_gv_cCX_PlayerCommander[lp_player], "Mastery", lv_masteryIndex);
        if ((lv_indexMasteryUpgrade != null)) {
            libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_masteryIndex][lp_player] = libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
            libCOUI_gv_cU_MasteryUpgrades[lv_masteryIndex][lp_player] = lv_indexMasteryUpgrade;
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOOC_gf_CC_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOOC_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
        }

    }
}

void libCOUI_gf_CU_MasteryClose (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto20C917E3_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libCOUI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), false);
    libCOUI_gv_cU_MasteryRefCount -= 1;
    if ((libCOUI_gv_cU_MasteryRefCount == 0)) {
        TriggerEnable(libCOUI_gt_CU_MasteryLevelUpPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryLevelDownPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryItemPlusPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryItemMinusPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryResetPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryAcceptPressed, false);
        TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackUp, false);
        TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackDown, false);
    }

    auto20C917E3_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto20C917E3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
}

void libCOUI_gf_CU_MasteryUpdate (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_categoryIndex;
    playergroup lv_updatePlayers;
    string lv_expressionId;

    // Automatic Variable Declarations
    const int auto844516B3_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto844516B3_ai = 1;
    const int autoEFC2C3C4_ae = libCOOC_gv_cCC_MASTERY_CATEGORIES;
    const int autoEFC2C3C4_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv_expressionId = "";

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((libCOUI_gv_cU_MasteryLevelCurrent[lp_player] <= 0)) {
        DialogControlSetEnabled(libCOUI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOUI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, true);
    }
    if ((libCOUI_gv_cU_MasteryLevelCurrent[lp_player] >= libCOOC_gv_cCC_MASTERY_MAX_LEVEL)) {
        DialogControlSetEnabled(libCOUI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOUI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, true);
    }
    TextExpressionSetToken("Param/Expression/lib_COUI_1094CFD0", "A", IntToText(libCOUI_gv_cU_MasteryLevelCurrent[lp_player]));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryLevelLabel, TextExpressionAssemble("Param/Expression/lib_COUI_1094CFD0"), lv_updatePlayers);
    lv_itemIndex = 1;
    for ( ; ( (auto844516B3_ai >= 0 && lv_itemIndex <= auto844516B3_ae) || (auto844516B3_ai < 0 && lv_itemIndex >= auto844516B3_ae) ) ; lv_itemIndex += auto844516B3_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COUI_5B6F4ABC", "A", IntToText(libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]));
        TextExpressionSetToken("Param/Expression/lib_COUI_5B6F4ABC", "B", IntToText(libCOOC_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL));
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryPointLabels[lv_itemIndex], TextExpressionAssemble("Param/Expression/lib_COUI_5B6F4ABC"), lv_updatePlayers);
        lv_expressionId = ("UserData/MasteryUpgrades/" + (libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player]) + "_ValueFormat");
        TextExpressionSetToken(lv_expressionId, "A", FixedToText((libCOOC_gf_CC_PlayerMasteryValueIncrement(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 1) * libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        TextExpressionSetToken(lv_expressionId, "B", FixedToText((libCOOC_gf_CC_PlayerMasteryValueIncrement(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 2) * libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryValueLabels[lv_itemIndex], TextExpressionAssemble(lv_expressionId), lv_updatePlayers);
        if (((libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] <= 0) || (libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] >= libCOOC_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL))) {
            DialogControlSetEnabled(libCOUI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOUI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
        if ((libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] <= 0)) {
            DialogControlSetEnabled(libCOUI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOUI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
    }
    lv_categoryIndex = 1;
    for ( ; ( (autoEFC2C3C4_ai >= 0 && lv_categoryIndex <= autoEFC2C3C4_ae) || (autoEFC2C3C4_ai < 0 && lv_categoryIndex >= autoEFC2C3C4_ae) ) ; lv_categoryIndex += autoEFC2C3C4_ai ) {
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_MasteryCategoryPoints[lv_categoryIndex], IntToText(libCOUI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player]), lv_updatePlayers);
    }
}

void libCOUI_gf_CU_MasteryUpdatePoints (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto472BD86E_ae = libCOOC_gv_cCC_MASTERY_CATEGORIES;
    const int auto472BD86E_ai = 1;
    const int auto931714F6_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto931714F6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (auto472BD86E_ai >= 0 && lv_categoryIndex <= auto472BD86E_ae) || (auto472BD86E_ai < 0 && lv_categoryIndex >= auto472BD86E_ae) ) ; lv_categoryIndex += auto472BD86E_ai ) {
        libCOUI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player] = libCOOC_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lv_categoryIndex, libCOUI_gv_cU_MasteryLevelCurrent[lp_player]);
    }
    lv_itemIndex = 1;
    for ( ; ( (auto931714F6_ai >= 0 && lv_itemIndex <= auto931714F6_ae) || (auto931714F6_ai < 0 && lv_itemIndex >= auto931714F6_ae) ) ; lv_itemIndex += auto931714F6_ai ) {
        libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] -= libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player];
        if ((libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] < 0)) {
            libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] += libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player];
            libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] = 0;
        }

    }
}

void libCOUI_gf_CU_CommanderUpdatePrestigeLabels (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderSelectedPrestigeSelf, libCOUI_gf_GetPlayerPrestigeName(lp_player), PlayerGroupSingle(lp_player));
}

text libCOUI_gf_GetPlayerPrestigeName (int lp_player) {
    // Variable Declarations
    string lv_playerCommander;
    int lv_prestigeSelf;
    text lv_playerPrestigeText;
    string lv_face;
    string lv_prestige;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerCommander = libCOOC_gv_cCX_PlayerCommander[lp_player];
    lv_prestigeSelf = libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player);

    // Implementation
    if ((lv_prestigeSelf == 0)) {
        lv_playerPrestigeText = null;
    }
    else {
        lv_prestige = UserDataGetUserInstance("PlayerCommanders", lv_playerCommander, "Prestige", lv_prestigeSelf);
        lv_face = UserDataGetGameLink("PlayerPrestige", lv_prestige, "Icon", 1);
        lv_playerPrestigeText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player));
    }
    return lv_playerPrestigeText;
}

void libCOUI_gf_CU_PrestigeUpdate (int lp_player) {
    // Variable Declarations
    int lv_prestigeCount;
    int lv_masteryTalentsCount;
    int lv_itemIndex;
    string lv_face;
    string lv_face2;
    playergroup lv_playerSelf;
    string lv_commander;
    string lv_perkButton;
    string lv_prestige;

    // Automatic Variable Declarations
    const int auto606ADCEC_ae = libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto606ADCEC_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = UserDataGetGameLink("PlayerCommanders", libCOOC_gv_cCX_PlayerCommander[lp_player], "CommanderData", 1);
    lv_itemIndex = 1;
    for ( ; ( (auto606ADCEC_ai >= 0 && lv_itemIndex <= auto606ADCEC_ae) || (auto606ADCEC_ai < 0 && lv_itemIndex >= auto606ADCEC_ae) ) ; lv_itemIndex += auto606ADCEC_ai ) {
        lv_prestige = UserDataGetUserInstance("PlayerCommanders", libCOOC_gv_cCX_PlayerCommander[lp_player], "Prestige", lv_itemIndex);
        if ((lv_prestige == null)) {
            DialogControlSetVisible(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
            continue;
        }

        lv_face = UserDataGetGameLink("PlayerPrestige", lv_prestige, "Icon", 1);
        DialogControlSetVisible(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
        libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)), lv_playerSelf);
    }
}

void libCOUI_gf_CU_PrestigeSelect (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_boundedIndex;
    int lv_itemIndex;
    string lv_state;
    int lv_playerAlly;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;

    // Automatic Variable Declarations
    const int auto9B23D8AA_ae = libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto9B23D8AA_ai = 1;

    // Variable Initialization
    lv_boundedIndex = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK);
    lv_state = "";
    lv_playerAlly = libCOOC_gf_CC_PlayerAlly(lp_player);

    // Implementation
    lv_itemIndex = 1;
    for ( ; ( (auto9B23D8AA_ai >= 0 && lv_itemIndex <= auto9B23D8AA_ae) || (auto9B23D8AA_ai < 0 && lv_itemIndex >= auto9B23D8AA_ae) ) ; lv_itemIndex += auto9B23D8AA_ai ) {
        if ((lv_itemIndex == lv_boundedIndex)) {
            lv_state = "Toggled";
        }
        else {
            lv_state = "NotToggled";
        }
        DialogControlSetAnimationState(libCOUI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, PlayerGroupSingle(lp_player), "ToggledState", lv_state);
    }
    libCOOC_gf_CC_SetPlayerPrestigeIndex(lp_player, lv_boundedIndex);
    libCOUI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
}

string libCOUI_gf_CC_CommanderPrestigeIndexFace5 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOUI_gv_cUC_ABILITIESMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "CommanderAbilArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "CommanderAbilArray[" + IntToString((lp_index - 1)) + "].Button", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

string libCOUI_gf_CC_CommanderPrestigeIndexFace4 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOUI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

void libCOUI_gf_SetGameMode (int lp_gamemode) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_gameMode = lp_gamemode;
    TriggerEnable(libCOUI_gt_GameModePulldownUsed, false);
    DialogControlSelectItem(libCOUI_gv_vU_GameModePulldown, lv_all, lp_gamemode);
    TriggerEnable(libCOUI_gt_GameModePulldownUsed, true);
    libCOUI_gf_UpdateCommandersList();
}

void libCOUI_gf_UpdateGameModeList () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto4C99BE56_ae;
    const int auto4C99BE56_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libCOUI_gv_vU_GameModePulldown, libCOMI_gv_all);
    auto4C99BE56_ae = libCOMI_gv_totalPlayersOnMap;
    lv_i = 1;
    for ( ; ( (auto4C99BE56_ai >= 0 && lv_i <= auto4C99BE56_ae) || (auto4C99BE56_ai < 0 && lv_i >= auto4C99BE56_ae) ) ; lv_i += auto4C99BE56_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COUI_58F44503", "A", IntToText(lv_i));
        DialogControlAddItem(libCOUI_gv_vU_GameModePulldown, libCOMI_gv_all, TextExpressionAssemble("Param/Expression/lib_COUI_58F44503"));
    }
    libCOUI_gf_SetGameMode(libCOMI_gv_gameMode);
}

void libCOUI_gf_SetDifficulty (int lp_difficulty) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_selectedDifficulty = lp_difficulty;
    TriggerEnable(libCOUI_gt_DifficultyPulldownUsed, false);
    DialogControlSelectItem(libCOUI_gv_vU_CommanderDifficultyPulldown, lv_all, lp_difficulty);
    TriggerEnable(libCOUI_gt_DifficultyPulldownUsed, true);
}

void libCOUI_gf_UpdateDifficultiesList () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlRemoveAllItems(libCOUI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all);
    DialogControlAddItem(libCOUI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COUI_E5E0E8B2"));
    DialogControlAddItem(libCOUI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COUI_06FAD06D"));
    DialogControlAddItem(libCOUI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COUI_A9F3F507"));
    DialogControlAddItem(libCOUI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COUI_4762F30D"));
    libCOUI_gf_SetDifficulty(libCOMI_gv_selectedDifficulty);
}

void libCOUI_gf_VU_UpdateEnemyFactionsList () {
    // Variable Declarations
    string lv_faction;
    string lv_personality;
    string lv_aIUnits;
    int lv_i;
    string lv_race;
    int lv_j;
    int lv_k;
    bool lv_allowed;

    // Automatic Variable Declarations
    int auto5FA3598F_ae;
    const int auto5FA3598F_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_enemyFactionsCount = 0;
    auto5FA3598F_ae = UserDataInstanceCount("CoopAIFactions");
    lv_i = 1;
    for ( ; ( (auto5FA3598F_ai >= 0 && lv_i <= auto5FA3598F_ae) || (auto5FA3598F_ai < 0 && lv_i >= auto5FA3598F_ae) ) ; lv_i += auto5FA3598F_ai ) {
        lv_faction = UserDataInstance("CoopAIFactions", lv_i);
        if ((UserDataGetInt("CoopAIFactions", lv_faction, "HideInLauncher", 1) == 1)) {
            continue;
        }

        if ((UserDataGetInt("CoopAIFactions", lv_faction, "AllowedOnMap", 1) == 1)) {
            libCOMI_gv_enemyFactionsCount += 1;
            libCOUI_gv_vU_EnemyFactionsList[libCOMI_gv_enemyFactionsCount] = lv_faction;
            DialogControlAddItem(libCOUI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, UserDataGetText("CoopAIFactions", lv_faction, "Name", 1));
        }

    }
    libCOUI_gf_VU_SetEnemyFaction(libCOMI_gv_selectedEnemyFaction);
}

void libCOUI_gf_VU_SetEnemyFaction (string lp_faction) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoABAE3D47_ae;
    const int autoABAE3D47_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_selectedEnemyFaction = lp_faction;
    autoABAE3D47_ae = libCOMI_gv_enemyFactionsCount;
    lv_i = 0;
    for ( ; ( (autoABAE3D47_ai >= 0 && lv_i <= autoABAE3D47_ae) || (autoABAE3D47_ai < 0 && lv_i >= autoABAE3D47_ae) ) ; lv_i += autoABAE3D47_ai ) {
        if ((libCOMI_gv_selectedEnemyFaction == libCOUI_gv_vU_EnemyFactionsList[lv_i])) {
            DialogControlSelectItem(libCOUI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, lv_i);
        }

    }
}

text libCOUI_gf_CU_PrestigeBriefFormatTooltip (int lp_player) {
    // Variable Declarations
    int lv_playerPrestige;
    string lv_prestige;
    string lv_face2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerPrestige = libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player);
    lv_prestige = UserDataGetUserInstance("PlayerCommanders", libCOOC_gv_cCX_PlayerCommander[lp_player], "Prestige", lv_playerPrestige);
    lv_face2 = UserDataGetGameLink("PlayerPrestige", lv_prestige, "Icon", 1);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COUI_4A080472", "A", libCOOC_gf_CC_CommanderName(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COUI_4A080472", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face2, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COUI_4A080472", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face2, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COUI_4A080472");
}

void libCOUI_gf_CU_PrestigeBriefInit () {
    // Variable Declarations
    int lv_playerPrestige;
    int lv_playerAllyPrestige;
    text lv_playerTooltip;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto4F7B4DC3_g;
    int auto4F7B4DC3_var;

    // Variable Initialization

    // Implementation
    auto4F7B4DC3_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto4F7B4DC3_var = -1;
    while (true) {
        auto4F7B4DC3_var = PlayerGroupNextPlayer(auto4F7B4DC3_g, auto4F7B4DC3_var);
        if (auto4F7B4DC3_var < 0) { break; }
        lv_slot += 1;
        if ((libCOUI_gv_cU_PlayerPrestigeBrief[lv_slot] == c_invalidDialogControlId)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/PrestigeBrief" + IntToString(lv_slot)));
            libCOUI_gv_cU_PlayerPrestigeBrief[lv_slot] = DialogControlLastCreated();
            DialogControlHookup(libCOUI_gv_cU_PlayerPrestigeBrief[lv_slot], c_triggerControlTypeImage, "CommanderIcon");
            libCOUI_gv_cU_PlayerPrestigeBriefImage[lv_slot] = DialogControlLastCreated();
            lv_playerPrestige = libCOOC_gf_CC_PlayerActivePrestigeIndex(auto4F7B4DC3_var);
            if ((lv_playerPrestige != 0) && (lv_playerPrestige != 1)) {
                lv_playerTooltip = libCOUI_gf_CU_PrestigeBriefFormatTooltip(auto4F7B4DC3_var);
                libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_PlayerPrestigeBrief[lv_slot], lv_playerTooltip, PlayerGroupSingle(auto4F7B4DC3_var));
                libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_PlayerPrestigeBriefImage[lv_slot], UserDataGetImagePath("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(auto4F7B4DC3_var), "PrestigeIcon", 1), PlayerGroupAll());
            }

        }

    }
    libCOUI_gf_CU_PrestigeBriefReveal();
}

trigger auto_libCOUI_gf_CU_PrestigeBriefReveal_Trigger = null;

void libCOUI_gf_CU_PrestigeBriefReveal () {
    if (auto_libCOUI_gf_CU_PrestigeBriefReveal_Trigger == null) {
        auto_libCOUI_gf_CU_PrestigeBriefReveal_Trigger = TriggerCreate("auto_libCOUI_gf_CU_PrestigeBriefReveal_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_CU_PrestigeBriefReveal_Trigger, false, false);
}

bool auto_libCOUI_gf_CU_PrestigeBriefReveal_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerPrestige;
    int lv_playerAllyPrestige;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup autoD3CF2D42_g;
    int autoD3CF2D42_var;

    // Variable Initialization

    // Implementation
    Wait(3.0, c_timeGame);
    autoD3CF2D42_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoD3CF2D42_var = -1;
    while (true) {
        autoD3CF2D42_var = PlayerGroupNextPlayer(autoD3CF2D42_g, autoD3CF2D42_var);
        if (autoD3CF2D42_var < 0) { break; }
        lv_slot += 1;
        lv_playerPrestige = libCOOC_gf_CC_PlayerActivePrestigeIndex(autoD3CF2D42_var);
        if ((lv_playerPrestige != 0) && (lv_playerPrestige != 1)) {
            DialogControlSetVisible(libCOUI_gv_cU_PlayerPrestigeBrief[lv_slot], PlayerGroupAll(), true);
        }

    }
    return true;
}

void libCOUI_gf_CU_EnemyBriefInit (string lp_aIPersonality) {
    // Variable Declarations
    int lv_dialogImage;
    string lv_faction;
    string lv_race;
    string lv_raceImage;
    string lv_state;
    int lv_difficulty;
    int lv_i;
    int lv_j;
    string lv_unit;
    int lv_limit;
    int lv_minDifficulty;
    int lv_unitTech;
    text lv_techTooltip;
    text lv_unitName;
    string lv_unitIcon;
    int lv_enemyPlayer;
    int lv_unitGlosary;

    // Automatic Variable Declarations
    int autoC4B2977F_ae;
    const int autoC4B2977F_ai = 1;
    const int auto58A5B2F0_ae = 4;
    const int auto58A5B2F0_ai = 1;
    int auto1355D2C8_ae;
    const int auto1355D2C8_ai = 1;
    int autoFA8A8476_val;

    // Variable Initialization
    lv_dialogImage = c_invalidDialogControlId;
    lv_faction = UserDataGetUserInstance("CoopAICommanders", lp_aIPersonality, "Faction", 1);
    lv_race = UserDataGetGameLink("CoopAIFactions", lv_faction, "VORace", 1);
    lv_raceImage = UserDataGetImagePath("CoopAIFactions", lv_faction, "IconWaves", 1);
    lv_state = UserDataGetString("CoopAIFactions", lv_faction, "BriefIcon", 1);
    lv_techTooltip = StringExternal("Param/Value/lib_COUI_C4DFEB9A");
    lv_unitIcon = "";
    lv_enemyPlayer = 3;
    lv_unitGlosary = 1;

    // Implementation
    lv_techTooltip = (lv_techTooltip + StringExternal("Param/Value/lib_COUI_9F180041"));
    autoC4B2977F_ae = UserDataFieldValueCount("CoopAICommanders", "WavesUnits");
    lv_i = 1;
    for ( ; ( (autoC4B2977F_ai >= 0 && lv_i <= autoC4B2977F_ae) || (autoC4B2977F_ai < 0 && lv_i >= autoC4B2977F_ae) ) ; lv_i += autoC4B2977F_ai ) {
        lv_unit = UserDataGetUnit("CoopAICommanders", lp_aIPersonality, "WavesUnits", lv_i);
        lv_unitTech = UserDataGetInt("CoopAICommanders", lp_aIPersonality, "WavesTier", lv_i);
        lv_unitGlosary = UserDataGetInt("CoopAICommanders", lp_aIPersonality, "WavesUnitsGlossary", lv_i);
        if ((lv_unit != null) && (lv_unit != "") && (lv_unitTech <= 7)) {
            lv_minDifficulty = 1;
            lv_difficulty = 1;
            for ( ; ( (auto58A5B2F0_ai >= 0 && lv_difficulty <= auto58A5B2F0_ae) || (auto58A5B2F0_ai < 0 && lv_difficulty >= auto58A5B2F0_ae) ) ; lv_difficulty += auto58A5B2F0_ai ) {
                lv_limit = 999;
                auto1355D2C8_ae = UserDataInstanceCount("CoopAIAttackWaveUnitLimits");
                lv_j = 1;
                for ( ; ( (auto1355D2C8_ai >= 0 && lv_j <= auto1355D2C8_ae) || (auto1355D2C8_ai < 0 && lv_j >= auto1355D2C8_ae) ) ; lv_j += auto1355D2C8_ai ) {
                    if ((lv_unit == UserDataGetUnit("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_j), "UnitToLimit", 1))) {
                        lv_limit = UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_j), "LimitPerDifficulty", lv_difficulty);
                        break;
                    }

                }
                if ((lv_limit == 0)) {
                    lv_minDifficulty = (lv_difficulty + 1);
                }

            }
            lv_unitName = UnitTypeGetName(lv_unit);
            TextExpressionSetToken("Param/Expression/lib_COUI_C00D16A7", "A", lv_unitName);
            lv_techTooltip = (lv_techTooltip + TextExpressionAssemble("Param/Expression/lib_COUI_C00D16A7"));
            autoFA8A8476_val = lv_minDifficulty;
            if (autoFA8A8476_val == 3) {
                lv_techTooltip = (lv_techTooltip + StringExternal("Param/Value/lib_COUI_0CCF1F23"));
            }
            else if (autoFA8A8476_val == 4) {
                lv_techTooltip = (lv_techTooltip + StringExternal("Param/Value/lib_COUI_829F59D3"));
            }
            else {
            }
        }

    }
    lv_techTooltip = (lv_techTooltip + StringExternal("Param/Value/lib_COUI_5E8929AD"));
    if ((libCOUI_gv_cU_EnemyBrief == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/EnemyBrief");
        libCOUI_gv_cU_EnemyBrief = DialogControlLastCreated();
    }

    if ((libCOUI_gv_cU_EnemyBrief != c_invalidDialogControlId)) {
        if ((lv_race == null)) {
            lv_race = UserDataGetGameLink("CoopAIFactions", lv_faction, "Race", 1);
        }

        if ((lv_raceImage == null)) {
            lv_raceImage = UserDataGetImagePath("CoopAIFactions", lv_faction, "Icon", 1);
        }

        DialogControlSetAnimationState(libCOUI_gv_cU_EnemyBrief, PlayerGroupAll(), "RaceState", lv_state);
        TextExpressionSetToken("Param/Expression/lib_COUI_0DF6A68B", "A", UserDataGetText("CoopAICommanders", lp_aIPersonality, "Category", 1));
        TextExpressionSetToken("Param/Expression/lib_COUI_0DF6A68B", "B", UserDataGetText("CoopAICommanders", lp_aIPersonality, "Name", 1));
        TextExpressionSetToken("Param/Expression/lib_COUI_0DF6A68B", "C", UserDataGetText("CoopAICommanders", lp_aIPersonality, "Description", 1));
        TextExpressionSetToken("Param/Expression/lib_COUI_0DF6A68B", "D", lv_techTooltip);
        libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_EnemyBrief, TextExpressionAssemble("Param/Expression/lib_COUI_0DF6A68B"), PlayerGroupAll());
    }

}

void libCOUI_gf_CU_EnemyBriefShowHide (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_EnemyBrief != c_invalidDialogControlId)) {
    }
    else {
        return ;
    }
    DialogControlSetVisible(libCOUI_gv_cU_EnemyBrief, PlayerGroupAll(), lp_showHide);
}

void libCOUI_gf_CU_MinimapAllyViewInit () {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto4820C726_g;
    playergroup autoC3772831_g;

    // Variable Initialization
    lv_mapScale = 0.5;
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libCOUI_gv_cU_MinimapAllyViewEnabled == false)) {
        return ;
    }

    lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
    lv_mapScale = (lv_mapScale * lv_baseScale);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) > 1)) {
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewCamera, true);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewUpdate, true);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyPlayerLeaves, true);
        auto4820C726_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4820C726_g, lv_player);
            if (lv_player < 0) { break; }
            if ((PlayerType(lv_player) == c_playerTypeUser)) {
                lv_playerGroup = PlayerGroupCopy(libCOMI_gf_GetAlliedCommandersPlayers());
                PlayerGroupRemove(lv_playerGroup, lv_player);
                libNtve_gf_CreatePingFacingAngle(lv_playerGroup, "PingViewArea", CameraGetTarget(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 0.0, 270.0);
                PingSetScale(PingLastCreated(), lv_mapScale);
                libCOUI_gv_cU_MinimapAllyViewPing[lv_player] = PingLastCreated();
            }

        }
    }

    if ((PlayerGroupCount(libCOMI_gv_vU_EnemyPlayers) > 1)) {
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewCamera, true);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyViewUpdate, true);
        TriggerEnable(libCOUI_gt_CU_MinimapAllyPlayerLeaves, true);
        autoC3772831_g = libCOMI_gv_vU_EnemyPlayers;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoC3772831_g, lv_player);
            if (lv_player < 0) { break; }
            if ((PlayerType(lv_player) == c_playerTypeUser)) {
                lv_playerGroup = PlayerGroupCopy(libCOMI_gv_vU_EnemyPlayers);
                PlayerGroupRemove(lv_playerGroup, lv_player);
                libNtve_gf_CreatePingFacingAngle(lv_playerGroup, "PingViewArea", CameraGetTarget(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 0.0, 270.0);
                PingSetScale(PingLastCreated(), lv_mapScale);
                libCOUI_gv_cU_MinimapAllyViewPing[lv_player] = PingLastCreated();
            }

        }
    }

}

void libCOUI_gf_ToggleAllyMinimapFrustrum (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_MinimapAllyViewEnabled = lp_enabled;
}

trigger auto_libCOUI_gf_DisplayArmyButton_Trigger = null;
bool auto_libCOUI_gf_DisplayArmyButton_lp_doDoNot;

void libCOUI_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libCOUI_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libCOUI_gf_DisplayArmyButton_Trigger == null) {
        auto_libCOUI_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libCOUI_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libCOUI_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libCOUI_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_ArmyButton != c_invalidDialogControlId)) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libCOUI_gv_cU_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libCOUI_gv_cU_ArmyButton = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    TriggerEnable(libCOUI_gt_CU_ArmyButtonUsed, true);
    if ((lp_doDoNot == true)) {
        Wait(3.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(libCOUI_gt_CU_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }

    return true;
}

int libCOUI_gf_CU_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_BB_Boss == null)) {
        lv_current = libCOUI_gv_cU_BB_CurrentValue;
        lv_max = libCOUI_gv_cU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((libCOUI_gv_cUC_BB_HPBarWidth * (lv_current / lv_max)));
    return lv_width;
}

text libCOUI_gf_CU_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_BB_Boss == null)) {
        lv_current = libCOUI_gv_cU_BB_CurrentValue;
        lv_max = libCOUI_gv_cU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libCOUI_gv_cU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_COUI_A8DB4967") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libCOUI_gf_CU_BB_HPBarChange_Trigger = null;

void libCOUI_gf_CU_BB_HPBarChange () {
    if (auto_libCOUI_gf_CU_BB_HPBarChange_Trigger == null) {
        auto_libCOUI_gf_CU_BB_HPBarChange_Trigger = TriggerCreate("auto_libCOUI_gf_CU_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_CU_BB_HPBarChange_Trigger, false, false);
}

bool auto_libCOUI_gf_CU_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;
    fixed lv_oldPct;
    fixed lv_newPct;
    string lv_iMAGE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libCOUI_gf_CU_BB_HPBarCurrentWidth();
    lv_width = (libCOUI_gv_cU_BB_HPOldWidth - lv_newWidth);
    lv_oldPct = (libCOUI_gv_cU_BB_HPOldWidth / libCOUI_gv_cUC_BB_HPBarWidth);
    lv_newPct = (lv_newWidth / libCOUI_gv_cUC_BB_HPBarWidth);
    libCOUI_gv_cU_BB_HPOldWidth = lv_newWidth;
    if ((((lv_newPct <= 0.75) && (lv_oldPct > 0.75)) || ((lv_newPct <= 0.5) && (lv_oldPct > 0.5)) || ((lv_newPct <= 0.25) && (lv_oldPct > 0.25)))) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_BB_Panel, PlayerGroupAll(), "Highlight");
    }
    else if ((lv_newPct < 0.25)) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_BB_Panel, PlayerGroupAll(), "Danger");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_BB_Panel, PlayerGroupAll(), "DangerStop");
    }
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeImage, "LotV_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCOUI_gv_cU_BB_HpCurrentImage, c_anchorLeft, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libCOUI_gv_cU_BB_HPOldWidth + lv_width), libCOUI_gv_cUC_BB_HPBarHeight);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 507, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libCOUI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_BB_Title = lp_title;
    libCOUI_gv_cU_BB_Boss = null;
    libCOUI_gf_SetSingularBossBarMaximumValueVoidCampaign(lp_max, true);
    libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign(lp_max, true);
    libCOUI_gv_cU_BB_HPOldWidth = -1;
    if ((libCOUI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidBossUnitFrame");
        libCOUI_gv_cU_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libCOUI_gv_cU_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libCOUI_gv_cU_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libCOUI_gv_cU_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeImage, "BarBackground");
        libCOUI_gv_cU_BB_HpBackground = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeImage, "ObjectiveBarBorder");
        libCOUI_gv_cU_BB_ObjectiveBG = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_BB_Panel, c_triggerControlTypeImage, "BossBarBorder");
        libCOUI_gv_cU_BB_BossBG = DialogControlLastCreated();
    }

    DialogControlSetVisible(libCOUI_gv_cU_BB_Panel, PlayerGroupAll(), true);
    libCOUI_gf_RefreshSingularBossBarVoidCampaign();
}

void libCOUI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_BB_MaxValue = IntToFixed(lp_max);
    if ((libCOUI_gv_cU_BB_MaxValue <= 0.0)) {
        libCOUI_gv_cU_BB_MaxValue = 1.0;
    }

    libCOUI_gv_cU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libCOUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_BB_CurrentValue = IntToFixed(lp_current);
    if ((libCOUI_gv_cU_BB_CurrentValue < 0.0)) {
        libCOUI_gv_cU_BB_CurrentValue = 0.0;
    }

    libCOUI_gv_cU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libCOUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOUI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libCOUI_gt_CU_BB_BossHPChanged, true);
    }

    libCOUI_gv_cU_BB_Boss = lp_boss;
    libCOUI_gv_cU_BB_MaxValue = 0.0;
    libCOUI_gv_cU_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libCOUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOUI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libCOUI_gv_cU_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libCOUI_gf_RefreshSingularBossBarVoidCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_BB_TitleLabel, libCOUI_gv_cU_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_BB_HpLabel, libCOUI_gf_CU_BB_HPBarFormatLabel(), PlayerGroupAll());
    if ((libCOUI_gf_CU_BB_HPBarCurrentWidth() > 0)) {
        DialogControlSetVisible(libCOUI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), true);
        DialogControlSetSize(libCOUI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), libCOUI_gf_CU_BB_HPBarCurrentWidth(), libCOUI_gv_cUC_BB_HPBarHeight);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), false);
        DialogControlSetSize(libCOUI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), 1, libCOUI_gv_cUC_BB_HPBarHeight);
    }
    libCOUI_gf_CU_BB_HPBarChange();
    if ((libCOUI_gv_cU_BB_Style == libCOUI_ge_SingularBossBarStyle_Objective)) {
        DialogControlSetVisible(libCOUI_gv_cU_BB_BossBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libCOUI_gv_cU_BB_ObjectiveBG, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_BB_BossBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libCOUI_gv_cU_BB_ObjectiveBG, PlayerGroupAll(), false);
    }
}

void libCOUI_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOUI_gv_cU_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libCOUI_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOUI_gv_cU_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libCOUI_gf_SetSingularBossBarStyle (int lp_style) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_BB_Style = lp_style;
    libCOUI_gf_RefreshSingularBossBarVoidCampaign();
}

void libCOUI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        libCOUI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if ((UserDataGetInt("PlayerPrestige", libCOOC_gf_CC_PlayerActivePrestigeInstance(lp_player), "ReserveSecondaryHeroPanel", 1) != 1)) {
        libCOUI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_6622617D"), false);
    }
}

void libCOUI_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoCF1BD6E7_val;
    unit auto047A189E_val;
    int autoA3DB6D8D_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    libCOUI_gv_cU_HeroUnit[lp_index][lp_player] = lp_heroUnit;
    libCOUI_gv_cU_HeroType[lp_index][lp_player] = libCOUI_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    autoCF1BD6E7_val = libCOUI_gv_cU_HeroType[lp_index][lp_player];
    if (autoCF1BD6E7_val == libCOUI_ge_CampaignHeroes_Hyperion) {
        libCOUI_gv_cU_HeroShowLevel[lp_index][lp_player] = false;
    }
    else if (autoCF1BD6E7_val == libCOUI_ge_CampaignHeroes_LaserDrill) {
        libCOUI_gv_cU_HeroShowLevel[lp_index][lp_player] = false;
    }
    else {
        libCOUI_gv_cU_HeroShowLevel[lp_index][lp_player] = true;
    }
    libCOUI_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((PlayerRace(lp_player) == "Zerg")) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((PlayerRace(lp_player) == "Terr")) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((libCOUI_gf_CU_ChampionHasShields2(libCOUI_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit))) == true)) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCOUI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    libCOUI_gv_cU_HeroExists[lp_player][lp_index] = true;
    if ((libCOUI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        libCOUI_gv_cU_HeroExists[lp_player][lp_index] = false;
    }
    else {
        TriggerEnable(libCOUI_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(libCOUI_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(libCOUI_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(libCOUI_gt_CU_HeroUnitVitalChange, true);
        auto047A189E_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        autoA3DB6D8D_val = lp_index;
        if (autoA3DB6D8D_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoA3DB6D8D_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libCOUI_gv_cUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(libCOUI_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_63E3D1F3"), false);
        }
    }
}

void libCOUI_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(libCOUI_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void libCOUI_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto2536CC65_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libCOUI_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libCOUI_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libCOUI_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libCOUI_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOUI_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libCOUI_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libCOUI_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libCOUI_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libCOUI_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libCOUI_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libCOUI_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libCOUI_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libCOUI_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libCOUI_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libCOUI_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libCOUI_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libCOUI_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libCOUI_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libCOUI_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    auto2536CC65_val = lp_index;
    if (auto2536CC65_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto2536CC65_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libCOUI_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOUI_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libCOUI_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOUI_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOUI_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

int libCOUI_gf_CU_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto066DA9BE_val;

    // Implementation
    auto066DA9BE_val = lp_unitType;
    if (auto066DA9BE_val == "K5Kerrigan") {
        return libCOUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "K5KerriganBurrowed") {
        return libCOUI_ge_CampaignHeroes_Kerrigan;
    }
    else if (auto066DA9BE_val == "ZagaraVoidCoop") {
        return libCOUI_ge_CampaignHeroes_Zagara;
    }
    else if (auto066DA9BE_val == "ZagaraVoidCoopBurrowed") {
        return libCOUI_ge_CampaignHeroes_Zagara;
    }
    else if (auto066DA9BE_val == "HyperionVoidCoop") {
        return libCOUI_ge_CampaignHeroes_Hyperion;
    }
    else if (auto066DA9BE_val == "DrakkenLaserDrillCoop") {
        return libCOUI_ge_CampaignHeroes_LaserDrill;
    }
    else if (auto066DA9BE_val == "ZagaraReviveCocoon") {
        return libCOUI_ge_CampaignHeroes_ZagaraReviveCocoon;
    }
    else if (auto066DA9BE_val == "KerriganReviveCocoon") {
        return libCOUI_ge_CampaignHeroes_KerriganReviveCocoon;
    }
    else if (auto066DA9BE_val == "AlarakReviveBeacon") {
        return libCOUI_ge_CampaignHeroes_AlarakReviveBeacon;
    }
    else if (auto066DA9BE_val == "AlarakCoop") {
        return libCOUI_ge_CampaignHeroes_Alarak;
    }
    else if (auto066DA9BE_val == "NovaCoop") {
        return libCOUI_ge_CampaignHeroes_Nova;
    }
    else if (auto066DA9BE_val == "NovaReviveBeacon") {
        return libCOUI_ge_CampaignHeroes_NovaReviveBeacon;
    }
    else if (auto066DA9BE_val == "SelendisCoop") {
        return libCOUI_ge_CampaignHeroes_Selendis;
    }
    else if (auto066DA9BE_val == "FenixCoop") {
        return libCOUI_ge_CampaignHeroes_Fenix;
    }
    else if (auto066DA9BE_val == "FenixDragoon") {
        return libCOUI_ge_CampaignHeroes_FenixDragoon;
    }
    else if (auto066DA9BE_val == "FenixArbiter") {
        return libCOUI_ge_CampaignHeroes_FenixArbiter;
    }
    else if (auto066DA9BE_val == "DehakaCoop") {
        return libCOUI_ge_CampaignHeroes_Dehaka;
    }
    else if (auto066DA9BE_val == "DehakaCoopClone") {
        return libCOUI_ge_CampaignHeroes_Dehaka;
    }
    else if (auto066DA9BE_val == "DehakaCoopReviveCocoon") {
        return libCOUI_ge_CampaignHeroes_DehakasDen;
    }
    else if (auto066DA9BE_val == "CODFlatbedTruck") {
        return libCOUI_ge_CampaignHeroes_ArtifactTruck;
    }
    else if (auto066DA9BE_val == "TychusCoop") {
        return libCOUI_ge_CampaignHeroes_Tychus;
    }
    else if (auto066DA9BE_val == "TychusReviveBeacon") {
        return libCOUI_ge_CampaignHeroes_TychusReviveBeacon;
    }
    else if (auto066DA9BE_val == "ZeratulCoop") {
        return libCOUI_ge_CampaignHeroes_Zeratul;
    }
    else if (auto066DA9BE_val == "ZeratulCoopReviveBeacon") {
        return libCOUI_ge_CampaignHeroes_ZeratulReviveBeacon;
    }
    else if (auto066DA9BE_val == "GaryStetmann") {
        return libCOUI_ge_CampaignHeroes_Gary;
    }
    else if (auto066DA9BE_val == "SuperGaryStetmann") {
        return libCOUI_ge_CampaignHeroes_SuperGary;
    }
    else if (auto066DA9BE_val == "GarysDen") {
        return libCOUI_ge_CampaignHeroes_GaryReviveBeacon;
    }
    else {
    }
    return libCOUI_ge_CampaignHeroes_None;
}

string libCOUI_gf_CU_HeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int auto8AE44FED_val;

    // Implementation
    auto8AE44FED_val = lp_heroType;
    if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Kerrigan) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        else {
            return "Assets\\Textures\\chrysalisportrait_static.dds";
        }
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_KerriganReviveCocoon) {
        return "Assets\\Textures\\chrysalisportrait_static.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Artanis) {
        return "Assets\\Textures\\ui-heroicon-artanis.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Alarak) {
        return "Assets\\Textures\\alarakex3_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_AlarakReviveBeacon) {
        return "Assets\\Textures\\alarakdeath_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Hyperion) {
        return "Assets\\Textures\\btn-unit-terran-hyperion.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_LaserDrill) {
        return "Assets\\Textures\\btn-tips-laserdrillcontrol.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Zagara) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_zagara.dds";
        }
        else {
            return "Assets\\Textures\\cocoonportrait_static.dds";
        }
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_ZagaraReviveCocoon) {
        return "Assets\\Textures\\cocoonportrait_static.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_NovaReviveBeacon) {
        return "Assets\\Textures\\btn-upgrade-nova-novarespawn.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Nova) {
        return "Assets\\Textures\\novaex3_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Selendis) {
        return "Assets\\Textures\\ui-heroicon-selendis.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Fenix) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_FenixDragoon) {
        return "Assets\\Textures\\btn-hero-fenix-dragoon.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_FenixArbiter) {
        return "Assets\\Textures\\btn-hero-fenix-arbiter.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Dehaka) {
        return "Assets\\Textures\\btn-hero-dehaka.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_DehakasDen) {
        return "Assets\\Textures\\btn-hero-dehaka-death.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_ArtifactTruck) {
        return "Assets\\Textures\\btn-cradleofdeath-truck.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Zeratul) {
        return "Assets\\Textures\\zeratul_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_ZeratulReviveBeacon) {
        return "Assets\\Textures\\btn-building-protoss-zeratulbeacon.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_Gary) {
        return "Assets\\Textures\\gary_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_SuperGary) {
        return "Assets\\Textures\\supergary_ingame_heroportrait.dds";
    }
    else if (auto8AE44FED_val == libCOUI_ge_CampaignHeroes_GaryReviveBeacon) {
        return "Assets\\Textures\\btn-building-stetmann-garysroom.dds";
    }
    else {
        return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
}

void libCOUI_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int autoCE8EC21A_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((libCOUI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        if ((libCOUI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((libCOUI_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        libCOUI_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libCOUI_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    autoCE8EC21A_val = lp_index;
    if (autoCE8EC21A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_COUI_DD1F6DE6");
    }
    else if (autoCE8EC21A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_COUI_AC02B287");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_COUI_A27EDFDB", "A", UnitGetName(libCOUI_gv_cU_HeroUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_COUI_A27EDFDB", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COUI_A27EDFDB"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_HeroDialogIconImage[lp_index], libCOUI_gf_CU_HeroIcon(libCOUI_gv_cU_HeroType[lp_index][lp_player], libCOUI_gv_cU_HeroUnit[lp_index][lp_player]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_COUI_8EF0FE86", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COUI_8EF0FE86", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COUI_8EF0FE86"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libCOUI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, libCOUI_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_COUI_B73F5C5A", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_COUI_B73F5C5A", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COUI_B73F5C5A"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, libCOUI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, libCOUI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_COUI_2C92FDA7", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COUI_2C92FDA7", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COUI_2C92FDA7"), lv_updateGroup);
    if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((libCOUI_gf_CU_ChampionHasShields2(libCOUI_gv_cU_HeroType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((libCOUI_gf_CU_ChampionHasShields(libCOUI_gv_cU_HeroType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libCOUI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, libCOUI_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_HeroDialogLevelLabel[lp_index], IntToText(libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player))), lv_updateGroup);
    if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] > 0.0)) {
        libCOUI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] -= libCOUI_gv_cUC_HeroUpdateFrequency;
        if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(libCOUI_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libCOUI_gv_cU_HeroUnit[lp_index][lp_player]) == false) && (libCOMI_gf_GameIsOver() == false)) {
        if ((libCOUI_gv_cU_VoidHeroUIRevivable[lp_index][lp_player] == true) && (PlayerGetCooldown(lp_player, libCOMI_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player))) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], (60.0 * (1 - PlayerGetCooldown(lp_player, libCOMI_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)))/libCOUI_gv_cU_HeroReviveTimer[lp_index][lp_player]) ), lv_updateGroup);
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_HeroDialogButton[lp_index], libCOUI_gv_cU_HeroUnit[lp_index][lp_player], lv_updateGroup);
}

string libCOUI_gf_CU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int auto7A2827D5_val;

    // Implementation
    auto7A2827D5_val = lp_championPreset;
    if (auto7A2827D5_val == libCOUI_ge_CampaignHeroes_Kerrigan) {
        return "Kerrigan";
    }
    else {
        return null;
    }
}

bool libCOUI_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == libCOUI_ge_CampaignHeroes_Kerrigan) || (lp_heroType == libCOUI_ge_CampaignHeroes_Fenix) || (lp_heroType == libCOUI_ge_CampaignHeroes_FenixArbiter) || (lp_heroType == libCOUI_ge_CampaignHeroes_FenixDragoon))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOUI_gf_CU_ChampionHasShields2 (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == libCOUI_ge_CampaignHeroes_Alarak))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOUI_gf_EnableLowHealthWarning (unit lp_watchedUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_HealthWatchUnit = lp_watchedUnit;
    TriggerEnable(libCOUI_gt_CU_HealthWatchLifeCheck, true);
    TriggerEnable(libCOUI_gt_CU_HealthWatchUnitDies, true);
}

void libCOUI_gf_CU_HealthWatchCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_HealthWatchDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libCOUI_gv_cU_HealthWatchDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libCOUI_gv_cU_HealthWatchImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void libCOUI_gf_CM_StopHeroLowHPSound () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_HealthWatchSoundStart != null)) {
        SoundStop(libCOUI_gv_cU_HealthWatchSoundStart, true);
        libCOUI_gv_cU_HealthWatchSoundStart = null;
    }

    if ((libCOUI_gv_cU_HealthWatchSoundBreath != null)) {
        SoundStop(libCOUI_gv_cU_HealthWatchSoundBreath, true);
        libCOUI_gv_cU_HealthWatchSoundBreath = null;
    }

    if ((libCOUI_gv_cU_HealthWatchSoundHeartbeat != null)) {
        SoundStop(libCOUI_gv_cU_HealthWatchSoundHeartbeat, true);
        libCOUI_gv_cU_HealthWatchSoundHeartbeat = null;
    }

    TriggerStop(libCOUI_gt_CU_HealthWatchBreathLoop);
    TriggerStop(libCOUI_gt_CU_HealthWatchHeartLoop);
    TriggerEnable(libCOUI_gt_CU_HealthWatchStartSound, true);
    TriggerEnable(libCOUI_gt_CU_HealthWatchBreathLoop, true);
    TriggerEnable(libCOUI_gt_CU_HealthWatchHeartLoop, true);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_LowHealthEnd);
}

trigger auto_libCOUI_gf_CU_UpdateObjectivePanel_Trigger = null;

void libCOUI_gf_CU_UpdateObjectivePanel () {
    if (auto_libCOUI_gf_CU_UpdateObjectivePanel_Trigger == null) {
        auto_libCOUI_gf_CU_UpdateObjectivePanel_Trigger = TriggerCreate("auto_libCOUI_gf_CU_UpdateObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_CU_UpdateObjectivePanel_Trigger, false, false);
}

bool auto_libCOUI_gf_CU_UpdateObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((libCOUI_gv_cU_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (libCOMI_gf_GameIsOver() == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (libCOUI_gv_cU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[1], 1) == true) && (libCOUI_gv_cU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[2], 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(libCOUI_gv_cU_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((libCOUI_gv_cU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[1], 1) == true)) || ((libCOUI_gv_cU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[2], 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(libCOUI_gv_cU_ObjectivePanel, "@UI/ObjectivePanelMask", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((libCOUI_gv_cU_HeroPanel[1] == c_invalidDialogControlId) || (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[1], 1) == false)) && ((libCOUI_gv_cU_HeroPanel[2] == c_invalidDialogControlId) || (DialogControlIsVisible(libCOUI_gv_cU_HeroPanel[2], 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(libCOUI_gv_cU_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libCOUI_gf_DisplayProgressBar_Trigger = null;
text auto_libCOUI_gf_DisplayProgressBar_lp_title;
int auto_libCOUI_gf_DisplayProgressBar_lp_min;
int auto_libCOUI_gf_DisplayProgressBar_lp_max;

void libCOUI_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libCOUI_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libCOUI_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libCOUI_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libCOUI_gf_DisplayProgressBar_Trigger == null) {
        auto_libCOUI_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libCOUI_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libCOUI_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libCOUI_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libCOUI_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libCOUI_gf_DisplayProgressBar_lp_max;

    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds";

    // Implementation
    if ((libCOUI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrame");
        libCOUI_gv_cU_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libCOUI_gv_cU_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libCOUI_gv_cU_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "LeftBarLabel");
        libCOUI_gv_cU_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    libCOUI_gf_SetProgressBarTitle(lp_title);
    libCOUI_gf_SetProgressBarColor(Color(9.41, 31.76, 72.94));
    libCOUI_gf_SetProgressBarValueRange(lp_min, lp_max);
    libCOUI_gf_SetProgressBarLabel(null);
    DialogControlSetVisible(libCOUI_gv_cU_ProgressBarPanel, PlayerGroupAll(), true);
    libCOUI_gv_cU_ProgressBarShowing = true;
    while (true) {
        if ((libCOUI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libCOUI_gv_cU_ProgressBarPanel, 1) == true)) {
            libCOUI_gf_CU_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libCOUI_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libCOUI_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_ProgressBarMin = lp_min;
    libCOUI_gv_cU_ProgressBarMax = lp_max;
}

void libCOUI_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libCOUI_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_ProgressBarProgress = lp_progress;
}

void libCOUI_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOUI_gv_cU_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libCOUI_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libCOUI_gf_CU_UpdateProgressBar();
    }

    DialogControlSetVisible(libCOUI_gv_cU_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libCOUI_gf_CU_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_ProgressBarProgress > 0)) {
        DialogControlSetSize(libCOUI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), MaxI(1, FixedToInt((IntToFixed(libCOUI_gv_pUC_ProgressBarWidth) * (IntToFixed(libCOUI_gv_cU_ProgressBarProgress) / IntToFixed(libCOUI_gv_cU_ProgressBarMax))))), libCOUI_gv_pUC_ProgressBarHeight);
        DialogControlSetVisible(libCOUI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libCOUI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), false);
    }
}

color libCOUI_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(100.00, 61.57, 23.53);
}

trigger auto_libCOUI_gf_DisplayProgressBarUnitOld_Trigger = null;
unit auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_unit;
int auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_minValue;
int auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_maxValue;
text auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_labelText;
int auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetX;
int auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetY;
string auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_attachment;

void libCOUI_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment) {
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_unit = lp_unit;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_minValue = lp_minValue;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_maxValue = lp_maxValue;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_labelText = lp_labelText;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetX = lp_offsetX;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetY = lp_offsetY;
    auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_attachment = lp_attachment;

    if (auto_libCOUI_gf_DisplayProgressBarUnitOld_Trigger == null) {
        auto_libCOUI_gf_DisplayProgressBarUnitOld_Trigger = TriggerCreate("auto_libCOUI_gf_DisplayProgressBarUnitOld_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_DisplayProgressBarUnitOld_Trigger, false, false);
}

bool auto_libCOUI_gf_DisplayProgressBarUnitOld_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_unit;
    int lp_minValue = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_minValue;
    int lp_maxValue = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_maxValue;
    text lp_labelText = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_labelText;
    int lp_offsetX = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetX;
    int lp_offsetY = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_offsetY;
    string lp_attachment = auto_libCOUI_gf_DisplayProgressBarUnitOld_lp_attachment;

    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    if ((DataTableGetDialog(true, ("ProgressBar_" + IntToString((libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog)) + "_" + IntToString(UnitGetTag(lp_unit)))) != c_invalidDialogId)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_FB61F536"), true);
        libCOUI_gf_DestroyProgressBarUnitOld(lp_unit);
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_progressBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, lp_attachment, lp_offsetX, lp_offsetY);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_progressBarPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_labelText, PlayerGroupAll());
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeImage, "BarImage");
    lv_progressBarProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), true);
    DataTableSetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_progressBarDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_progressBarPanel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_progressBarProgressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_progressBarValue);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    DataTableSetString(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment), (lp_attachment));
    while ((lp_unit != null) && (lv_progressBarDialog != c_invalidDialogId)) {
        libCOUI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
        lv_progressBarDialog = DataTableGetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
        Wait(0.25, c_timeReal);
    }
    return true;
}

void libCOUI_gf_DestroyProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    int lv_noDialog;
    int lv_noDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_noDialog = c_invalidDialogId;
    lv_noDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarPanel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel));
    DialogControlDestroy(lv_progressBarPanel);
    DialogControlDestroy(lv_progressBarProgressBar);
    DialogControlDestroy(lv_progressBarValue);
    DialogControlDestroy(lv_progressBarLabel);
    DialogDestroy(lv_progressBarDialog);
    DataTableSetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_noDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_noDialogItem);
}

void libCOUI_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue));

    // Implementation
    if (((lp_value >= lv_minValue) && (lp_value <= lv_maxValue))) {
        DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue), lp_value);
    }
    else {
        TriggerDebugOutput(1, StringToText(("Progress Bar (Unit) Value (" + IntToString(lp_value) + ") outside of set Min (" + IntToString(lv_minValue) + ") and Max (" + IntToString(lv_maxValue) + ").")), true);
    }
    libCOUI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOUI_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    libCOUI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOUI_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCOUI_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    libCOUI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOUI_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), lp_showHide);
    libCOUI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOUI_gf_CU_UpdateProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_dataTableString = DataTableGetString(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment));
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == false))) {
        libCOUI_gf_DestroyProgressBarUnitOld(lp_unit);
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    if ((lv_progressBarDialog == c_invalidDialogId)) {
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    DialogSetPositionRelativeToUnit(lv_progressBarDialog, lp_unit, lv_attachmentPreset, DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX)), DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY)));
    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<sectotal/>"), DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))), PlayerGroupAll());
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * ( (IntToFixed(DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))) - IntToFixed(DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) / (IntToFixed(DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue))) - IntToFixed(DataTableGetInt(true, libCOUI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) ))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libCOUI_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libCOUI_gf_CU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoFD907BC3_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoFD907BC3_val = lp_type;
    if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment) {
        lv_name = (lv_name + "_" + "Attachment");
    }
    else if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX) {
        lv_name = (lv_name + "_" + "OffsetX");
    }
    else if (autoFD907BC3_val == libCOUI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY) {
        lv_name = (lv_name + "_" + "OffsetY");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOUI_gf_CU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto4249BB71_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    auto4249BB71_val = lp_type;
    if (auto4249BB71_val == libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog) {
        lv_name = (lv_name + "_" + "Dialog");
    }
    else if (auto4249BB71_val == libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (auto4249BB71_val == libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel) {
        lv_name = (lv_name + "_" + "Panel");
    }
    else if (auto4249BB71_val == libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (auto4249BB71_val == libCOUI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libCOUI_gf_DisplayUnitProgressBar_Trigger = null;
unit auto_libCOUI_gf_DisplayUnitProgressBar_lp_unit;
text auto_libCOUI_gf_DisplayUnitProgressBar_lp_title;
int auto_libCOUI_gf_DisplayUnitProgressBar_lp_minValue;
int auto_libCOUI_gf_DisplayUnitProgressBar_lp_maxValue;

void libCOUI_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue) {
    auto_libCOUI_gf_DisplayUnitProgressBar_lp_unit = lp_unit;
    auto_libCOUI_gf_DisplayUnitProgressBar_lp_title = lp_title;
    auto_libCOUI_gf_DisplayUnitProgressBar_lp_minValue = lp_minValue;
    auto_libCOUI_gf_DisplayUnitProgressBar_lp_maxValue = lp_maxValue;

    if (auto_libCOUI_gf_DisplayUnitProgressBar_Trigger == null) {
        auto_libCOUI_gf_DisplayUnitProgressBar_Trigger = TriggerCreate("auto_libCOUI_gf_DisplayUnitProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_DisplayUnitProgressBar_Trigger, false, false);
}

bool auto_libCOUI_gf_DisplayUnitProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOUI_gf_DisplayUnitProgressBar_lp_unit;
    text lp_title = auto_libCOUI_gf_DisplayUnitProgressBar_lp_title;
    int lp_minValue = auto_libCOUI_gf_DisplayUnitProgressBar_lp_minValue;
    int lp_maxValue = auto_libCOUI_gf_DisplayUnitProgressBar_lp_maxValue;

    // Variable Declarations
    int lv_progressBar;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    if (((libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)) != c_invalidDialogControlId))) {
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
    }

    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", lp_unit);
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_title, PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", lp_unit);
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", lp_unit);
    lv_progressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", lp_unit);
    lv_progressBarBorder = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value), lv_progressBarValue);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar), lv_progressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder), lv_progressBarBorder);
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_CurValue), lp_minValue);
    DataTableSetBool(true, libCOUI_gf_CU_UnitProgressBar_Data2(lp_unit), true);
    DataTableSetBool(true, libCOUI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), false);
    libCOUI_gf_ShowHideUnitProgressBar(lp_unit, true);
    libCOUI_gf_CU_UpdateUnitProgressBar(lp_unit);
    return true;
}

void libCOUI_gf_SetUnitProgressBarIsWideBar (unit lp_unit, bool lp_isWideBar) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCOUI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), lp_isWideBar);
}

void libCOUI_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_realValue;
    int lv_realValue2;
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MaxValue));

    // Implementation
    lv_realValue = lp_value;
    if ((lv_minValue > lv_maxValue)) {
        lv_realValue2 = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_realValue2;
    }

    if ((lp_value < lv_minValue)) {
        lv_realValue = lv_minValue;
    }
    else {
        if ((lp_value > lv_maxValue)) {
            lv_realValue = lv_maxValue;
        }

    }
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_CurValue), lv_realValue);
    libCOUI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOUI_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCOUI_gf_SetUnitProgressBarProgress2 (unit lp_unit, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_DisplayValue), lp_value);
    libCOUI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOUI_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    libCOUI_gf_SetUnitProgressBarProgress(lp_unit, DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
}

void libCOUI_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBar;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBar = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    DialogControlSetVisible(lv_progressBarLabel, PlayerGroupAll(), lp_showHide);
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), lp_showHide);
    lv_progressBarBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    DialogControlSetVisible(lv_progressBarBar, PlayerGroupAll(), lp_showHide);
    lv_progressBarBorder = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder));
    DialogControlSetVisible(lv_progressBarBorder, PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        libCOUI_gf_CU_UpdateUnitProgressBar(lp_unit);
    }

}

void libCOUI_gf_ShowHideUnitProgressBar2 (unit lp_unit, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCOUI_gf_CU_UnitProgressBar_Data2(lp_unit), (lp_showHide == true));
    libCOUI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOUI_gf_CU_UpdateUnitProgressBar (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 252;
    const int lv_c_WidthWide = 372;
    const int lv_c_Height = 12;
    fixed lv_progressBarWidth;
    int lv_minValue;
    int lv_curValue;
    int lv_maxValue;
    int lv_displayValue;
    int lv_swapValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    lv_minValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_MaxValue));
    lv_curValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_CurValue));
    lv_displayValue = DataTableGetInt(true, libCOUI_gf_CU_UnitProgressBar_Data(lp_unit, libCOUI_ge_CU_UnitProgressBarDataName_DisplayValue));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOUI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    if (((lv_progressBarProgressBar == c_invalidDialogControlId) || (lv_progressBarValue == c_invalidDialogControlId))) {
        return ;
    }

    if ((lv_displayValue == -99999)) {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_curValue), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_displayValue), PlayerGroupAll());
    }
    if ((DataTableGetBool(true, libCOUI_gf_CU_UnitProgressBar_Data2(lp_unit)) == true)) {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), false);
    }
    if ((lv_minValue > lv_maxValue)) {
        lv_swapValue = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_swapValue;
        lv_curValue = (lv_maxValue-lv_curValue);
    }

    if ((DataTableGetBool(true, libCOUI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit)) == true)) {
        lv_progressBarWidth = (lv_c_WidthWide * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    else {
        lv_progressBarWidth = (lv_c_Width * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), MaxI(FixedToInt(lv_progressBarWidth), 1), lv_c_Height);
}

string libCOUI_gf_CU_UnitProgressBar_Data (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoB85C2953_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoB85C2953_val = lp_type;
    if (autoB85C2953_val == libCOUI_ge_CU_UnitProgressBarDataName_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoB85C2953_val == libCOUI_ge_CU_UnitProgressBarDataName_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoB85C2953_val == libCOUI_ge_CU_UnitProgressBarDataName_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (autoB85C2953_val == libCOUI_ge_CU_UnitProgressBarDataName_DisplayValue) {
        lv_name = (lv_name + "_" + "DisValue");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOUI_gf_CU_UnitProgressBar_Data2 (unit lp_unit) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_ValueShow_";
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOUI_gf_CU_UnitProgressBar_IsWideBarString (unit lp_unit) {
    // Variable Declarations
    string lv_isWideBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_isWideBar = "";

    // Implementation
    lv_isWideBar = "ProgressBar_IsWideBar_";
    lv_isWideBar = (lv_isWideBar + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_isWideBar;
}

string libCOUI_gf_CU_UnitProgressBar_Dialog (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoEA1D1BB3_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    autoEA1D1BB3_val = lp_type;
    if (autoEA1D1BB3_val == libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (autoEA1D1BB3_val == libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else if (autoEA1D1BB3_val == libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (autoEA1D1BB3_val == libCOUI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder) {
        lv_name = (lv_name + "_" + "ProgressBarBorder");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

void libCOUI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    libCOUI_gv_cU_TimerWindow = TimerWindowLastCreated();
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    libCOUI_gf_RepositionTimerWindow(TimerWindowLastCreated());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    libCOUI_gv_cU_TimerWindowHighlightFrame = DialogControlLastCreated();
    libCOUI_gv_cU_TimerWindowTimer = lp_timer;
    libCOUI_gv_cU_TimerWindowInDanger = false;
    TriggerEnable(libCOUI_gt_CU_TimerWindowThresholdCrossed, true);
    libCOUI_gf_FlashTimerWindow(8.0, false);
    TriggerExecute(libCOUI_gt_CU_TimerWindowMoveForBossBar, true, false);
}

void libCOUI_gf_SetTimerForTimerWindowCampaign (int lp_window, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_TimerWindowTimer = lp_timer;
    TimerWindowSetTimer(lp_window, lp_timer);
}

void libCOUI_gf_RepositionTimerWindow (int lp_timerWindow) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void libCOUI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(libCOUI_gt_CU_TimerWindowFlash, true, lp_waitOption);
}

void libCOUI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gv_cU_TimerWindowDangerThreshold = lp_thresholdTime;
}

void libCOUI_gf_CU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(lp_tipName, lp_tipType), lp_tipDescription, lp_tipAlertText, lp_tipIcon);
}

void libCOUI_gf_CreateWaveTimerWindow (timer lp_timer, text lp_title, string lp_icon) {
    // Variable Declarations
    int lv_newWaveID;
    int lv_index;

    // Automatic Variable Declarations
    const int auto61E1BD6E_ae = libCOUI_gv_cUC_WAVETIMERUNITMAX;
    const int auto61E1BD6E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_WaveTimerActiveCount == libCOUI_gv_cUC_WAVETIMERWINDOWMAX)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_7C7AA1F4"), true);
        return ;
    }

    libCOUI_gf_CU_WaveTimerWindowCreateAll();
    libCOUI_gv_cU_WaveTimerActiveCount += 1;
    lv_newWaveID = ((libCOUI_gv_cU_WaveTimerWindowLast)+1);
    DataTableSetInt(true, libCOUI_gf_CU_WaveTimerWindowIndexKey(lv_newWaveID), libCOUI_gv_cU_WaveTimerActiveCount);
    libCOUI_gv_cU_WaveTimerWindowLast = (lv_newWaveID);
    libCOUI_gv_cU_WaveTimerWindowTimers[libCOUI_gv_cU_WaveTimerActiveCount] = lp_timer;
    libCOUI_gv_cU_WaveTimerWindowImage[libCOUI_gv_cU_WaveTimerActiveCount][1] = lp_icon;
    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_WaveTimerWindowIcon[libCOUI_gv_cU_WaveTimerActiveCount][1], lp_icon, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_WaveTimerWindowIcon[libCOUI_gv_cU_WaveTimerActiveCount][1], StringToText(""), PlayerGroupAll());
    lv_index = 2;
    for ( ; ( (auto61E1BD6E_ai >= 0 && lv_index <= auto61E1BD6E_ae) || (auto61E1BD6E_ai < 0 && lv_index >= auto61E1BD6E_ae) ) ; lv_index += auto61E1BD6E_ai ) {
        libCOUI_gv_cU_WaveTimerWindowImage[libCOUI_gv_cU_WaveTimerActiveCount][lv_index] = null;
        libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_WaveTimerWindowIcon[libCOUI_gv_cU_WaveTimerActiveCount][lv_index], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindowIcon[libCOUI_gv_cU_WaveTimerActiveCount][lv_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_WaveTimerWindowTitle[libCOUI_gv_cU_WaveTimerActiveCount], lp_title, PlayerGroupAll());
    DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindows[libCOUI_gv_cU_WaveTimerActiveCount], PlayerGroupAll(), true);
}

void libCOUI_gf_DestroyWaveTimerWindow (int lp_window) {
    // Variable Declarations
    int lv_destroyIndex;
    int lv_windowIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    int auto34BA5C64_ae;
    const int auto34BA5C64_ai = 1;
    const int auto742C6A92_ae = libCOUI_gv_cUC_WAVETIMERUNITMAX;
    const int auto742C6A92_ai = 1;

    // Variable Initialization

    // Implementation
    lv_destroyIndex = libCOUI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_destroyIndex < 1) || (lv_destroyIndex > libCOUI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_7CA02155"), true);
        return ;
    }

    if ((lv_destroyIndex < libCOUI_gv_cU_WaveTimerActiveCount)) {
        auto34BA5C64_ae = libCOUI_gv_cU_WaveTimerActiveCount;
        lv_windowIndex = (lv_destroyIndex+1);
        for ( ; ( (auto34BA5C64_ai >= 0 && lv_windowIndex <= auto34BA5C64_ae) || (auto34BA5C64_ai < 0 && lv_windowIndex >= auto34BA5C64_ae) ) ; lv_windowIndex += auto34BA5C64_ai ) {
            libCOUI_gv_cU_WaveTimerWindowTimers[(lv_windowIndex-1)] = libCOUI_gv_cU_WaveTimerWindowTimers[lv_windowIndex];
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_WaveTimerWindowTitle[(lv_windowIndex-1)], libNtve_gf_DialogItemText(libCOUI_gv_cU_WaveTimerWindowTitle[lv_windowIndex], 1), PlayerGroupAll());
            lv_slotIndex = 1;
            for ( ; ( (auto742C6A92_ai >= 0 && lv_slotIndex <= auto742C6A92_ae) || (auto742C6A92_ai < 0 && lv_slotIndex >= auto742C6A92_ae) ) ; lv_slotIndex += auto742C6A92_ai ) {
                libCOUI_gv_cU_WaveTimerWindowImage[(lv_windowIndex-1)][lv_slotIndex] = libCOUI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lv_slotIndex];
                if ((libCOUI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lv_slotIndex] != null)) {
                    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], libCOUI_gv_cU_WaveTimerWindowImage[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll());
                    DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], libNtve_gf_DialogItemTooltip(libCOUI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lv_slotIndex], 1), PlayerGroupAll());
                }
                else {
                    DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll(), false);
                }
            }
        }
    }

    DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindows[libCOUI_gv_cU_WaveTimerActiveCount], PlayerGroupAll(), false);
    libCOUI_gv_cU_WaveTimerActiveCount -= 1;
    DataTableSetInt(true, libCOUI_gf_CU_WaveTimerWindowIndexKey((lp_window)), 0);
}

void libCOUI_gf_SetWaveTimerWindowIcon (int lp_window, string lp_icon, int lp_slot) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_slot < 1) || (lp_slot > libCOUI_gv_cUC_WAVETIMERUNITMAX))) {
        TextExpressionSetToken("Param/Expression/lib_COUI_ACA490BE", "A", IntToText(lp_slot));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COUI_ACA490BE"), true);
        return ;
    }

    lv_windowIndex = libCOUI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_windowIndex < 1) || (lv_windowIndex > libCOUI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_C84E11FE"), true);
        return ;
    }

    libCOUI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lp_slot] = lp_icon;
    libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], lp_icon, PlayerGroupAll());
    DialogControlSetVisible(libCOUI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], PlayerGroupAll(), true);
}

void libCOUI_gf_SetWaveTimerWindowIconTooltip (int lp_window, text lp_tooltip, int lp_slot) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_slot < 1) || (lp_slot > libCOUI_gv_cUC_WAVETIMERUNITMAX))) {
        TextExpressionSetToken("Param/Expression/lib_COUI_77C208E4", "A", IntToText(lp_slot));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COUI_77C208E4"), true);
        return ;
    }

    lv_windowIndex = libCOUI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_windowIndex < 1) || (lv_windowIndex > libCOUI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_026B843C"), true);
        return ;
    }

    libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], lp_tooltip, PlayerGroupAll());
}

void libCOUI_gf_CU_WaveTimerWindowCreateAll () {
    // Variable Declarations
    int lv_timerWindowHolder;
    int lv_lastFrame;
    int lv_windowIndex;
    int lv_unitIndex;

    // Automatic Variable Declarations
    const int autoD1A7294D_ae = libCOUI_gv_cUC_WAVETIMERWINDOWMAX;
    const int autoD1A7294D_ai = 1;
    const int auto16A84006_ae = libCOUI_gv_cUC_WAVETIMERUNITMAX;
    const int auto16A84006_ai = 1;

    // Variable Initialization
    lv_timerWindowHolder = c_invalidDialogControlId;
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((libCOUI_gv_cU_WaveTimerWindows[1] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/WaveTimerWindowPanel");
    lv_timerWindowHolder = DialogControlLastCreated();
    lv_windowIndex = 1;
    for ( ; ( (autoD1A7294D_ai >= 0 && lv_windowIndex <= autoD1A7294D_ae) || (autoD1A7294D_ai < 0 && lv_windowIndex >= autoD1A7294D_ae) ) ; lv_windowIndex += autoD1A7294D_ai ) {
        DialogControlHookup(lv_timerWindowHolder, c_triggerControlTypePanel, "WaveTimerWindow" + IntToString(lv_windowIndex));
        libCOUI_gv_cU_WaveTimerWindows[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_WaveTimerWindows[lv_windowIndex], c_triggerControlTypePanel, "TimerPanel");
        lv_lastFrame = DialogControlLastCreated();
        DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "TimerLabel");
        libCOUI_gv_cU_WaveTimerWindowTime[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "TitleLabel");
        libCOUI_gv_cU_WaveTimerWindowTitle[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_WaveTimerWindows[lv_windowIndex], c_triggerControlTypePanel, "UnitPanel");
        lv_lastFrame = DialogControlLastCreated();
        lv_unitIndex = 1;
        for ( ; ( (auto16A84006_ai >= 0 && lv_unitIndex <= auto16A84006_ae) || (auto16A84006_ai < 0 && lv_unitIndex >= auto16A84006_ae) ) ; lv_unitIndex += auto16A84006_ai ) {
            DialogControlHookup(lv_lastFrame, c_triggerControlTypeImage, "UnitIcon" + IntToString(lv_unitIndex));
            libCOUI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lv_unitIndex] = DialogControlLastCreated();
        }
    }
    TriggerExecute(libCOUI_gt_CU_WaveTimerWindowUpdateTime, true, false);
}

int libCOUI_gf_LastCreatedWaveTimerWindow () {
    // Automatic Variable Declarations
    // Implementation
    return libCOUI_gv_cU_WaveTimerWindowLast;
}

int libCOUI_gf_CU_WaveTimerWindowIndexFromID (int lp_waveID) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCOUI_gf_CU_WaveTimerWindowIndexKey(lp_waveID));
}

string libCOUI_gf_CU_WaveTimerWindowIndexKey (int lp_waveID) {
    // Automatic Variable Declarations
    // Implementation
    return ("CU_WaveTimer" + IntToString(lp_waveID));
}

void libCOUI_gf_CU_FanfareCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOUI_gv_cU_FanfareDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 500);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOUI_gv_cU_FanfareDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_ScoreScreen/GameOverFanfareTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOUI_gv_cU_FanfarePanel = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_FanfarePanel, c_triggerControlTypeFlash, "FlashFrame");
    libCOUI_gv_cU_FanfareFlash = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    libCOUI_gv_cU_FanfareCloseButton = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "ConvertToReplayButton");
    libCOUI_gv_cU_FanfareConvertToReplayButton = DialogControlLastCreated();
}

void libCOUI_gf_CU_FanfareDisplay (int lp_result, int lp_player) {
    // Variable Declarations
    playergroup lv_fanfarePlayers;
    string lv_playerRace;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fanfarePlayers = PlayerGroupEmpty();

    // Implementation
    if ((libCOUI_gv_cU_FanfareShown[lp_player] == true)) {
        return ;
    }

    libCOUI_gv_cU_FanfareShown[lp_player] = true;
    libCOUI_gf_CU_FanfareCreate();
    lv_fanfarePlayers = PlayerGroupSingle(lp_player);
    lv_playerRace = PlayerRace(lp_player);
    libCOUI_gv_cU_FanfareResult[lp_player] = lp_result;
    if (((lv_playerRace == "TerrI") || (lv_playerRace == "ZergP"))) {
        lv_playerRace = "Zerg";
    }

    TriggerEnable(libCOUI_gt_CU_FanfareDismissed, true);
    DialogSetVisible(libCOUI_gv_cU_FanfareDialog, lv_fanfarePlayers, true);
    if ((lp_result == c_gameOverVictory)) {
        DialogControlInvokeAsText(libCOUI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Victory"), null, null, null);
    }
    else {
        DialogControlInvokeAsText(libCOUI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Defeat"), null, null, null);
    }
    DialogControlInvokeAsText(libCOUI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetNameText", PlayerName(lp_player), null, null, null);
    DialogControlInvokeAsString(libCOUI_gv_cU_FanfareFlash, lv_fanfarePlayers, "PlayVictoryScreen", StringCase((lv_playerRace), false), null, null, null);
    SoundPlayForPlayer(SoundLink("UI_Victory_All", 0), c_maxPlayers, lv_fanfarePlayers, 100.0, 0.0);
}

trigger auto_libCOUI_gf_CU_FanfareTransmission_Trigger = null;

void libCOUI_gf_CU_FanfareTransmission () {
    if (auto_libCOUI_gf_CU_FanfareTransmission_Trigger == null) {
        auto_libCOUI_gf_CU_FanfareTransmission_Trigger = TriggerCreate("auto_libCOUI_gf_CU_FanfareTransmission_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_CU_FanfareTransmission_Trigger, false, false);
}

bool auto_libCOUI_gf_CU_FanfareTransmission_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoDAF10A5B_g;

    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_FanfareTransmissionPlayed == true)) {
        return true;
    }

    libCOUI_gv_cU_FanfareTransmissionPlayed = true;
    Wait(0.5, c_timeGame);
    UserDataSetInt("MissionTransmission", "Victory", "PlayingNow", 1, 1);
    libCOMI_gv_cM_TransmissionCurrentType = "Victory";
    autoDAF10A5B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDAF10A5B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        ConversationDataLineSetPlayers("acVictory", (libCOOC_gf_CC_CommanderConvoTag(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
    }
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), PlayerGroupAll(), c_conversationSkipNone, true);
    while (!((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    return true;
}

void libCOUI_gf_CU_ScoreCreate () {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto6156C874_ae = 3;
    const int auto6156C874_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOUI_gv_cU_ScoreDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOUI_gv_cU_ScoreDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libCOUI_gv_cU_ScoreDialog, c_triggerControlTypePanel, "Coop_ScoreScreen/ScoreScreenTemplate");
    libCOUI_gv_cU_ScorePanel = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "Title");
    libCOUI_gv_cU_ScoreTitleLabel = DialogControlLastCreated();
    lv_categoryIndex = 1;
    for ( ; ( (auto6156C874_ai >= 0 && lv_categoryIndex <= auto6156C874_ae) || (auto6156C874_ai < 0 && lv_categoryIndex >= auto6156C874_ae) ) ; lv_categoryIndex += auto6156C874_ai ) {
        DialogControlHookup(libCOUI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreTitle" + IntToString(lv_categoryIndex));
        libCOUI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValue" + IntToString(lv_categoryIndex));
        libCOUI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCOUI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValueTotal");
    libCOUI_gv_cU_ScoreTotalValueLabel = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_ScorePanel, c_triggerControlTypeButton, "ContinueButton");
    libCOUI_gv_cU_ScoreContinueButton = DialogControlLastCreated();
}

void libCOUI_gf_CU_ScoreDisplay (int lp_player, int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    libCOUI_gf_CU_ScoreCreate();
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lp_player));
    UISetWorldVisible(PlayerGroupSingle(lp_player), false);
    libCOUI_gf_CU_ScoreUpdate(lp_player, lp_result);
    DialogSetVisible(libCOUI_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOUI_gt_CU_ScoreClosed, true);
}

void libCOUI_gf_CU_ScoreUpdate (int lp_player, int lp_result) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    fixed lv_xPBonus;
    fixed lv_xPBase;
    fixed lv_xPObjective;
    int lv_categoryIndex;
    string lv_indexScoreType;

    // Automatic Variable Declarations
    const int auto2D106A93_ae = 3;
    const int auto2D106A93_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((lp_result == c_gameOverVictory)) {
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_COUI_4A30105B"), lv_updatePlayers);
    }
    else {
        libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_COUI_DB62295D"), lv_updatePlayers);
    }
    lv_categoryIndex = 1;
    for ( ; ( (auto2D106A93_ai >= 0 && lv_categoryIndex <= auto2D106A93_ae) || (auto2D106A93_ai < 0 && lv_categoryIndex >= auto2D106A93_ae) ) ; lv_categoryIndex += auto2D106A93_ai ) {
        lv_indexScoreType = libCOOC_gf_CC_MissionScoreType(lv_categoryIndex, lp_player);
        if ((lv_indexScoreType != null)) {
            TextExpressionSetToken("Param/Expression/lib_COUI_EF1F50D7", "SCORE", IntToText(libCOOC_gf_CC_MissionScoreValue(lv_categoryIndex, lp_player)));
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], TextExpressionAssemble("Param/Expression/lib_COUI_EF1F50D7"), lv_updatePlayers);
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], StringExternal(CatalogFieldValueGet(c_gameCatalogScoreValue, lv_indexScoreType, "Name", c_playerAny)), lv_updatePlayers);
            DialogControlSetVisible(libCOUI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, true);
            DialogControlSetVisible(libCOUI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, true);
        }
        else {
            DialogControlSetVisible(libCOUI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, false);
            DialogControlSetVisible(libCOUI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, false);
        }
    }
    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_ScoreTotalValueLabel, IntToText(PlayerScoreValueGetAsInt(lp_player, "TotalMissionScore")), lv_updatePlayers);
}

void libCOUI_gf_CU_ScoreClose (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libCOUI_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), false);
}

int libCOUI_gf_CU_ScoreTriggeringPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libCOUI_gv_cUC_ScoreEventClosed, libCOUI_gv_cUC_ScoreParameterPlayer));
}

void libCOUI_gf_CU_ScoreClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOUI_gv_cUC_ScoreEventClosed);
}

void libCOUI_gf_CU_HelpInit () {
    // Automatic Variable Declarations
    playergroup auto50679DB4_g;
    int auto50679DB4_var;

    // Implementation
    auto50679DB4_g = PlayerGroupAll();
    auto50679DB4_var = -1;
    while (true) {
        auto50679DB4_var = PlayerGroupNextPlayer(auto50679DB4_g, auto50679DB4_var);
        if (auto50679DB4_var < 0) { break; }
        TechTreeUnitHelpDefault(auto50679DB4_var, false);
    }
    libCOUI_gf_CU_HelpSetupMutatorTips();
    libCOUI_gf_CU_HelpSetupGeneralTips();
}

void libCOUI_gf_CU_HelpSetupGeneralTips () {
    // Variable Declarations
    int lv_i;
    string lv_generalTipInstance;

    // Automatic Variable Declarations
    const int autoAC6F1D1D_ae = 1;
    const int autoAC6F1D1D_ai = -1;

    // Variable Initialization

    // Implementation
    lv_i = UserDataInstanceCount("X_GeneralTips");
    for ( ; ( (autoAC6F1D1D_ai >= 0 && lv_i <= autoAC6F1D1D_ae) || (autoAC6F1D1D_ai < 0 && lv_i >= autoAC6F1D1D_ae) ) ; lv_i += autoAC6F1D1D_ai ) {
        lv_generalTipInstance = UserDataInstance("X_GeneralTips", lv_i);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOOC_gf_CC_CommanderGeneralTipTitle(lv_generalTipInstance), libNtve_ge_TipType_NormalTip), libCOOC_gf_CC_CommanderGeneralTipDetails(lv_generalTipInstance), StringToText(""), libCOOC_gf_CC_CommanderGeneralTipIcon(lv_generalTipInstance));
    }
}

void libCOUI_gf_CU_HelpSetupMutatorTips () {
    // Variable Declarations
    string lv_indexMutator;

    // Automatic Variable Declarations
    int auto70A55544_ai;
    int auto70A55544_ae;

    // Variable Initialization

    // Implementation
    auto70A55544_ai = 1;
    auto70A55544_ae = UserDataInstanceCount("Mutators")+1;
    while (auto70A55544_ai < auto70A55544_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto70A55544_ai);
        auto70A55544_ai = auto70A55544_ai+1;
        if ((libCOMU_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOMU_gf_CT_MutatorName(lv_indexMutator), libNtve_ge_TipType_NormalTip), libCOMU_gf_CT_MutatorDescription(lv_indexMutator), StringToText(""), libCOMU_gf_CT_MutatorIcon(lv_indexMutator));
        }

    }
}

text libCOUI_gf_CU_PrestigeBriefFormatTooltip2 (int lp_player) {
    // Variable Declarations
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_face = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_ActiveCommanderForPlayer4(lp_player), libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player));

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COUI_6DCA9D94", "A", libCOOC_gf_CC_CommanderName(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COUI_6DCA9D94", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COUI_6DCA9D94", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COUI_6DCA9D94");
}

trigger auto_libCOUI_gf_AF_MutatorIconsCreate_Trigger = null;
int auto_libCOUI_gf_AF_MutatorIconsCreate_lp_pDialog;

void libCOUI_gf_AF_MutatorIconsCreate (int lp_pDialog) {
    auto_libCOUI_gf_AF_MutatorIconsCreate_lp_pDialog = lp_pDialog;

    if (auto_libCOUI_gf_AF_MutatorIconsCreate_Trigger == null) {
        auto_libCOUI_gf_AF_MutatorIconsCreate_Trigger = TriggerCreate("auto_libCOUI_gf_AF_MutatorIconsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_AF_MutatorIconsCreate_Trigger, false, false);
}

bool auto_libCOUI_gf_AF_MutatorIconsCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOUI_gf_AF_MutatorIconsCreate_lp_pDialog;

    int init_i;

    // Variable Declarations
    string lv_vIndexMutator;
    int[21] lv_vMutatorPanels;
    int lv_vA;
    int lv_vB;

    // Automatic Variable Declarations
    int autoB81B6C06_ai;
    int autoB81B6C06_ae;
    int autoE6B6043C_ae;
    const int autoE6B6043C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vMutatorPanels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    Wait(1.5, c_timeGame);
    autoB81B6C06_ai = 1;
    autoB81B6C06_ae = UserDataInstanceCount("Mutators")+1;
    while (autoB81B6C06_ai < autoB81B6C06_ae) {
        lv_vIndexMutator = UserDataInstance("Mutators", autoB81B6C06_ai);
        autoB81B6C06_ai = autoB81B6C06_ai+1;
        if ((libCOMU_gf_MutatorIsEnabled(lv_vIndexMutator) == true)) {
            lv_vA += 1;
            DialogControlCreateFromTemplate(lp_pDialog, c_triggerControlTypePanel, "Coop_MutatorList/MutatorSmallListItemTemplate");
            lv_vMutatorPanels[lv_vA] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MutatorIcon");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMU_gf_CT_MutatorIcon(lv_vIndexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COUI_1D4D525F", "NAME", libCOMU_gf_CT_MutatorName(lv_vIndexMutator));
            TextExpressionSetToken("Param/Expression/lib_COUI_1D4D525F", "DESCRIPTION", libCOMU_gf_CT_MutatorDescription(lv_vIndexMutator));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COUI_1D4D525F"), PlayerGroupAll());
        }

    }
    autoE6B6043C_ae = lv_vA;
    lv_vB = 1;
    for ( ; ( (autoE6B6043C_ai >= 0 && lv_vB <= autoE6B6043C_ae) || (autoE6B6043C_ai < 0 && lv_vB >= autoE6B6043C_ae) ) ; lv_vB += autoE6B6043C_ai ) {
        DialogControlSetPosition(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), c_anchorTop, FixedToInt((70* (IntToFixed(lv_vB)  - 0.5 - (IntToFixed(lv_vA)/2)))), 165);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 1.5, 15.0);
        DialogControlSetVisible(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), true);
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libCOUI_gf_AF_MasteryInfoCreate_Trigger = null;
int auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pDialog;
int auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pPlayer;

void libCOUI_gf_AF_MasteryInfoCreate (int lp_pDialog, int lp_pPlayer) {
    auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pDialog = lp_pDialog;
    auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pPlayer = lp_pPlayer;

    if (auto_libCOUI_gf_AF_MasteryInfoCreate_Trigger == null) {
        auto_libCOUI_gf_AF_MasteryInfoCreate_Trigger = TriggerCreate("auto_libCOUI_gf_AF_MasteryInfoCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOUI_gf_AF_MasteryInfoCreate_Trigger, false, false);
}

bool auto_libCOUI_gf_AF_MasteryInfoCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pDialog;
    int lp_pPlayer = auto_libCOUI_gf_AF_MasteryInfoCreate_lp_pPlayer;

    int init_i;

    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int[7] lv_vMasteryLabel;
    int lv_vIndex;
    int lv_vOffsetX;
    int lv_vAnchor;
    int lv_vB;
    string lv_button;
    text lv_vText;
    int lv_vPrestigeIndex;
    int lv_vPrestigeLabel;

    // Automatic Variable Declarations
    int auto3925C96A_ai;
    int auto3925C96A_ae;
    int auto3925C96A_ac;
    int autoA00BC0AB_ae;
    const int autoA00BC0AB_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_vMasteryLabel[init_i] = c_invalidDialogControlId;
    }
    lv_vOffsetX = 440;
    lv_vAnchor = c_anchorBottomLeft;
    lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[1];
    lv_vPrestigeLabel = c_invalidDialogControlId;

    // Implementation
    Wait(1.5, c_timeGame);
    if ((lp_pPlayer == 2)) {
        lv_vAnchor = c_anchorBottom;
        lv_vOffsetX = 500;
        lv_vPrestigeIndex = libCOOC_gv_cCX_PlayerPrestigeIndex[2];
    }

    lv_button = libCOOC_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_ActiveCommanderForPlayer4(lp_pPlayer), lv_vPrestigeIndex);
    lv_vText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", lp_pPlayer));
    libNtve_gf_CreateDialogItemLabel(lp_pDialog, 500, 50, lv_vAnchor, lv_vOffsetX, 0, lv_vText, ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vPrestigeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PrestigeScore", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOUI_gf_CU_PrestigeBriefFormatTooltip2(lp_pPlayer), PlayerGroupAll());
    auto3925C96A_ai = 0;
    auto3925C96A_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto3925C96A_ai < auto3925C96A_ae) {
        auto3925C96A_ai = auto3925C96A_ai+1;
        auto3925C96A_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto3925C96A_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_pPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto3925C96A_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto3925C96A_ai);
            if ((libCOUT_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade) >= 1)) {
                TextExpressionSetToken("Param/Expression/lib_COUI_F73A18F0", "A", libCOUT_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade));
                TextExpressionSetToken("Param/Expression/lib_COUI_F73A18F0", "B", IntToText(libCOUT_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade)));
                libNtve_gf_CreateDialogItemLabel(lp_pDialog, 600, 50, lv_vAnchor, 0, 0, TextExpressionAssemble("Param/Expression/lib_COUI_F73A18F0"), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
                lv_vMasteryLabel[lv_vIndex] = DialogControlLastCreated();
                lv_vIndex += 1;
            }

        }    
    }
    DialogControlSetPosition(lv_vPrestigeLabel, PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * lv_vIndex + 30));
    DialogControlFadeTransparency(lv_vPrestigeLabel, PlayerGroupAll(), 1.5, 20.0);
    Wait(0.5, c_timeGame);
    autoA00BC0AB_ae = lv_vIndex;
    lv_vB = 0;
    for ( ; ( (autoA00BC0AB_ai >= 0 && lv_vB <= autoA00BC0AB_ae) || (autoA00BC0AB_ai < 0 && lv_vB >= autoA00BC0AB_ae) ) ; lv_vB += autoA00BC0AB_ai ) {
        DialogControlSetPosition(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * (lv_vIndex - lv_vB ) - 10));
        DialogControlFadeTransparency(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), 1.5, 20.0);
        Wait(0.5, c_timeGame);
    }
    return true;
}

string libCOUI_gf_HybridMajor () {
    // Variable Declarations
    string lv_hybridMajor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_hybridMajor = "HybridBehemoth";
    }
    else {
        lv_hybridMajor = "HybridDominatorVoid";
    }
    return lv_hybridMajor;
}

string libCOUI_gf_HybridMinor () {
    // Variable Declarations
    string lv_hybridMinor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_hybridMinor = "HybridDestroyer";
    }
    else {
        lv_hybridMinor = "HybridReaver";
    }
    return lv_hybridMinor;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Announce Message
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AnnounceMessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bank lv_bANK;
    fixed lv_lAST_VERSION;

    // Automatic Variable Declarations
    playergroup auto326687D5_g;
    int auto326687D5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto326687D5_g = PlayerGroupAll();
    auto326687D5_var = -1;
    while (true) {
        auto326687D5_var = PlayerGroupNextPlayer(auto326687D5_g, auto326687D5_var);
        if (auto326687D5_var < 0) { break; }
        if ((PlayerType(auto326687D5_var) == c_playerTypeUser)) {
            BankLoad(libCOMI_gv_vU_BANK, auto326687D5_var);
            lv_bANK = BankLastCreated();
            if ((BankSectionExists(lv_bANK, "MISC") == true)) {
                if ((BankKeyExists(lv_bANK, "MISC", "LAST_VERSION") == true)) {
                    lv_lAST_VERSION = BankValueGetAsFixed(lv_bANK, "MISC", "LAST_VERSION");
                }

            }

            if ((lv_lAST_VERSION < libCOUI_gv_cURRENT_VERSION)) {
                libCOUI_gv_nEWCOMER = true;
                UIDisplayMessage(PlayerGroupSingle(auto326687D5_var), c_messageAreaChat, libCOUI_gv_aNNOUNCE_MESSAGE);
                if ((BankSectionExists(lv_bANK, "MISC") == false)) {
                    BankSectionCreate(lv_bANK, "MISC");
                }

                BankValueSetFromFixed(lv_bANK, "MISC", "LAST_VERSION", libCOUI_gv_cURRENT_VERSION);
                BankSave(lv_bANK);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AnnounceMessage_Init () {
    libCOUI_gt_AnnounceMessage = TriggerCreate("libCOUI_gt_AnnounceMessage_Func");
    TriggerAddEventMapInit(libCOUI_gt_AnnounceMessage);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapListslectionChanged
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_MapListslectionChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_selectMissionPulldownDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_UpdateMapSelection(EventPlayer(), DialogControlGetSelectedItem(libCOUI_gv_selectMissionPulldownDialog, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_MapListslectionChanged_Init () {
    libCOUI_gt_MapListslectionChanged = TriggerCreate("libCOUI_gt_MapListslectionChanged_Func");
    TriggerAddEventDialogControl(libCOUI_gt_MapListslectionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_MapButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_votes;
    int lv_i;
    int lv_old;

    // Automatic Variable Declarations
    int autoC3677FF1_ae;
    const int autoC3677FF1_ai = 1;

    // Variable Initialization
    lv_old = libCOUI_gv_selected[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3677FF1_ae = libCOUI_gv_totalMaps;
    lv_i = 1;
    for ( ; ( (autoC3677FF1_ai >= 0 && lv_i <= autoC3677FF1_ae) || (autoC3677FF1_ai < 0 && lv_i >= autoC3677FF1_ae) ) ; lv_i += autoC3677FF1_ai ) {
        if ((EventDialogControl() == libCOUI_gv_missionButton[lv_i])) {
            libCOUI_gf_UpdateMapSelection(EventPlayer(), lv_i);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_MapButtonClicked_Init () {
    libCOUI_gt_MapButtonClicked = TriggerCreate("libCOUI_gt_MapButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_MapButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissionsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_MissionsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_missionsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libCOUI_gv_selectMissionDialogBig, EventPlayer()) == true)) {
        DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_MissionsButtonClicked_Init () {
    libCOUI_gt_MissionsButtonClicked = TriggerCreate("libCOUI_gt_MissionsButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_MissionsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Mission
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_StartMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selected;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selected = DialogControlGetSelectedItem(libCOUI_gv_selectMissionPulldownDialog, 1);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_startMissionDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_selected == 1)) {
        lv_selected = RandomInt(2, libCOUI_gv_totalMaps);
    }

    if ((GameIsOnline() == true)) {
        OnlineMapToMapLoad(libCOUI_gv_mapSlots[lv_selected], PlayerGroupAll(), PlayerGroupEmpty());
    }
    else {
        GameSetNextMap(("coop/" + libCOUI_gv_mapFiles[lv_selected]));
        GameOver(1, c_gameOverVictory, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_StartMission_Init () {
    libCOUI_gt_StartMission = TriggerCreate("libCOUI_gt_StartMission_Func");
    TriggerEnable(libCOUI_gt_StartMission, false);
    TriggerAddEventDialogControl(libCOUI_gt_StartMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Missions Dialog
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CreateMissionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;

    // Automatic Variable Declarations
    int auto82873512_ae;
    int auto82873512_var;
    playergroup autoC63F5F27_g;
    int autoC63F5F27_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    DialogCreate(1000, 1000, c_anchorTopRight, 20, 20, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOUI_gv_selectMissionDialog = DialogLastCreated();
    DialogSetRenderPriority(libCOUI_gv_selectMissionDialog, 9000);
    DialogControlCreate(libCOUI_gv_selectMissionDialog, c_triggerControlTypePulldown);
    libCOUI_gv_selectMissionPulldownDialog = DialogControlLastCreated();
    DialogControlSetSize(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, 470, 90);
    DialogControlSetPosition(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, c_anchorTopRight, 390, -5);
    libNtve_gf_CreateDialogItemButton(libCOUI_gv_selectMissionDialog, 350, 80, c_anchorTopRight, 0, 0, StringExternal("Param/Value/lib_COUI_F6DA9C78"), StringExternal("Param/Value/lib_COUI_86171ABC"), "");
    libCOUI_gv_startMissionDialogButton = DialogControlLastCreated();
    DialogSetVisible(libCOUI_gv_selectMissionDialog, libCOMI_gv_all, true);
    DialogControlSetVisible(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, true);
    DialogControlSetVisible(libCOUI_gv_startMissionDialogButton, libCOMI_gv_all, true);
    DialogCreate(1890, 990, c_anchorTopLeft, 100, 100, true);
    libCOUI_gv_selectMissionDialogBig = DialogLastCreated();
    DialogSetRenderPriority(libCOUI_gv_selectMissionDialogBig, 5000);
    DialogSetTitle(libCOUI_gv_selectMissionDialogBig, StringExternal("Param/Value/lib_COUI_95D4C568"));
    DialogSetVisible(libCOUI_gv_selectMissionDialogBig, libCOMI_gv_all, true);
    auto82873512_ae = UserDataInstanceCount("Maps");
    auto82873512_var = 1;
    for ( ; auto82873512_var <= auto82873512_ae; auto82873512_var += 1 ) {
        lv_map = UserDataInstance("Maps", auto82873512_var);
        if ((UserDataGetInt("Maps", lv_map, "Hidden", 1) == 0)) {
            if ((((UserDataGetInt("Maps", lv_map, "Map Slot", 1) != 0) && (GameIsOnline() == true)) || ((UserDataGetString("Maps", lv_map, "localFile", 1) != "") && (GameIsOnline() == false)))) {
                lv_x = (lv_offsetX + (220 * ((libCOUI_gv_totalMaps - (8 * (libCOUI_gv_totalMaps / 8))) - 0)));
                lv_y = (lv_offsetY + (140 * (libCOUI_gv_totalMaps / 8)));
                libCOUI_gv_totalMaps += 1;
                libCOUI_gv_mapNames[libCOUI_gv_totalMaps] = UserDataGetText("Maps", lv_map, "Name", 1);
                libCOUI_gv_mapSlots[libCOUI_gv_totalMaps] = UserDataGetInt("Maps", lv_map, "Map Slot", 1);
                libCOUI_gv_mapFiles[libCOUI_gv_totalMaps] = UserDataGetString("Maps", lv_map, "localFile", 1);
                DialogControlAddItem(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, libCOUI_gv_mapNames[libCOUI_gv_totalMaps]);
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 210, 130, c_anchorTopLeft, (lv_x + 50), (lv_y + 145), UserDataGetText("Maps", lv_map, "Description", 1), libCOUI_gv_mapNames[libCOUI_gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1));
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/CommanderButtonTemplate");
                DialogControlSetSize(DialogControlLastCreated(), libCOMI_gv_all, 210, 130);
                DialogControlSetPosition(DialogControlLastCreated(), libCOMI_gv_all, c_anchorTopLeft, (lv_x + 50), (lv_y + 145));
                libCOUI_gv_missionButton[libCOUI_gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(libCOUI_gv_missionButton[libCOUI_gv_totalMaps], UserDataGetText("Maps", lv_map, "Description", 1), libCOMI_gv_all);
                DialogControlHookup(libCOUI_gv_missionButton[libCOUI_gv_totalMaps], c_triggerControlTypeImage, "CheckMark");
                DialogControlSetVisible(DialogControlLastCreated(), libCOMI_gv_all, false);
                DialogControlSetVisible(libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, libCOUI_gv_missionButton[libCOUI_gv_totalMaps], libCOMI_gv_all), libCOMI_gv_all, false);
                libCOUI_gv_missionImage[libCOUI_gv_totalMaps] = libCOUI_gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, libCOUI_gv_missionButton[libCOUI_gv_totalMaps], libCOMI_gv_all);
                DialogControlSetVisible(libCOUI_gv_missionImage[libCOUI_gv_totalMaps], libCOMI_gv_all, false);
                libCOUI_gv_missionImage[libCOUI_gv_totalMaps] = libCOUI_gf_HookUpDialogItemandshowforplayers("BackgroundImage", c_triggerControlTypeImage, libCOUI_gv_missionButton[libCOUI_gv_totalMaps], libCOMI_gv_all);
                libNtve_gf_SetDialogItemImage(libCOUI_gv_missionImage[libCOUI_gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1), libCOMI_gv_all);
                libCOUI_gv_missionText[libCOUI_gv_totalMaps] = libCOUI_gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, libCOUI_gv_missionButton[libCOUI_gv_totalMaps], libCOMI_gv_all);
                libNtve_gf_SetDialogItemText(libCOUI_gv_missionText[libCOUI_gv_totalMaps], libCOUI_gv_mapNames[libCOUI_gv_totalMaps], libCOMI_gv_all);
                libCOUI_gv_mapBorder[libCOUI_gv_totalMaps] = libCOUI_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOUI_gv_missionButton[libCOUI_gv_totalMaps], libCOMI_gv_all);
                DialogControlSetVisible(libCOUI_gv_mapBorder[libCOUI_gv_totalMaps], libCOMI_gv_all, false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, (lv_x + 55), (lv_y + 230), libCOUI_gv_mapNames[libCOUI_gv_totalMaps], ColorWithAlpha(0,0,0,0), false, 2.0);
                libCOUI_gv_missionText[libCOUI_gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", libCOMI_gv_all);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12", libCOMI_gv_all);
            }

        }

    }
    DialogControlSelectItem(libCOUI_gv_selectMissionPulldownDialog, libCOMI_gv_all, 1);
    DialogCreate(1200, 100, c_anchorBottomLeft, 120, 20, true);
    libCOUI_gv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(libCOUI_gv_dialog, 200, 80, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_COUI_432C0E7A"), StringExternal("Param/Value/lib_COUI_74BAE758"), "");
    libCOUI_gv_missionsButton = DialogControlLastCreated();
    DialogControlSetVisible(libCOUI_gv_missionsButton, libCOMI_gv_all, true);
    DialogSetVisible(libCOUI_gv_dialog, libCOMI_gv_all, true);
    autoC63F5F27_g = PlayerGroupActive();
    autoC63F5F27_var = -1;
    while (true) {
        autoC63F5F27_var = PlayerGroupNextPlayer(autoC63F5F27_g, autoC63F5F27_var);
        if (autoC63F5F27_var < 0) { break; }
        libCOUI_gf_UpdateMapSelection(autoC63F5F27_var, 1);
    }
    TriggerEnable(libCOUI_gt_StartMission, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CreateMissionsDialog_Init () {
    libCOUI_gt_CreateMissionsDialog = TriggerCreate("libCOUI_gt_CreateMissionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_FactionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_new;
    string lv_old;
    int lv_i;

    // Automatic Variable Declarations
    int auto9D7C2B82_ae;
    const int auto9D7C2B82_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9D7C2B82_ae = libCOUI_gv_totalFactions;
    lv_i = 1;
    for ( ; ( (auto9D7C2B82_ai >= 0 && lv_i <= auto9D7C2B82_ae) || (auto9D7C2B82_ai < 0 && lv_i >= auto9D7C2B82_ae) ) ; lv_i += auto9D7C2B82_ai ) {
        if ((EventDialogControl() == libCOUI_gv_raceButton[lv_i])) {
            lv_new = libCOUI_gv_raceFaction[lv_i];
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_FactionButtonClicked_Init () {
    libCOUI_gt_FactionButtonClicked = TriggerCreate("libCOUI_gt_FactionButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_FactionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_CommanderSelected
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_CS_CommanderSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto27BF29C6_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto27BF29C6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_commIndex = 1;
    for ( ; ( (auto27BF29C6_ai >= 0 && lv_commIndex <= auto27BF29C6_ae) || (auto27BF29C6_ai < 0 && lv_commIndex >= auto27BF29C6_ae) ) ; lv_commIndex += auto27BF29C6_ai ) {
        if (true) {
            if ((libCOUT_gf_ActiveCommanderForPlayer3(EventPlayer()) != libCOUI_gv_aF_CS_LastActiveCommander[EventPlayer()])) {
                CutsceneSetFilter(libCOUI_gv_aF_CS_CommanderCutscenes[EventPlayer()], (libCOUT_gf_ActiveCommanderForPlayer3(EventPlayer())));
                libCOUI_gv_aF_CS_LastActiveCommander[EventPlayer()] = libCOUT_gf_ActiveCommanderForPlayer3(EventPlayer());
                CutsceneGoToBookmark(libCOUI_gv_aF_CS_CommanderCutscenes[EventPlayer()], "CharacterBirthStart");
                if ((libCOUT_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Horner")) {
                    DialogSetVisible(libCOUI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(EventPlayer()), true);
                    CutscenePause(libCOUI_gv_aF_CS_CommanderCutscenes[EventPlayer()]);
                }
                else {
                    DialogSetVisible(libCOUI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(EventPlayer()), false);
                    CutscenePlay(libCOUI_gv_aF_CS_CommanderCutscenes[EventPlayer()]);
                }
                return true;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_CS_CommanderSelected_Init () {
    libCOUI_gt_AF_CS_CommanderSelected = TriggerCreate("libCOUI_gt_AF_CS_CommanderSelected_Func");
    TriggerAddEventDialogControl(libCOUI_gt_AF_CS_CommanderSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_NewsControlButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_CS_NewsControlButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_aF_CS_NewsControlButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gv_aF_CS_NewsControlButtonClicked = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_CS_NewsControlButtonClicked_Init () {
    libCOUI_gt_AF_CS_NewsControlButtonClicked = TriggerCreate("libCOUI_gt_AF_CS_NewsControlButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_AF_CS_NewsControlButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommandsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_UT_CommandsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_uT_CommandsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOUT_gt_UT_Info, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_UT_CommandsButtonClicked_Init () {
    libCOUI_gt_UT_CommandsButtonClicked = TriggerCreate("libCOUI_gt_UT_CommandsButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_UT_CommandsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PlayerLeftInLobby
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_PlayerLeftInLobby_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_gameHasBegun == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_PlayerLeftInLobby_Init () {
    libCOUI_gt_CU_PlayerLeftInLobby = TriggerCreate("libCOUI_gt_CU_PlayerLeftInLobby_Func");
    TriggerAddEventPlayerLeft(libCOUI_gt_CU_PlayerLeftInLobby, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CommanderButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;
    int lv_oldPlayer;

    // Automatic Variable Declarations
    const int auto85E42345_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int auto85E42345_ai = 1;
    playergroup auto27A03AC1_g;
    int auto27A03AC1_var;
    const int auto5DB5803C_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto5DB5803C_ai = 1;
    const int auto4EF2D08A_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto4EF2D08A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto85E42345_ai >= 0 && lv_commIndex <= auto85E42345_ae) || (auto85E42345_ai < 0 && lv_commIndex >= auto85E42345_ae) ) ; lv_commIndex += auto85E42345_ai ) {
        if ((EventDialogControl() == libCOUI_gv_commanderOption[lv_commIndex].lv_button)) {
            auto27A03AC1_g = libCOMI_gv_vU_SlotsPlayers;
            auto27A03AC1_var = -1;
            while (true) {
                auto27A03AC1_var = PlayerGroupNextPlayer(auto27A03AC1_g, auto27A03AC1_var);
                if (auto27A03AC1_var < 0) { break; }
                if ((libCOUI_gv_cU_CommanderList[lv_commIndex] == libCOOC_gv_cCX_PlayerCommander[auto27A03AC1_var])) {
                    lv_oldPlayer = auto27A03AC1_var;
                    break;
                }

            }
            if ((lv_oldPlayer != 0)) {
                if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                    return true;
                }
                else {
                    libCOUI_gv_chosenTeam[lv_oldPlayer] = libCOUI_gv_chosenTeam[EventPlayer()];
                    libCOUI_gf_CU_CommanderSelect(lv_oldPlayer, libCOOC_gv_cCX_PlayerCommander[EventPlayer()]);
                }
            }

            libCOUI_gv_chosenTeam[EventPlayer()] = 1;
            libCOOC_gv_cCX_PlayerCommander[EventPlayer()] = libCOUI_gv_cU_CommanderList[lv_commIndex];
            libCOUI_gf_UpdateCommandersList();
            libCOUI_gf_CU_CommanderSelect(EventPlayer(), libCOOC_gv_cCX_PlayerCommander[EventPlayer()]);
        }

    }
    if (((libCOOC_gv_cCX_PlayerCommander[EventPlayer()] != null) || (libCOUI_gv_chosenTeam[EventPlayer()] != 1))) {
        if ((EventDialogControl() == libCOUI_gv_playRandomButton)) {
            libCOUI_gv_chosenTeam[EventPlayer()] = 1;
            libCOUI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOUI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto5DB5803C_ai >= 0 && lv_commIndex <= auto5DB5803C_ae) || (auto5DB5803C_ai < 0 && lv_commIndex >= auto5DB5803C_ae) ) ; lv_commIndex += auto5DB5803C_ai ) {
            if ((EventDialogControl() == libCOUI_gv_randomOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOUI_gv_randomPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOUI_gv_chosenTeam[lv_oldPlayer] = libCOUI_gv_chosenTeam[EventPlayer()];
                        libCOUI_gf_CU_CommanderSelect(lv_oldPlayer, libCOOC_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOUI_gv_chosenTeam[EventPlayer()] = 1;
                libCOUI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOUI_gf_UpdateCommandersList();
            }

        }
    }

    if ((libCOUI_gv_chosenTeam[EventPlayer()] != 2)) {
        if ((EventDialogControl() == libCOUI_gv_playAmonButton)) {
            libCOUI_gv_chosenTeam[EventPlayer()] = 2;
            libCOUI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOUI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto4EF2D08A_ai >= 0 && lv_commIndex <= auto4EF2D08A_ae) || (auto4EF2D08A_ai < 0 && lv_commIndex >= auto4EF2D08A_ae) ) ; lv_commIndex += auto4EF2D08A_ai ) {
            if ((EventDialogControl() == libCOUI_gv_amonOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOUI_gv_amonPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOUI_gv_chosenTeam[lv_oldPlayer] = libCOUI_gv_chosenTeam[EventPlayer()];
                        libCOUI_gf_CU_CommanderSelect(lv_oldPlayer, libCOOC_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOUI_gv_chosenTeam[EventPlayer()] = 2;
                libCOUI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOUI_gf_UpdateCommandersList();
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CommanderButtonClicked_Init () {
    libCOUI_gt_CommanderButtonClicked = TriggerCreate("libCOUI_gt_CommanderButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CommanderButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PrestigeAlly
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_UT_PrestigeAlly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_UT_PrestigeAlly_Init () {
    libCOUI_gt_UT_PrestigeAlly = TriggerCreate("libCOUI_gt_UT_PrestigeAlly_Func");
    TriggerAddEventChatMessage(libCOUI_gt_UT_PrestigeAlly, c_playerAny, "-pnext", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_UT_CommanderClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int autoCA8BE8D6_ae = libCOUI_gv_cUC_COMMSELECTMAX;
    const int autoCA8BE8D6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (autoCA8BE8D6_ai >= 0 && lv_commIndex <= autoCA8BE8D6_ae) || (autoCA8BE8D6_ai < 0 && lv_commIndex >= autoCA8BE8D6_ae) ) ; lv_commIndex += autoCA8BE8D6_ai ) {
        if (true) {
            if ((libCOOC_gv_cCX_PlayerCommander[libCOOC_gf_CC_PlayerAlly(EventPlayer())] == libCOUI_gv_cU_CommanderList[lv_commIndex])) {
                libCOUI_gv_uT_PrestigeIndex = 0;
                break;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_UT_CommanderClicked_Init () {
    libCOUI_gt_UT_CommanderClicked = TriggerCreate("libCOUI_gt_UT_CommanderClicked_Func");
    TriggerEnable(libCOUI_gt_UT_CommanderClicked, false);
    TriggerAddEventDialogControl(libCOUI_gt_UT_CommanderClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelUpClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommanderLevelUpClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOOC_gf_CC_CommanderLevel(EventPlayer(), libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current < 15))) {
            return false;
        }

        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current+1), libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOUI_gf_UpdatePlayerCommander(EventPlayer());
    libCOUI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommanderLevelUpClicked_Init () {
    libCOUI_gt_CU_CommanderLevelUpClicked = TriggerCreate("libCOUI_gt_CU_CommanderLevelUpClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CU_CommanderLevelUpClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelDownClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommanderLevelDownClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOOC_gf_CC_CommanderLevel(EventPlayer(), libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current > 1))) {
            return false;
        }

        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current-1), libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOUI_gf_UpdatePlayerCommander(EventPlayer());
    libCOUI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommanderLevelDownClicked_Init () {
    libCOUI_gt_CU_CommanderLevelDownClicked = TriggerCreate("libCOUI_gt_CU_CommanderLevelDownClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CU_CommanderLevelDownClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMutatorChallengeSelected
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommanderMutatorChallengeSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMutator;
    int lv_challengeMutatorIndex;
    string lv_selectedChallenge;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto77BCA890_ai;
    int auto77BCA890_ae;
    int auto2F8A2574_ae;
    const int auto2F8A2574_ai = 1;
    int auto3C17455A_ai;
    int auto3C17455A_ae;
    playergroup autoD6E15363_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderMutatorChallengePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(libCOUI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer()) <= 1)) {
        auto3C17455A_ai = 1;
        auto3C17455A_ae = UserDataInstanceCount("Mutators")+1;
        while (auto3C17455A_ai < auto3C17455A_ae) {
            lv_indexMutator = UserDataInstance("Mutators", auto3C17455A_ai);
            auto3C17455A_ai = auto3C17455A_ai+1;
            libCOMU_gf_EnableDisableMutator(false, lv_indexMutator);
        }
    }
    else {
        auto77BCA890_ai = 1;
        auto77BCA890_ae = UserDataInstanceCount("Mutators")+1;
        while (auto77BCA890_ai < auto77BCA890_ae) {
            lv_indexMutator = UserDataInstance("Mutators", auto77BCA890_ai);
            auto77BCA890_ai = auto77BCA890_ai+1;
            libCOMU_gf_EnableDisableMutator(false, lv_indexMutator);
        }
        lv_selectedChallenge = libCOUI_gv_cU_CommanderMutatorChallengeList[(DialogControlGetSelectedItem(libCOUI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer())-1)];
        auto2F8A2574_ae = UserDataFieldValueCount("MutatorChallenges", "Mutators");
        lv_challengeMutatorIndex = 1;
        for ( ; ( (auto2F8A2574_ai >= 0 && lv_challengeMutatorIndex <= auto2F8A2574_ae) || (auto2F8A2574_ai < 0 && lv_challengeMutatorIndex >= auto2F8A2574_ae) ) ; lv_challengeMutatorIndex += auto2F8A2574_ai ) {
            if ((UserDataGetUserInstance("MutatorChallenges", lv_selectedChallenge, "Mutators", lv_challengeMutatorIndex) != null)) {
                libCOMU_gf_EnableDisableMutator(true, UserDataGetUserInstance("MutatorChallenges", lv_selectedChallenge, "Mutators", lv_challengeMutatorIndex));
            }
            else {
                break;
            }
        }
    }
    autoD6E15363_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD6E15363_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommanderMutatorChallengeSelected_Init () {
    libCOUI_gt_CU_CommanderMutatorChallengeSelected = TriggerCreate("libCOUI_gt_CU_CommanderMutatorChallengeSelected_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CU_CommanderMutatorChallengeSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_AllyPrestigeChanged
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_CS_AllyPrestigeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_aF_CS_AllyPrestigeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_CS_AllyPrestigeChanged_Init () {
    libCOUI_gt_AF_CS_AllyPrestigeChanged = TriggerCreate("libCOUI_gt_AF_CS_AllyPrestigeChanged_Func");
    TriggerAddEventDialogControl(libCOUI_gt_AF_CS_AllyPrestigeChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllyMasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_UT_AllyMasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerStatus(2) != c_playerStatusActive))) {
            return false;
        }

        if (!((EventDialogControl() == libCOUI_gv_uT_AllyMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libCOUT_gv_uT_MasteryDialog, EventPlayer()) == true)) {
        TriggerExecute(libCOUT_gt_UT_MasteryButtonClicked, false, false);
    }
    else {
        TriggerEnable(libCOUT_gt_UT_CommanderSwitched, true);
        libCOUT_gv_uT_MasteryTargetPlayer = 2;
        libCOUT_gf_UT_MasteryChoiceCreateUpdate(libCOUT_gv_uT_MasteryTargetPlayer);
        DialogSetVisible(libCOUT_gv_uT_MasteryDialog, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_UT_AllyMasteryButtonClicked_Init () {
    libCOUI_gt_UT_AllyMasteryButtonClicked = TriggerCreate("libCOUI_gt_UT_AllyMasteryButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_UT_AllyMasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommanderMasteryClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_MasteryDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommanderMasteryClicked_Init () {
    libCOUI_gt_CU_CommanderMasteryClicked = TriggerCreate("libCOUI_gt_CU_CommanderMasteryClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CU_CommanderMasteryClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryCheckboxToggle
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommanderMasteryCheckboxToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto9A234996_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderMasteryCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A234996_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto9A234996_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommanderMasteryCheckboxToggle_Init () {
    libCOUI_gt_CU_CommanderMasteryCheckboxToggle = TriggerCreate("libCOUI_gt_CU_CommanderMasteryCheckboxToggle_Func");
    TriggerAddEventDialogControl(libCOUI_gt_CU_CommanderMasteryCheckboxToggle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReadyButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_ReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexPerk;
    int[libCOUI_gv_cUC_COMMUPGRADETIERCOUNT + 1] lv_perkCount;
    int lv_ally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ally = libCOOC_gf_CC_PlayerAlly(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_CommanderReadyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_CommanderPlayerReadySet(EventPlayer(), !(libCOUI_gv_cU_CommanderSelect_PlayerReady[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_ReadyButtonClicked_Init () {
    libCOUI_gt_ReadyButtonClicked = TriggerCreate("libCOUI_gt_ReadyButtonClicked_Func");
    TriggerAddEventDialogControl(libCOUI_gt_ReadyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommandeAllyLeft
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_CommandeAllyLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libCOUI_gv_cU_CommanderReadyLabelAlly, StringExternal("Param/Value/lib_COUI_4208CDFE"), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_CommandeAllyLeft_Init () {
    libCOUI_gt_CU_CommandeAllyLeft = TriggerCreate("libCOUI_gt_CU_CommandeAllyLeft_Func");
    TriggerAddEventPlayerLeft(libCOUI_gt_CU_CommandeAllyLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackDown
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryShiftTrackDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryShiftTrackDown_Init () {
    libCOUI_gt_CU_MasteryShiftTrackDown = TriggerCreate("libCOUI_gt_CU_MasteryShiftTrackDown_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackDown, false);
    TriggerAddEventKeyPressed(libCOUI_gt_CU_MasteryShiftTrackDown, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackUp
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryShiftTrackUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryShiftTrackUp_Init () {
    libCOUI_gt_CU_MasteryShiftTrackUp = TriggerCreate("libCOUI_gt_CU_MasteryShiftTrackUp_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryShiftTrackUp, false);
    TriggerAddEventKeyPressed(libCOUI_gt_CU_MasteryShiftTrackUp, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelUpPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryLevelUpPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_MasteryLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 10;
        if ((libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] > libCOOC_gv_cCC_MASTERY_MAX_LEVEL)) {
            libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] = libCOOC_gv_cCC_MASTERY_MAX_LEVEL;
        }

    }
    else {
        libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 1;
    }
    libCOUI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOUI_gf_CU_MasteryUpdate(EventPlayer());
    libCOUI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryLevelUpPressed_Init () {
    libCOUI_gt_CU_MasteryLevelUpPressed = TriggerCreate("libCOUI_gt_CU_MasteryLevelUpPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryLevelUpPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryLevelUpPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelDownPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryLevelDownPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_MasteryLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 10;
        if ((libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] < 0)) {
            libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] = 0;
        }

    }
    else {
        libCOUI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 1;
    }
    libCOUI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOUI_gf_CU_MasteryUpdate(EventPlayer());
    libCOUI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryLevelDownPressed_Init () {
    libCOUI_gt_CU_MasteryLevelDownPressed = TriggerCreate("libCOUI_gt_CU_MasteryLevelDownPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryLevelDownPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryLevelDownPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemPlusPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryItemPlusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoADACBB9D_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoADACBB9D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (autoADACBB9D_ai >= 0 && lv_itemIndex <= autoADACBB9D_ae) || (autoADACBB9D_ai < 0 && lv_itemIndex >= autoADACBB9D_ae) ) ; lv_itemIndex += autoADACBB9D_ai ) {
        if ((EventDialogControl() == libCOUI_gv_cU_MasteryPlusButtons[lv_itemIndex])) {
            if ((libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += MinI(libCOUI_gv_cU_MasteryCategoryPointsLeft[libCOOC_gf_CC_PlayerMasteryCategory(libCOUI_gv_cU_MasteryUpgrades[lv_itemIndex][EventPlayer()])][EventPlayer()], 10);
                if ((libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] > libCOOC_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL)) {
                    libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = libCOOC_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL;
                }

            }
            else {
                libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += 1;
            }
            libCOUI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOUI_gf_CU_MasteryUpdate(EventPlayer());
    libCOUI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryItemPlusPressed_Init () {
    libCOUI_gt_CU_MasteryItemPlusPressed = TriggerCreate("libCOUI_gt_CU_MasteryItemPlusPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryItemPlusPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryItemPlusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemMinusPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryItemMinusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoD181F096_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoD181F096_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (autoD181F096_ai >= 0 && lv_itemIndex <= autoD181F096_ae) || (autoD181F096_ai < 0 && lv_itemIndex >= autoD181F096_ae) ) ; lv_itemIndex += autoD181F096_ai ) {
        if ((EventDialogControl() == libCOUI_gv_cU_MasteryMinusButtons[lv_itemIndex])) {
            if ((libCOUI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 10;
                if ((libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] < 0)) {
                    libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
                }

            }
            else {
                libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 1;
            }
            libCOUI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOUI_gf_CU_MasteryUpdate(EventPlayer());
    libCOUI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryItemMinusPressed_Init () {
    libCOUI_gt_CU_MasteryItemMinusPressed = TriggerCreate("libCOUI_gt_CU_MasteryItemMinusPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryItemMinusPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryItemMinusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryResetPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryResetPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto38EA843F_ae = libCOOC_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto38EA843F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_MasteryResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (auto38EA843F_ai >= 0 && lv_itemIndex <= auto38EA843F_ae) || (auto38EA843F_ai < 0 && lv_itemIndex >= auto38EA843F_ae) ) ; lv_itemIndex += auto38EA843F_ai ) {
        libCOUI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
    }
    libCOUI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOUI_gf_CU_MasteryUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryResetPressed_Init () {
    libCOUI_gt_CU_MasteryResetPressed = TriggerCreate("libCOUI_gt_CU_MasteryResetPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryResetPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryResetPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryAcceptPressed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MasteryAcceptPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_MasteryAcceptButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_MasteryUpdateData(EventPlayer());
    libCOUI_gf_CU_MasteryClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MasteryAcceptPressed_Init () {
    libCOUI_gt_CU_MasteryAcceptPressed = TriggerCreate("libCOUI_gt_CU_MasteryAcceptPressed_Func");
    TriggerEnable(libCOUI_gt_CU_MasteryAcceptPressed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_MasteryAcceptPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PrestigeButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_PrestigeButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto035DA099_ae = libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto035DA099_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto035DA099_ai >= 0 && lv_index <= auto035DA099_ae) || (auto035DA099_ai < 0 && lv_index >= auto035DA099_ae) ) ; lv_index += auto035DA099_ai ) {
        if ((libCOUI_gv_cU_CommanderPrestigesButtons[lv_index].lv_button == EventDialogControl())) {
            libCOUI_gf_CU_PrestigeSelect(EventPlayer(), lv_index);
            DataTableSetInt(true, libCOOC_gf_CC_PrestigeCommanderTableKey(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), EventPlayer()), lv_index);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_PrestigeButtonClicked_Init () {
    libCOUI_gt_CU_PrestigeButtonClicked = TriggerCreate("libCOUI_gt_CU_PrestigeButtonClicked_Func");
    TriggerEnable(libCOUI_gt_CU_PrestigeButtonClicked, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_PrestigeButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameModePulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_GameModePulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_vU_GameModePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_SetGameMode(DialogControlGetSelectedItem(libCOUI_gv_vU_GameModePulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_GameModePulldownUsed_Init () {
    libCOUI_gt_GameModePulldownUsed = TriggerCreate("libCOUI_gt_GameModePulldownUsed_Func");
    TriggerEnable(libCOUI_gt_GameModePulldownUsed, false);
    TriggerAddEventDialogControl(libCOUI_gt_GameModePulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DifficultyPulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_DifficultyPulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_vU_CommanderDifficultyPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_SetDifficulty(DialogControlGetSelectedItem(libCOUI_gv_vU_CommanderDifficultyPulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_DifficultyPulldownUsed_Init () {
    libCOUI_gt_DifficultyPulldownUsed = TriggerCreate("libCOUI_gt_DifficultyPulldownUsed_Func");
    TriggerEnable(libCOUI_gt_DifficultyPulldownUsed, false);
    TriggerAddEventDialogControl(libCOUI_gt_DifficultyPulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_EnemyFactionChanged
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_VU_EnemyFactionChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_newValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newValue = libCOUI_gv_vU_EnemyFactionsList[DialogControlGetSelectedItem(libCOUI_gv_vU_CommanderEnemyFactionPulldown, EventPlayer())];

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_vU_CommanderEnemyFactionPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_newValue == libCOMI_gv_selectedEnemyFaction)) {
        return true;
    }

    libCOUI_gf_VU_SetEnemyFaction(lv_newValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_VU_EnemyFactionChanged_Init () {
    libCOUI_gt_VU_EnemyFactionChanged = TriggerCreate("libCOUI_gt_VU_EnemyFactionChanged_Func");
    TriggerAddEventDialogControl(libCOUI_gt_VU_EnemyFactionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewUpdate
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MinimapAllyViewUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingSetPosition(libCOUI_gv_cU_MinimapAllyViewPing[EventPlayer()], CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MinimapAllyViewUpdate_Init () {
    libCOUI_gt_CU_MinimapAllyViewUpdate = TriggerCreate("libCOUI_gt_CU_MinimapAllyViewUpdate_Func");
    TriggerEnable(libCOUI_gt_CU_MinimapAllyViewUpdate, false);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 0, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 11, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 12, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 13, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 14, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCOUI_gt_CU_MinimapAllyViewUpdate, 15, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyPlayerLeaves
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MinimapAllyPlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libCOUI_gv_cU_MinimapAllyViewPing[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MinimapAllyPlayerLeaves_Init () {
    libCOUI_gt_CU_MinimapAllyPlayerLeaves = TriggerCreate("libCOUI_gt_CU_MinimapAllyPlayerLeaves_Func");
    TriggerEnable(libCOUI_gt_CU_MinimapAllyPlayerLeaves, false);
    TriggerAddEventPlayerLeft(libCOUI_gt_CU_MinimapAllyPlayerLeaves, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewCamera
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_MinimapAllyViewCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true)) {
        lv_playerGroup = PlayerGroupCopy(libCOMI_gf_GetAlliedCommandersPlayers());
    }
    else {
        lv_playerGroup = PlayerGroupCopy(libCOMI_gv_vU_EnemyPlayers);
    }
    PlayerGroupRemove(lv_playerGroup, EventPlayer());
    if ((EventKeyShift() == true) && (PlayerGroupCount(lv_playerGroup) > 1)) {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 2);
    }
    else {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 1);
    }
    CameraPan(EventPlayer(), CameraGetTarget(lv_allyPlayer), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_MinimapAllyViewCamera_Init () {
    libCOUI_gt_CU_MinimapAllyViewCamera = TriggerCreate("libCOUI_gt_CU_MinimapAllyViewCamera_Func");
    TriggerEnable(libCOUI_gt_CU_MinimapAllyViewCamera, false);
    TriggerAddEventKeyPressed(libCOUI_gt_CU_MinimapAllyViewCamera, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOUI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_COUI_B4347E4E"), null, null, null);
    TriggerEnable(libCOUI_gt_CU_ArmyButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_FlashArmyButtonHelpTip_Init () {
    libCOUI_gt_CU_FlashArmyButtonHelpTip = TriggerCreate("libCOUI_gt_CU_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libCOUI_gv_cU_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOUI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_COUI_F2711687"), null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_ArmyButtonUsed_Init () {
    libCOUI_gt_CU_ArmyButtonUsed = TriggerCreate("libCOUI_gt_CU_ArmyButtonUsed_Func");
    TriggerEnable(libCOUI_gt_CU_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    if ((true == true)) {
        if ((libHots_gf_DifficultyValueInt2(1, 0, 0) == 1)) {
            Wait(1.0, c_timeGame);
            while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
                Wait(0.5, c_timeGame);
            }
            Wait(0.5, c_timeGame);
            libCOUI_gf_DisplayArmyButton(false);
            libCOUI_gv_cU_ArmyButtonTipReady = true;
        }
        else {
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CS_ArmyButtonMissionInit_Init () {
    libCOUI_gt_CS_ArmyButtonMissionInit = TriggerCreate("libCOUI_gt_CS_ArmyButtonMissionInit_Func");
    TriggerEnable(libCOUI_gt_CS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libCOUI_gv_cU_BB_Boss) == false) || (libCOUI_gv_cU_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        libCOUI_gf_RefreshSingularBossBarVoidCampaign();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_BB_BossHPChanged_Init () {
    libCOUI_gt_CU_BB_BossHPChanged = TriggerCreate("libCOUI_gt_CU_BB_BossHPChanged_Func");
    TriggerEnable(libCOUI_gt_CU_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_BB_BossHPChanged, UnitRefFromVariable("libCOUI_gv_cU_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_BB_BossHPChanged, UnitRefFromVariable("libCOUI_gv_cU_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto565CAAC8_g;
    const int auto2796D1C4_ae = libCOUI_gv_cUC_HeroMaxCount;
    int auto2796D1C4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto565CAAC8_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto565CAAC8_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto2796D1C4_var = 1;
        for ( ; auto2796D1C4_var <= auto2796D1C4_ae; auto2796D1C4_var += 1 ) {
            if ((libCOUI_gv_cU_HeroExists[lv_indexPlayer][auto2796D1C4_var] == true)) {
                libCOUI_gf_CU_UpdateHeroPanel(auto2796D1C4_var, lv_indexPlayer);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HeroPanelUpdate_Init () {
    libCOUI_gt_CU_HeroPanelUpdate = TriggerCreate("libCOUI_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(libCOUI_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libCOUI_gt_CU_HeroPanelUpdate, libCOUI_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup auto59CE851B_g;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto59CE851B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto59CE851B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCOUI_gv_cU_HeroUnit[1][lv_indexPlayer])) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if ((EventUnit() == libCOUI_gv_cU_HeroUnit[2][lv_indexPlayer])) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(libCOUI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libCOUI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.25)) {
            libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(libCOUI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.5)) {
                libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(libCOUI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 1.0)) {
                libCOUI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(libCOUI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HeroUnitDamaged_Init () {
    libCOUI_gt_CU_HeroUnitDamaged = TriggerCreate("libCOUI_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(libCOUI_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(libCOUI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOUI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOUI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOUI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    playergroup auto05B87641_g;
    unit auto948A9A7A_val;
    int autoB2BDD4C2_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto05B87641_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto05B87641_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto948A9A7A_val = EventUnit();
        if (auto948A9A7A_val == libCOUI_gv_cU_HeroUnit[1][lv_indexPlayer]) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if (auto948A9A7A_val == libCOUI_gv_cU_HeroUnit[2][lv_indexPlayer]) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
        else {
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoB2BDD4C2_val = EventUnitProperty();
    if (autoB2BDD4C2_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libCOUI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOUI_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOUI_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoB2BDD4C2_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libCOUI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOUI_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOUI_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoB2BDD4C2_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libCOUI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOUI_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libCOUI_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libCOUI_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HeroUnitVitalChange_Init () {
    libCOUI_gt_CU_HeroUnitVitalChange = TriggerCreate("libCOUI_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(libCOUI_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[1][2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOUI_gv_cU_HeroUnit[2][2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoF3A5F50D_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOUI_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoF3A5F50D_val = EventDialogControlEventType();
    if (autoF3A5F50D_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOUI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (autoF3A5F50D_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOUI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HeroMouseHoverText_Init () {
    libCOUI_gt_CU_HeroMouseHoverText = TriggerCreate("libCOUI_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(libCOUI_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libCOUI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchLifeCheck
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchLifeCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(libCOUI_gv_cU_HealthWatchUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_old = libCOUI_gv_cU_HealthWatchLastHP;
    libCOUI_gv_cU_HealthWatchLastHP = (UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent));
    if ((libCOUI_gv_cU_HealthWatchLastHP < lv_old) && (libCOUI_gv_pUC_HealthWatchThreshold > ((UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) && (libCOUI_gv_cU_HealthWatchFlashing == false)) {
        TriggerExecute(libCOUI_gt_CU_HealthWatchFlash, true, false);
    }

    if ((libCOUI_gv_pUC_HealthWatchThreshold <= ((UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent))))) {
        libCOUI_gf_CM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchLifeCheck_Init () {
    libCOUI_gt_CU_HealthWatchLifeCheck = TriggerCreate("libCOUI_gt_CU_HealthWatchLifeCheck_Func");
    TriggerEnable(libCOUI_gt_CU_HealthWatchLifeCheck, false);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("libCOUI_gv_cU_HealthWatchUnit"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOUI_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("libCOUI_gv_cU_HealthWatchUnit"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CM_StopHeroLowHPSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchUnitDies_Init () {
    libCOUI_gt_CU_HealthWatchUnitDies = TriggerCreate("libCOUI_gt_CU_HealthWatchUnitDies_Func");
    TriggerEnable(libCOUI_gt_CU_HealthWatchUnitDies, false);
    TriggerAddEventUnitDied(libCOUI_gt_CU_HealthWatchUnitDies, UnitRefFromVariable("libCOUI_gv_cU_HealthWatchUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchFlash
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto374950CA_n = 3;
    int auto374950CA_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(libCOUI_gv_cU_HealthWatchUnit) == false) || (libCOUI_gv_cU_HealthWatchFlashing == true))) {
        return true;
    }

    libCOUI_gv_cU_HealthWatchFlashing = true;
    TriggerExecute(libCOUI_gt_CU_HealthWatchStartSound, true, false);
    for (auto374950CA_i = 1; auto374950CA_i <= auto374950CA_n; auto374950CA_i += 1) {
        if (((libCOMI_gf_GameIsOver() == true) || ((libCOUI_gv_pUC_HealthWatchThreshold * 100.0) <= ((UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOUI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) || (UnitIsAlive(libCOUI_gv_cU_HealthWatchUnit) == false))) {
            break;
        }

        libCOUI_gf_CU_HealthWatchCreate();
        DialogControlFadeTransparency(libCOUI_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(libCOUI_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(libCOUI_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.0, 100.0);
    libCOUI_gv_cU_HealthWatchFlashing = false;
    Wait(2.0, c_timeReal);
    if ((libCOUI_gv_cU_HealthWatchFlashing == false)) {
        libCOUI_gf_CM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchFlash_Init () {
    libCOUI_gt_CU_HealthWatchFlash = TriggerCreate("libCOUI_gt_CU_HealthWatchFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchStartSound
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchStartSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin);
    if ((libCOUI_gv_cU_HealthWatchSoundStart == null)) {
        SoundPlay(SoundLink("TUIWarning", 0), PlayerGroupAll(), 100.0, 0.0);
        libCOUI_gv_cU_HealthWatchSoundStart = SoundLastPlayed();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchStartSound_Init () {
    libCOUI_gt_CU_HealthWatchStartSound = TriggerCreate("libCOUI_gt_CU_HealthWatchStartSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchHeartLoop
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchHeartLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        SoundPlay(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libCOUI_gv_cU_HealthWatchSoundHeartbeat = SoundLastPlayed();
        Wait(SoundLengthSync(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1)), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchHeartLoop_Init () {
    libCOUI_gt_CU_HealthWatchHeartLoop = TriggerCreate("libCOUI_gt_CU_HealthWatchHeartLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchBreathLoop
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_HealthWatchBreathLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        SoundPlay(SoundLink("UI_LowHealthWarning_BreathLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libCOUI_gv_cU_HealthWatchSoundBreath = SoundLastPlayed();
        Wait(SoundLengthSync(SoundLink("UI_LowHealthWarning_BreathLoop", -1)), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_HealthWatchBreathLoop_Init () {
    libCOUI_gt_CU_HealthWatchBreathLoop = TriggerCreate("libCOUI_gt_CU_HealthWatchBreathLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libCOUI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "Highlight");
    Wait(libCOUI_gv_cU_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(libCOUI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_TimerWindowFlash_Init () {
    libCOUI_gt_CU_TimerWindowFlash = TriggerCreate("libCOUI_gt_CU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowMoveForBossBar
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_TimerWindowMoveForBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libCOUI_gv_cU_BB_Panel != c_invalidDialogControlId) && ((DialogControlIsVisible(libCOUI_gv_cU_BB_Panel, 1) == true) || (DialogControlIsVisible(libCOUI_gv_cU_BB_Panel, 2) == true))) {
            TimerWindowSetAnchor(libCOUI_gv_cU_TimerWindow, c_anchorTopRight, 0, 175);
        }
        else {
            TimerWindowSetAnchor(libCOUI_gv_cU_TimerWindow, c_anchorTopRight, 0, 50);
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_TimerWindowMoveForBossBar_Init () {
    libCOUI_gt_CU_TimerWindowMoveForBossBar = TriggerCreate("libCOUI_gt_CU_TimerWindowMoveForBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowSetTimer(TimerWindowLastCreated(), TimerLastStarted());
    if ((TimerGetRemaining(libCOUI_gv_cU_TimerWindowTimer) <= libCOUI_gv_cU_TimerWindowDangerThreshold) && (libCOUI_gv_cU_TimerWindowInDanger == false)) {
        libCOUI_gv_cU_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(libCOUI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "Danger");
    }
    else if ((TimerGetRemaining(libCOUI_gv_cU_TimerWindowTimer) > libCOUI_gv_cU_TimerWindowDangerThreshold) && (libCOUI_gv_cU_TimerWindowInDanger == true)) {
        libCOUI_gv_cU_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(libCOUI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_TimerWindowThresholdCrossed_Init () {
    libCOUI_gt_CU_TimerWindowThresholdCrossed = TriggerCreate("libCOUI_gt_CU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(libCOUI_gt_CU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(libCOUI_gt_CU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_WaveTimerWindowUpdateTime
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_WaveTimerWindowUpdateTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    const int auto22654A53_ae = libCOUI_gv_cUC_WAVETIMERWINDOWMAX;
    const int auto22654A53_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_windowIndex = 1;
        for ( ; ( (auto22654A53_ai >= 0 && lv_windowIndex <= auto22654A53_ae) || (auto22654A53_ai < 0 && lv_windowIndex >= auto22654A53_ae) ) ; lv_windowIndex += auto22654A53_ai ) {
            libNtve_gf_SetDialogItemText(libCOUI_gv_cU_WaveTimerWindowTime[lv_windowIndex], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libCOUI_gv_cU_WaveTimerWindowTimers[lv_windowIndex]))), PlayerGroupAll());
        }
        Wait(0.05, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_WaveTimerWindowUpdateTime_Init () {
    libCOUI_gt_CU_WaveTimerWindowUpdateTime = TriggerCreate("libCOUI_gt_CU_WaveTimerWindowUpdateTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ScoreClosed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_ScoreClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOUI_gv_cU_ScoreContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetInt(false, TriggerEventParamName(libCOUI_gv_cUC_ScoreEventClosed, libCOUI_gv_cUC_ScoreParameterPlayer), EventPlayer());
    TriggerSendEvent(libCOUI_gv_cUC_ScoreEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_ScoreClosed_Init () {
    libCOUI_gt_CU_ScoreClosed = TriggerCreate("libCOUI_gt_CU_ScoreClosed_Func");
    TriggerEnable(libCOUI_gt_CU_ScoreClosed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_ScoreClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FanfareDismissed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_FanfareDismissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOUI_gv_cU_FanfareCloseButton) || (EventDialogControl() == libCOUI_gv_cU_FanfareConvertToReplayButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCOUI_gv_cU_FanfareDialog, PlayerGroupSingle(EventPlayer()), false);
    TriggerExecute(libCOUI_gt_AF_Score, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_FanfareDismissed_Init () {
    libCOUI_gt_CU_FanfareDismissed = TriggerCreate("libCOUI_gt_CU_FanfareDismissed_Func");
    TriggerEnable(libCOUI_gt_CU_FanfareDismissed, false);
    TriggerAddEventDialogControl(libCOUI_gt_CU_FanfareDismissed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vBackgroundDialogPanel;
    string lv_vCommander;
    string lv_vCommander2;

    // Automatic Variable Declarations
    playergroup autoC4120C0D_g;
    int autoC4120C0D_var;

    // Variable Initialization
    lv_vBackgroundDialogPanel = c_invalidDialogControlId;
    lv_vCommander = libCOUT_gf_ActiveCommanderForPlayer3(1);
    lv_vCommander2 = libCOUT_gf_ActiveCommanderForPlayer3(2);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_AbortMission, false);
    Wait(0.0, c_timeReal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), false);
    autoC4120C0D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoC4120C0D_var = -1;
    while (true) {
        autoC4120C0D_var = PlayerGroupNextPlayer(autoC4120C0D_g, autoC4120C0D_var);
        if (autoC4120C0D_var < 0) { break; }
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[autoC4120C0D_var], PlayerGroupSingle(autoC4120C0D_var), false);
    }
    TriggerEnable(libCOUT_gt_UT_Graph_Timer, false);
    libCOUT_gf_UT_Graph_HideAllGraphsExcept(0, 1);
    libCOUT_gf_UT_Graph_HideAllGraphsExcept(0, 2);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOOC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryUI, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    UnitPauseAll(true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 550);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 50, c_anchorTop, 0, 90, GameMapName(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_MapTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_EnemyCompName", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 15.0);
    libCOUI_gf_AF_MutatorIconsCreate(DialogLastCreated());
    libCOUI_gf_AF_MasteryInfoCreate(DialogLastCreated(), 1);
    libCOUI_gf_AF_MasteryInfoCreate(DialogLastCreated(), 2);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_ScoreBackground/Scorebackgrond");
    lv_vBackgroundDialogPanel = DialogControlLastCreated();
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_Image");
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageLeft");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOUT_gf_UT_CommanderLoadingImage(lv_vCommander), PlayerGroupAll());
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageRight");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOUT_gf_UT_CommanderLoadingImage(lv_vCommander2), PlayerGroupAll());
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 1.5, 0.0);
    if ((libCOUT_gv_uT_CheatUsed == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 40, 30, c_anchorTopRight, 5, 5, StringExternal("Param/Value/lib_COUI_FE15DC22"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COUI_3A2EC102"), PlayerGroupAll());
    }

    Wait(1.5, c_timeGame);
    TriggerExecute(libCOUI_gt_AF_Score_GraphsandCharts, true, false);
    TriggerExecute(libCOUI_gt_AF_Score_SwitchButtonCreate, true, false);
    TriggerExecute(libCOUI_gt_AF_Score_QuitButtonCreate, true, false);
    TriggerExecute(libCOUI_gt_AF_Score_MissionsButtonCreate, true, false);
    TriggerExecute(libCOUI_gt_CreateMissionsDialog, true, false);
    DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_Init () {
    libCOUI_gt_AF_Score = TriggerCreate("libCOUI_gt_AF_Score_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Graphs and Charts
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_GraphsandCharts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vIndex;
    string[11] lv_vUnitTemp;
    int[11] lv_vDamageTemp;
    int lv_vTotalDamage;

    // Automatic Variable Declarations
    const int auto0916DF9C_ae = 2;
    int auto0916DF9C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph"));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOUI_gv_aF_Score_KillGraph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/FullBackground"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/CloseImage"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/InnerBackground"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/LeftAxisImage"));
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/RightAxisImage"));
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    auto0916DF9C_var = 1;
    for ( ; auto0916DF9C_var <= auto0916DF9C_ae; auto0916DF9C_var += 1 ) {
        libCOUT_gf_UT_Graph_HideAllGraphsExcept(4, auto0916DF9C_var);
    }
    libCOUT_gf_UT_CreatePieChartfromDamageLog(1, -350, 75, c_anchorCenter, 0);
    libCOUI_gv_aF_Score_PieCharts[1] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libCOUT_gf_UT_CreatePieChartfromDamageLog(2, 350, 75, c_anchorCenter, 8);
    libCOUI_gv_aF_Score_PieCharts[2] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOUI_gv_aF_KillNumbers = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_GraphsandCharts_Init () {
    libCOUI_gt_AF_Score_GraphsandCharts = TriggerCreate("libCOUI_gt_AF_Score_GraphsandCharts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_SwitchButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_SwitchButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 80, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_COUI_48C38A5B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOUI_gv_aF_Score_FinalButtonLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOUI_gv_aF_Score_FinalButton[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COUI_B37D08AA"), PlayerGroupAll());
    TriggerEnable(libCOUI_gt_AF_Score_FinalButtonClicked, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_SwitchButtonCreate_Init () {
    libCOUI_gt_AF_Score_SwitchButtonCreate = TriggerCreate("libCOUI_gt_AF_Score_SwitchButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_MissionsButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_MissionsButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 900, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/lib_COUI_8D4A7EBB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    libCOUI_gv_aF_Score_FinalButtonLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    libCOUI_gv_aF_Score_FinalButton[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COUI_5C254257"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_MissionsButtonCreate_Init () {
    libCOUI_gt_AF_Score_MissionsButtonCreate = TriggerCreate("libCOUI_gt_AF_Score_MissionsButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_QuitButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_QuitButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 50, c_anchorBottomRight, 75, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/lib_COUI_B7668FDC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOUI_gv_aF_Score_FinalButtonLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOUI_gv_aF_Score_FinalButton[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COUI_F9A5B0EF"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_QuitButtonCreate_Init () {
    libCOUI_gt_AF_Score_QuitButtonCreate = TriggerCreate("libCOUI_gt_AF_Score_QuitButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Final Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_Score_FinalButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto12FD304A_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOUI_gv_aF_Score_FinalButton[0]) || (EventDialogControl() == libCOUI_gv_aF_Score_FinalButton[1]) || (EventDialogControl() == libCOUI_gv_aF_Score_FinalButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto12FD304A_val = EventDialogControl();
    if (auto12FD304A_val == libCOUI_gv_aF_Score_FinalButton[0]) {
        if ((libCOUI_gv_aF_Score_GraphVisible[EventPlayer()] == true)) {
            DialogControlFadeTransparency(libCOUI_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 100.0);
            Wait(0.5, c_timeGame);
            DialogSetVisible(libCOUI_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(libCOUI_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), true);
            libCOUI_gv_aF_Score_GraphVisible[EventPlayer()] = false;
        }
        else {
            DialogSetVisible(libCOUI_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(libCOUI_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlFadeTransparency(libCOUI_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 0.0);
            libCOUI_gv_aF_Score_GraphVisible[EventPlayer()] = true;
        }
    }
    else if (auto12FD304A_val == libCOUI_gv_aF_Score_FinalButton[1]) {
        SoundPlayForPlayer(SoundLink("UI_Void_Error_Back", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        GameOver(EventPlayer(), libCOMI_gv_cM_EndMissionResult[EventPlayer()], false, true);
    }
    else if (auto12FD304A_val == libCOUI_gv_aF_Score_FinalButton[2]) {
        if ((DialogIsVisible(libCOUI_gv_selectMissionDialogBig, EventPlayer()) == true)) {
            DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(libCOUI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_Score_FinalButtonClicked_Init () {
    libCOUI_gt_AF_Score_FinalButtonClicked = TriggerCreate("libCOUI_gt_AF_Score_FinalButtonClicked_Func");
    TriggerEnable(libCOUI_gt_AF_Score_FinalButtonClicked, false);
    TriggerAddEventDialogControl(libCOUI_gt_AF_Score_FinalButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MissionEnds
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_MissionEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gv_aF_MissionTime = GameGetMissionTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_MissionEnds_Init () {
    libCOUI_gt_AF_MissionEnds = TriggerCreate("libCOUI_gt_AF_MissionEnds_Func");
    TriggerAddEventGeneric(libCOUI_gt_AF_MissionEnds, "UT_MissionEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_SlimUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOUT_gf_UT_DevCommandsActive(libCOUT_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        if ((PlayerGroupHasPlayer(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
            PlayerGroupAdd(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(libCOUI_gt_AF_SlimUI_Delayed, true);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COUI_E49DD55E"));
        }
        else {
            PlayerGroupRemove(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            TriggerEnable(libCOUI_gt_AF_SlimUI_Delayed, false);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COUI_F1FA04BF"));
        }
    }
    else {
        if ((GameGetMissionTime() < 5.0)) {
            PlayerGroupAdd(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COUI_00C8A196"));
            TriggerExecute(libCOUI_gt_AF_SlimUI_Delayed, true, false);
        }
        else {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
            if ((PlayerGroupHasPlayer(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
                PlayerGroupAdd(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, false);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_On");
            }
            else {
                PlayerGroupRemove(libCOUI_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, true);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_Off");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_SlimUI_Init () {
    libCOUI_gt_AF_SlimUI = TriggerCreate("libCOUI_gt_AF_SlimUI_Func");
    TriggerAddEventChatMessage(libCOUI_gt_AF_SlimUI, c_playerAny, "-slim", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI_Delayed
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_AF_SlimUI_Delayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 5.0))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(libCOUI_gv_aF_SlimUI_PlayerGroup, c_syncFrameTypeConsolePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), libCOUI_gv_aF_SlimUI_PlayerGroup, "SlimUI_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_AF_SlimUI_Delayed_Init () {
    libCOUI_gt_AF_SlimUI_Delayed = TriggerCreate("libCOUI_gt_AF_SlimUI_Delayed_Func");
    TriggerEnable(libCOUI_gt_AF_SlimUI_Delayed, false);
    libCOUI_gf_CU_CommanderClosed(libCOUI_gt_AF_SlimUI_Delayed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugTogSoA
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugTogSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_GPVisible[EventPlayer()] == false)) {
        libCOMI_gf_CU_GPShowHide(true, EventPlayer(), c_transitionDurationDefault);
    }
    else {
        libCOMI_gf_CU_GPShowHide(false, EventPlayer(), c_transitionDurationDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugTogSoA_Init () {
    libCOUI_gt_CU_DebugTogSoA = TriggerCreate("libCOUI_gt_CU_DebugTogSoA_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugTogSoA, c_playerAny, "-togsoa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugScreenmode
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugScreenmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoECDD40B6_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoECDD40B6_val = StringWord(EventChatMessage(false), 2);
    if (autoECDD40B6_val == "full") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeFullscreen, c_transitionDurationDefault, EventPlayer());
    }
    else if (autoECDD40B6_val == "normal") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeConsole, c_transitionDurationDefault, EventPlayer());
    }
    else if (autoECDD40B6_val == "letter") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeLetterboxed, c_transitionDurationDefault, EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugScreenmode_Init () {
    libCOUI_gt_CU_DebugScreenmode = TriggerCreate("libCOUI_gt_CU_DebugScreenmode_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugScreenmode, c_playerAny, "-screenmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugCinMode
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugCinMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoBE255101_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE255101_val = StringWord(EventChatMessage(false), 2);
    if (autoBE255101_val == "1") {
        libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    }
    else if (autoBE255101_val == "0") {
        libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugCinMode_Init () {
    libCOUI_gt_CU_DebugCinMode = TriggerCreate("libCOUI_gt_CU_DebugCinMode_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugCinMode, c_playerAny, "-cinmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugRandomMutationSelect
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugRandomMutationSelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOUI_gv_cU_CommanderSelect_RefCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_A982B5D8"), true);
    }

    if ((EventPlayer() != 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_273C89B5"), true);
    }

    libCOMU_gf_CU_RandomMutationSelectDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugRandomMutationSelect_Init () {
    libCOUI_gt_CU_DebugRandomMutationSelect = TriggerCreate("libCOUI_gt_CU_DebugRandomMutationSelect_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randommutation", true);
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randmut", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int autoFC62F18A_ae = 100;
    const int autoFC62F18A_ai = 1;
    const int auto6B20E4BF_ae = 100;
    const int auto6B20E4BF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mutatorIndex = 1;
    for ( ; ( (autoFC62F18A_ai >= 0 && lv_mutatorIndex <= autoFC62F18A_ae) || (autoFC62F18A_ai < 0 && lv_mutatorIndex >= autoFC62F18A_ae) ) ; lv_mutatorIndex += autoFC62F18A_ai ) {
        lv_mutatorChoices[lv_mutatorIndex] = libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex));
    }
    libCOMU_gf_CU_MutatorDisplay(EventPlayer());
    while (!(((libCOMU_gv_cU_MutatorDialog == c_invalidDialogId) || (DialogIsVisible(libCOMU_gv_cU_MutatorDialog, EventPlayer()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (auto6B20E4BF_ai >= 0 && lv_mutatorIndex <= auto6B20E4BF_ae) || (auto6B20E4BF_ai < 0 && lv_mutatorIndex >= auto6B20E4BF_ae) ) ; lv_mutatorIndex += auto6B20E4BF_ai ) {
        if ((libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)) == true) && (lv_mutatorChoices[lv_mutatorIndex] != libCOMU_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)))) {
            TriggerExecute(libCOMU_gf_CT_MutatorInitTrigger(UserDataInstance("Mutators", lv_mutatorIndex)), true, false);
        }

    }
    libCOMU_gf_CU_MutatorListInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugMutatorSelect_Init () {
    libCOUI_gt_CU_DebugMutatorSelect = TriggerCreate("libCOUI_gt_CU_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugMutatorSelect, c_playerAny, "mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeToggle
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugMovieCaptureModeToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gv_cU_DebugMovieCaptureMode = !(libCOUI_gv_cU_DebugMovieCaptureMode);
    if ((libCOUI_gv_cU_DebugMovieCaptureMode == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_E05949CE"), true);
        TriggerExecute(libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC, true, false);
        TriggerExecute(libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits, true, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COUI_97288BB2"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugMovieCaptureModeToggle_Init () {
    libCOUI_gt_CU_DebugMovieCaptureModeToggle = TriggerCreate("libCOUI_gt_CU_DebugMovieCaptureModeToggle_Func");
    TriggerAddEventChatMessage(libCOUI_gt_CU_DebugMovieCaptureModeToggle, c_playerAny, "-capturemode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSuppressCC
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_commandPanel;
    int lv_tooltipAnchor;
    int[17] lv_commandButtons;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto7BABCB1D_ae = 14;
    const int auto7BABCB1D_ai = 1;
    const int auto047325C3_ae = 14;
    const int auto047325C3_ai = 1;
    const int auto1EAC3FBF_ae = 4;
    const int auto1EAC3FBF_ai = 1;
    playergroup auto12DD9461_g;

    // Variable Initialization
    lv_commandPanel = c_invalidDialogControlId;
    lv_tooltipAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_commandButtons[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    lv_commandPanel = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeTooltip);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, -100, -100);
    lv_tooltipAnchor = DialogControlLastCreated();
    lv_buttonIndex = 0;
    for ( ; ( (auto7BABCB1D_ai >= 0 && lv_buttonIndex <= auto7BABCB1D_ae) || (auto7BABCB1D_ai < 0 && lv_buttonIndex >= auto7BABCB1D_ae) ) ; lv_buttonIndex += auto7BABCB1D_ai ) {
        if ((lv_buttonIndex < 10)) {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex));
        }
        else {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton" + IntToString(lv_buttonIndex));
        }
        lv_commandButtons[lv_buttonIndex] = DialogControlLastCreated();
    }
    while ((libCOUI_gv_cU_DebugMovieCaptureMode == true)) {
        lv_buttonIndex = 0;
        for ( ; ( (auto047325C3_ai >= 0 && lv_buttonIndex <= auto047325C3_ae) || (auto047325C3_ai < 0 && lv_buttonIndex >= auto047325C3_ae) ) ; lv_buttonIndex += auto047325C3_ai ) {
            libNtve_gf_SetDialogItemCustomTooltip(lv_commandButtons[lv_buttonIndex], lv_tooltipAnchor, PlayerGroupAll());
        }
        lv_buttonIndex = 1;
        for ( ; ( (auto1EAC3FBF_ai >= 0 && lv_buttonIndex <= auto1EAC3FBF_ae) || (auto1EAC3FBF_ai < 0 && lv_buttonIndex >= auto1EAC3FBF_ae) ) ; lv_buttonIndex += auto1EAC3FBF_ai ) {
            auto12DD9461_g = libCOOC_gf_HumanPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto12DD9461_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    libNtve_gf_SetDialogItemCustomTooltip(libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer], lv_tooltipAnchor, PlayerGroupAll());
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC_Init () {
    libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC = TriggerCreate("libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSupressUnits
//--------------------------------------------------------------------------------------------------
bool libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto81C9F417_g;
    int auto81C9F417_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto81C9F417_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto81C9F417_u = UnitGroupCount(auto81C9F417_g, c_unitCountAll);
    for (;; auto81C9F417_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto81C9F417_g, auto81C9F417_u);
        if (lv_indexUnit == null) { break; }
        UnitSetState(lv_indexUnit, c_unitStateTooltipable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits_Init () {
    libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits = TriggerCreate("libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits_Func");
}

void libCOUI_InitTriggers () {
    libCOUI_gt_AnnounceMessage_Init();
    libCOUI_gt_MapListslectionChanged_Init();
    libCOUI_gt_MapButtonClicked_Init();
    libCOUI_gt_MissionsButtonClicked_Init();
    libCOUI_gt_StartMission_Init();
    libCOUI_gt_CreateMissionsDialog_Init();
    libCOUI_gt_FactionButtonClicked_Init();
    libCOUI_gt_AF_CS_CommanderSelected_Init();
    libCOUI_gt_AF_CS_NewsControlButtonClicked_Init();
    libCOUI_gt_UT_CommandsButtonClicked_Init();
    libCOUI_gt_CU_PlayerLeftInLobby_Init();
    libCOUI_gt_CommanderButtonClicked_Init();
    libCOUI_gt_UT_PrestigeAlly_Init();
    libCOUI_gt_UT_CommanderClicked_Init();
    libCOUI_gt_CU_CommanderLevelUpClicked_Init();
    libCOUI_gt_CU_CommanderLevelDownClicked_Init();
    libCOUI_gt_CU_CommanderMutatorChallengeSelected_Init();
    libCOUI_gt_AF_CS_AllyPrestigeChanged_Init();
    libCOUI_gt_UT_AllyMasteryButtonClicked_Init();
    libCOUI_gt_CU_CommanderMasteryClicked_Init();
    libCOUI_gt_CU_CommanderMasteryCheckboxToggle_Init();
    libCOUI_gt_ReadyButtonClicked_Init();
    libCOUI_gt_CU_CommandeAllyLeft_Init();
    libCOUI_gt_CU_MasteryShiftTrackDown_Init();
    libCOUI_gt_CU_MasteryShiftTrackUp_Init();
    libCOUI_gt_CU_MasteryLevelUpPressed_Init();
    libCOUI_gt_CU_MasteryLevelDownPressed_Init();
    libCOUI_gt_CU_MasteryItemPlusPressed_Init();
    libCOUI_gt_CU_MasteryItemMinusPressed_Init();
    libCOUI_gt_CU_MasteryResetPressed_Init();
    libCOUI_gt_CU_MasteryAcceptPressed_Init();
    libCOUI_gt_CU_PrestigeButtonClicked_Init();
    libCOUI_gt_GameModePulldownUsed_Init();
    libCOUI_gt_DifficultyPulldownUsed_Init();
    libCOUI_gt_VU_EnemyFactionChanged_Init();
    libCOUI_gt_CU_MinimapAllyViewUpdate_Init();
    libCOUI_gt_CU_MinimapAllyPlayerLeaves_Init();
    libCOUI_gt_CU_MinimapAllyViewCamera_Init();
    libCOUI_gt_CU_FlashArmyButtonHelpTip_Init();
    libCOUI_gt_CU_ArmyButtonUsed_Init();
    libCOUI_gt_CS_ArmyButtonMissionInit_Init();
    libCOUI_gt_CU_BB_BossHPChanged_Init();
    libCOUI_gt_CU_HeroPanelUpdate_Init();
    libCOUI_gt_CU_HeroUnitDamaged_Init();
    libCOUI_gt_CU_HeroUnitVitalChange_Init();
    libCOUI_gt_CU_HeroMouseHoverText_Init();
    libCOUI_gt_CU_HealthWatchLifeCheck_Init();
    libCOUI_gt_CU_HealthWatchUnitDies_Init();
    libCOUI_gt_CU_HealthWatchFlash_Init();
    libCOUI_gt_CU_HealthWatchStartSound_Init();
    libCOUI_gt_CU_HealthWatchHeartLoop_Init();
    libCOUI_gt_CU_HealthWatchBreathLoop_Init();
    libCOUI_gt_CU_TimerWindowFlash_Init();
    libCOUI_gt_CU_TimerWindowMoveForBossBar_Init();
    libCOUI_gt_CU_TimerWindowThresholdCrossed_Init();
    libCOUI_gt_CU_WaveTimerWindowUpdateTime_Init();
    libCOUI_gt_CU_ScoreClosed_Init();
    libCOUI_gt_CU_FanfareDismissed_Init();
    libCOUI_gt_AF_Score_Init();
    libCOUI_gt_AF_Score_GraphsandCharts_Init();
    libCOUI_gt_AF_Score_SwitchButtonCreate_Init();
    libCOUI_gt_AF_Score_MissionsButtonCreate_Init();
    libCOUI_gt_AF_Score_QuitButtonCreate_Init();
    libCOUI_gt_AF_Score_FinalButtonClicked_Init();
    libCOUI_gt_AF_MissionEnds_Init();
    libCOUI_gt_AF_SlimUI_Init();
    libCOUI_gt_AF_SlimUI_Delayed_Init();
    libCOUI_gt_CU_DebugTogSoA_Init();
    libCOUI_gt_CU_DebugScreenmode_Init();
    libCOUI_gt_CU_DebugCinMode_Init();
    libCOUI_gt_CU_DebugRandomMutationSelect_Init();
    libCOUI_gt_CU_DebugMutatorSelect_Init();
    libCOUI_gt_CU_DebugMovieCaptureModeToggle_Init();
    libCOUI_gt_CU_DebugMovieCaptureModeSuppressCC_Init();
    libCOUI_gt_CU_DebugMovieCaptureModeSupressUnits_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOUI_InitLib_completed = false;

void libCOUI_InitLib () {
    if (libCOUI_InitLib_completed) {
        return;
    }

    libCOUI_InitLib_completed = true;

    libCOUI_InitLibraries();
    libCOUI_InitVariables();
    libCOUI_InitTriggers();
}

include "LibCOOC"
include "LibCOMI"
include "LibCOMU"
include "LibCOUT"

