include "TriggerLibs/NativeLib"
include "LibCOMI"
include "LibNHbr"
include "Lib2772A861"

include "Lib58D4CA39_h"

//--------------------------------------------------------------------------------------------------
// Library: Extras
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib58D4CA39_InitLibraries () {
    libNtve_InitVariables();
    libCOMI_InitVariables();
    libNHbr_InitVariables();
    lib2772A861_InitVariables();
}

// Functions
void lib58D4CA39_gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Automatic Variable Declarations
    int auto7DF8C020_val;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupFilterRegion(UnitGroupFilterPlane(lp_nearbyUnits, c_planeGround, 0), RegionCircle(UnitGetPosition(lp_diamondback), 6.2), 0);
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                auto7DF8C020_val = RandomInt(1, 2);
                if (auto7DF8C020_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (auto7DF8C020_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                    if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                        lv_moveTo = lv_moveToB;
                    }
                    else {
                        lv_moveTo = null;
                    }
                }
            }
        }

        if ((lv_moveTo != null)) {
            UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        }

        Wait(1.5, c_timeAI);
        AISetUnitScriptControlled(lp_diamondback, false);
    }

}

void lib58D4CA39_gf_AIHavoc (int lp_player, unit lp_havoc, unitgroup lp_scan_group) {
    // Automatic Variable Declarations
    // Implementation
        int player = lp_player;
        unit havoc = lp_havoc;
        unitgroup scan_group = lp_scan_group;
        const fixed c_forceFieldMeleeRange      = 1.5;
        const fixed c_forceFieldRadius          = 2.0;
        const fixed c_forceFieldRange           = 8.0;
        const fixed c_forceFieldFriendRange     = 9.0;
        order force_field_order = AICreateOrder(player, "ForceFieldMonitor", 0);
        point havoc_position = UnitGetPosition(havoc);
        aifilter filter_ai;
        unitgroup ground_enemies;
        unitgroup melee_enemy_group;
        unitgroup range_enemy_group;
        unitfilter filter_unit;
        unitgroup friendly_group;
        int friendly_count = 0;
        unit friendly_unit;
        int friendly_vitality = 0;
        bool friendly_has_melee = false;
        int enemy_count = 0;
        unit enemy_unit;
        point enemy_position;
        fixed enemy_distance;
        int best_priority = 0;
        point best_enemy_position = null;
        point best_friend_position = null;
        unit best_target_unit = null;
        point force_field_target = null;
        // Do not proceed if the order is invalid for some reason
        if (!UnitOrderIsValid(havoc, force_field_order)) {
            return;
        }
        // Filter out air units
        filter_ai = AIFilter(player);
        AISetFilterPlane(filter_ai, c_planeGround);
        AISetFilterCanAttackAlly(filter_ai, c_groundAlliesNearby, false);
        ground_enemies = AIGetFilterGroup(filter_ai, scan_group);
        // Is there a threat in the area
        enemy_count = UnitGroupCount(ground_enemies, c_unitCountAll);
        if (enemy_count <= 0) {
            return;
        }
        // Get a list of only melee enemies
        filter_ai = AIFilter(player);
        AISetFilterMelee(filter_ai, c_onlyMelee);
        melee_enemy_group = AIGetFilterGroup(filter_ai, ground_enemies);
        // Setup a friendly filter
        filter_unit = UnitFilter(0,0,0,0);
        UnitFilterSetState(filter_unit, c_targetFilterUncommandable,             c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterWorker,                    c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterUnderConstruction,         c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterStructure,                 c_unitFilterExcluded);
        // *** Scan the area for the following, set priority unit when found *** (highest first)
        // Priority 4: Melee enemy close to me
        // Priority 3: A friendly unit close to death, who has a melee enemy close by
        // Priority 2: A friendly ranged unit who has a melee enemy close by
        // Priority 1: Large clump of enemies (if we have extra energy)
        //
        // First check only melee enemies
        enemy_count = UnitGroupCount(melee_enemy_group, c_unitCountAll);
        while (enemy_count > 0) {
            enemy_unit = UnitGroupUnit(melee_enemy_group, enemy_count);
            enemy_count = enemy_count - 1;
            enemy_position = UnitGetPosition(enemy_unit);
            enemy_distance = DistanceBetweenPoints(havoc_position, enemy_position);
            if (enemy_distance <= c_forceFieldMeleeRange) {
                best_target_unit = enemy_unit;
                best_enemy_position = enemy_position;
                best_friend_position = havoc_position;
                best_priority = 4;
                break;
            }
            friendly_group = UnitGroupAlliance(player, c_unitAllianceAlly, RegionCircle(enemy_position, c_forceFieldMeleeRange), filter_unit, c_noMaxCount);
            friendly_has_melee = AIUnitGroupHasMelee(friendly_group);
            friendly_count = UnitGroupCount(friendly_group, c_unitCountAll);
            while (friendly_count > 0) {
                friendly_unit = UnitGroupUnit(friendly_group, friendly_count);
                friendly_count = friendly_count - 1;
                friendly_vitality = UnitGetPropertyInt(friendly_unit, c_unitPropVitalityPercent, c_unitPropCurrent);
                if (friendly_vitality < 20) {
                    best_target_unit = enemy_unit;
                    best_enemy_position = enemy_position;
                    best_friend_position = UnitGetPosition(friendly_unit);
                    best_priority = 3;
                    break;
                }
                else if (!friendly_has_melee) {
                    best_target_unit = enemy_unit;
                    best_enemy_position = enemy_position;
                    best_friend_position = UnitGetPosition(friendly_unit);
                    best_priority = 2;
                }
            }
        }
        if (best_priority == 0) {
            // no dangerous melee units found, split large ranged groups
            // filter only ranged units
            filter_ai = AIFilter(player);
            AISetFilterMelee(filter_ai, c_onlyRanged);
            range_enemy_group = AIGetFilterGroup(filter_ai, ground_enemies);
            // see if there is a large group nearby to split
            force_field_target = AIBestTargetPoint(
                range_enemy_group,
                6, // min hits
                1, // damage base
                6.0, // min score
                c_forceFieldRadius,
                UnitGetPosition(havoc),
                c_forceFieldRange,
                c_unitAttributeNone
            );
            if (force_field_target == null) {
                return;
            }
        }
        else {
            // get a point a bit in front of the enemy to shove him away
            enemy_distance = DistanceBetweenPoints(best_friend_position, best_enemy_position);
            if (enemy_distance < 2.0) {
                force_field_target = PointAlongLine(best_friend_position, best_enemy_position, enemy_distance/2.0);
            } else {
                force_field_target = PointAlongLine(best_friend_position, best_enemy_position, enemy_distance - 1.0);
            }
        }
        OrderSetTargetPoint(force_field_order, force_field_target);
        if (!UnitOrderIsValid(havoc, force_field_order)) {
            return;
        }
        if (UnitGroupCount(AIFindUnits(player, "ForceField", force_field_target, 0.5, 1), c_unitCountAlive) > 0) {
            return;
        }
        AICast(havoc, force_field_order, c_noMarker, c_castHold);
}

void lib58D4CA39_gf_AIAscendant (int lp_player, unit lp_ascendant, unitgroup lp_scan_group) {
    // Automatic Variable Declarations
    // Implementation
        
        int player = lp_player;
        unit ascendant = lp_ascendant;
        unitgroup scan_group = lp_scan_group;
        const int PsiOrbCooldownId = 0;
        unitgroup enemies = UnitGroupFilterAlliance(scan_group, player, c_unitAllianceEnemy, 1);
        if (UnitGroupCount(enemies, c_unitCountAlive) == 0) {
            return;
        }
        if (AITactCooldownAllow(ascendant, PsiOrbCooldownId)) {
            // Cast Psi Orb
            if (AIEvalTacticalData(ascendant, "AscendantPsiOrb")) {
                AISetCooldown(ascendant, PsiOrbCooldownId, 5.0);
                return;
            }
        }
        //  If we already have a psi orb order, ignore any new orders since psi orb is more important.
        //  If we already have a Mind Blast order, ignore any new Mind Blast orders.
        if (UnitOrderHasAbil(ascendant, "VoidHighTemplarMindBlast") || UnitOrderHasAbil(ascendant, "VoidHighTemplarPsiOrb")) {
            return;
        }
        // Cast Mind Blast
        AIEvalTacticalData(ascendant, "AscendantMindBlast");
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib2772A861_gt_InitializeUEDRace, true, false);
    TriggerExecute(libNHbr_gt_InitializeNetworkHybridRace, true, false);
    TriggerExecute(lib58D4CA39_gt_InitializeKeironRace, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_Initialization_Init () {
    lib58D4CA39_gt_Initialization = TriggerCreate("lib58D4CA39_gt_Initialization_Func");
    TriggerAddEventGeneric(lib58D4CA39_gt_Initialization, libCOMI_gv_cOOP_MISSION_STARTED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Keiron Race
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_InitializeKeironRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib58D4CA39_gt_KeironUpgrades, true);
    TriggerEnable(lib58D4CA39_gt_KeironAutoAperture, true);
    TriggerEnable(lib58D4CA39_gt_AegisDied, true);
    TriggerEnable(lib58D4CA39_gt_AegisCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_InitializeKeironRace_Init () {
    lib58D4CA39_gt_InitializeKeironRace = TriggerCreate("lib58D4CA39_gt_InitializeKeironRace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeironUpgrades
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_KeironUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto9AD48FC2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AD48FC2_val = EventUpgradeName();
    if (auto9AD48FC2_val == "UpgradeKeironLevel01") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel02") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel03") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel04") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel05") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel06") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel07") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel08") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel09") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel10") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel11") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel12") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel13") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel14") {
    }
    else if (auto9AD48FC2_val == "UpgradeKeironLevel15") {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_KeironUpgrades_Init () {
    lib58D4CA39_gt_KeironUpgrades = TriggerCreate("lib58D4CA39_gt_KeironUpgrades_Func");
    TriggerEnable(lib58D4CA39_gt_KeironUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(lib58D4CA39_gt_KeironUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeironAutoAperture
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_KeironAutoAperture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_apertureUnit;
    unitgroup lv_apertures;
    int lv_neededEnergy;
    unit lv_bestAperture;
    fixed lv_bestDistance;
    fixed lv_newDistance;
    string lv_weapon;
    string lv_effect;
    fixed lv_damage;

    // Automatic Variable Declarations
    unitgroup auto60880210_g;
    int auto60880210_u;

    // Variable Initialization
    lv_apertures = UnitGroup("Aperture", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 500.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_neededEnergy = (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CargoSize", c_playerAny) * 10);
    lv_bestDistance = 999.0;
    lv_effect = EventUnitDamageEffect();
    lv_damage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_apertures, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!(((UnitGetPropertyInt(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyInt(EventUnit(), c_unitPropShields, c_unitPropCurrent)) < FixedToInt(lv_damage)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto60880210_g = lv_apertures;
    auto60880210_u = UnitGroupCount(auto60880210_g, c_unitCountAll);
    for (;; auto60880210_u -= 1) {
        lv_apertureUnit = UnitGroupUnitFromEnd(auto60880210_g, auto60880210_u);
        if (lv_apertureUnit == null) { break; }
        if ((lv_apertureUnit != EventUnit()) && (UnitCheckAbilCmdState(lv_apertureUnit, AbilityCommand("AutoKeyhole", 0), c_cmdStateIsAutoCast) == true) && (UnitGetPropertyFixed(lv_apertureUnit, c_unitPropEnergy, c_unitPropCurrent) >= lv_neededEnergy)) {
            lv_newDistance = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_apertureUnit));
            if ((lv_newDistance < lv_bestDistance)) {
                lv_bestDistance = lv_newDistance;
                lv_bestAperture = lv_apertureUnit;
            }

        }

    }
    if ((lv_bestAperture != null)) {
        UnitIssueOrder(lv_bestAperture, OrderTargetingUnit(AbilityCommand("AutoKeyhole", 0), EventUnit()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_KeironAutoAperture_Init () {
    lib58D4CA39_gt_KeironAutoAperture = TriggerCreate("lib58D4CA39_gt_KeironAutoAperture_Func");
    TriggerEnable(lib58D4CA39_gt_KeironAutoAperture, false);
    TriggerAddEventUnitDamaged(lib58D4CA39_gt_KeironAutoAperture, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AegisDied
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_AegisDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AegisShielded"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "KeironCitadelAegisTrainHero", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 300.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_AegisDied_Init () {
    lib58D4CA39_gt_AegisDied = TriggerCreate("lib58D4CA39_gt_AegisDied_Func");
    TriggerEnable(lib58D4CA39_gt_AegisDied, false);
    TriggerAddEventUnitDied(lib58D4CA39_gt_AegisDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AegisCreated
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_AegisCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AegisShielded"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "KeironCitadelAegisTrainHero", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnitCreatedUnit()), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_AegisCreated_Init () {
    lib58D4CA39_gt_AegisCreated = TriggerCreate("lib58D4CA39_gt_AegisCreated_Func");
    TriggerEnable(lib58D4CA39_gt_AegisCreated, false);
    TriggerAddEventUnitCreated(lib58D4CA39_gt_AegisCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_Utility_Upgrades
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    string autoB68B029A_val;
    unitgroup auto05227DC6_g;
    int auto05227DC6_u;
    unit auto05227DC6_var;
    unitgroup autoFC262A83_g;
    int autoFC262A83_u;
    unit autoFC262A83_var;
    unitgroup auto66973FB3_g;
    int auto66973FB3_u;
    unit auto66973FB3_var;
    unitgroup autoFC633E31_g;
    int autoFC633E31_u;
    unit autoFC633E31_var;
    unitgroup auto9691FA97_g;
    int auto9691FA97_u;
    unit auto9691FA97_var;
    unitgroup autoD467EEA1_g;
    int autoD467EEA1_u;
    unit autoD467EEA1_var;
    unitgroup auto5E63F316_g;
    int auto5E63F316_u;
    unit auto5E63F316_var;
    unitgroup auto3CFAA867_g;
    int auto3CFAA867_u;
    unit auto3CFAA867_var;
    unitgroup auto04D9E31A_g;
    int auto04D9E31A_u;
    unit auto04D9E31A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "DominionEliteGuard1") || (EventUpgradeName() == "DominionEliteGuard12") || (EventUpgradeName() == "DominionEliteGuard122")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB68B029A_val = EventUpgradeName();
    if (autoB68B029A_val == "DominionEliteGuard1") {
        lv_level = 2;
    }
    else if (autoB68B029A_val == "DominionEliteGuard12") {
        lv_level = 3;
    }
    else if (autoB68B029A_val == "DominionEliteGuard122") {
        lv_level = 4;
    }
    else {
    }
    TriggerEnable(lib58D4CA39_gt_CMMengskStartVeterancyLevel, true);
    auto05227DC6_g = UnitGroup("VikingMengskAssault", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05227DC6_u = UnitGroupCount(auto05227DC6_g, c_unitCountAll);
    for (;; auto05227DC6_u -= 1) {
        auto05227DC6_var = UnitGroupUnitFromEnd(auto05227DC6_g, auto05227DC6_u);
        if (auto05227DC6_var == null) { break; }
        UnitXPSetCurrentLevel(auto05227DC6_var, "MengskVeterancyVikingMengsk", lv_level);
    }
    autoFC262A83_g = UnitGroup("VikingMengskFighter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC262A83_u = UnitGroupCount(autoFC262A83_g, c_unitCountAll);
    for (;; autoFC262A83_u -= 1) {
        autoFC262A83_var = UnitGroupUnitFromEnd(autoFC262A83_g, autoFC262A83_u);
        if (autoFC262A83_var == null) { break; }
        UnitXPSetCurrentLevel(autoFC262A83_var, "MengskVeterancyVikingMengsk", lv_level);
    }
    auto66973FB3_g = UnitGroup("SiegeTankMengskSieged", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66973FB3_u = UnitGroupCount(auto66973FB3_g, c_unitCountAll);
    for (;; auto66973FB3_u -= 1) {
        auto66973FB3_var = UnitGroupUnitFromEnd(auto66973FB3_g, auto66973FB3_u);
        if (auto66973FB3_var == null) { break; }
        UnitXPSetCurrentLevel(auto66973FB3_var, "MengskVeterancySiegeTankMengsk", lv_level);
    }
    autoFC633E31_g = UnitGroup("SiegeTankMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC633E31_u = UnitGroupCount(autoFC633E31_g, c_unitCountAll);
    for (;; autoFC633E31_u -= 1) {
        autoFC633E31_var = UnitGroupUnitFromEnd(autoFC633E31_g, autoFC633E31_u);
        if (autoFC633E31_var == null) { break; }
        UnitXPSetCurrentLevel(autoFC633E31_var, "MengskVeterancySiegeTankMengsk", lv_level);
    }
    auto9691FA97_g = UnitGroup("BattlecruiserMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9691FA97_u = UnitGroupCount(auto9691FA97_g, c_unitCountAll);
    for (;; auto9691FA97_u -= 1) {
        auto9691FA97_var = UnitGroupUnitFromEnd(auto9691FA97_g, auto9691FA97_u);
        if (auto9691FA97_var == null) { break; }
        UnitXPSetCurrentLevel(auto9691FA97_var, "MengskVeterancyBattlecruiserMengsk", lv_level);
    }
    autoD467EEA1_g = UnitGroup("GhostMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD467EEA1_u = UnitGroupCount(autoD467EEA1_g, c_unitCountAll);
    for (;; autoD467EEA1_u -= 1) {
        autoD467EEA1_var = UnitGroupUnitFromEnd(autoD467EEA1_g, autoD467EEA1_u);
        if (autoD467EEA1_var == null) { break; }
        UnitXPSetCurrentLevel(autoD467EEA1_var, "MengskVeterancyGhostMengsk", lv_level);
    }
    auto5E63F316_g = UnitGroup("ThorMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E63F316_u = UnitGroupCount(auto5E63F316_g, c_unitCountAll);
    for (;; auto5E63F316_u -= 1) {
        auto5E63F316_var = UnitGroupUnitFromEnd(auto5E63F316_g, auto5E63F316_u);
        if (auto5E63F316_var == null) { break; }
        UnitXPSetCurrentLevel(auto5E63F316_var, "MengskVeterancyThorMengsk", lv_level);
    }
    auto3CFAA867_g = UnitGroup("ThorMengskSieged", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CFAA867_u = UnitGroupCount(auto3CFAA867_g, c_unitCountAll);
    for (;; auto3CFAA867_u -= 1) {
        auto3CFAA867_var = UnitGroupUnitFromEnd(auto3CFAA867_g, auto3CFAA867_u);
        if (auto3CFAA867_var == null) { break; }
        UnitXPSetCurrentLevel(auto3CFAA867_var, "MengskVeterancyThorMengsk", lv_level);
    }
    auto04D9E31A_g = UnitGroup("MarauderMengsk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04D9E31A_u = UnitGroupCount(auto04D9E31A_g, c_unitCountAll);
    for (;; auto04D9E31A_u -= 1) {
        auto04D9E31A_var = UnitGroupUnitFromEnd(auto04D9E31A_g, auto04D9E31A_u);
        if (auto04D9E31A_var == null) { break; }
        UnitXPSetCurrentLevel(auto04D9E31A_var, "MengskVeterancyMarauderMengsk", lv_level);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades_Init () {
    lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades = TriggerCreate("lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades_Func");
    TriggerAddEventUpgradeLevelChanged(lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM Mengsk Start Veterancy Level
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_gt_CMMengskStartVeterancyLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_level;
    int lv_player;

    // Automatic Variable Declarations
    string autoC89EFAA2_val;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(lv_player, "DominionEliteGuard122", c_techCountCompleteOnly) == 1)) {
        lv_level = 4;
    }
    else {
        if ((TechTreeUpgradeCount(lv_player, "DominionEliteGuard12", c_techCountCompleteOnly) == 1)) {
            lv_level = 3;
        }
        else {
            if ((TechTreeUpgradeCount(lv_player, "DominionEliteGuard1", c_techCountCompleteOnly) == 1)) {
                lv_level = 2;
            }
            else {
                return true;
            }
        }
    }
    autoC89EFAA2_val = UnitGetType(lv_unit);
    if (autoC89EFAA2_val == "VikingMengskFighter") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancyVikingMengsk", lv_level);
    }
    else if (autoC89EFAA2_val == "SiegeTankMengsk") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancySiegeTankMengsk", lv_level);
    }
    else if (autoC89EFAA2_val == "BattlecruiserMengsk") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancyBattlecruiserMengsk", lv_level);
    }
    else if (autoC89EFAA2_val == "GhostMengsk") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancyGhostMengsk", lv_level);
    }
    else if (autoC89EFAA2_val == "ThorMengsk") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancyThorMengsk", lv_level);
    }
    else if (autoC89EFAA2_val == "MarauderMengsk") {
        UnitXPSetCurrentLevel(lv_unit, "MengskVeterancyMarauderMengsk", lv_level);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib58D4CA39_gt_CMMengskStartVeterancyLevel_Init () {
    lib58D4CA39_gt_CMMengskStartVeterancyLevel = TriggerCreate("lib58D4CA39_gt_CMMengskStartVeterancyLevel_Func");
    TriggerEnable(lib58D4CA39_gt_CMMengskStartVeterancyLevel, false);
    TriggerAddEventPlayerEffectUsed(lib58D4CA39_gt_CMMengskStartVeterancyLevel, c_playerAny, "MengskVeteranTrigger");
}

void lib58D4CA39_InitTriggers () {
    lib58D4CA39_gt_Initialization_Init();
    lib58D4CA39_gt_InitializeKeironRace_Init();
    lib58D4CA39_gt_KeironUpgrades_Init();
    lib58D4CA39_gt_KeironAutoAperture_Init();
    lib58D4CA39_gt_AegisDied_Init();
    lib58D4CA39_gt_AegisCreated_Init();
    lib58D4CA39_gt_CM_Mengsk_Utility_Upgrades_Init();
    lib58D4CA39_gt_CMMengskStartVeterancyLevel_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib58D4CA39_InitLib_completed = false;

void lib58D4CA39_InitLib () {
    if (lib58D4CA39_InitLib_completed) {
        return;
    }

    lib58D4CA39_InitLib_completed = true;

    lib58D4CA39_InitLibraries();
    lib58D4CA39_InitTriggers();
}

