include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibGAw3"

include "LibGAwX_h"

//--------------------------------------------------------------------------------------------------
// Library: WarCraft III Extra
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGAwX_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libGAw3_InitVariables();
}

// Variable Initialization
bool libGAwX_InitVariables_completed = false;

void libGAwX_InitVariables () {
    int init_i;

    if (libGAwX_InitVariables_completed) {
        return;
    }

    libGAwX_InitVariables_completed = true;

    for (init_i = 0; init_i <= 6; init_i += 1) {
        libGAwX_gv_uIInventoryButtons[init_i] = c_invalidDialogControlId;
    }
    libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamIndex = TriggerEventParamName(libGAwX_gv_c_EventInventoryContainerDoubleClicked, libGAwX_gv_c_EventParamIdIndex);
    libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamItem = TriggerEventParamName(libGAwX_gv_c_EventInventoryContainerDoubleClicked, libGAwX_gv_c_EventParamIdItem);
    libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamUnit = TriggerEventParamName(libGAwX_gv_c_EventInventoryContainerDoubleClicked, libGAwX_gv_c_EventParamIdUnit);
    libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamPlayer = TriggerEventParamName(libGAwX_gv_c_EventInventoryContainerDoubleClicked, libGAwX_gv_c_EventParamIdPlayer);
    libGAwX_gv_defaultPoint = Point(0.0, 0.0);
    libGAwX_gv_allPlayers = PlayerGroupAll();
    libGAwX_gv_warningText = c_invalidDialogControlId;
    libGAwX_gv_warningDialog = c_invalidDialogId;
    libGAwX_gv_heroXPGrantTableValueCount = UserDataFieldValueCount("HeroKilledXPGrant", "XP");
    libGAwX_gv_heroXPGrantTableLastValue = UserDataGetInt("HeroKilledXPGrant", "Table", "XP", libGAwX_gv_heroXPGrantTableValueCount);
    libGAwX_gv_heroXPGrantTableExtraLevelFactor = UserDataGetInt("HeroKilledXPGrant", "Table", "ExtraLevelFactor", 1);
    libGAwX_gv_pushButton = c_invalidDialogControlId;
    libGAwX_gv_upkeepFrame = c_invalidDialogControlId;
    libGAwX_gv_upkeepThresholdLow = CatalogReferenceGetAsInt("Validator,UPKEEP_LOW,Value", c_playerAny);
    libGAwX_gv_upkeepThresholdHigh = CatalogReferenceGetAsInt("Validator,UPKEEP_HIGH,Value", c_playerAny);
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libGAwX_gv_playerUpkeepState[init_i] = "UPKEEP_NONE";
    }
    libGAwX_gv_creepCallForHelp = StringToFixed(CatalogReferenceGet("Game,Dflt,CallForHelpRadius", c_playerAny));
    libGAwX_gv_creepsRadiustoNoticeBuildingConstruction = UserDataGetFixed("GameBalance", "Creeps - Radius to Notice Building Construction", "Value", 1);
    libGAwX_gv_xPShareRadius = StringToFixed(CatalogReferenceGet("Behavior,AHer,SharedXPRadius[Kills]", c_playerAny));
    libGAwX_gv_gameCommandCard = c_invalidDialogControlId;
    libGAwX_gv_tODTimerLabel = c_invalidDialogControlId;
    libGAwX_gv_tODClock = c_invalidDialogControlId;
    libGAwX_gv_dayLenth = UserDataGetFixed("MiscData", "Misc", "DayLength", 1);
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libGAwX_gv_heroIconFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libGAwX_gv_heroIconFrameIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libGAwX_gv_heroIconFrameTarget[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libGAwX_gv_heroIconFrameModel[init_i] = c_invalidDialogControlId;
    }
    libGAwX_gv_goldTextColor = Color(100.00, 86.27, 0.00);
    libGAwX_gv_lumberTextColor = Color(0.00, 78.43, 31.37);
    libGAwX_gv_criticalStrikeTextColor = Color(100.00, 0.00, 0.00);
    libGAwX_gv_missTextSize = 28;
    libGAwX_gv_manaBurnTextSize = 28;
    libGAwX_gv_shadowStrikeTextSize = 28;
    libGAwX_gv_thornsAuraThornyShieldUserTypeInstanceCount = UserDataInstanceCount("AbilityDataThornsAuraThornyShield");
    libGAwX_gv_channelingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libGAwX_gv_playerTargetingGroups[init_i] = UnitGroupEmpty();
    }
    libGAwX_gv_acmgAbilCmd = AbilityCommand("Acmg", 0);
    libGAwX_gv_acmgBaseManaCost = StringToFixed(CatalogReferenceGet("Abil,Acmg,Cost[0].Vital[Energy]", c_playerAny));
    libGAwX_gv_acmgManaPerSummonedHitpoint = UserDataGetFixed("AbilityDataControlMagic", "Acmg", "Mana per Summoned Hitpoint", 1);
    libGAwX_gv_aHbhFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libGAwX_gv_aHbhController = "AHbhController";
    libGAwX_gv_abilityData_Defend_Current.lv_deflectFilter = UnitFilter(0, 0, 0, 0);
    libGAwX_gv_aHdrBonusAttLink = "AHdr_BonusMana";
    libGAwX_gv_adtnDispelRaidus = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "AdtnSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    libGAwX_gv_ashmFadeDuration = 1.5;
    libGAwX_gv_ashmFadeBehavior = "AshmDelay";
    libGAwX_gv_ashmCloakBehavior = "AshmB";
    libGAwX_gv_avngMarker = "AvngSummonMarker";
    libGAwX_gv_awarFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterAir) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libGAwX_gv_asplTargetFilter = UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)));
    libGAwX_gv_aOclTargetFilter = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)));
    libGAwX_gv_aOhwTargetFilter = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)));
    libGAwX_gv_aOmiBaseImages = 1;
    libGAwX_gv_aOmiExtraImagePerLevel = 1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libGAwX_gv_playerSkeletons[init_i] = UnitGroupEmpty();
    }
    libGAwX_gv_aUcbMarker = "AUcbSummonMarker";
    libGAwX_gv_aUlsReturnCmd = AbilityCommand("LocustReturn", 0);
    libGAwX_gv_aUlsHealCmd = AbilityCommand("LocustHeal", 0);
    libGAwX_gv_heroReviveCostMaxTime = UserDataGetFixed("GameBalance", "Hero Revive Cost - Max Time", "Value", 1);
    libGAwX_gv_heroReviveCostTimeLevelFactor = UserDataGetFixed("GameBalance", "Hero Revive Cost - Time Level Factor", "Value", 1);
    libGAwX_gv_aNdbFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libGAwX_gv_aNfaAbilCmd = AbilityCommand("ANfa", 0);
    libGAwX_gv_aNfaRegisterGroup = UnitGroupEmpty();
    libGAwX_gv_aCctFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libGAwX_gv_aCpvFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterAir) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libGAwX_gv_oldTOD = "00";
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Code Behind
//--------------------------------------------------------------------------------------------------
int GAw3_UnitCREval(unit u){
    return UserDataGetInt("UnitBalance",UnitGetType(u), "Level", 1)+UnitLevel(u);
}
static bool MatchingFunc(){
    return false;
}
static unit c_MatchUnit;
static unit MatchUnit(){return c_MatchUnit;}
unit GAw3_MatchUnit(){return c_MatchUnit;}
unitgroup GAw3_UnitGroupMatching(unitgroup ug, funcref<MatchingFunc> m){
    int i=1;
    int c=UnitGroupCount(ug,c_unitCountAll);
    unitgroup g=UnitGroupEmpty();
    for(;i<=c;i+=1){
        c_MatchUnit=UnitGroupUnit(ug,i);
        if(m()){UnitGroupAdd(g,c_MatchUnit);}
    }
    return g;
}
int GAw3_HostilePlayerGet(){
    return 15;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Custom Script
//--------------------------------------------------------------------------------------------------
fixed GAw3_TODStringToTODHour(string TOD){
    fixed th=0;
    string s=TOD;
    if(StringLength(s)>5){
        th=StringToFixed(StringSub(s,1,2))+StringToFixed(StringSub(s,4,5))/60;
    }else{
        th=StringToFixed(StringSub(s,1,2))/60;
    }
    return th;
}

void libGAwX_InitCustomScript () {
}

// Presets
// Functions
int libGAwX_gf_EventPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), libGAwX_gv_c_EventParamIdPlayer));
}

unit libGAwX_gf_EventUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), libGAwX_gv_c_EventParamIdUnit));
}

unit libGAwX_gf_EventUnit2 () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), libGAwX_gv_c_EventParamIdItem));
}

int libGAwX_gf_EventUnitInventoryItemContainer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), libGAwX_gv_c_EventParamIdIndex));
}

void libGAwX_gf_InventoryContainerIsDoubleClicked (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libGAwX_gv_c_EventInventoryContainerDoubleClicked);
}

unit libGAwX_gf_InventoryItemCarriedInContainerSlot (unit lp_unit, int lp_container, int lp_slot) {
    // Variable Declarations
    int lv_iContainer;
    int lv_iSlot;
    unit lv_iItem;
    unit lv_rItem;

    // Automatic Variable Declarations
    unitgroup auto9CAC7E37_g;
    int auto9CAC7E37_u;

    // Variable Initialization

    // Implementation
    auto9CAC7E37_g = UnitInventoryGroup(lp_unit);
    auto9CAC7E37_u = UnitGroupCount(auto9CAC7E37_g, c_unitCountAll);
    for (;; auto9CAC7E37_u -= 1) {
        lv_iItem = UnitGroupUnitFromEnd(auto9CAC7E37_g, auto9CAC7E37_u);
        if (lv_iItem == null) { break; }
        lv_iContainer = UnitInventoryContainer(lv_iItem);
        lv_iSlot = UnitInventorySlot(lv_iItem);
        if ((lp_slot == lv_iSlot) && (lp_container == lv_iContainer)) {
            lv_rItem = lv_iItem;
            break;
        }

    }
    return lv_rItem;
}

void libGAwX_gf_UnitDamage (unit lp_attacker, string lp_effect, unit lp_victim, fixed lp_bonus) {
    // Variable Declarations
    int lv_p;
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(lp_attacker);
    lv_attacker = lp_attacker;

    // Implementation
    if ((UnitIsAlive(lp_victim) == false)) {
        return ;
    }

    if ((UnitIsValid(lp_attacker) == false)) {
        lv_attacker = lp_victim;
    }

    UnitDamage(lp_attacker, lp_effect, lp_victim, lp_bonus);
}

int libGAwX_gf_UnitAbilityGetLevel (unit lp_unit, string lp_ability) {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitAbilityExists(lp_unit, lp_ability) == true)) {
        lv_level = (UnitAbilityGetLevel(lp_unit, lp_ability) + 1);
    }
    else if ((UnitHasBehavior2(lp_unit, ((lp_ability))) == true)) {
        lv_level = 1;
    }
    return lv_level;
}

bool libGAwX_gf_GiveItemToUnit (unit lp_u, unit lp_item) {
    // Variable Declarations
    order lv_dropOrder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropOrder = OrderTargetingUnit(AbilityCommand("TodGodInventory", 0), lp_u);

    // Implementation
    OrderSetTargetItem(lv_dropOrder, lp_item);
    UnitIssueOrder(libGAwX_gv_god, OrderTargetingUnit(AbilityCommand("TodGodInventory", 2), lp_item), c_orderQueueReplace);
    if ((UnitOrderIsValid(libGAwX_gv_god, lv_dropOrder) == true)) {
        UnitIssueOrder(libGAwX_gv_god, lv_dropOrder, c_orderQueueAddToEnd);
        return true;
    }
    else {
        UnitSetPosition(lp_item, UnitGetPosition(lp_u), false);
    }
    return false;
}

string libGAwX_gf_ItemTypeCooldownLink (string lp_itemType) {
    // Variable Declarations
    string lv_itemEntry;
    string lv_abilEntry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemEntry = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemType, "Item", c_playerAny);

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogItem, lv_itemEntry) == false)) {
        return "";
    }

    if ((CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemAbil")) {
        lv_abilEntry = CatalogFieldValueGet(c_gameCatalogItem, lp_itemType, "Abil", c_playerAny);
        return CatalogFieldValueGet(c_gameCatalogAbil, lv_abilEntry, "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
    }

    if (((CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemEffectInstant") || (CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemEffectTarget"))) {
        return CatalogFieldValueGet(c_gameCatalogItem, lv_itemEntry, "EffectCost.Cooldown.Link", c_playerAny);
    }

    return "";
}

string libGAwX_gf_ItemTypeCooldownLocation (string lp_itemType) {
    // Variable Declarations
    string lv_itemEntry;
    string lv_abilEntry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemEntry = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemType, "Item", c_playerAny);

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogItem, lv_itemEntry) == false)) {
        return "";
    }

    if ((CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemAbil")) {
        lv_abilEntry = CatalogFieldValueGet(c_gameCatalogItem, lp_itemType, "Abil", c_playerAny);
        return "";
    }

    if (((CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemEffectInstant") || (CatalogEntryScope(c_gameCatalogItem, lv_itemEntry) == "CItemEffectTarget"))) {
        return "";
    }

    return "";
}

bool libGAwX_gf_UnitTypeIsHero (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return UnitTypeTestFlag(lp_unitType, c_unitFlagHero);
}

int libGAwX_gf_UnitLevelEval (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    return (UserDataGetInt("UnitBalance", ((lv_unitType)), "Level", 1) + UnitLevel(lp_unit));
}

int libGAwX_gf_UnitCreepLevelEval (unit lp_unit) {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == libGAwX_gv_creepPlayer)) {
        lv_level = libGAwX_gf_UnitLevelEval(lp_unit);
    }

    return lv_level;
}

void libGAwX_gf_DamageWithMultiplier (unit lp_caster, unit lp_target, string lp_effect, fixed lp_extra, fixed lp_multiplier) {
    // Variable Declarations
    int lv_p;
    string lv_kind;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(lp_caster);
    lv_kind = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Kind", lv_p);

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "TriggerCritDamageMultiplier", (("Modification.DamageDealtFraction[" + lv_kind + "]")), lv_p, FixedToString(lp_multiplier, c_fixedPrecisionAny));
    UnitBehaviorAdd(lp_caster, "TriggerCritDamageMultiplier", lp_caster, 1);
    UnitDamage(lp_caster, lp_effect, lp_target, lp_extra);
    UnitBehaviorRemove(lp_caster, "TriggerCritDamageMultiplier", c_unitBehaviorCountAll);
}

void libGAwX_gf_SaveUnitReal (unit lp_u, string lp_marker, fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_UnitRemoveChargeUsed(lp_u, lp_marker);
    UnitAddChargeUsed(lp_u, lp_marker, lp_real);
}

fixed libGAwX_gf_GetUnitReal (unit lp_u, string lp_marker) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetChargeUsed(lp_u, lp_marker);
}

void libGAwX_gf_SetUnitTriggerMarker (unit lp_u, string lp_marker, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, (IntToString(UnitGetTag(lp_u)) + "_" + lp_marker), lp_trigger);
}

trigger libGAwX_gf_GetUnitTriggerMarker (unit lp_u, string lp_marker) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, (IntToString(UnitGetTag(lp_u)) + "_" + lp_marker));
}

void libGAwX_gf_ClearUnitTriggerMarker (unit lp_u, string lp_marker) {
    // Automatic Variable Declarations
    // Implementation
    DataTableValueRemove(true, (IntToString(UnitGetTag(lp_u)) + "_" + lp_marker));
}

fixed libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier (unit lp_unit, unit lp_tar, int lp_index, fixed lp_multiplier) {
    // Variable Declarations
    int lv_p;
    string lv_weapon;
    string lv_dmgEffect;
    string lv_effect;
    string lv_oldMin;
    string lv_oldRandom;
    string lv_oldFlagScaled;
    string lv_oldFlagUnscaled;
    string lv_oldFlagFraction;
    fixed lv_dmgMin;
    fixed lv_dmgMax;
    fixed lv_randomized;
    fixed lv_multiplied;
    int lv_att;
    fixed lv_dmgMinAtt;
    fixed lv_dmgMaxAtt;
    fixed lv_randomizedAtt;
    fixed lv_multipliedAtt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(lp_unit);
    lv_weapon = UnitWeaponGet(lp_unit, 1);
    lv_dmgEffect = (CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "DisplayEffect", lv_p));
    lv_effect = libGAwX_gf_WeaponEffect(lv_weapon, lv_p);
    lv_oldMin = CatalogFieldValueGet(c_gameCatalogEffect, lv_dmgEffect, "Amount", lv_p);
    lv_oldRandom = CatalogFieldValueGet(c_gameCatalogEffect, lv_dmgEffect, "Random", lv_p);
    lv_oldFlagScaled = CatalogFieldValueGet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoScaledDealtBonus]"), lv_p);
    lv_oldFlagUnscaled = CatalogFieldValueGet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoUnscaledDealtBonus]"), lv_p);
    lv_oldFlagFraction = CatalogFieldValueGet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoFractionDealtBonus]"), lv_p);
    lv_dmgMin = UnitWeaponDamage(lp_unit, lp_index, c_unitAttributeNone, true);
    lv_dmgMax = UnitWeaponDamage(lp_unit, lp_index, c_unitAttributeNone, false);
    lv_randomized = RandomFixed(lv_dmgMin, lv_dmgMax);
    lv_multiplied = (lv_randomized * lp_multiplier);
    lv_att = libGAwX_gf_UnitArmorTypeWC3(lp_tar);
    lv_dmgMinAtt = UnitWeaponDamage(lp_unit, lp_index, lv_att, true);
    lv_dmgMaxAtt = UnitWeaponDamage(lp_unit, lp_index, lv_att, false);
    lv_randomizedAtt = RandomFixed(lv_dmgMinAtt, lv_dmgMaxAtt);
    lv_multipliedAtt = (lv_randomizedAtt * lp_multiplier);

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, "Random", lv_p, "0");
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, "Amount", lv_p, FixedToString(lv_multipliedAtt, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoScaledDealtBonus]"), lv_p, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoUnscaledDealtBonus]"), lv_p, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoFractionDealtBonus]"), lv_p, "1");
    UnitCreateEffectUnit(lp_unit, lv_effect, lp_tar);
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, "Random", lv_p, lv_oldRandom);
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, "Amount", lv_p, lv_oldMin);
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoScaledDealtBonus]"), lv_p, lv_oldFlagScaled);
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoUnscaledDealtBonus]"), lv_p, lv_oldFlagUnscaled);
    CatalogFieldValueSet(c_gameCatalogEffect, lv_dmgEffect, ("Flags[NoFractionDealtBonus]"), lv_p, lv_oldFlagFraction);
    return lv_multiplied;
}

int libGAwX_gf_UnitArmorTypeWC3 (unit lp_unit) {
    // Variable Declarations
    string lv_armor;
    int lv_att;

    // Automatic Variable Declarations
    string autoD4539B3D_val;

    // Variable Initialization
    lv_armor = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "LifeArmorName", UnitGetOwner(lp_unit));

    // Implementation
    autoD4539B3D_val = lv_armor;
    if (autoD4539B3D_val == "ARMOR_DIVINE") {
        lv_att = c_unitAttributeRobotic;
    }
    else if (autoD4539B3D_val == "ARMOR_FORT") {
        lv_att = c_unitAttributeUser1;
    }
    else if (autoD4539B3D_val == "ARMOR_HERO") {
        lv_att = c_unitAttributeHeroic;
    }
    else if (autoD4539B3D_val == "ARMOR_LARGE") {
        lv_att = c_unitAttributeMassive;
    }
    else if (autoD4539B3D_val == "ARMOR_MEDIUM") {
        lv_att = c_unitAttributeArmored;
    }
    else if (autoD4539B3D_val == "ARMOR_NONE") {
        lv_att = c_unitAttributeBiological;
    }
    else if (autoD4539B3D_val == "ARMOR_SMALL") {
        lv_att = c_unitAttributeLight;
    }
    else if (autoD4539B3D_val == "ARMOR_NORMAL") {
        lv_att = c_unitAttributeNone;
    }
    else if (autoD4539B3D_val == "ARMOR_UNKNOWN") {
        lv_att = c_unitAttributeNone;
    }
    else {
        lv_att = c_unitAttributeNone;
    }
    return lv_att;
}

string libGAwX_gf_WeaponEffect (string lp_weapon, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "Effect", lp_player));
}

string libGAwX_gf_WeaponDisplayEffect (string lp_weapon, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "DisplayEffect", lp_player));
}

bool libGAwX_gf_UnitLifeIsFull (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        return true;
    }
    else {
        return false;
    }
}

void libGAwX_gf_HealUnit (unit lp_unit, fixed lp_amount, unit lp_caster) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(lp_caster);

    // Implementation
    CatalogReferenceSet("Effect,TriggerInstantHeal,RechargeVitalRate", EventPlayer(), FixedToString(lp_amount, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lp_caster, "TriggerInstantHeal", lp_unit);
}

fixed libGAwX_gf_CostOfAbility (string lp_ability, string lp_costType, int lp_level) {
    // Variable Declarations
    string lv_value;
    string lv_field;
    string lv_scope;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";
    lv_field = "";
    lv_scope = CatalogEntryScope(c_gameCatalogAbil, lp_ability);

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        lv_field = ("Cost." + lp_costType);
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        lv_field = (("Cost[" + IntToString(lp_level) + "].Vital[") + lp_costType + "]");
    }
    if ((lv_scope == "CAbilAugment")) {
        lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (("Cost.Vital[" + lp_costType + "]")), c_playerAny);
    }
    else {
        if ((CatalogFieldExists(lv_scope, "Cost") == true)) {
            lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (lv_field), c_playerAny);
        }
        else {
            lv_value = "0";
        }
    }
    return StringToFixed(lv_value);
}

void libGAwX_gf_UseSkinSetForPlayer (string lp_skinSet, int lp_player, bool lp_changeExistUnits) {
    // Variable Declarations
    string lv_modelOld;
    string lv_modelNew;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;

    // Automatic Variable Declarations
    int auto444FAB62_ae;
    const int auto444FAB62_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_modelNew = "";
    lv_c = UserDataInstanceCount(lp_skinSet);

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    auto444FAB62_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto444FAB62_ai >= 0 && lv_i <= auto444FAB62_ae) || (auto444FAB62_ai < 0 && lv_i >= auto444FAB62_ae) ) ; lv_i += auto444FAB62_ai ) {
        lv_entry = UserDataInstance(lp_skinSet, lv_i);
        lv_modelOld = (lv_entry);
        lv_modelNew = (UserDataGetModel(lp_skinSet, lv_entry, "New Skin", 1));
        if ((CatalogEntryIsValid(c_gameCatalogModel, lv_modelOld) == true) && (CatalogEntryIsValid(c_gameCatalogModel, lv_modelNew) == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogModel, lv_modelOld, lv_modelNew);
            if ((lp_changeExistUnits == true)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, (("ModelSwap " + lv_modelNew)), "Unit", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

void libGAwX_gf_UsePortraitSkinSetForPlayer (string lp_portraitSkinSet, int lp_player) {
    // Variable Declarations
    string lv_actor;
    string lv_modelNew;
    int lv_i;
    int lv_c;
    string lv_entry;

    // Automatic Variable Declarations
    int auto611930A7_ae;
    const int auto611930A7_ai = 1;

    // Variable Initialization
    lv_actor = "";
    lv_modelNew = "";
    lv_c = UserDataInstanceCount(lp_portraitSkinSet);

    // Implementation
    auto611930A7_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto611930A7_ai >= 0 && lv_i <= auto611930A7_ae) || (auto611930A7_ai < 0 && lv_i >= auto611930A7_ae) ) ; lv_i += auto611930A7_ai ) {
        lv_entry = UserDataInstance(lp_portraitSkinSet, lv_i);
        lv_actor = (lv_entry);
        lv_modelNew = (UserDataGetModel(lp_portraitSkinSet, lv_entry, "New Portrait Skin", 1));
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true) && (CatalogEntryIsValid(c_gameCatalogModel, lv_modelNew) == true) && (CatalogEntryScope(c_gameCatalogActor, lv_actor) == "CActorUnit")) {
            CatalogFieldValueSet(c_gameCatalogActor, lv_actor, "PortraitModel", lp_player, lv_modelNew);
        }

    }
}

void libGAwX_gf_UseWar3MeleeSetting () {
    // Variable Declarations
    unit lv_townHall;
    unit lv_goldmine;
    int lv_p;
    playergroup lv_pg;
    point lv_startloc;
    string lv_race;
    string lv_raceAtt;
    unitgroup lv_peons;
    unit lv_cloestTree;
    unitgroup lv_ghouls;

    // Automatic Variable Declarations
    playergroup auto373C6EF4_g;
    unitgroup auto11D568B2_g;
    int auto11D568B2_u;
    unit auto11D568B2_var;
    unitgroup auto785D9532_g;
    int auto785D9532_u;
    unit auto785D9532_var;
    string autoA87D0C6F_val;

    // Variable Initialization
    lv_pg = PlayerGroupActive();
    lv_peons = UnitGroupEmpty();
    lv_ghouls = UnitGroupEmpty();

    // Implementation
    MeleeInitResources();
    MeleeInitAI();
    MeleeInitOptions();
    libGAwX_gf__SetFreeHeroSlotFreeAll();
    TriggerEnable(libGAwX_gt__FreeTownPortalScroll, true);
    libGAwX_gf_SetWar3TimeOfDay(libGAwX_gv_bj_MELEE_STARTING_TOD);
    auto373C6EF4_g = lv_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto373C6EF4_g, lv_p);
        if (lv_p < 0) { break; }
        PlayerOptionOverride(lv_p, "selectuncontrolable", "1");
        PlayerOptionOverride(lv_p, "showcurrentordermodel", "0");
        lv_startloc = PlayerStartLocation(lv_p);
        if ((GameIsTestMap(false) == false)) {
            lv_raceAtt = GameAttributePlayerValue("[bnet:local/0.0/306256]1", lv_p);
            lv_race = libGAwX_gf_GenerateRaceFromRaceAttribute(lv_raceAtt);
            if ((PlayerType(lv_p) != c_playerTypeComputer)) {
                libGAwX_gf_SetPlayerUIRace(lv_p, lv_race);
            }
            else {
                libGAwX_gf_SetPlayerUIRace(lv_p, "Orc");
            }
        }

        lv_race = PlayerRace(lv_p);
        MeleeInitUnitsForPlayer(lv_p, lv_race, lv_startloc);
        lv_goldmine = UnitGroupClosestToPoint(UnitGroupSearch("ngol", c_playerAny, lv_startloc, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_startloc);
        lv_cloestTree = UnitGroupClosestToPoint(UnitGroupSearch(null, c_playerAny, lv_startloc, 10.0, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lv_startloc);
        lv_townHall = UnitGroupUnit(UnitGroup(null, lv_p, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        MeleeSetOption(lv_p, c_meleeOptionXPGainDisable, false);
        auto11D568B2_g = UnitGroupSearch(null, 15, lv_startloc, 10.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto11D568B2_u = UnitGroupCount(auto11D568B2_g, c_unitCountAll);
        for (;; auto11D568B2_u -= 1) {
            auto11D568B2_var = UnitGroupUnitFromEnd(auto11D568B2_g, auto11D568B2_u);
            if (auto11D568B2_var == null) { break; }
            UnitRemove(auto11D568B2_var);
        }
        auto785D9532_g = UnitGroupSearch("egol", lv_p, lv_startloc, 10.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto785D9532_u = UnitGroupCount(auto785D9532_g, c_unitCountAll);
        for (;; auto785D9532_u -= 1) {
            auto785D9532_var = UnitGroupUnitFromEnd(auto785D9532_g, auto785D9532_u);
            if (auto785D9532_var == null) { break; }
            UnitRemove(auto785D9532_var);
        }
        autoA87D0C6F_val = lv_race;
        if (autoA87D0C6F_val == "Human") {
            UnitBehaviorRemove(lv_townHall, "DisableCallToArms", 1);
        }
        else if (autoA87D0C6F_val == "NightElf") {
            UnitCreate(1, "egol", c_unitCreateIgnorePlacement, lv_p, UnitGetPosition(lv_goldmine), 270.0);
            lv_goldmine = UnitLastCreated();
            UnitBehaviorAdd(lv_townHall, "AentUniqueSummon", lv_goldmine, 1);
        }
        else if (autoA87D0C6F_val == "Undead") {
            UnitCreate(1, "ugol", c_unitCreateIgnorePlacement, lv_p, UnitGetPosition(lv_goldmine), 270.0);
            lv_goldmine = UnitLastCreated();
        }
        else {
        }
        lv_ghouls = UnitGroupSearch("ugho", lv_p, lv_startloc, 10.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupIssueOrder(UnitGroupSearch(null, lv_p, lv_startloc, 10.0, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, lv_goldmine), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_ghouls, OrderTargetingUnit(null, lv_cloestTree), c_orderQueueReplace);
        if ((UnitGetType(lv_townHall) != "unpl")) {
            UnitIssueOrder(lv_townHall, OrderTargetingUnit(null, lv_cloestTree), c_orderQueueReplace);
        }

    }
}

void libGAwX_gf_SetPlayerPushable (int lp_player, bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        PlayerSetAlliance(lp_player, c_allianceIdPushable, lp_player, false);
    }
    else {
        PlayerSetAlliance(lp_player, c_allianceIdPushable, lp_player, true);
    }
    libNtve_gf_SetDialogItemToggled(libGAwX_gv_pushButton, lp_state, PlayerGroupAll());
    libGAwX_gv_pushButtonState[lp_player] = lp_state;
}

void libGAwX_gf_TurnTimeOfDayClockOnOff (bool lp_option) {
    // Variable Declarations
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = libGAwX_gt_TODUpdateClock;

    // Implementation
    if ((lp_option == true)) {
        DialogControlSetVisible(libGAwX_gv_tODClock, PlayerGroupAll(), true);
        if ((TriggerActiveCount(lv_trigger) == 0)) {
            TriggerExecute(lv_trigger, true, false);
        }

    }
    else {
        DialogControlSetVisible(libGAwX_gv_tODClock, PlayerGroupAll(), false);
        TriggerStop(lv_trigger);
    }
}

void libGAwX_gf_PauseUnpauseTimeOfDayWar3 (bool lp_pause) {
    // Automatic Variable Declarations
    // Implementation
    GameTimeOfDayPause(lp_pause);
    if ((lp_pause == true)) {
        ActorSend(libGAwX_gv_tODActor, "AnimSetPaused TimeOfDay");
    }
    else {
        ActorSend(libGAwX_gv_tODActor, "AnimSetPaused TimeOfDay 0");
    }
}

void libGAwX_gf_TurnTimeOfDayLabelOnOff (bool lp_option) {
    // Automatic Variable Declarations
}

void libGAwX_gf_ShowHideArmyPushButton (playergroup lp_players, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libGAwX_gv_pushButton, lp_players, lp_visible);
}

void libGAwX_gf_ShowHideUpkeepLabel (playergroup lp_players, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libGAwX_gv_upkeepFrame, lp_players, lp_visible);
}

void libGAwX_gf_SetPlayerUIRace (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
}

string libGAwX_gf_GenerateRaceFromRaceAttribute (string lp_att) {
    // Variable Declarations
    string lv_ut;
    string lv_race;
    int lv_i;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ut = "RaceAttributeMapping";
    lv_race = UserDataGetGameLink(lv_ut, (lp_att), "Race", 1);
    lv_c = UserDataInstanceCount(lv_ut);

    // Implementation
    if ((lv_race == null)) {
        lv_race = UserDataGetGameLink(lv_ut, UserDataInstance(lv_ut, RandomInt(1, lv_c)), "Race", 1);
    }

    return lv_race;
}

void libGAwX_gf_GrantSharedXP (fixed lp_xP, int lp_player, unit lp_killer) {
    // Variable Declarations
    unit lv_dummyGranter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "XPGrantTriggerDummy", c_unitCreateIgnorePlacement, lp_player, libGAwX_gv_defaultPoint, 270.0);
    lv_dummyGranter = UnitLastCreated();
    UnitSetPropertyFixed(lv_dummyGranter, c_unitPropKillXP, lp_xP);
    UnitCreateEffectUnit(lp_killer, "KillXPGrant", lv_dummyGranter);
    UnitRemove(lv_dummyGranter);
}

trigger auto_libGAwX_gf_ShowWarningForPlayer_Trigger = null;
int auto_libGAwX_gf_ShowWarningForPlayer_lp_player;
text auto_libGAwX_gf_ShowWarningForPlayer_lp_msg;
soundlink auto_libGAwX_gf_ShowWarningForPlayer_lp_snd;

void libGAwX_gf_ShowWarningForPlayer (int lp_player, text lp_msg, soundlink lp_snd) {
    auto_libGAwX_gf_ShowWarningForPlayer_lp_player = lp_player;
    auto_libGAwX_gf_ShowWarningForPlayer_lp_msg = lp_msg;
    auto_libGAwX_gf_ShowWarningForPlayer_lp_snd = lp_snd;

    if (auto_libGAwX_gf_ShowWarningForPlayer_Trigger == null) {
        auto_libGAwX_gf_ShowWarningForPlayer_Trigger = TriggerCreate("auto_libGAwX_gf_ShowWarningForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGAwX_gf_ShowWarningForPlayer_Trigger, false, false);
}

bool auto_libGAwX_gf_ShowWarningForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGAwX_gf_ShowWarningForPlayer_lp_player;
    text lp_msg = auto_libGAwX_gf_ShowWarningForPlayer_lp_msg;
    soundlink lp_snd = auto_libGAwX_gf_ShowWarningForPlayer_lp_snd;

    // Automatic Variable Declarations
    // Implementation
    libGAwX_gv_warningFadeCritSection[lp_player] += 1;
    DialogSetVisible(libGAwX_gv_warningDialog, PlayerGroupSingle(lp_player), true);
    DialogControlFadeTransparency(libGAwX_gv_warningText, PlayerGroupSingle(lp_player), 0.0, 0.0);
    SoundPlay(lp_snd, PlayerGroupSingle(lp_player), 100.0, 0.0);
    libNtve_gf_SetDialogItemText(libGAwX_gv_warningText, lp_msg, PlayerGroupSingle(lp_player));
    Wait(2.0, c_timeGame);
    libGAwX_gv_warningFadeCritSection[lp_player] -= 1;
    if ((libGAwX_gv_warningFadeCritSection[lp_player] <= 0)) {
        libGAwX_gv_warningFadeCritSection[lp_player] = 0;
        DialogControlFadeTransparency(libGAwX_gv_warningText, PlayerGroupSingle(lp_player), 3.0, 100.0);
        Wait(3.0, c_timeGame);
        if ((libGAwX_gv_warningFadeCritSection[lp_player] <= 0)) {
            libGAwX_gv_warningFadeCritSection[lp_player] = 0;
            DialogSetVisible(libGAwX_gv_warningDialog, PlayerGroupSingle(lp_player), false);
        }

    }

    return true;
}

int libGAwX_gf_HeroTownHallLevel (int lp_p) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TechTreeUnitAliasCount(lp_p, "TWN3", c_techCountCompleteOnly) >= 1)) {
        return 3;
    }

    if ((TechTreeUnitAliasCount(lp_p, "TWN2", c_techCountCompleteOnly) >= 1)) {
        return 2;
    }

    return 1;
}

int libGAwX_gf_MeleeHeroTechCount (int lp_player) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    int lv_d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = TechTreeUnitAliasCount(lp_player, "HERO", c_techCountQueuedOrBetter);
    lv_b = TechTreeUnitAliasCount(lp_player, "HERO", c_techCountRevivableOnly);
    lv_c = TechTreeUnitAliasCount(lp_player, "HERO", c_techCountIncompleteOnly);
    lv_d = TechTreeBehaviorCount(lp_player, "AHer", c_techCountCompleteOnly);

    // Implementation
    return (lv_c + lv_d);
}

string libGAwX_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilCommand, int lp_p) {
    // Variable Declarations
    string lv_link;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_link = AbilityCommandGetAbility(lp_abilCommand);
    lv_index = AbilityCommandGetCommand(lp_abilCommand);

    // Implementation
    return UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogAbil, lv_link, "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(0) + "]", lp_p));
}

void libGAwX_gf__SetFreeHeroSlotFreeAll () {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto1E4B562F_g;

    // Variable Initialization

    // Implementation
    auto1E4B562F_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto1E4B562F_g, lv_p);
        if (lv_p < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "FreeHero", 1);
        TechTreeRestrictionsEnable(lv_p, true);
    }
}

void libGAwX_gf__UpdateHeroKilledXP (unit lp_hero) {
    // Variable Declarations
    int lv_level;
    int lv_extraLevel;
    fixed lv_xP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_level = UnitLevel(lp_hero);
    lv_extraLevel = (lv_level - libGAwX_gv_heroXPGrantTableValueCount);

    // Implementation
    if ((lv_extraLevel > 0)) {
        lv_xP = (libGAwX_gv_heroXPGrantTableLastValue + (libGAwX_gv_heroXPGrantTableExtraLevelFactor * lv_extraLevel));
    }
    else {
        lv_xP = UserDataGetInt("HeroKilledXPGrant", "Table", "XP", lv_level);
    }
    UnitSetPropertyFixed(lp_hero, c_unitPropKillXP, lv_xP);
}

void libGAwX_gf_SetPlayerUpkeepState (int lp_player, string lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state != libGAwX_gv_playerUpkeepState[lp_player])) {
        libGAwX_gv_playerUpkeepState[lp_player] = lp_state;
        libGAwX_gf_ShowWarningForPlayer(lp_player, StringExternal(("UI/" + (lp_state))), SoundLink("UpkeepLevel", -1));
        libNtve_gf_SetDialogItemText(libGAwX_gv_upkeepFrame, StringExternal(("UI/" + (lp_state))), PlayerGroupSingle(lp_player));
    }

}

void libGAwX_gf_SetWar3TimeOfDay (string lp_timeOfDay) {
    // Automatic Variable Declarations
    // Implementation
    GameTimeOfDaySet(lp_timeOfDay);
    libNtve_gf_SetAnimationCompletion(libGAwX_gv_tODActor, "TimeOfDay", (GAw3_TODStringToTODHour(lp_timeOfDay) / 0.24));
}

bool libGAwX_gf_IsDay () {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior(libGAwX_gv_god, libGAwX_gv_tODMarkerBehavior);
}

int libGAwX_gf_FirstUnusedHeroIconFrame (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto4A13705B_ae = 3;
    const int auto4A13705B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto4A13705B_ai >= 0 && lv_i <= auto4A13705B_ae) || (auto4A13705B_ai < 0 && lv_i >= auto4A13705B_ae) ) ; lv_i += auto4A13705B_ai ) {
        if ((UnitIsValid(libGAwX_gv_playerDisplayedHeroes[lp_player][lv_i]) == false)) {
            break;
        }

    }
    return lv_i;
}

int libGAwX_gf_UnitHeroIconFrameIndex (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetChargeUsed(lp_unit, "GAw3_HeroFrameIndex"));
}

void libGAwX_gf__UpdatePlayerHeroFrameTooltip (int lp_player, int lp_frameIndex) {
    // Variable Declarations
    unit lv_hero;
    string lv_uT;
    int lv_level;
    text lv_tooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libGAwX_gv_playerDisplayedHeroes[lp_player][lp_frameIndex];
    lv_uT = UnitGetType(lv_hero);
    lv_level = UnitLevel(lv_hero);
    TextExpressionSetToken("Param/Expression/lib_GAwX_2A76B6C0", "Name", StringExternal(CatalogFieldValueGet(c_gameCatalogActor, lv_uT, "HighlightTooltip", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_GAwX_2A76B6C0", "HotkeyIndex", IntToText((lp_frameIndex + 0)));
    TextExpressionSetToken("Param/Expression/lib_GAwX_2A76B6C0", "Level", IntToText(lv_level));
    TextExpressionSetToken("Param/Expression/lib_GAwX_2A76B6C0", "Type", StringExternal(CatalogFieldValueGet(c_gameCatalogActor, lv_uT, "HighlightSubTooltip", lp_player)));
    lv_tooltip = TextExpressionAssemble("Param/Expression/lib_GAwX_2A76B6C0");

    // Implementation
    libNtve_gf_SetDialogItemTooltip(libGAwX_gv_heroIconFrameTarget[lp_frameIndex], lv_tooltip, PlayerGroupSingle(lp_player));
}

void libGAwX_gf_SetUnitHeroIconFrame (unit lp_unit, int lp_player, int lp_frameIndex) {
    // Variable Declarations
    unit lv_oldUnit;
    int lv_oldIndex;
    string lv_uT;
    string lv_image;
    int lv_level;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oldUnit = libGAwX_gv_playerDisplayedHeroes[lp_player][lp_frameIndex];
    lv_oldIndex = libGAwX_gf_UnitHeroIconFrameIndex(lp_unit);
    lv_uT = UnitGetType(lp_unit);
    lv_image = (CatalogFieldValueGet(c_gameCatalogActor, lv_uT, "HeroIcon", lp_player));
    lv_level = UnitLevel(lp_unit);

    // Implementation
    if ((((lp_frameIndex >= 1) && (lp_frameIndex <= 3)) == true)) {
        if ((UnitIsValid(lv_oldUnit) == true)) {
            libNtve_gf_UnitRemoveChargeUsed(lv_oldUnit, "GAw3_HeroFrameIndex");
        }

        libNtve_gf_UnitRemoveChargeUsed(lp_unit, "GAw3_HeroFrameIndex");
        UnitAddChargeUsed(lp_unit, "GAw3_HeroFrameIndex", lp_frameIndex);
        libGAwX_gv_playerDisplayedHeroes[lp_player][lp_frameIndex] = lp_unit;
        libNtve_gf_SetDialogItemUnit(libGAwX_gv_heroIconFrame[lp_frameIndex], lp_unit, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemUnit(libGAwX_gv_heroIconFrameTarget[lp_frameIndex], lp_unit, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(libGAwX_gv_heroIconFrameIcon[lp_frameIndex], lv_image, PlayerGroupSingle(lp_player));
        libGAwX_gf__UpdatePlayerHeroFrameTooltip(lp_player, lp_frameIndex);
        DialogControlSetVisible(libGAwX_gv_heroIconFrame[lp_frameIndex], PlayerGroupSingle(lp_player), true);
    }

}

void libGAwX_gf_ClearPlayerHeroFrame (int lp_player, int lp_frameIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_frameIndex >= 1) && (lp_frameIndex <= 3)) == true)) {
        libGAwX_gv_playerDisplayedHeroes[lp_player][lp_frameIndex] = null;
        DialogControlSetVisible(libGAwX_gv_heroIconFrame[lp_frameIndex], PlayerGroupSingle(lp_player), false);
    }

}

void libGAwX_gf_CreateWC3StyleTextTag (text lp_text, color lp_color, playergroup lp_playerGroup, point lp_point, fixed lp_degree, fixed lp_lifeTime, fixed lp_fadeStart) {
    // Variable Declarations
    int lv_tag;
    fixed lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;
    lv_fadeTime = (lp_lifeTime - lp_fadeStart);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GAwX_913B2B32", "A", TextWithColor(lp_text, lp_color));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GAwX_913B2B32"), libGAwX_gv_textTagSize, lp_point, 1.0, true, true, lp_playerGroup);
    lv_tag = TextTagLastCreated();
    TextTagSetFogVisibility(lv_tag, c_visTypeFog);
    TextTagSetTextShadow(lv_tag, true);
    TextTagSetTime(lv_tag, c_textTagTimeDuration, lp_lifeTime);
    TextTagSetTime(lv_tag, c_textTagTimeFadeOut, lp_fadeStart);
    TextTagSetTime(lv_tag, c_textTagTimeFadeDuration, lv_fadeTime);
    TextTagSetVelocity(lv_tag, 0.8, lp_degree);
}

void libGAwX_gf_CreateCritTextTag (fixed lp_amount, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GAwX_352B44CB", "Amount", FixedToText(lp_amount, 0));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_352B44CB"), libGAwX_gv_criticalStrikeTextColor, PlayerGroupActive(), lp_point, libGAwX_gv_criticalStrikeTextVelocity, libGAwX_gv_criticalStrikeTextLifetime, libGAwX_gv_criticalStrikeTextFadeStart);
}

void libGAwX_gf_CreateWindWalkTag (fixed lp_amount, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GAwX_A4335A1F", "Amount", FixedToText(lp_amount, 0));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_A4335A1F"), libGAwX_gv_criticalStrikeTextColor, PlayerGroupActive(), lp_point, libGAwX_gv_criticalStrikeTextVelocity, libGAwX_gv_criticalStrikeTextLifetime, libGAwX_gv_criticalStrikeTextFadeStart);
}

void libGAwX_gf_CreateMissTextTag (point lp_point) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    TextTagCreate(StringExternal("Param/Value/lib_GAwX_0577D33A"), libGAwX_gv_missTextSize, lp_point, 1.0, true, false, PlayerGroupActive());
    lv_tag = TextTagLastCreated();
    TextTagFogofWar(lv_tag, true);
    TextTagSetFogVisibility(lv_tag, c_visTypeFog);
    TextTagSetTextShadow(lv_tag, true);
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 3.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeOut, 1.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeDuration, 2.0);
    TextTagSetVelocity(lv_tag, 0.8, 91.0);
    Wait(3.0, c_timeGame);
    TextTagDestroy(lv_tag);
}

void libGAwX_gf_CreateManaBurnTextTag (point lp_point, fixed lp_amount) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GAwX_72FA85CF", "A", FixedToText(lp_amount, 0));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GAwX_72FA85CF"), libGAwX_gv_manaBurnTextSize, lp_point, 1.0, true, false, PlayerGroupActive());
    lv_tag = TextTagLastCreated();
    TextTagFogofWar(lv_tag, true);
    TextTagSetFogVisibility(lv_tag, c_visTypeFog);
    TextTagSetTextShadow(lv_tag, true);
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 5.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeOut, 2.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeDuration, 3.0);
    TextTagSetVelocity(lv_tag, 0.8, 92.0);
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_tag);
}

void libGAwX_gf_CreateShadowStrikeTextTag (point lp_point, fixed lp_amount) {
    // Variable Declarations
    int lv_tag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tag = c_textTagNone;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GAwX_F4F1564D", "A", FixedToText(lp_amount, 0));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GAwX_F4F1564D"), libGAwX_gv_shadowStrikeTextSize, lp_point, 1.0, true, false, PlayerGroupActive());
    lv_tag = TextTagLastCreated();
    TextTagFogofWar(lv_tag, true);
    TextTagSetFogVisibility(lv_tag, c_visTypeFog);
    TextTagSetTextShadow(lv_tag, true);
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 5.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeOut, 2.0);
    TextTagSetTime(lv_tag, c_textTagTimeFadeDuration, 3.0);
    TextTagSetVelocity(lv_tag, 0.8, 92.0);
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_tag);
}

bool libGAwX_gf_UnitGroupChanneling (unitgroup lp_unitGroup) {
    // Automatic Variable Declarations
    unitgroup autoC158E4DC_g;
    int autoC158E4DC_u;
    unit autoC158E4DC_var;

    // Implementation
    autoC158E4DC_g = lp_unitGroup;
    autoC158E4DC_u = UnitGroupCount(autoC158E4DC_g, c_unitCountAll);
    for (;; autoC158E4DC_u -= 1) {
        autoC158E4DC_var = UnitGroupUnitFromEnd(autoC158E4DC_g, autoC158E4DC_u);
        if (autoC158E4DC_var == null) { break; }
        if ((UnitHasBehavior(autoC158E4DC_var, "ChannelingWar3Abilites") == false)) {
            return false;
        }

    }
    return true;
}

void libGAwX_gf_RemoveAPurgableBuffPositive (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "RemoveAPurgableBuffTrigger", lp_unit);
}

void libGAwX_gf_RemoveAPurgableDebuff (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "RemoveAPurgableDebuffTrigger", lp_unit);
}

void libGAwX_gf_RemoveAllPurgableBuffPositive (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "RemoveAllPurgableBuffTrigger", lp_unit);
}

void libGAwX_gf_RemoveAllPurgableDebuff (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "RemoveAllPurgableDebufTrigger", lp_unit);
}

void libGAwX_gf_RemoveAllNonPermanent (unit lp_unit) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    string lv_buff;
    string[33] lv_removeTarget;
    int lv_removeCount;

    // Automatic Variable Declarations
    int auto854B61E7_ae;
    const int auto854B61E7_ai = 1;
    int autoD0F708A8_ae;
    const int autoD0F708A8_ai = 1;

    // Variable Initialization
    lv_c = UnitBehaviorCountAll(lp_unit);

    // Implementation
    auto854B61E7_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto854B61E7_ai >= 0 && lv_i <= auto854B61E7_ae) || (auto854B61E7_ai < 0 && lv_i >= auto854B61E7_ae) ) ; lv_i += auto854B61E7_ai ) {
        lv_buff = UnitBehaviorGet(lp_unit, lv_i);
        if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_buff, "BehaviorFlags[Permanent]", c_playerAny) == "0") && (UnitBehaviorHasFlag(lv_buff, c_unitBehaviorFlagPermanent) == false) && (CatalogEntryScope(c_gameCatalogBehavior, lv_buff) == "CBehaviorBuff")) {
            lv_removeCount += 1;
            lv_removeTarget[lv_removeCount] = lv_buff;
        }

    }
    autoD0F708A8_ae = lv_removeCount;
    lv_i = 1;
    for ( ; ( (autoD0F708A8_ai >= 0 && lv_i <= autoD0F708A8_ae) || (autoD0F708A8_ai < 0 && lv_i >= autoD0F708A8_ae) ) ; lv_i += autoD0F708A8_ai ) {
        UnitBehaviorRemove(lp_unit, lv_removeTarget[lv_i], 0);
    }
}

void libGAwX_gf_TransferAPurgableBuff (unit lp_from, unit lp_to) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    string lv_buff;

    // Automatic Variable Declarations
    int auto42EBAEA4_ae;
    const int auto42EBAEA4_ai = 1;

    // Variable Initialization
    lv_c = UnitBehaviorCountAll(lp_from);

    // Implementation
    auto42EBAEA4_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto42EBAEA4_ai >= 0 && lv_i <= auto42EBAEA4_ae) || (auto42EBAEA4_ai < 0 && lv_i >= auto42EBAEA4_ae) ) ; lv_i += auto42EBAEA4_ai ) {
        lv_buff = UnitBehaviorGet(lp_from, lv_i);
        if ((libGAwX_gf_BehaviorIsPurgable(lv_buff) == true) && (libGAwX_gf_BehaviorIsPositive(lv_buff) == true)) {
            UnitBehaviorTransfer(lp_from, lp_to, lv_buff, 1);
            break;
        }

    }
}

void libGAwX_gf_TransferAPurgableDebuff (unit lp_from, unit lp_to) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    string lv_buff;

    // Automatic Variable Declarations
    int auto9DD74806_ae;
    const int auto9DD74806_ai = 1;

    // Variable Initialization
    lv_c = UnitBehaviorCountAll(lp_from);

    // Implementation
    auto9DD74806_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto9DD74806_ai >= 0 && lv_i <= auto9DD74806_ae) || (auto9DD74806_ai < 0 && lv_i >= auto9DD74806_ae) ) ; lv_i += auto9DD74806_ai ) {
        lv_buff = UnitBehaviorGet(lp_from, lv_i);
        if ((libGAwX_gf_BehaviorIsPurgable(lv_buff) == true) && (libGAwX_gf_BehaviorIsNegative(lv_buff) == true)) {
            UnitBehaviorTransfer(lp_from, lp_to, lv_buff, 1);
            break;
        }

    }
}

bool libGAwX_gf_BehaviorIsPurgable (string lp_buff) {
    // Automatic Variable Declarations
    // Implementation
    return UnitBehaviorHasFlag(lp_buff, c_unitBehaviorFlagTemporary);
}

bool libGAwX_gf_BehaviorIsPositive (string lp_buff) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogBehavior, lp_buff, "Alignment", c_playerAny) == "Positive")) {
        return true;
    }
    else {
        return false;
    }
}

bool libGAwX_gf_BehaviorIsNegative (string lp_buff) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogBehavior, lp_buff, "Alignment", c_playerAny) == "Negative")) {
        return true;
    }
    else {
        return false;
    }
}

void libGAwX_gf_AbilClassDefendLoadAbilityDataIntoTempRecord (string lp_instance) {
    // Automatic Variable Declarations
    // Implementation
    libGAwX_gv_abilityData_Defend_Current.lv_chanceToDeflectMagic = UserDataGetFixed(libGAwX_gv_abilClassDefendUserType, lp_instance, "Damage Taken (Magic)", 1);
    libGAwX_gv_abilityData_Defend_Current.lv_chanceToDeflectPiercing = UserDataGetFixed(libGAwX_gv_abilClassDefendUserType, lp_instance, "Chance To Deflect (Piercing)", 1);
    libGAwX_gv_abilityData_Defend_Current.lv_damageTakenMagic = UserDataGetFixed(libGAwX_gv_abilClassDefendUserType, lp_instance, "Damage Taken (Magic)", 1);
    libGAwX_gv_abilityData_Defend_Current.lv_damageTakenPiercing = UserDataGetFixed(libGAwX_gv_abilClassDefendUserType, lp_instance, "Damage Taken (Piercing)", 1);
    libGAwX_gv_abilityData_Defend_Current.lv_deflectEffect = UserDataGetGameLink(libGAwX_gv_abilClassDefendUserType, lp_instance, "Deflect Effect", 1);
    libGAwX_gv_abilityData_Defend_Current.lv_deflectFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(UserDataGetString(libGAwX_gv_abilClassDefendUserType, lp_instance, "Deflect Filter", 1));
}

void libGAwX_gf_ItemSetDroppable (unit lp_item, bool lp_droppable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_droppable == true)) {
        UnitBehaviorRemove(lp_item, "Undroppable", c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lp_item, "Undroppable", lp_item, 1);
    }
}

bool libGAwX_gf_ItemDroppable (unit lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return !(UnitHasBehavior2(lp_item, "Undroppable"));
}

void libGAwX_gf_MarkGroupUnits (unitgroup lp_ug) {
    // Variable Declarations
    unit lv_u;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int autoBFE4AC87_ae;
    const int autoBFE4AC87_ai = 1;

    // Variable Initialization
    lv_c = UnitGroupCount(lp_ug, c_unitCountAlive);

    // Implementation
    autoBFE4AC87_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoBFE4AC87_ai >= 0 && lv_i <= autoBFE4AC87_ae) || (autoBFE4AC87_ai < 0 && lv_i >= autoBFE4AC87_ae) ) ; lv_i += autoBFE4AC87_ai ) {
        lv_u = UnitGroupUnit(lp_ug, lv_i);
        TextTagDestroy(libHots_gf_TextTagForUnit(lv_u, 1));
        TextTagCreate(IntToText(lv_i), 24, libGAwX_gv_defaultPoint, 1.0, true, true, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), lv_u, 1.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TriggerDebugOutput(1, FixedToText(UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny), true);
        libHots_gf_StoreTextTagForUnit(lv_u, 1, TextTagLastCreated());
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Container - Hook
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_InventoryContainerHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto2101972E_ae = 6;
    const int auto2101972E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto2101972E_ai >= 0 && lv_i <= auto2101972E_ae) || (auto2101972E_ai < 0 && lv_i >= auto2101972E_ae) ) ; lv_i += auto2101972E_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("$InventoryBag" + IntToString((lv_i - 1))));
        libGAwX_gv_uIInventoryButtons[lv_i] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libGAwX_gt_InventoryContainerDoubleClicked, c_playerAny, libGAwX_gv_uIInventoryButtons[lv_i], c_triggerControlEventTypeDoubleClick);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_InventoryContainerHook_Init () {
    libGAwX_gt_InventoryContainerHook = TriggerCreate("libGAwX_gt_InventoryContainerHook_Func");
    TriggerAddEventMapInit(libGAwX_gt_InventoryContainerHook);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Container - Double Clicked
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_InventoryContainerDoubleClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    int lv_usedDialogItem;
    int lv_i;
    unit lv_item;
    int lv_iContainer;

    // Automatic Variable Declarations
    const int auto698E5096_ae = 6;
    const int auto698E5096_ai = 1;

    // Variable Initialization
    lv_u = UnitGroupUnit(libGAw3_gf_ActiveSubgroupUnits(EventPlayer()), 1);
    lv_p = EventPlayer();
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iContainer = 1;
    for ( ; ( (auto698E5096_ai >= 0 && lv_iContainer <= auto698E5096_ae) || (auto698E5096_ai < 0 && lv_iContainer >= auto698E5096_ae) ) ; lv_iContainer += auto698E5096_ai ) {
        if ((lv_usedDialogItem == libGAwX_gv_uIInventoryButtons[lv_iContainer])) {
            break;
        }

    }
    lv_item = libGAwX_gf_InventoryItemCarriedInContainerSlot(lv_u, lv_iContainer, 65);
    DataTableSetUnit(false, libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamUnit, lv_u);
    DataTableSetInt(false, libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamIndex, lv_iContainer);
    DataTableSetInt(false, libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamPlayer, lv_p);
    DataTableSetUnit(false, libGAwX_gv_c_EventParamInventoryContainerDoubleClickedParamItem, lv_item);
    TriggerSendEvent(libGAwX_gv_c_EventInventoryContainerDoubleClicked);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_InventoryContainerDoubleClicked_Init () {
    libGAwX_gt_InventoryContainerDoubleClicked = TriggerCreate("libGAwX_gt_InventoryContainerDoubleClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClockTempFix
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ClockTempFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto972AA5FD_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto972AA5FD_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto972AA5FD_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerRace(lv_p) == "Human")) {
            libNtve_gf_SetDialogItemUnitLink(libGAwX_gv_tODClock, "TimeIndicatorHuman", PlayerGroupSingle(lv_p));
        }
        else if ((PlayerRace(lv_p) == "Undead")) {
            libNtve_gf_SetDialogItemUnitLink(libGAwX_gv_tODClock, "TimeIndicatorUndead", PlayerGroupSingle(lv_p));
        }
        else if ((PlayerRace(lv_p) == "NightElf")) {
            libNtve_gf_SetDialogItemUnitLink(libGAwX_gv_tODClock, "TimeIndicatorNightElf", PlayerGroupSingle(lv_p));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ClockTempFix_Init () {
    libGAwX_gt_ClockTempFix = TriggerCreate("libGAwX_gt_ClockTempFix_Func");
    TriggerAddEventTimeElapsed(libGAwX_gt_ClockTempFix, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Warn Player
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_InitWarnPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "Warning", PlayerGroupAll());
    libGAwX_gv_warningText = lv_racingStartTEXT;
    libNtve_gf_SetDialogItemRenderPriority(libGAwX_gv_warningText, 1512, PlayerGroupAll());
    libGAwX_gv_warningDialog = lv_racingStartDIALOG;
    libNtve_gf_SetDialogItemAcceptMouse(libGAwX_gv_warningText, false, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_InitWarnPlayer_Init () {
    libGAwX_gt_InitWarnPlayer = TriggerCreate("libGAwX_gt_InitWarnPlayer_Func");
    TriggerAddEventMapInit(libGAwX_gt_InitWarnPlayer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: God Set
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_GodSet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "TODMarker", c_unitCreateIgnorePlacement, 0, Point(0.0, 0.0), 270.0);
    libGAwX_gv_god = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_GodSet_Init () {
    libGAwX_gt_GodSet = TriggerCreate("libGAwX_gt_GodSet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Non-Hero Item Death Drop
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_NonHeroItemDeathDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unitgroup lv_group;
    unit lv_item;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto4E50BF6E_g;
    int auto4E50BF6E_u;

    // Variable Initialization
    lv_u = EventUnit();
    lv_group = UnitInventoryGroup(lv_u);
    lv_point = UnitGetPosition(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_u) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E50BF6E_g = lv_group;
    auto4E50BF6E_u = UnitGroupCount(auto4E50BF6E_g, c_unitCountAll);
    for (;; auto4E50BF6E_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(auto4E50BF6E_g, auto4E50BF6E_u);
        if (lv_item == null) { break; }
        UnitSetPosition(lv_item, UnitTypePlacementFromPoint("ckng", 0, lv_point, 5.0), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_NonHeroItemDeathDrop_Init () {
    libGAwX_gt_NonHeroItemDeathDrop = TriggerCreate("libGAwX_gt_NonHeroItemDeathDrop_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_NonHeroItemDeathDrop, null, "NonHeroCarrierDeath", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusion Persist
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_IllusionPersist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, "IllusionPersist", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_IllusionPersist_Init () {
    libGAwX_gt_IllusionPersist = TriggerCreate("libGAwX_gt_IllusionPersist_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_IllusionPersist, null, "BIil", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_IllusionPersist, null, "BOmi", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Override
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Override_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    playergroup auto71B3A3EC_g;

    // Variable Initialization
    lv_pg = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    auto71B3A3EC_g = lv_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto71B3A3EC_g, lv_p);
        if (lv_p < 0) { break; }
        PlayerOptionOverride(lv_p, "selectuncontrolable", "1");
        PlayerOptionOverride(lv_p, "teamcoloredlifestatus", "0");
        PlayerOptionOverride(lv_p, "gametooltips", "1");
        PlayerOptionOverride(lv_p, "showcurrentordermodel", "0");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Override_Init () {
    libGAwX_gt_Override = TriggerCreate("libGAwX_gt_Override_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HD Skin
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HDSkin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;
    string lv_att;

    // Automatic Variable Declarations
    playergroup auto4183F6F7_g;

    // Variable Initialization
    lv_pg = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    auto4183F6F7_g = lv_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto4183F6F7_g, lv_p);
        if (lv_p < 0) { break; }
        libGAwX_gf_UseSkinSetForPlayer("SkinSetWar3HD", lv_p, false);
        libGAwX_gf_UsePortraitSkinSetForPlayer("PortraitSkinSetWar3HD", lv_p);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HDSkin_Init () {
    libGAwX_gt_HDSkin = TriggerCreate("libGAwX_gt_HDSkin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mod Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ModInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto978116DE_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGAwX_gt_GodSet, true, false);
    TriggerExecute(libGAwX_gt_TODInit, true, false);
    TriggerExecute(libGAwX_gt_HeroFrameHook, true, false);
    TriggerExecute(libGAwX_gt_CmdCardHook, true, false);
    TriggerExecute(libGAwX_gt_TOOAbsorbInit, true, false);
    TriggerExecute(libGAwX_gt_ThornsAuraThornyShieldInitRegister, true, false);
    TriggerExecute(libGAwX_gt_AbilDataInit, true, false);
    TriggerExecute(libGAwX_gt_CreepInit, true, false);
    TriggerExecute(libGAwX_gt_HDSkin, true, false);
    TriggerExecute(libGAwX_gt_Override, true, false);
    Wait(0.125, c_timeGame);
    TriggerEnable(libGAwX_gt_DayWarning, true);
    TriggerEnable(libGAwX_gt_NightWarning, true);
    if ((libGAwX_gf_IsDay() == false)) {
        auto978116DE_g = libGAwX_gv_allPlayers;
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(auto978116DE_g, lv_p);
            if (lv_p < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "Night", 1);
        }
    }

    if ((PlayerType(15) == c_playerTypeHostile)) {
        VisRevealerCreate(15, RegionEntireMap());
        VisRevealerEnable(VisRevealerLastCreated(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ModInit_Init () {
    libGAwX_gt_ModInit = TriggerCreate("libGAwX_gt_ModInit_Func");
    TriggerAddEventMapInit(libGAwX_gt_ModInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lumber Mill
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_LumberMill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mill;
    int lv_player;
    point lv_point;
    unitgroup lv_workers;
    unit lv_tree;
    unit lv_worker;

    // Automatic Variable Declarations
    unitgroup auto313178FE_g;
    int auto313178FE_u;

    // Variable Initialization
    lv_mill = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_point = UnitGetPosition(lv_mill);
    lv_workers = UnitGroup(null, lv_player, RegionCircle(lv_point, 3.0), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_tree = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_point, 8.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lv_point);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    auto313178FE_g = lv_workers;
    auto313178FE_u = UnitGroupCount(auto313178FE_g, c_unitCountAll);
    for (;; auto313178FE_u -= 1) {
        lv_worker = UnitGroupUnitFromEnd(auto313178FE_g, auto313178FE_u);
        if (lv_worker == null) { break; }
        if ((UnitOrderCount(lv_worker) == 0)) {
            UnitIssueOrder(lv_worker, OrderTargetingUnit(AbilityCommand("Ahar", 0), lv_tree), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_LumberMill_Init () {
    libGAwX_gt_LumberMill = TriggerCreate("libGAwX_gt_LumberMill_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_LumberMill, c_playerAny, "LumberMillBirthNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back To Work Mark
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BackToWorkMark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_tree;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_worker = EventUnit();
    lv_tree = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitOrderIsAcquired(lv_worker, 0) == false))) {
            return false;
        }

        if (!((UnitIsValid(lv_worker) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_tree) == false)) {
        Wait(0.0625, c_timeGame);
        lv_tree = OrderGetTargetUnit(UnitOrder(lv_worker, 0));
    }

    if ((UnitIsValid(lv_tree) == true)) {
        DataTableSetPoint(true, (IntToString(UnitGetTag(lv_worker)) + "_BackToWorkHarvestTarget"), UnitGetPosition(lv_tree));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BackToWorkMark_Init () {
    libGAwX_gt_BackToWorkMark = TriggerCreate("libGAwX_gt_BackToWorkMark_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_BackToWorkMark, null, AbilityCommand("Ahar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back To Work Effect
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BackToWorkEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    point lv_point;
    unit lv_tree;
    unitgroup lv_resourceGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_worker = EventUnit();
    lv_resourceGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((DataTableValueExists(true, (IntToString(UnitGetTag(lv_worker)) + "_BackToWorkHarvestTarget")) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsValid(lv_worker) == true) && (UnitOrderCount(lv_worker) == 0)) {
        lv_point = DataTableGetPoint(true, (IntToString(UnitGetTag(lv_worker)) + "_BackToWorkHarvestTarget"));
        UnitGroupAddUnitGroup(lv_resourceGroup, UnitGroup(null, c_playerAny, RegionCircle(lv_point, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_resourceGroup, UnitGroup(null, c_playerAny, RegionCircle(lv_point, 10.0), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_tree = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(lv_point, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_point);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_worker), lv_point) < 16.0)) {
            UnitIssueOrder(lv_worker, OrderTargetingUnit(AbilityCommand("Ahar", 0), lv_tree), c_orderQueueReplace);
        }
        else {
            DataTableValueRemove(true, (IntToString(UnitGetTag(lv_worker)) + "_BackToWorkHarvestTarget"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BackToWorkEffect_Init () {
    libGAwX_gt_BackToWorkEffect = TriggerCreate("libGAwX_gt_BackToWorkEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_BackToWorkEffect, null, "BattleStationsPeon", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitAbility(libGAwX_gt_BackToWorkEffect, null, AbilityCommand("MorphToPeasant", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_BackToWorkEffect, null, AbilityCommand("MorphToPeasantAuto", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call To Arm Drop Resource
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CallToArmDropResource_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    int lv_resource;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_worker = EventUnit();
    lv_p = UnitGetOwner(lv_worker);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resource = UnitGetPropertyInt(lv_worker, c_unitPropCarriedCustom, c_unitPropCurrent);
    if ((lv_resource > 0)) {
        UnitIssueOrder(lv_worker, Order(AbilityCommand("Ahar", 1)), c_orderQueueAddToFront);
        UnitBehaviorRemove(lv_worker, "CarryLumber", c_unitBehaviorCountAll);
        PlayerModifyPropertyInt(lv_p, c_playerPropCustom, c_playerPropOperAdd, lv_resource);
        PlayerModifyPropertyInt(lv_p, c_playerPropCustomCollected, c_playerPropOperAdd, lv_resource);
        UnitSetPropertyFixed(lv_worker, c_unitPropCarriedCustom, 0.0);
    }

    lv_resource = UnitGetPropertyInt(lv_worker, c_unitPropCarriedTerrazine, c_unitPropCurrent);
    if ((lv_resource > 0)) {
        UnitIssueOrder(lv_worker, Order(AbilityCommand("Ahar", 1)), c_orderQueueAddToFront);
        UnitBehaviorRemove(lv_worker, "CarryGold", c_unitBehaviorCountAll);
        PlayerModifyPropertyInt(lv_p, c_playerPropTerrazine, c_playerPropOperAdd, lv_resource);
        PlayerModifyPropertyInt(lv_p, c_playerPropTerrazineCollected, c_playerPropOperAdd, lv_resource);
        UnitSetPropertyFixed(lv_worker, c_unitPropCarriedTerrazine, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CallToArmDropResource_Init () {
    libGAwX_gt_CallToArmDropResource = TriggerCreate("libGAwX_gt_CallToArmDropResource_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_CallToArmDropResource, null, "Bmil", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Hero Slot Change
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_MeleeHeroSlotChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "MeleeHeroSlot", libGAwX_gf_HeroTownHallLevel(lv_p));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_MeleeHeroSlotChange_Init () {
    libGAwX_gt_MeleeHeroSlotChange = TriggerCreate("libGAwX_gt_MeleeHeroSlotChange_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeTohkee", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeTohcas", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeToostr", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeToofrt", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeTounp1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeTounp2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeToetoa", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_MeleeHeroSlotChange, null, AbilityCommand("UpgradeToetoe", 0), c_unitAbilStageComplete, false);
    libGAw3_gf_AnyUnitBehaviorActivateCountPreplaced(libGAwX_gt_MeleeHeroSlotChange, "TownHallEventTracker");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_MeleeHeroSlotChange, null, "TownHallEventTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Training Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroTrainingCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_count;
    string lv_freeherotech;
    int lv_townlevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_count = libGAwX_gf_MeleeHeroTechCount(lv_p);
    lv_freeherotech = "FreeHero";
    lv_townlevel = libGAwX_gf_HeroTownHallLevel(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_count >= 1)) {
        if ((TechTreeUpgradeCount(lv_p, "FreeHero", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lv_freeherotech, 0);
        }

    }
    else {
        if ((TechTreeUpgradeCount(lv_p, "FreeHero", c_techCountCompleteOnly) == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lv_freeherotech, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroTrainingCheck_Init () {
    libGAwX_gt_HeroTrainingCheck = TriggerCreate("libGAwX_gt_HeroTrainingCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusion Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_IllusionCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, "NoTechCount", lv_u, 1);
    TriggerExecute(libGAwX_gt_HeroTrainingCheck, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_IllusionCheck_Init () {
    libGAwX_gt_IllusionCheck = TriggerCreate("libGAwX_gt_IllusionCheck_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_IllusionCheck, null, "BOmi", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_IllusionCheck, null, "BIil", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Queue
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libGAwX_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(lv_p, lv_uT, false);
    TriggerExecute(libGAwX_gt_HeroTrainingCheck, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroQueue_Init () {
    libGAwX_gt_HeroQueue = TriggerCreate("libGAwX_gt_HeroQueue_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_HeroQueue, null, AbilityCommand("haltTrain", 255), c_unitAbilStageQueue, true);
    TriggerAddEventUnitAbility(libGAwX_gt_HeroQueue, null, AbilityCommand("haltTrain", 255), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libGAwX_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(lv_p, lv_uT, true);
    TriggerExecute(libGAwX_gt_HeroTrainingCheck, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroCancel_Init () {
    libGAwX_gt_HeroCancel = TriggerCreate("libGAwX_gt_HeroCancel_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_HeroCancel, null, AbilityCommand("haltTrain", 255), c_unitAbilStageCancel, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Free Town Portal Scroll
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt__FreeTownPortalScroll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_type = libNtve_gf_TriggeringProgressUnitType();
    lv_unit = EventUnitProgressUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((libGAwX_gv_freeTownPortalScrollUsed[lv_p] == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(lv_type, c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(lv_unit, "stwp");
    libGAwX_gv_freeTownPortalScrollUsed[lv_p] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt__FreeTownPortalScroll_Init () {
    libGAwX_gt__FreeTownPortalScroll = TriggerCreate("libGAwX_gt__FreeTownPortalScroll_Func");
    TriggerEnable(libGAwX_gt__FreeTownPortalScroll, false);
    TriggerAddEventUnitTrainProgress(libGAwX_gt__FreeTownPortalScroll, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Gain Level Killed XP Grant Update
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroGainLevelKilledXPGrantUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf__UpdateHeroKilledXP(lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroGainLevelKilledXPGrantUpdate_Init () {
    libGAwX_gt_HeroGainLevelKilledXPGrantUpdate = TriggerCreate("libGAwX_gt_HeroGainLevelKilledXPGrantUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_HeroGainLevelKilledXPGrantUpdate, null, "AHer", c_unitBehaviorChangeAny);
    TriggerAddEventUnitGainLevel(libGAwX_gt_HeroGainLevelKilledXPGrantUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Loss Level Killed XP Grant Update
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroLossLevelKilledXPGrantUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf__UpdateHeroKilledXP(lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroLossLevelKilledXPGrantUpdate_Init () {
    libGAwX_gt_HeroLossLevelKilledXPGrantUpdate = TriggerCreate("libGAwX_gt_HeroLossLevelKilledXPGrantUpdate_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_HeroLossLevelKilledXPGrantUpdate, c_playerAny, "LevelLossEvent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpkeepFrameInit
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_UpkeepFrameInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/UpkeepLabel");
    libGAwX_gv_upkeepFrame = DialogControlLastCreated();
    DialogControlSetVisible(libGAwX_gv_upkeepFrame, PlayerGroupActive(), true);
    DialogControlSetObservedType(libGAwX_gv_upkeepFrame, c_triggerObservedTypeDefaultObservedPlayerId);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_UpkeepFrameInit_Init () {
    libGAwX_gt_UpkeepFrameInit = TriggerCreate("libGAwX_gt_UpkeepFrameInit_Func");
    TriggerAddEventMapInit(libGAwX_gt_UpkeepFrameInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upkeep
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Upkeep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_food;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_food = PlayerGetPropertyInt(lv_p, c_playerPropSuppliesUsed);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_food <= libGAwX_gv_upkeepThresholdLow)) {
        libGAwX_gf_SetPlayerUpkeepState(lv_p, "UPKEEP_NONE");
    }
    else {
        if ((lv_food <= libGAwX_gv_upkeepThresholdHigh)) {
            libGAwX_gf_SetPlayerUpkeepState(lv_p, "UPKEEP_LOW");
        }
        else {
            libGAwX_gf_SetPlayerUpkeepState(lv_p, "UPKEEP_HIGH");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Upkeep_Init () {
    libGAwX_gt_Upkeep = TriggerCreate("libGAwX_gt_Upkeep_Func");
    TriggerAddEventPlayerPropChange(libGAwX_gt_Upkeep, c_playerAny, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CreepInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGAwX_gt_CreepAlertXPGoldPrePlacedMarker, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CreepInit_Init () {
    libGAwX_gt_CreepInit = TriggerCreate("libGAwX_gt_CreepInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Alert/XP/Gold Pre-Placed Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CreepAlertXPGoldPrePlacedMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoED1811BF_g;
    int autoED1811BF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoED1811BF_g = UnitGroup(null, libGAwX_gv_creepPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED1811BF_u = UnitGroupCount(autoED1811BF_g, c_unitCountAll);
    for (;; autoED1811BF_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoED1811BF_g, autoED1811BF_u);
        if (lv_u == null) { break; }
        UnitBehaviorAdd(lv_u, libGAwX_gv_creepSleeperAlertBehavior, lv_u, 1);
        UnitBehaviorAdd(lv_u, "CreepConjoin", lv_u, 1);
        UnitBehaviorAdd(lv_u, libGAwX_gv_creepNoGrantXPBehavior, lv_u, 1);
        GAw3_AddEventUnitDamaged(libGAwX_gt_CreepXPGold, lv_u, c_unitDamageTypeAny, c_unitDamageFatal, null);
        UnitBehaviorAdd(lv_u, libGAwX_gv_creepLeashBehavior, lv_u, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CreepAlertXPGoldPrePlacedMarker_Init () {
    libGAwX_gt_CreepAlertXPGoldPrePlacedMarker = TriggerCreate("libGAwX_gt_CreepAlertXPGoldPrePlacedMarker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Alert/XP/Gold Summoned Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CreepAlertXPGoldSummonedMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libGAwX_gv_creepSleeperAlertBehavior, lv_u, 1);
    UnitBehaviorAdd(lv_u, libGAwX_gv_creepNoGrantXPBehavior, lv_u, 1);
    UnitBehaviorAdd(lv_u, libGAwX_gv_creepLeashBehavior, lv_u, 1);
    GAw3_AddEventUnitDamaged(libGAwX_gt_CreepXPGold, lv_u, c_unitDamageTypeAny, c_unitDamageFatal, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CreepAlertXPGoldSummonedMarker_Init () {
    libGAwX_gt_CreepAlertXPGoldSummonedMarker = TriggerCreate("libGAwX_gt_CreepAlertXPGoldSummonedMarker_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_CreepAlertXPGoldSummonedMarker, null, "CreepUnitTriggerNotice", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wake Up
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_WakeUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caller;
    int lv_player;
    unit lv_u;
    unitgroup lv_uG;
    unit lv_enemy;

    // Automatic Variable Declarations
    unitgroup auto814F8EE3_g;
    int auto814F8EE3_u;

    // Variable Initialization
    lv_caller = EventUnit();
    lv_player = libGAwX_gv_creepPlayer;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caller) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_caller, "CreepConjoin") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_uG = UnitConjoinedGroup(lv_caller, "CreepConjoin");
    lv_enemy = UnitGroupClosestToPoint(UnitGroupSearch(null, lv_player, UnitGetPosition(lv_caller), libGAwX_gv_neutralUseNotifyRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_caller));
    auto814F8EE3_g = lv_uG;
    auto814F8EE3_u = UnitGroupCount(auto814F8EE3_g, c_unitCountAll);
    for (;; auto814F8EE3_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto814F8EE3_g, auto814F8EE3_u);
        if (lv_u == null) { break; }
        UnitBehaviorAdd(lv_u, "ACspSleepSuppress", lv_u, 1);
        UnitCreateEffectUnit(lv_enemy, "TriggerWakeUpdamage", lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_WakeUp_Init () {
    libGAwX_gt_WakeUp = TriggerCreate("libGAwX_gt_WakeUp_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_WakeUp, null, libGAwX_gv_creepSleeperAlertBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Construction Wake Up
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BuildingConstructionWakeUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_enemy;
    unitgroup lv_ug;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoD879D134_g;
    int autoD879D134_u;

    // Variable Initialization
    lv_enemy = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libGAwX_gf_IsDay() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_enemy) == false)) {
        lv_enemy = EventUnitProgressUnit();
    }

    lv_ug = UnitGroupSearch(null, libGAwX_gv_creepPlayer, UnitGetPosition(lv_enemy), libGAwX_gv_creepsRadiustoNoticeBuildingConstruction, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD879D134_g = lv_ug;
    autoD879D134_u = UnitGroupCount(autoD879D134_g, c_unitCountAll);
    for (;; autoD879D134_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoD879D134_g, autoD879D134_u);
        if (lv_u == null) { break; }
        UnitBehaviorAdd(lv_u, "ACspSleepSuppress", lv_u, 1);
        UnitCreateEffectUnit(lv_enemy, libGAwX_gv_triggerCallForHelpEffect, lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BuildingConstructionWakeUp_Init () {
    libGAwX_gt_BuildingConstructionWakeUp = TriggerCreate("libGAwX_gt_BuildingConstructionWakeUp_Func");
    TriggerAddEventUnitConstructProgress(libGAwX_gt_BuildingConstructionWakeUp, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep XP/Gold
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CreepXPGold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_uT;
    unit lv_killer;
    int lv_killerPlayer;
    point lv_position;
    fixed lv_xP;
    unitgroup lv_heroGroup;
    unit lv_hero;
    int lv_heroCount;
    fixed lv_sharedXP;
    fixed lv_currentXP;
    int lv_level;
    fixed lv_faction;
    int lv_gold;

    // Automatic Variable Declarations
    unitgroup auto3E2CF6C4_g;
    int auto3E2CF6C4_u;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_uT = UnitGetType(lv_unit);
    lv_killer = EventUnitDamageSourceUnit();
    lv_killerPlayer = UnitGetOwner(lv_killer);
    lv_position = UnitGetPosition(lv_unit);
    lv_xP = UnitGetPropertyFixed(lv_unit, c_unitPropKillXP, c_unitPropCurrent);
    lv_heroGroup = UnitGroupSearch(null, lv_killerPlayer, lv_position, libGAwX_gv_xPShareRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
    lv_gold = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_uT, "KillResource[Terrazine]", libGAwX_gv_creepPlayer);

    // Conditions
    if (testConds) {
        if (!((lv_killerPlayer != 16))) {
            return false;
        }

        if (!((PlayerGetAlliance(lv_killerPlayer, c_allianceIdPassive, libGAwX_gv_creepPlayer) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_GAwX_9024C6BF", "Amount", IntToText(lv_gold));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_9024C6BF"), libGAwX_gv_goldTextColor, PlayerGroupSingle(lv_killerPlayer), lv_position, libGAwX_gv_resourceTextVelocity, libGAwX_gv_resourceTextLifetime, libGAwX_gv_resourceTextLifetime);
    if ((UnitHasBehavior(lv_killer, "SuppressXPGrantOnKill") == false)) {
        if ((libNtve_gf_UnitGroupIsDead(lv_heroGroup) == true)) {
            lv_heroGroup = UnitGroupSearch(null, lv_killerPlayer, lv_position, 500.0, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
        }

        lv_heroCount = UnitGroupCount(lv_heroGroup, c_unitCountAlive);
        if ((libNtve_gf_UnitGroupIsDead(lv_heroGroup) == false)) {
            lv_sharedXP = (lv_xP / lv_heroCount);
            auto3E2CF6C4_g = lv_heroGroup;
            auto3E2CF6C4_u = UnitGroupCount(auto3E2CF6C4_g, c_unitCountAll);
            for (;; auto3E2CF6C4_u -= 1) {
                lv_hero = UnitGroupUnitFromEnd(auto3E2CF6C4_g, auto3E2CF6C4_u);
                if (lv_hero == null) { break; }
                lv_level = UnitLevel(lv_hero);
                lv_faction = (UserDataGetFixed("GameBalanceArrayValues", "Hero XP Gained - Creep Reduction Table", "Values", lv_level) / 100.0);
                if ((lv_faction != 0.0)) {
                    lv_currentXP = UnitGetPropertyFixed(lv_hero, c_unitPropXP, c_unitPropCurrent);
                    lv_currentXP += Ceiling((lv_faction * lv_sharedXP));
                    UnitSetPropertyFixed(lv_hero, c_unitPropXP, lv_currentXP);
                }

            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CreepXPGold_Init () {
    libGAwX_gt_CreepXPGold = TriggerCreate("libGAwX_gt_CreepXPGold_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Shop Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AlliedShopRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_TriggerAddEventUnitSelected(libGAwX_gt_AlliedShopSelected, lv_u, c_playerAny, true);
    GAw3_TriggerAddEventUnitSelected(libGAwX_gt_AlliedShopDeselected, lv_u, c_playerAny, false);
    GAw3_TriggerAddEventUnitChangeOwner(libGAwX_gt_AlliedShopChangeOwner, lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AlliedShopRegister_Init () {
    libGAwX_gt_AlliedShopRegister = TriggerCreate("libGAwX_gt_AlliedShopRegister_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AlliedShopRegister, null, "CloseAlliedShopIfNoBuyer", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Shop Selected
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AlliedShopSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_o;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_o = UnitGetOwner(EventUnit());
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_p != lv_o))) {
            return false;
        }

        if (!((PlayerGetAlliance(lv_o, c_allianceIdVision, lv_p) == true))) {
            return false;
        }

        if (!((PlayerType(lv_o) != c_playerTypeNeutral))) {
            return false;
        }

        if (!((PlayerStatus(lv_o) != c_playerStatusLeft))) {
            return false;
        }

        if (!((PlayerStatus(lv_p) != c_playerStatusLeft))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetAlliance(lv_p, c_allianceIdSpend, lv_o, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AlliedShopSelected_Init () {
    libGAwX_gt_AlliedShopSelected = TriggerCreate("libGAwX_gt_AlliedShopSelected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Shop Deselected
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AlliedShopDeselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_o;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_o = UnitGetOwner(EventUnit());
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_p != lv_o))) {
            return false;
        }

        if (!((PlayerGetAlliance(lv_p, c_allianceIdSpend, lv_o) == true))) {
            return false;
        }

        if (!((PlayerType(lv_o) != c_playerTypeNeutral))) {
            return false;
        }

        if (!((PlayerStatus(lv_o) != c_playerStatusLeft))) {
            return false;
        }

        if (!((PlayerStatus(lv_p) != c_playerStatusLeft))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetAlliance(lv_p, c_allianceIdSpend, lv_o, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AlliedShopDeselected_Init () {
    libGAwX_gt_AlliedShopDeselected = TriggerCreate("libGAwX_gt_AlliedShopDeselected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Shop Change Owner
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AlliedShopChangeOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_o;
    int lv_oOld;
    unit lv_u;

    // Automatic Variable Declarations
    playergroup auto9C36E251_g;

    // Variable Initialization
    lv_o = EventUnitOwnerNew();
    lv_oOld = EventUnitOwnerOld();
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9C36E251_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto9C36E251_g, lv_p);
        if (lv_p < 0) { break; }
        if ((UnitIsSelected(lv_u, lv_p) == true)) {
            if ((lv_p != lv_o) && (PlayerGetAlliance(lv_o, c_allianceIdVision, lv_p) == true) && (PlayerType(lv_o) != c_playerTypeNeutral) && (PlayerStatus(lv_o) != c_playerStatusLeft) && (PlayerStatus(lv_p) != c_playerStatusLeft)) {
                PlayerSetAlliance(lv_p, c_allianceIdSpend, lv_o, true);
            }

            if ((lv_p != lv_oOld) && (PlayerGetAlliance(lv_p, c_allianceIdSpend, lv_oOld) == true) && (PlayerType(lv_oOld) != c_playerTypeNeutral) && (PlayerStatus(lv_o) != c_playerStatusLeft) && (PlayerStatus(lv_p) != c_playerStatusLeft)) {
                PlayerSetAlliance(lv_p, c_allianceIdSpend, lv_oOld, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AlliedShopChangeOwner_Init () {
    libGAwX_gt_AlliedShopChangeOwner = TriggerCreate("libGAwX_gt_AlliedShopChangeOwner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tavern Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TavernRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_TriggerAddEventUnitSelected(libGAwX_gt_TavernSelected, lv_u, c_playerAny, true);
    GAw3_TriggerAddEventUnitSelected(libGAwX_gt_TavernDeselected, lv_u, c_playerAny, false);
    UnitSetTeamColorIndex(lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TavernRegister_Init () {
    libGAwX_gt_TavernRegister = TriggerCreate("libGAwX_gt_TavernRegister_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_TavernRegister, c_playerAny, "TavernNoticeFinal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tavern Selected
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TavernSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_o;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_o = UnitGetOwner(EventUnit());
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_p != lv_o))) {
            return false;
        }

        if (!((PlayerGetAlliance(lv_o, c_allianceIdPassive, lv_p) == true))) {
            return false;
        }

        if (!((PlayerGetAlliance(lv_o, c_allianceIdControl, lv_p) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TavernGod", c_unitCreateIgnorePlacement, lv_p, UnitGetPosition(lv_u));
    libGAwX_gv_hiddenTavern[lv_p] = UnitLastCreated();
    libNtve_gf_SetDialogItemUnitGroup(libGAwX_gv_gameCommandCard, libNtve_gf_ConvertUnitToUnitGroup(libGAwX_gv_hiddenTavern[lv_p]), PlayerGroupSingle(lv_p));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TavernSelected_Init () {
    libGAwX_gt_TavernSelected = TriggerCreate("libGAwX_gt_TavernSelected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tavern Deselected
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TavernDeselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_o;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_o = UnitGetOwner(EventUnit());
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemUnitGroup(libGAwX_gv_gameCommandCard, null, PlayerGroupSingle(lv_p));
    UnitRemove(libGAwX_gv_hiddenTavern[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TavernDeselected_Init () {
    libGAwX_gt_TavernDeselected = TriggerCreate("libGAwX_gt_TavernDeselected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debuff On
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_DebuffOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_u, "StatusSet DebuffIndicator 1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_DebuffOn_Init () {
    libGAwX_gt_DebuffOn = TriggerCreate("libGAwX_gt_DebuffOn_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGAwX_gt_DebuffOn, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debuff Off
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_DebuffOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_u, "StatusSet DebuffIndicator 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_DebuffOff_Init () {
    libGAwX_gt_DebuffOff = TriggerCreate("libGAwX_gt_DebuffOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGAwX_gt_DebuffOff, null, c_unitBehaviorFlagUser1, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CmdCard Hook
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_CmdCardHook_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer\\ConsoleUIContainer\\CommandPanel");
    libGAwX_gv_gameCommandCard = DialogControlLastCreated();
    DialogControlSetObservedType(libGAwX_gv_gameCommandCard, c_triggerObservedTypeDefaultObservedPlayerId);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_CmdCardHook_Init () {
    libGAwX_gt_CmdCardHook = TriggerCreate("libGAwX_gt_CmdCardHook_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOD Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TODInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("00");
    GameTimeOfDaySetLength(libGAwX_gv_dayLenth);
    GameSetToDLighting("War3_TOD");
    DialogControlHookupStandard(c_triggerControlTypeUnitModel, "UIContainer/ConsoleUIContainer/TimeOfDayClockFrame");
    libGAwX_gv_tODClock = DialogControlLastCreated();
    libGAwX_gv_tODActor = ActorFromDialogControl(libGAwX_gv_tODClock);
    libGAwX_gv_toDUpdateRate = (libGAwX_gv_dayLenth / 96.0);
    libGAwX_gv_tODAnimDuration = (libGAwX_gv_dayLenth * 1.25);
    libGAwX_gv_tODTimeScale = (60.0 / libGAwX_gv_dayLenth);
    if ((libGAwX_gv_toDUpdateRate < 0.5)) {
        libGAwX_gv_toDUpdateRate = 0.5;
    }

    ActorSend(libGAwX_gv_tODActor, libNtve_gf_AnimSetTimeScaleGlobal(libGAwX_gv_tODTimeScale));
    ActorSend(libGAwX_gv_tODActor, "AnimPlay TimeOfDay Stand,00 PlayForever,AssetDrivenLooping");
    Wait(0.0625, c_timeGame);
    TriggerExecute(libGAwX_gt_TODUpdateClock, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TODInit_Init () {
    libGAwX_gt_TODInit = TriggerCreate("libGAwX_gt_TODInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOD Update Clock
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TODUpdateClock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(libGAwX_gv_toDUpdateRate, c_timeGame);
        libGAwX_gv_tODActor = ActorFromDialogControl(libGAwX_gv_tODClock);
        ActorSend(libGAwX_gv_tODActor, "AnimPlay TimeOfDay Stand,00 PlayForever,AssetDrivenLooping");
        libNtve_gf_SetAnimationCompletion(libGAwX_gv_tODActor, "TimeOfDay", (GAw3_TODStringToTODHour(GameTimeOfDayGet()) / 0.24));
        ActorSend(libGAwX_gv_tODActor, libNtve_gf_AnimSetTimeScaleGlobal(libGAwX_gv_tODTimeScale));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TODUpdateClock_Init () {
    libGAwX_gt_TODUpdateClock = TriggerCreate("libGAwX_gt_TODUpdateClock_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day Warning
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_DayWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoA699F132_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        if(GAw3_Core_useTODSound){
        SoundPlay(SoundLink("RoosterSound", -1), PlayerGroupAll(), 100.0, 0.0);
        }
    }

    autoA699F132_g = libGAwX_gv_allPlayers;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoA699F132_g, lv_p);
        if (lv_p < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "Night", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_DayWarning_Init () {
    libGAwX_gt_DayWarning = TriggerCreate("libGAwX_gt_DayWarning_Func");
    TriggerEnable(libGAwX_gt_DayWarning, false);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_DayWarning, null, "TODMarker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night Warning
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_NightWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto6CAB47B2_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        if(GAw3_Core_useTODSound){
        SoundPlay(SoundLink("WolfSound", -1), PlayerGroupAll(), 100.0, 0.0);
        }
    }

    auto6CAB47B2_g = libGAwX_gv_allPlayers;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto6CAB47B2_g, lv_p);
        if (lv_p < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "Night", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_NightWarning_Init () {
    libGAwX_gt_NightWarning = TriggerCreate("libGAwX_gt_NightWarning_Func");
    TriggerEnable(libGAwX_gt_NightWarning, false);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_NightWarning, null, "TODMarker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Frame Hook
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroFrameHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_d;
    int lv_i;

    // Automatic Variable Declarations
    const int auto8B5382A8_ae = 3;
    const int auto8B5382A8_ai = 1;

    // Variable Initialization
    lv_d = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto8B5382A8_ai >= 0 && lv_i <= auto8B5382A8_ae) || (auto8B5382A8_ai < 0 && lv_i >= auto8B5382A8_ae) ) ; lv_i += auto8B5382A8_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeUnitStatus, ("UIContainer/ConsoleUIContainer/HeroUnitFrame" + IntToString(lv_i)));
        libGAwX_gv_heroIconFrame[lv_i] = DialogControlLastCreated();
        DialogControlSetObservedType(libGAwX_gv_heroIconFrame[lv_i], c_triggerObservedTypeObservedPlayerId);
        DialogControlSetVisible(libGAwX_gv_heroIconFrame[lv_i], PlayerGroupAll(), false);
        DialogControlHookup(libGAwX_gv_heroIconFrame[lv_i], c_triggerControlTypeImage, "IconImage");
        libGAwX_gv_heroIconFrameIcon[lv_i] = DialogControlLastCreated();
        DialogControlHookup(libGAwX_gv_heroIconFrame[lv_i], c_triggerControlTypeUnitTarget, "UnitTargetFrame");
        libGAwX_gv_heroIconFrameTarget[lv_i] = DialogControlLastCreated();
        DialogControlHookup(libGAwX_gv_heroIconFrame[lv_i], c_triggerControlTypeUnitModel, "IconModel");
        libGAwX_gv_heroIconFrameModel[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemHotkey(libGAwX_gv_heroIconFrameTarget[1], c_hotkeyUIEditorSize800x600, PlayerGroupAll());
    libNtve_gf_SetDialogItemHotkey(libGAwX_gv_heroIconFrameTarget[2], c_hotkeyUIEditorSize1024x768, PlayerGroupAll());
    libNtve_gf_SetDialogItemHotkey(libGAwX_gv_heroIconFrameTarget[3], c_hotkeyUIEditorSize1280x960, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroFrameHook_Init () {
    libGAwX_gt_HeroFrameHook = TriggerCreate("libGAwX_gt_HeroFrameHook_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Creation Link
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroCreationLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;
    int lv_slot;
    int lv_i;
    string lv_type;
    bool lv_dup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_hero);
    lv_slot = libGAwX_gf_FirstUnusedHeroIconFrame(lv_player);
    lv_type = UnitGetType(lv_hero);

    // Conditions
    if (testConds) {
        if (!((lv_slot <= 3))) {
            return false;
        }

        if (!((UnitTestState(lv_hero, c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_hero, "RetrainSuppress") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_SetUnitHeroIconFrame(lv_hero, lv_player, lv_slot);
    GAw3_SetUnitBehaviorCount(lv_hero, "SubgroupIncrease", (10 - lv_slot));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroCreationLink_Init () {
    libGAwX_gt_HeroCreationLink = TriggerCreate("libGAwX_gt_HeroCreationLink_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_HeroCreationLink, c_playerAny, "HeroCreationTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Change Owner
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroChangeOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_playerOld;
    int lv_playerNew;
    int lv_slot;
    int lv_oldSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventUnit();
    lv_playerOld = EventUnitOwnerOld();
    lv_playerNew = EventUnitOwnerNew();
    lv_slot = libGAwX_gf_FirstUnusedHeroIconFrame(lv_playerNew);
    lv_oldSlot = libGAwX_gf_UnitHeroIconFrameIndex(lv_hero);

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(lv_hero), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_SetUnitHeroIconFrame(lv_hero, lv_playerOld, 0);
    if ((lv_slot <= 3)) {
        libGAwX_gf_ClearPlayerHeroFrame(lv_playerOld, lv_oldSlot);
        libGAwX_gf_SetUnitHeroIconFrame(lv_hero, lv_playerNew, lv_slot);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroChangeOwner_Init () {
    libGAwX_gt_HeroChangeOwner = TriggerCreate("libGAwX_gt_HeroChangeOwner_Func");
    TriggerAddEventUnitChangeOwner(libGAwX_gt_HeroChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Gain Level Update
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroGainLevelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_slot = libGAwX_gf_UnitHeroIconFrameIndex(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_slot != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf__UpdatePlayerHeroFrameTooltip(lv_player, lv_slot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroGainLevelUpdate_Init () {
    libGAwX_gt_HeroGainLevelUpdate = TriggerCreate("libGAwX_gt_HeroGainLevelUpdate_Func");
    TriggerAddEventUnitGainLevel(libGAwX_gt_HeroGainLevelUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Loss Level Update
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HeroLossLevelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    lv_slot = libGAwX_gf_UnitHeroIconFrameIndex(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_slot != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf__UpdatePlayerHeroFrameTooltip(lv_player, lv_slot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HeroLossLevelUpdate_Init () {
    libGAwX_gt_HeroLossLevelUpdate = TriggerCreate("libGAwX_gt_HeroLossLevelUpdate_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_HeroLossLevelUpdate, c_playerAny, "LevelLossEvent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Gray
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_DeathGray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;
    int lv_slot;
    unitgroup lv_altarGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_hero);
    lv_slot = libGAwX_gf_UnitHeroIconFrameIndex(lv_hero);
    lv_altarGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((((lv_slot >= 1) && (lv_slot <= 3)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libGAwX_gv_heroIconFrameIcon[lv_slot], PlayerGroupSingle(lv_player), false);
    libNtve_gf_SetDialogItemAcceptMouse(libGAwX_gv_heroIconFrameTarget[lv_slot], false, PlayerGroupSingle(lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_DeathGray_Init () {
    libGAwX_gt_DeathGray = TriggerCreate("libGAwX_gt_DeathGray_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_DeathGray, c_playerAny, "HeroDeathAlertSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive De-Gray
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ReviveDeGray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_player;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_hero);
    lv_slot = libGAwX_gf_UnitHeroIconFrameIndex(lv_hero);

    // Conditions
    if (testConds) {
        if (!((((lv_slot >= 1) && (lv_slot <= 3)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libGAwX_gv_heroIconFrameIcon[lv_slot], PlayerGroupSingle(lv_player), true);
    libNtve_gf_SetDialogItemAcceptMouse(libGAwX_gv_heroIconFrameTarget[lv_slot], true, PlayerGroupSingle(lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ReviveDeGray_Init () {
    libGAwX_gt_ReviveDeGray = TriggerCreate("libGAwX_gt_ReviveDeGray_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ReviveDeGray, c_playerAny, "HeroReviveTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skill Points Used Up
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_SkillPointsUsedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_ug = UnitGroupSelected(lv_p);

    // Conditions
    if (testConds) {
        if (!((UnitIsSelected(lv_u, lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(lv_p);
    UnitSelect(lv_u, lv_p, true);
    UnitGroupSelect(lv_ug, lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_SkillPointsUsedUp_Init () {
    libGAwX_gt_SkillPointsUsedUp = TriggerCreate("libGAwX_gt_SkillPointsUsedUp_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_SkillPointsUsedUp, null, "HeroHasUnspentSkillPoint", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gold Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_GoldMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_val;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_val = UnitGetPropertyFixed(lv_u, c_unitPropCarriedTerrazine, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveChargeUsed(lv_u, libGAwX_gv_goldMarker);
    libNtve_gf_UnitRemoveChargeUsed(lv_u, libGAwX_gv_lumberMarker);
    UnitAddChargeUsed(lv_u, libGAwX_gv_goldMarker, lv_val);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_GoldMarker_Init () {
    libGAwX_gt_GoldMarker = TriggerCreate("libGAwX_gt_GoldMarker_Func");
    TriggerEnable(libGAwX_gt_GoldMarker, false);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_GoldMarker, null, libGAwX_gv_resourceTextCarryBuff, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lumber Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_LumberMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_val;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_val = UnitGetPropertyFixed(lv_u, c_unitPropCarriedCustom, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveChargeUsed(lv_u, libGAwX_gv_goldMarker);
    libNtve_gf_UnitRemoveChargeUsed(lv_u, libGAwX_gv_lumberMarker);
    UnitAddChargeUsed(lv_u, libGAwX_gv_lumberMarker, lv_val);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_LumberMarker_Init () {
    libGAwX_gt_LumberMarker = TriggerCreate("libGAwX_gt_LumberMarker_Func");
    TriggerEnable(libGAwX_gt_LumberMarker, false);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_LumberMarker, null, libGAwX_gv_lumberCarryBuff, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Drop
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ResourceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    fixed lv_val;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = EventPlayer();
    lv_val = libGAwX_gf_GetUnitReal(lv_u, libGAwX_gv_lumberMarker);
    lv_color = libGAwX_gv_lumberTextColor;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_val == 0.0)) {
        lv_color = libGAwX_gv_goldTextColor;
        lv_val = libGAwX_gf_GetUnitReal(lv_u, libGAwX_gv_goldMarker);
    }

    TextExpressionSetToken("Param/Expression/lib_GAwX_23232D5C", "Amount", FixedToText(lv_val, 0));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_23232D5C"), lv_color, PlayerGroupSingle(lv_p), UnitGetPosition(lv_u), libGAwX_gv_resourceTextVelocity, libGAwX_gv_resourceTextLifetime, libGAwX_gv_resourceTextLifetime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ResourceDrop_Init () {
    libGAwX_gt_ResourceDrop = TriggerCreate("libGAwX_gt_ResourceDrop_Func");
    TriggerEnable(libGAwX_gt_ResourceDrop, false);
    TriggerAddEventUnitAbility(libGAwX_gt_ResourceDrop, null, AbilityCommand("Ahar", 255), c_abilHarvestStageDropOff, true);
    TriggerAddEventUnitAbility(libGAwX_gt_ResourceDrop, null, AbilityCommand("Ahrl", 255), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pawn (Workarounds)
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_PawnWorkarounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_shop;
    unit lv_item;
    string lv_itemtype;
    int lv_cost;
    point lv_pos;
    int lv_p;
    fixed lv_rate;
    int lv_income;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_shop = EventUnitInventoryItemTargetUnit();
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_cost = UnitTypeGetCost(lv_itemtype, c_unitCostTerrazine);
    lv_pos = UnitGetPosition(lv_u);
    lv_p = UnitGetOwner(lv_u);
    lv_rate = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (lv_itemtype), "PawnItemReduction", 0));

    // Conditions
    if (testConds) {
        if (!((lv_cost != 0))) {
            return false;
        }

        if (!((UnitAbilityExists(lv_shop, "War3_Pawn") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGAwX_gf_ItemDroppable(lv_item) == true)) {
        ActorCreate(ActorScopeFromUnit(lv_u), "Model", "SPN_GDCR", null, null);
        SoundPlayOnUnit(SoundLink("ReceiveGold", -1), PlayerGroupSingle(lv_p), lv_u, 0.0, 100.0, 0.0);
        lv_income = FixedToInt((lv_cost * lv_rate));
        TextExpressionSetToken("Param/Expression/lib_GAwX_48752434", "Amount", IntToText(lv_income));
        libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_48752434"), libGAwX_gv_goldTextColor, PlayerGroupSingle(lv_p), lv_pos, libGAwX_gv_resourceTextVelocity, libGAwX_gv_resourceTextLifetime, libGAwX_gv_resourceTextLifetime);
        PlayerModifyPropertyInt(lv_p, c_playerPropTerrazine, c_playerPropOperAdd, lv_income);
        PlayerModifyPropertyInt(lv_p, c_playerPropTerrazineCollected, c_playerPropOperAdd, lv_income);
    }
    else {
        UnitInventoryCreate(lv_u, lv_itemtype);
        libGAwX_gf_ItemSetDroppable(UnitInventoryLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_PawnWorkarounds_Init () {
    libGAwX_gt_PawnWorkarounds = TriggerCreate("libGAwX_gt_PawnWorkarounds_Func");
    TriggerAddEventUnitInventoryChange(libGAwX_gt_PawnWorkarounds, null, c_unitInventoryChangeSells, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wisp Lumber
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_WispLumber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    int lv_val;
    unit lv_tree;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);
    lv_val = 5;
    lv_tree = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_GAwX_FE55D04E", "Amount", IntToText(lv_val));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_FE55D04E"), libGAwX_gv_lumberTextColor, PlayerGroupSingle(lv_p), UnitGetPosition(lv_tree), libGAwX_gv_resourceTextVelocity, libGAwX_gv_resourceTextLifetime, libGAwX_gv_resourceTextLifetime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_WispLumber_Init () {
    libGAwX_gt_WispLumber = TriggerCreate("libGAwX_gt_WispLumber_Func");
    TriggerEnable(libGAwX_gt_WispLumber, false);
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_WispLumber, c_playerAny, "AwhaHarvest");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wisp Gold
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_WispGold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_wisp;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_wisp = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_wisp);

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_GAwX_5E9D01DE", "entry", StringToText((EventPlayerEffectUsed())));
    libGAwX_gf_CreateWC3StyleTextTag(TextExpressionAssemble("Param/Expression/lib_GAwX_5E9D01DE"), libGAwX_gv_goldTextColor, PlayerGroupSingle(lv_p), UnitGetPosition(lv_wisp), libGAwX_gv_resourceTextVelocity, libGAwX_gv_resourceTextLifetime, libGAwX_gv_resourceTextLifetime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_WispGold_Init () {
    libGAwX_gt_WispGold = TriggerCreate("libGAwX_gt_WispGold_Func");
    TriggerEnable(libGAwX_gt_WispGold, false);
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_WispGold, c_playerAny, "AegmHarvestingHighUpkeeper");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_WispGold, c_playerAny, "AegmHarvestingLowUpkeeper");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_WispGold, c_playerAny, "AegmHarvestingNoUpkeeper");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wind Walk Damge Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_WindWalkDamgeMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_order = UnitOrder(lv_u, 0);

    // Conditions
    if (testConds) {
        if (!((AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)) == "Aatk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateWindWalkTag(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, EventUnitBehavior(), "Modification.DamageDealtUnscaled[Melee]", c_playerAny)), UnitGetPosition(lv_u));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_WindWalkDamgeMarker_Init () {
    libGAwX_gt_WindWalkDamgeMarker = TriggerCreate("libGAwX_gt_WindWalkDamgeMarker_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_WindWalkDamgeMarker, null, "BOwkExtraDamage", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_WindWalkDamgeMarker, null, "BOwk1ExtraDamage", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_WindWalkDamgeMarker, null, "BOwk2ExtraDamage", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_WindWalkDamgeMarker, null, "BOwk3ExtraDamage", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AEev - Miss
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AEevMiss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateMissTextTag(UnitGetPosition(lv_u));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AEevMiss_Init () {
    libGAwX_gt_AEevMiss = TriggerCreate("libGAwX_gt_AEevMiss_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AEevMiss, c_playerAny, "AEevMissDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mana Burn - Text Tag
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ManaBurnTextTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_amount = EventPlayerEffectUsedAmountFixed(c_effectAmountEnergyChanged, false);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateManaBurnTextTag(UnitGetPosition(lv_u), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ManaBurnTextTag_Init () {
    libGAwX_gt_ManaBurnTextTag = TriggerCreate("libGAwX_gt_ManaBurnTextTag_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ManaBurnTextTag, c_playerAny, "ManaBurnCreepManaLoss");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ManaBurnTextTag, c_playerAny, "AEmb1ManaLoss");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ManaBurnTextTag, c_playerAny, "AEmb2ManaLoss");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ManaBurnTextTag, c_playerAny, "AEmb3ManaLoss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AEsh - Text Tag
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AEshTextTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_amount = EventUnitDamageAmount();

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateShadowStrikeTextTag(UnitGetPosition(lv_u), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AEshTextTag_Init () {
    libGAwX_gt_AEshTextTag = TriggerCreate("libGAwX_gt_AEshTextTag_Func");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshInitDamage1");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshInitDamage2");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshInitDamage3");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshDecayDamage1");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshDecayDamage2");
    TriggerAddEventUnitDamaged(libGAwX_gt_AEshTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, "BEshDecayDamage3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abil Data Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AbilDataInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGAwX_gt_AbilClassDefendDataInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AbilDataInit_Init () {
    libGAwX_gt_AbilDataInit = TriggerCreate("libGAwX_gt_AbilDataInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Ground On
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AttackGroundOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;
    unitgroup lv_ug;
    int lv_i;
    int lv_c;
    string lv_effect;
    string lv_radius;

    // Automatic Variable Declarations
    int auto26209B6B_ae;
    const int auto26209B6B_ai = 1;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = libGAw3_gf_ActiveSubgroupUnits(lv_p);
    lv_c = UnitGroupCount(lv_ug, c_unitCountAlive);
    lv_radius = "";

    // Conditions
    if (testConds) {
        if (!((lv_c > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto26209B6B_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto26209B6B_ai >= 0 && lv_i <= auto26209B6B_ae) || (auto26209B6B_ai < 0 && lv_i >= auto26209B6B_ae) ) ; lv_i += auto26209B6B_ai ) {
        lv_u = UnitGroupUnit(lv_ug, lv_i);
        lv_effect = libGAwX_gf_WeaponDisplayEffect(UnitWeaponGet(lv_u, 1), lv_p);
        if ((CatalogFieldValueCount(c_gameCatalogEffect, lv_effect, "AreaArray", lv_p) >= 2)) {
            lv_radius = CatalogFieldValueGet(c_gameCatalogEffect, lv_effect, "AreaArray[" + IntToString(2) + "].Radius", lv_p);
        }

        break;
    }
    CatalogFieldValueSet(c_gameCatalogActor, "War3_AbilCursorAttackGround", "Scale", lv_p, lv_radius);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "AttackGround", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AttackGroundOn_Init () {
    libGAwX_gt_AttackGroundOn = TriggerCreate("libGAwX_gt_AttackGroundOn_Func");
    TriggerAddEventTargetModeUpdate(libGAwX_gt_AttackGroundOn, c_playerAny, AbilityCommand("Aatk", 2), c_targetModeStateOn);
    TriggerAddEventTargetModeUpdate(libGAwX_gt_AttackGroundOn, c_playerAny, AbilityCommand("AatkTree", 2), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Ground Off
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AttackGroundOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "AttackGround", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AttackGroundOff_Init () {
    libGAwX_gt_AttackGroundOff = TriggerCreate("libGAwX_gt_AttackGroundOff_Func");
    TriggerAddEventTargetModeUpdate(libGAwX_gt_AttackGroundOff, c_playerAny, AbilityCommand("Aatk", 2), c_targetModeStateOff);
    TriggerAddEventTargetModeUpdate(libGAwX_gt_AttackGroundOff, c_playerAny, AbilityCommand("AatkTree", 2), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thorns Aura/Thorny Shield - Init Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ThornsAuraThornyShieldInitRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_c;
    int lv_i;
    string lv_behavior;
    string lv_entry;

    // Automatic Variable Declarations
    int auto873DFF1A_ae;
    const int auto873DFF1A_ai = 1;

    // Variable Initialization
    lv_type = libGAwX_gv_thornsAuraThornyShieldUserType;
    lv_c = UserDataInstanceCount(lv_type);

    // Actions
    if (!runActions) {
        return true;
    }

    auto873DFF1A_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto873DFF1A_ai >= 0 && lv_i <= auto873DFF1A_ae) || (auto873DFF1A_ai < 0 && lv_i >= auto873DFF1A_ae) ) ; lv_i += auto873DFF1A_ai ) {
        lv_entry = UserDataInstance(lv_type, lv_i);
        lv_behavior = UserDataGetGameLink(lv_type, lv_entry, "Absorb Behavior", 1);
        GAw3_TriggerAddEventUnitDamageAbsorbed(libGAwX_gt_ThornsAuraThornyShieldHandle, null, lv_behavior);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ThornsAuraThornyShieldInitRegister_Init () {
    libGAwX_gt_ThornsAuraThornyShieldInitRegister = TriggerCreate("libGAwX_gt_ThornsAuraThornyShieldInitRegister_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thorns Aura/Thorny Shield - Handle
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ThornsAuraThornyShieldHandle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_damagingplayer;
    string lv_buff;
    unit lv_buffCaster;
    fixed lv_damageAmount;
    unit lv_damager;
    string lv_ut;
    int lv_c;
    fixed lv_takenPercent;
    fixed lv_takenAmount;
    fixed lv_reflectPercen;
    fixed lv_reflectAmount;
    int lv_level;
    int lv_i;
    string lv_instance;

    // Automatic Variable Declarations
    int autoA79A7E4A_ae;
    const int autoA79A7E4A_ai = 1;

    // Variable Initialization
    lv_u = EventUnit();
    lv_player = EventPlayer();
    lv_damagingplayer = EventUnitDamageSourcePlayer();
    lv_buff = EventUnitBehavior();
    lv_buffCaster = UnitBehaviorEffectUnit(lv_u, lv_buff, c_effectUnitCaster, 0);
    lv_damageAmount = EventUnitDamageAbsorbed();
    lv_damager = EventUnitDamageSourceUnit();
    lv_ut = libGAwX_gv_thornsAuraThornyShieldUserType;
    lv_c = libGAwX_gv_thornsAuraThornyShieldUserTypeInstanceCount;
    lv_takenPercent = 1.0;
    lv_takenAmount = lv_damageAmount;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA79A7E4A_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoA79A7E4A_ai >= 0 && lv_i <= autoA79A7E4A_ae) || (autoA79A7E4A_ai < 0 && lv_i >= autoA79A7E4A_ae) ) ; lv_i += autoA79A7E4A_ai ) {
        lv_instance = UserDataInstance(lv_ut, lv_i);
        lv_level = libGAwX_gf_UnitAbilityGetLevel(lv_buffCaster, ((lv_instance)));
        if ((lv_level > 0)) {
            lv_reflectPercen = UserDataGetFixed(lv_ut, lv_instance, "Damage To Attakers", lv_level);
            lv_takenPercent = UserDataGetFixed(lv_ut, lv_instance, "Damage Taken", lv_level);
            lv_reflectAmount = (lv_damageAmount * lv_reflectPercen);
            lv_takenAmount = (lv_damageAmount * lv_takenPercent);
            break;
        }

    }
    libGAwX_gf_UnitDamage(lv_damager, "TriggerMeleeDamge", lv_u, lv_takenAmount);
    libGAwX_gf_UnitDamage(lv_u, "TriggerSpellDamge", lv_damager, lv_reflectAmount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ThornsAuraThornyShieldHandle_Init () {
    libGAwX_gt_ThornsAuraThornyShieldHandle = TriggerCreate("libGAwX_gt_ThornsAuraThornyShieldHandle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOO Absorb Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TOOAbsorbInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    string lv_buff;
    string lv_instance;

    // Automatic Variable Declarations
    int auto42411CA7_ae;
    const int auto42411CA7_ai = 1;

    // Variable Initialization
    lv_c = UserDataInstanceCount("TriggerBehaviorDamageAbsorbResponse");

    // Actions
    if (!runActions) {
        return true;
    }

    auto42411CA7_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto42411CA7_ai >= 0 && lv_i <= auto42411CA7_ae) || (auto42411CA7_ai < 0 && lv_i >= auto42411CA7_ae) ) ; lv_i += auto42411CA7_ai ) {
        lv_instance = UserDataInstance("TriggerBehaviorDamageAbsorbResponse", lv_i);
        lv_buff = UserDataGetGameLink("TriggerBehaviorDamageAbsorbResponse", lv_instance, "BehaviorMarker", 1);
        GAw3_TriggerAddEventUnitDamageAbsorbed(libGAwX_gt_TOOAbsorbImpactUnitTarget, null, lv_buff);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TOOAbsorbInit_Init () {
    libGAwX_gt_TOOAbsorbInit = TriggerCreate("libGAwX_gt_TOOAbsorbInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOO Absorb Impact (Unit Target)
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TOOAbsorbImpactUnitTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    int lv_casterPlayer;
    string lv_damagEeffect;
    fixed lv_damagAmount;
    int lv_i;
    int lv_c;
    string lv_buff;
    string lv_instance;

    // Automatic Variable Declarations
    int auto3F6354C5_ae;
    const int auto3F6354C5_ai = 1;

    // Variable Initialization
    lv_target = EventUnitDamageSourceUnit();
    lv_caster = EventUnit();
    lv_casterPlayer = EventPlayer();
    lv_damagAmount = EventUnitDamageAbsorbed();
    lv_c = UserDataInstanceCount("TriggerBehaviorDamageAbsorbResponse");

    // Actions
    if (!runActions) {
        return true;
    }

    auto3F6354C5_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto3F6354C5_ai >= 0 && lv_i <= auto3F6354C5_ae) || (auto3F6354C5_ai < 0 && lv_i >= auto3F6354C5_ae) ) ; lv_i += auto3F6354C5_ai ) {
        lv_instance = UserDataInstance("TriggerBehaviorDamageAbsorbResponse", lv_i);
        lv_buff = UserDataGetGameLink("TriggerBehaviorDamageAbsorbResponse", lv_instance, "BehaviorMarker", 1);
        if ((UnitBehaviorEnabled(lv_caster, lv_buff) == true)) {
            lv_damagEeffect = UserDataGetGameLink("TriggerBehaviorDamageAbsorbResponse", lv_instance, "DamageEffect", 1);
            CatalogFieldValueSet(c_gameCatalogEffect, lv_damagEeffect, "Amount", lv_casterPlayer, FixedToString(lv_damagAmount, c_fixedPrecisionAny));
            CatalogReferenceSet("Effect,War3_AbsorbResponseBypass,EffectArray[0]", lv_casterPlayer, (lv_damagEeffect));
            UnitCreateEffectUnit(lv_caster, "War3_AbsorbResponseBypass", lv_target);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TOOAbsorbImpactUnitTarget_Init () {
    libGAwX_gt_TOOAbsorbImpactUnitTarget = TriggerCreate("libGAwX_gt_TOOAbsorbImpactUnitTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOO Missile Launch
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TOOMissileLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_caster;
    string lv_buff;
    string lv_effect;
    string lv_userType;
    string lv_instance;
    int lv_count;
    int lv_i;
    int lv_doTriggerDamage;
    fixed lv_extraTriggerDamage;
    int lv_tag;
    string lv_prefix;

    // Automatic Variable Declarations
    int auto4FA57582_ae;
    const int auto4FA57582_ai = 1;

    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_userType = "TriggerOffensiveOrbSystem";
    lv_count = UserDataInstanceCount(lv_userType);
    lv_tag = UnitGetTag(lv_missile);
    lv_prefix = ("War3_TOO_" + IntToString(UnitGetTag(lv_missile)));

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_missile, "War3_TriggerMissileTrackDummy", lv_caster, 1);
    auto4FA57582_ae = lv_count;
    lv_i = 1;
    for ( ; ( (auto4FA57582_ai >= 0 && lv_i <= auto4FA57582_ae) || (auto4FA57582_ai < 0 && lv_i >= auto4FA57582_ae) ) ; lv_i += auto4FA57582_ai ) {
        lv_instance = UserDataInstance(lv_userType, lv_i);
        lv_buff = UserDataGetGameLink(lv_userType, lv_instance, "BehaviorMarker", 1);
        if ((UnitHasBehavior(lv_caster, lv_buff) == true)) {
            DataTableSetInt(true, (lv_prefix + "_EffectIndex"), lv_i);
            DataTableSetUnit(true, (lv_prefix + "_Caster"), lv_caster);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TOOMissileLaunch_Init () {
    libGAwX_gt_TOOMissileLaunch = TriggerCreate("libGAwX_gt_TOOMissileLaunch_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_TOOMissileLaunch, c_playerAny, "War3_TriggerMissileLaunchNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOO Missile Impact(Unit Target)
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TOOMissileImpactUnitTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_target;
    unit lv_caster;
    int lv_casterPlayer;
    string lv_effect;
    int lv_tag;
    string lv_prefix;
    int lv_doTriggerDamage;
    fixed lv_extraTriggerDamage;
    string lv_userType;
    string lv_instance;
    int lv_index;
    string lv_damagEeffect;
    string lv_buff;
    fixed lv_dur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);
    lv_tag = UnitGetTag(lv_missile);
    lv_prefix = ("War3_TOO_" + IntToString(UnitGetTag(lv_missile)));
    lv_userType = "TriggerOffensiveOrbSystem";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_target) == true)) {
        lv_index = DataTableGetInt(true, (lv_prefix + "_EffectIndex"));
        lv_caster = DataTableGetUnit(true, (lv_prefix + "_Caster"));
        lv_instance = UserDataInstance(lv_userType, lv_index);
        lv_effect = UserDataGetGameLink(lv_userType, lv_instance, "ImpactEffect", 1);
        lv_doTriggerDamage = UserDataGetInt(lv_userType, lv_instance, "Flag - Use Trigger Damage", 1);
        lv_extraTriggerDamage = UserDataGetFixed(lv_userType, lv_instance, "Trigger Extra Damage", 1);
        lv_buff = UserDataGetGameLink(lv_userType, lv_instance, "BehaviorMarker", 1);
        if ((UnitIsValid(lv_caster) == true)) {
            UnitCreateEffectUnit(lv_caster, lv_effect, lv_target);
            lv_damagEeffect = (CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lv_caster, 1), "DisplayEffect", lv_casterPlayer));
            if ((lv_doTriggerDamage >= 1) && (CatalogEntryIsValid(c_gameCatalogEffect, lv_damagEeffect) == true)) {
                if ((UnitWeaponDamage(lv_caster, 1, c_unitAttributeNone, false) == 0.0)) {
                    UnitBehaviorAdd(lv_caster, "TriggerZeroDamageAdjust", lv_caster, 1);
                }

                UnitDamage(lv_caster, lv_damagEeffect, lv_target, lv_extraTriggerDamage);
                UnitBehaviorRemove(lv_caster, "TriggerZeroDamageAdjust", c_unitBehaviorCountAll);
            }

        }
        else {
            PlayerCreateEffectUnit(lv_casterPlayer, lv_effect, lv_target);
        }
    }

    DataTableValueRemove(true, (lv_prefix + "_EffectIndex"));
    DataTableValueRemove(true, (lv_prefix + "_Caster"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TOOMissileImpactUnitTarget_Init () {
    libGAwX_gt_TOOMissileImpactUnitTarget = TriggerCreate("libGAwX_gt_TOOMissileImpactUnitTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_TOOMissileImpactUnitTarget, c_playerAny, "War3_TriggerMissileImpactUnitTargetNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOO Missile Impact(Point Target)
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_TOOMissileImpactPointTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_target;
    point lv_targetPoint;
    unit lv_caster;
    int lv_casterPlayer;
    string lv_effect;
    int lv_tag;
    string lv_prefix;
    int lv_doTriggerDamage;
    fixed lv_extraTriggerDamage;
    string lv_userType;
    string lv_instance;
    int lv_index;
    string lv_damagEeffect;
    string lv_buff;
    fixed lv_dur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);
    lv_tag = UnitGetTag(lv_missile);
    lv_prefix = ("War3_TOO_" + IntToString(UnitGetTag(lv_missile)));
    lv_userType = "TriggerOffensiveOrbSystem";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = DataTableGetInt(true, (lv_prefix + "_EffectIndex"));
    lv_caster = DataTableGetUnit(true, (lv_prefix + "_Caster"));
    lv_instance = UserDataInstance(lv_userType, lv_index);
    lv_effect = UserDataGetGameLink(lv_userType, lv_instance, "ImpactEffect", 1);
    lv_doTriggerDamage = UserDataGetInt(lv_userType, lv_instance, "Flag - Use Trigger Damage", 1);
    lv_extraTriggerDamage = UserDataGetFixed(lv_userType, lv_instance, "Trigger Extra Damage", 1);
    lv_buff = UserDataGetGameLink(lv_userType, lv_instance, "BehaviorMarker", 1);
    if ((UnitIsValid(lv_caster) == true)) {
        UnitCreateEffectPoint(lv_caster, lv_effect, lv_targetPoint);
    }
    else {
        PlayerCreateEffectPoint(lv_casterPlayer, lv_effect, lv_targetPoint);
    }
    DataTableValueRemove(true, (lv_prefix + "_EffectIndex"));
    DataTableValueRemove(true, (lv_prefix + "_Caster"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_TOOMissileImpactPointTarget_Init () {
    libGAwX_gt_TOOMissileImpactPointTarget = TriggerCreate("libGAwX_gt_TOOMissileImpactPointTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_TOOMissileImpactPointTarget, c_playerAny, "War3_TriggerMissileImpactAoETargetNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Time
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BuildTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    abilcmd lv_cmd;
    string lv_abil;
    int lv_index;
    int lv_p;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cmd = EventUnitAbility();
    lv_abil = AbilityCommandGetAbility(lv_cmd);
    lv_index = AbilityCommandGetCommand(lv_cmd);
    lv_p = EventPlayer();
    lv_time = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "InfoArray[" + IntToString(lv_index) + "].Time", lv_p));

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    lv_unit = UnitBehaviorEffectUnit(EventUnit(), libGAwX_gv_builderMarker, c_effectUnitCaster, 0);
    ActorScopeSend(ActorScopeFromUnit(lv_unit), MakeMsgAnimPlay("TriggerBuild", "Birth", 0, -1.0, -1.0, lv_time, c_animTimeVariantAsDuration));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BuildTime_Init () {
    libGAwX_gt_BuildTime = TriggerCreate("libGAwX_gt_BuildTime_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_BuildTime, null, AbilityCommand("Aent", 255), c_abilBuildStageConstruct, true);
    TriggerAddEventUnitAbility(libGAwX_gt_BuildTime, null, AbilityCommand("AEbuAncient", 255), c_abilBuildStageConstruct, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Mark
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BuildMark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), libGAwX_gv_builderMarker, lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BuildMark_Init () {
    libGAwX_gt_BuildMark = TriggerCreate("libGAwX_gt_BuildMark_Func");
    TriggerAddEventUnitConstructProgress(libGAwX_gt_BuildMark, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Pause
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BuildPause_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(lv_unit), "AnimSetPaused TriggerBuild");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BuildPause_Init () {
    libGAwX_gt_BuildPause = TriggerCreate("libGAwX_gt_BuildPause_Func");
    TriggerAddEventUnitConstructProgress(libGAwX_gt_BuildPause, null, c_unitProgressStagePause);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build Unpause
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_BuildUnpause_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(lv_unit), "AnimSetPaused TriggerBuild 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_BuildUnpause_Init () {
    libGAwX_gt_BuildUnpause = TriggerCreate("libGAwX_gt_BuildUnpause_Func");
    TriggerAddEventUnitConstructProgress(libGAwX_gt_BuildUnpause, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Register Channeling Units
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_RegisterChannelingUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGAwX_gv_channelingUnits, lv_u) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_TriggerAddEventUnitOrder(libGAwX_gt_ChannelMoveCancel, lv_u, AbilityCommand("Amov", 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_RegisterChannelingUnits_Init () {
    libGAwX_gt_RegisterChannelingUnits = TriggerCreate("libGAwX_gt_RegisterChannelingUnits_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_RegisterChannelingUnits, null, "ChannelingWar3Abilites", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Channel Move Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ChannelMoveCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    int lv_p;
    unitgroup lv_ug;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_p = OrderGetPlayer(lv_order);
    lv_ug = UnitGroupSelected(lv_p);
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }

        if (!((libGAwX_gf_UnitGroupChanneling(lv_ug) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, Order(AbilityCommand(AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(lv_u, 0))), 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ChannelMoveCancel_Init () {
    libGAwX_gt_ChannelMoveCancel = TriggerCreate("libGAwX_gt_ChannelMoveCancel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Channel Stop Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ChannelStopCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_p = OrderGetPlayer(lv_order);
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_u, "CancelAttackOrdersWar3Active", lv_u);
    if ((UnitHasBehavior(lv_u, "ChannelingWar3Abilites") == true)) {
        UnitIssueOrder(lv_u, Order(AbilityCommand(AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(lv_u, 0))), 1)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ChannelStopCancel_Init () {
    libGAwX_gt_ChannelStopCancel = TriggerCreate("libGAwX_gt_ChannelStopCancel_Func");
    TriggerAddEventUnitOrder(libGAwX_gt_ChannelStopCancel, null, AbilityCommand("stop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acmg - Issue Mana Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AcmgIssueManaCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_addionalCost;
    fixed lv_cost;
    unit lv_caster;
    fixed lv_currentMana;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_addionalCost = (UnitGetPropertyFixed(OrderGetTargetUnit(EventUnitOrder()), c_unitPropLife, c_unitPropCurrent) * libGAwX_gv_acmgManaPerSummonedHitpoint);
    lv_cost = (lv_addionalCost + libGAwX_gv_acmgBaseManaCost);
    lv_caster = EventUnit();
    lv_currentMana = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);
    lv_p = OrderGetPlayer(EventUnitOrder());

    // Conditions
    if (testConds) {
        if (!((lv_currentMana < lv_cost))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Errors/Nomana"), SoundLink("ErrorMessage", -1));
    libGAwX_gv_playerTargetingGroups[lv_p] = UnitGroupSelected(lv_p);
    UnitCreateEffectUnit(lv_caster, libGAwX_gv_acmgCancelEffect, lv_caster);
    UISetTargetingOrder(PlayerGroupSingle(lv_p), libGAwX_gv_playerTargetingGroups[lv_p], Order(libGAwX_gv_acmgAbilCmd), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AcmgIssueManaCheck_Init () {
    libGAwX_gt_AcmgIssueManaCheck = TriggerCreate("libGAwX_gt_AcmgIssueManaCheck_Func");
    TriggerAddEventUnitOrder(libGAwX_gt_AcmgIssueManaCheck, null, libGAwX_gv_acmgAbilCmd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acmg - Approach Mana Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AcmgApproachManaCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_addionalCost;
    fixed lv_cost;
    unit lv_caster;
    fixed lv_currentMana;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_addionalCost = (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) * libGAwX_gv_acmgManaPerSummonedHitpoint);
    lv_cost = (lv_addionalCost + libGAwX_gv_acmgBaseManaCost);
    lv_caster = EventUnit();
    lv_currentMana = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((lv_currentMana < lv_cost))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Errors/Nomana"), SoundLink("ErrorMessage", -1));
    UnitCreateEffectUnit(lv_caster, libGAwX_gv_acmgCancelEffect, lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AcmgApproachManaCheck_Init () {
    libGAwX_gt_AcmgApproachManaCheck = TriggerCreate("libGAwX_gt_AcmgApproachManaCheck_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AcmgApproachManaCheck, null, libGAwX_gv_acmgAbilCmd, c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(libGAwX_gt_AcmgApproachManaCheck, null, libGAwX_gv_acmgAbilCmd, c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acmg - Spend Addional Mana
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AcmgSpendAddionalMana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_addionalCost;
    fixed lv_currentMana;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_addionalCost = (UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent) * libGAwX_gv_acmgManaPerSummonedHitpoint);
    lv_currentMana = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_currentMana > lv_addionalCost)) {
        UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_currentMana - lv_addionalCost));
        UnitBehaviorAdd(lv_target, libGAwX_gv_acmgControlBehavior, lv_caster, 1);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Errors/Nomana"), SoundLink("ErrorMessage", -1));
        UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_currentMana + libGAwX_gv_acmgBaseManaCost));
        UnitCreateEffectUnit(lv_caster, libGAwX_gv_acmgCancelEffect, lv_caster);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AcmgSpendAddionalMana_Init () {
    libGAwX_gt_AcmgSpendAddionalMana = TriggerCreate("libGAwX_gt_AcmgSpendAddionalMana_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AcmgSpendAddionalMana, null, libGAwX_gv_acmgAbilCmd, c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHbu - Facing & Port
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHbuFacingPort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PointPathingPassable(UnitGetPosition(lv_caster)) == false)) {
        UnitCreateEffectUnit(lv_caster, "HumanBuildTeleport", lv_target);
    }

    libNtve_gf_MakeUnitFacePoint(lv_caster, UnitGetPosition(lv_target), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHbuFacingPort_Init () {
    libGAwX_gt_AHbuFacingPort = TriggerCreate("libGAwX_gt_AHbuFacingPort_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AHbuFacingPort, c_playerAny, libGAwX_gv_aHbuStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHbh - Target Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHbhTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, libGAwX_gv_aHbhFilter) == true)) {
        UnitBehaviorRemove(lv_caster, libGAwX_gv_aHbhController, c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lv_caster, libGAwX_gv_aHbhController, lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHbhTargetCheck_Init () {
    libGAwX_gt_AHbhTargetCheck = TriggerCreate("libGAwX_gt_AHbhTargetCheck_Func");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "Hmkg1");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "Hmbr1");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "Hmbr2");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "ngzd1");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "ngz21");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AHbhTargetCheck, null, "ngz31");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilClass - Defend - Data Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AbilClassDefendDataInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_instance;
    string lv_behavior;

    // Automatic Variable Declarations
    string auto9E81705C_s;
    int auto9E81705C_i;
    int auto9E81705C_c;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E81705C_s=libGAwX_gv_abilClassDefendUserType;
    auto9E81705C_i=1;
    auto9E81705C_c=UserDataInstanceCount(libGAwX_gv_abilClassDefendUserType);
    for(;auto9E81705C_i<=auto9E81705C_c;auto9E81705C_i+=1){
        lv_instance=UserDataInstance(auto9E81705C_s,auto9E81705C_i);
        lv_behavior = UserDataGetGameLink(libGAwX_gv_abilClassDefendUserType, lv_instance, "Behavior", 1);
        GAw3_TriggerAddEventUnitDamageAbsorbed(libGAwX_gt_AbilClassDefendDamageAbosorbed, null, lv_behavior);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AbilClassDefendDataInit_Init () {
    libGAwX_gt_AbilClassDefendDataInit = TriggerCreate("libGAwX_gt_AbilClassDefendDataInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilClass - Defend - Damage Abosorbed
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AbilClassDefendDamageAbosorbed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_effect;
    string lv_lM;
    string lv_atkType;
    fixed lv_triggerDamge;
    fixed lv_attemptedDamage;
    unit lv_footman;
    unit lv_source;
    unit lv_triggerAttaker;
    string lv_instance;
    fixed lv_attamptScale;
    fixed lv_reflectChance;
    int lv_footmanPlayer;
    bool lv_passedReflectFilter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_effect = EventUnitDamageEffect();
    lv_lM = (((lv_effect) + "LM"));
    lv_atkType = GAw3_EffectAtkType(EventUnitDamageEffect());
    lv_attemptedDamage = EventUnitDamageAbsorbed();
    lv_footman = EventUnit();
    lv_source = EventUnitDamageSourceUnit();
    lv_triggerAttaker = lv_source;
    lv_instance = ((EventUnitBehavior()));
    lv_attamptScale = 1.0;
    lv_footmanPlayer = UnitGetOwner(lv_footman);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_AbilClassDefendLoadAbilityDataIntoTempRecord(lv_instance);
    if ((UnitIsValid(lv_source) == false)) {
        lv_triggerAttaker = lv_footman;
    }

    if ((lv_atkType == "DAMAGE_PIERCE")) {
        lv_attamptScale = libGAwX_gv_abilityData_Defend_Current.lv_damageTakenPiercing;
        lv_reflectChance = libGAwX_gv_abilityData_Defend_Current.lv_chanceToDeflectPiercing;
    }

    if ((lv_atkType == "DAMAGE_MAGIC")) {
        lv_attamptScale = libGAwX_gv_abilityData_Defend_Current.lv_damageTakenMagic;
        lv_reflectChance = libGAwX_gv_abilityData_Defend_Current.lv_chanceToDeflectMagic;
    }

    lv_passedReflectFilter = UnitFilterMatch(lv_triggerAttaker, lv_footmanPlayer, libGAwX_gv_abilityData_Defend_Current.lv_deflectFilter);
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lv_lM) == true) && (lv_passedReflectFilter == true) && (RandomFixed(0.0, 1.0) <= lv_reflectChance)) {
        UnitCreateEffectUnit(lv_footman, libGAwX_gv_abilityData_Defend_Current.lv_deflectEffect, lv_footman);
        if ((lv_source != lv_footman) && (UnitIsAlive(lv_source) == true)) {
            UnitCreateEffectUnit(lv_footman, lv_lM, lv_source);
        }

        return true;
    }

    lv_triggerDamge = (lv_attamptScale * lv_attemptedDamage);
    UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_footman, lv_triggerDamge);

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AbilClassDefendDamageAbosorbed_Init () {
    libGAwX_gt_AbilClassDefendDamageAbosorbed = TriggerCreate("libGAwX_gt_AbilClassDefendDamageAbosorbed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asps - Spell Steal
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AspsSpellSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_casterPlayer;
    unit lv_target;
    bool lv_buff;
    unit lv_transferTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_casterPlayer = UnitGetOwner(lv_caster);
    lv_target = EventUnitTargetUnit();
    lv_buff = libNtve_gf_PlayerIsEnemy(lv_casterPlayer, UnitGetOwner(lv_target), libNtve_ge_PlayerRelation_Enemy);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_buff == true)) {
        lv_transferTarget = UnitGroupUnit(UnitGroupSearch(null, lv_casterPlayer, UnitGetPosition(lv_caster), 5.4688, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 1), 1);
        if ((lv_transferTarget == null)) {
            libGAwX_gf_RemoveAPurgableBuffPositive(lv_target);
        }
        else {
            UnitCreateEffectUnit(lv_target, "AspsBuffMissile", lv_transferTarget);
        }
    }
    else {
        lv_transferTarget = UnitGroupUnit(UnitGroupSearch(null, lv_casterPlayer, UnitGetPosition(lv_caster), 5.4688, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 1), 1);
        if ((lv_transferTarget == null)) {
            libGAwX_gf_RemoveAPurgableDebuff(lv_target);
        }
        else {
            UnitCreateEffectUnit(lv_target, "AspsMissile", lv_transferTarget);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AspsSpellSteal_Init () {
    libGAwX_gt_AspsSpellSteal = TriggerCreate("libGAwX_gt_AspsSpellSteal_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AspsSpellSteal, null, AbilityCommand("Asps", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asps - Spell Steal - Buff Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AspsSpellStealBuffImpact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_TransferAPurgableBuff(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AspsSpellStealBuffImpact_Init () {
    libGAwX_gt_AspsSpellStealBuffImpact = TriggerCreate("libGAwX_gt_AspsSpellStealBuffImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AspsSpellStealBuffImpact, c_playerAny, "AspsBuffImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asps - Spell Steal - Debuff Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AspsSpellStealDebuffImpact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_TransferAPurgableDebuff(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AspsSpellStealDebuffImpact_Init () {
    libGAwX_gt_AspsSpellStealDebuffImpact = TriggerCreate("libGAwX_gt_AspsSpellStealDebuffImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AspsSpellStealDebuffImpact, c_playerAny, "AspsMissileDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asph - Sphere - Missile
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AsphSphereMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_targetPoint = EventUnitTargetPoint();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_unit, libGAwX_gv_asphLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(lv_unit), "Signal Sphere");
    if ((lv_target != null)) {
        UnitCreateEffectUnit(lv_unit, "AsphMissile", lv_target);
    }
    else {
        UnitCreateEffectPoint(lv_unit, "AsphMissile", lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AsphSphereMissile_Init () {
    libGAwX_gt_AsphSphereMissile = TriggerCreate("libGAwX_gt_AsphSphereMissile_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AsphSphereMissile, null, AbilityCommand("AHbn", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(libGAwX_gt_AsphSphereMissile, null, AbilityCommand("AHfs", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(libGAwX_gt_AsphSphereMissile, null, AbilityCommand("AHdr", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHdr - Siphon Mana - Bonus Mana
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHdrSiphonManaBonusMana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_bonus;
    fixed lv_mana;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_bonus = UnitGetPropertyFixed(lv_unit, c_unitPropEnergyMax, c_unitPropCurrent);
    lv_mana = UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_unit, "Bdbm") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveChargeUsed(lv_unit, libGAwX_gv_aHdrBonusAttLink);
    UnitAddChargeUsed(lv_unit, libGAwX_gv_aHdrBonusAttLink, lv_bonus);
    UnitSetPropertyFixed(lv_unit, c_unitPropEnergyMax, (lv_bonus * 2.0));
    UnitSetPropertyFixed(lv_unit, c_unitPropEnergy, lv_mana);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHdrSiphonManaBonusMana_Init () {
    libGAwX_gt_AHdrSiphonManaBonusMana = TriggerCreate("libGAwX_gt_AHdrSiphonManaBonusMana_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AHdrSiphonManaBonusMana, c_playerAny, "AHdrDrainInit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHdr - Siphon Mana - Bonus Mana Off
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHdrSiphonManaBonusManaOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_manaMax;
    fixed lv_bonus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_manaMax = UnitGetPropertyFixed(lv_unit, c_unitPropEnergyMax, c_unitPropCurrent);
    lv_bonus = UnitGetChargeUsed(lv_unit, libGAwX_gv_aHdrBonusAttLink);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveChargeUsed(lv_unit, libGAwX_gv_aHdrBonusAttLink);
    UnitSetPropertyFixed(lv_unit, c_unitPropEnergyMax, (lv_manaMax - lv_bonus));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHdrSiphonManaBonusManaOff_Init () {
    libGAwX_gt_AHdrSiphonManaBonusManaOff = TriggerCreate("libGAwX_gt_AHdrSiphonManaBonusManaOff_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AHdrSiphonManaBonusManaOff, null, "Bdbm", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHpx - Phoenix - Unique Summon Buff
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHpxPhoenixUniqueSummonBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoner;
    unit lv_summoned;
    unit lv_oldUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoner = EventUnit();
    lv_summoned = EventUnitCreatedUnit();
    lv_oldUnit = UnitBehaviorEffectUnit(lv_summoner, "AHpxUniqueSummon", c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_oldUnit) == true)) {
        libNtve_gf_CreateModelAtPoint("AHpxSpecial", UnitGetPosition(lv_oldUnit));
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart BSD Birth Stand Death ContentPlayOnce");
        UnitBehaviorRemove(lv_summoner, "AHpxUniqueSummon", 1);
        UnitRemove(lv_oldUnit);
    }

    UnitBehaviorAdd(lv_summoner, "AHpxUniqueSummon", lv_summoned, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHpxPhoenixUniqueSummonBuff_Init () {
    libGAwX_gt_AHpxPhoenixUniqueSummonBuff = TriggerCreate("libGAwX_gt_AHpxPhoenixUniqueSummonBuff_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AHpxPhoenixUniqueSummonBuff, null, "AHpx", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AHre - Resurrection - Fix
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AHreResurrectionFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRevive(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AHreHeal", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    Wait(0.0, c_timeGame);
    UnitRevive(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AHreHeal", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AHreResurrectionFix_Init () {
    libGAwX_gt_AHreResurrectionFix = TriggerCreate("libGAwX_gt_AHreResurrectionFix_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AHreResurrectionFix, c_playerAny, "AHreRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adtn - Search
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AdtnSearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), libGAwX_gv_adtnDispelRaidus, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AdtnSearch_Init () {
    libGAwX_gt_AdtnSearch = TriggerCreate("libGAwX_gt_AdtnSearch_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AdtnSearch, c_playerAny, libGAwX_gv_adtnEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ashm - Fade Duration
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AshmFadeDuration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libGAwX_gv_ashmFadeBehavior, lv_u, 1);
    UnitBehaviorAdd(lv_u, libGAwX_gv_ashmCloakBehavior, lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AshmFadeDuration_Init () {
    libGAwX_gt_AshmFadeDuration = TriggerCreate("libGAwX_gt_AshmFadeDuration_Func");
    libGAw3_gf_AnyUnitBehaviorActivateCountPreplaced(libGAwX_gt_AshmFadeDuration, "Ashm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awha - Place
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AwhaPlace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_t;
    point lv_pt;
    actor lv_aw;
    actor lv_at;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_t = EventUnitTargetUnit();
    lv_pt = UnitGetPosition(lv_t);
    lv_aw = libNtve_gf_MainActorofUnit(lv_u);
    lv_at = libNtve_gf_MainActorofUnit(lv_t);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(lv_at, "RefSet ::global.wispTree ::Self");
    ActorSend(lv_aw, "RefSet ::Host ::global.wispTree");
    UnitBehaviorAdd(lv_u, "AwhaMarker", lv_t, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AwhaPlace_Init () {
    libGAwX_gt_AwhaPlace = TriggerCreate("libGAwX_gt_AwhaPlace_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AwhaPlace, null, AbilityCommand("Awha", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awha - Stop
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AwhaStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_aw;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_aw = libNtve_gf_MainActorofUnit(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(lv_aw, "RefClear ::Host");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AwhaStop_Init () {
    libGAwX_gt_AwhaStop = TriggerCreate("libGAwX_gt_AwhaStop_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AwhaStop, null, AbilityCommand("Awha", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_AwhaStop, null, AbilityCommand("Awha", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awha - Gold
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AwhaGold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_t;
    point lv_pt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_t = EventUnitTargetUnit();
    lv_pt = UnitGetPosition(lv_t);

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AwhaGold_Init () {
    libGAwX_gt_AwhaGold = TriggerCreate("libGAwX_gt_AwhaGold_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AwhaGold, null, AbilityCommand("Awha", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libGAwX_gt_AwhaGold, null, AbilityCommand("Awha", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aadm - Buff Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AadmBuffRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == true)) {
        libGAwX_gf_RemoveAllPurgableDebuff(lv_target);
    }
    else {
        libGAwX_gf_RemoveAllPurgableBuffPositive(lv_target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AadmBuffRemove_Init () {
    libGAwX_gt_AadmBuffRemove = TriggerCreate("libGAwX_gt_AadmBuffRemove_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AadmBuffRemove, c_playerAny, "DispelAllEnemyBuffsAndFriendDebuffTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aent - Root
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AentRoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tree;
    unit lv_goldmine;
    point lv_currentPoint;
    point lv_placePoint;
    order lv_order;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tree = EventUnit();
    lv_goldmine = EventUnitCreatedUnit();
    lv_currentPoint = UnitGetPosition(lv_tree);
    lv_order = OrderTargetingPoint(AbilityCommand("etolRoot", 0), lv_currentPoint);
    lv_player = UnitGetOwner(lv_tree);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_tree, "AentUniqueSummon", lv_goldmine, 1);
    if ((UnitHasBehavior(lv_tree, "Uprooted") == true)) {
        if ((UnitOrderIsValid(lv_tree, lv_order) == true)) {
            UnitIssueOrder(lv_tree, OrderTargetingPoint(AbilityCommand("etolRoot", 0), lv_currentPoint), c_orderQueueReplace);
            UnitSetPosition(lv_tree, OrderGetTargetPoint(UnitOrder(lv_tree, 0)), true);
        }
        else {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_player), StringExternal("Errors/Cantroot"), SoundLink("UI_GenericError", -1));
            UnitRemove(lv_goldmine);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AentRoot_Init () {
    libGAwX_gt_AentRoot = TriggerCreate("libGAwX_gt_AentRoot_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AentRoot, null, "Aent", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aent - Uproot Destory
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AentUprootDestory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tree;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tree = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_tree, "AentUniqueSummon", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AentUprootDestory_Init () {
    libGAwX_gt_AentUprootDestory = TriggerCreate("libGAwX_gt_AentUprootDestory_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AentUprootDestory, null, AbilityCommand("etolUproot", 0), c_abilMorphStageActorStart, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aco2 - Merge Order Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Aco2MergeOrderMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_a;
    unit lv_b;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_b = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_ug, lv_a);
    UnitGroupAdd(lv_ug, lv_b);
    UnitGroupIssueOrder(lv_ug, Order(AbilityCommand("ehprMerge", 0)), c_orderQueueReplace);
    UnitBehaviorAdd(lv_b, "Aco2Marker", lv_a, 1);
    UnitBehaviorAdd(lv_a, "Aco2Marker", lv_b, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Aco2MergeOrderMarker_Init () {
    libGAwX_gt_Aco2MergeOrderMarker = TriggerCreate("libGAwX_gt_Aco2MergeOrderMarker_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_Aco2MergeOrderMarker, c_playerAny, "Aco2MergeNotice");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_Aco2MergeOrderMarker, c_playerAny, "Aco3MergeNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aco2 - Merge Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Aco2MergeCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_a;
    unit lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = EventUnit();
    lv_b = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_a, "Aco2Marker", 0);
    UnitBehaviorRemove(lv_b, "Aco2Marker", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Aco2MergeCancel_Init () {
    libGAwX_gt_Aco2MergeCancel = TriggerCreate("libGAwX_gt_Aco2MergeCancel_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_Aco2MergeCancel, null, AbilityCommand("ehprMerge", 255), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aco2 - Merge Vital
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Aco2MergeVital_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_a;
    unit lv_b;
    fixed lv_va;
    fixed lv_vam;
    fixed lv_vb;
    fixed lv_vbm;
    fixed lv_fra;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnitCreatedUnit();
    lv_a = EventUnit();
    lv_b = UnitBehaviorEffectUnit(lv_a, "Aco2Marker", c_effectUnitCaster, 0);
    lv_va = UnitGetPropertyFixed(lv_a, c_unitPropLife, c_unitPropCurrent);
    lv_vam = UnitGetPropertyFixed(lv_a, c_unitPropLifeMax, c_unitPropCurrent);
    lv_vb = UnitGetPropertyFixed(lv_b, c_unitPropLife, c_unitPropCurrent);
    lv_vbm = UnitGetPropertyFixed(lv_b, c_unitPropLifeMax, c_unitPropCurrent);
    lv_fra = (((lv_va + lv_vb) / (lv_vam + lv_vbm)) * 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_c, c_unitPropLifePercent, lv_fra);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Aco2MergeVital_Init () {
    libGAwX_gt_Aco2MergeVital = TriggerCreate("libGAwX_gt_Aco2MergeVital_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_Aco2MergeVital, null, "ehprMerge", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adec - Dismount - Set Life & Cooldown
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AdecDismountSetLifeCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_unit;
    fixed lv_lifePercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_unit = EventUnitCreatedUnit();
    lv_lifePercent = UnitGetPropertyFixed(lv_caster, c_unitPropLifePercent, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(lv_unit, "Abil/Aco2", 30.0);
    UnitAddCooldown(lv_unit, "Abil/Aco3", 30.0);
    UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, lv_lifePercent);
    Wait(0.0, c_timeGame);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AdecDismountSetLifeCooldown_Init () {
    libGAwX_gt_AdecDismountSetLifeCooldown = TriggerCreate("libGAwX_gt_AdecDismountSetLifeCooldown_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AdecDismountSetLifeCooldown, null, "Adec", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Avng - Unique Summon Buff
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AvngUniqueSummonBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoner;
    unit lv_summoned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoner = EventUnit();
    lv_summoned = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_summoner, libGAwX_gv_avngMarker) >= 6)) {
        UnitBehaviorRemove(lv_summoner, libGAwX_gv_avngMarker, 1);
    }

    UnitBehaviorAdd(lv_summoner, libGAwX_gv_avngMarker, lv_summoned, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AvngUniqueSummonBuff_Init () {
    libGAwX_gt_AvngUniqueSummonBuff = TriggerCreate("libGAwX_gt_AvngUniqueSummonBuff_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AvngUniqueSummonBuff, null, "Avng", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AEsh - Speed Decay
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AEshSpeedDecay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_stack;
    int lv_stackCreep;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_stack = UnitBehaviorCount(lv_target, libGAwX_gv_aEshBuffEntry);
    lv_stackCreep = UnitBehaviorCount(lv_target, libGAwX_gv_aCssBuffEntry);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, libGAwX_gv_aEshBuffEntry, (lv_stack / 2));
    UnitBehaviorRemove(lv_target, libGAwX_gv_aCssBuffEntry, (lv_stackCreep / 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AEshSpeedDecay_Init () {
    libGAwX_gt_AEshSpeedDecay = TriggerCreate("libGAwX_gt_AEshSpeedDecay_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AEshSpeedDecay, c_playerAny, "BEshDecaySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amfl - Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmflRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_trigger;
    unit lv_u;
    int lv_uid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = TriggerCreate("libGAwX_gt_AmflTemplate_Func");;
    lv_u = EventUnit();
    lv_uid = UnitGetTag(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitAbility(lv_trigger, lv_u, null, c_unitAbilStageExecute, false);
    libGAwX_gf_SetUnitTriggerMarker(lv_u, libGAwX_gv_amflTriggerMarker, lv_trigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmflRegister_Init () {
    libGAwX_gt_AmflRegister = TriggerCreate("libGAwX_gt_AmflRegister_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AmflRegister, null, libGAwX_gv_amflRegisterLink, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amfl - Destroy
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmflDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_uid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_uid = UnitGetTag(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDestroy(libGAwX_gf_GetUnitTriggerMarker(lv_u, libGAwX_gv_amflTriggerMarker));
    libGAwX_gf_ClearUnitTriggerMarker(lv_u, libGAwX_gv_amflTriggerMarker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmflDestroy_Init () {
    libGAwX_gt_AmflDestroy = TriggerCreate("libGAwX_gt_AmflDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AmflDestroy, null, libGAwX_gv_amflRegisterLink, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amfl - Template
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmflTemplate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    string lv_abil;
    fixed lv_cost;
    fixed lv_amount;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnit();
    lv_caster = UnitBehaviorEffectUnit(lv_target, libGAwX_gv_amflRegisterLink, c_effectUnitCaster, 0);
    lv_abil = AbilityCommandGetAbility(EventUnitAbility());
    lv_cost = libGAwX_gf_CostOfAbility(lv_abil, "Energy", UnitAbilityGetLevel(lv_target, lv_abil));
    lv_casterPlayer = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_abil) != c_classIdCAbilAttack))) {
            return false;
        }

        if (!((AbilityClass(lv_abil) != c_classIdCAbilMove))) {
            return false;
        }

        if (!((AbilityClass(lv_abil) != c_classIdCAbilStop))) {
            return false;
        }

        if (!((AbilityClass(lv_abil) != c_classIdCAbilAugment))) {
            return false;
        }

        if (!((lv_cost > 0.0))) {
            return false;
        }

        if (!((AbilityCommandGetCommand(EventUnitAbility()) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestFlag(UnitGetType(lv_target), c_unitFlagHero) == true)) {
        lv_amount = (lv_cost * libGAwX_gv_amflHeroDamagePerManaPoint);
        lv_amount = MinF(libGAwX_gv_amflHeroMaxDamage, lv_amount);
    }
    else {
        lv_amount = (lv_cost * libGAwX_gv_amflUnitDamagePerManaPoint);
        lv_amount = MinF(libGAwX_gv_amflUnitMaxDamage, lv_amount);
    }
    if ((UnitIsValid(lv_caster) == true)) {
        CatalogFieldValueSet(c_gameCatalogEffect, libGAwX_gv_amflTriggerEffect, "Amount", lv_casterPlayer, FixedToString(lv_amount, c_fixedPrecisionAny));
        UnitCreateEffectUnit(lv_caster, libGAwX_gv_amflTriggerEffect, lv_target);
        UnitBehaviorAdd(lv_caster, "ManaFlareSuppress", lv_caster, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmflTemplate_Init () {
    libGAwX_gt_AmflTemplate = TriggerCreate("libGAwX_gt_AmflTemplate_Func");
    TriggerEnable(libGAwX_gt_AmflTemplate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amfl - Augument Hack
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmflAugumentHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    string lv_abil;
    fixed lv_cost;
    fixed lv_amount;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_caster = UnitBehaviorEffectUnit(lv_target, libGAwX_gv_amflRegisterLink, c_effectUnitCaster, 0);
    lv_abil = ((EventPlayerEffectUsed()));
    lv_cost = libGAwX_gf_CostOfAbility(lv_abil, "Energy", UnitAbilityGetLevel(lv_target, lv_abil));
    lv_casterPlayer = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_target, libGAwX_gv_amflRegisterLink) == true))) {
            return false;
        }

        if (!((lv_cost > 0.0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestFlag(UnitGetType(lv_target), c_unitFlagHero) == true)) {
        lv_amount = (lv_cost * libGAwX_gv_amflHeroDamagePerManaPoint);
        lv_amount = MinF(libGAwX_gv_amflHeroMaxDamage, lv_amount);
    }
    else {
        lv_amount = (lv_cost * libGAwX_gv_amflUnitDamagePerManaPoint);
        lv_amount = MinF(libGAwX_gv_amflUnitMaxDamage, lv_amount);
    }
    if ((UnitIsValid(lv_caster) == true)) {
        CatalogFieldValueSet(c_gameCatalogEffect, libGAwX_gv_amflTriggerEffect, "Amount", lv_casterPlayer, FixedToString(lv_amount, c_fixedPrecisionAny));
        UnitCreateEffectUnit(lv_caster, libGAwX_gv_amflTriggerEffect, lv_target);
        UnitBehaviorAdd(lv_caster, "ManaFlareSuppress", lv_caster, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmflAugumentHack_Init () {
    libGAwX_gt_AmflAugumentHack = TriggerCreate("libGAwX_gt_AmflAugumentHack_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AmflAugumentHack, c_playerAny, "ANbaAugment");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AmflAugumentHack, c_playerAny, "ANiaAugment");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AmflAugumentHack, c_playerAny, "AHfaAugment");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adev - Set Progress Template
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AdevSetProgressTemplate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_kodo;
    fixed lv_max;
    fixed lv_curr;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_kodo = UnitTransport(lv_u);
    lv_max = UnitGetPropertyFixed(lv_u, c_unitPropLifeMax, c_unitPropCurrent);
    lv_curr = UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(lv_kodo, libGAwX_gv_adevUIBuff, lv_max);
    UnitBehaviorSetDurationRemaining(lv_kodo, libGAwX_gv_adevUIBuff, lv_curr);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AdevSetProgressTemplate_Init () {
    libGAwX_gt_AdevSetProgressTemplate = TriggerCreate("libGAwX_gt_AdevSetProgressTemplate_Func");
    TriggerEnable(libGAwX_gt_AdevSetProgressTemplate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adev - Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AdevRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_trigger;
    unit lv_u;
    int lv_uid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trigger = TriggerCreate("libGAwX_gt_AdevSetProgressTemplate_Func");;
    lv_u = EventUnit();
    lv_uid = UnitGetTag(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitProperty(lv_trigger, lv_u, c_unitPropLife);
    libGAwX_gf_SetUnitTriggerMarker(lv_u, libGAwX_gv_adevTriggerMarker, lv_trigger);
    TriggerExecute(libGAwX_gt_AdevSetProgressTemplate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AdevRegister_Init () {
    libGAwX_gt_AdevRegister = TriggerCreate("libGAwX_gt_AdevRegister_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AdevRegister, null, libGAwX_gv_adevDamageBuff, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adev - Destroy
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AdevDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_uid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_uid = UnitGetTag(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDestroy(libGAwX_gf_GetUnitTriggerMarker(lv_u, libGAwX_gv_adevTriggerMarker));
    libGAwX_gf_ClearUnitTriggerMarker(lv_u, libGAwX_gv_adevTriggerMarker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AdevDestroy_Init () {
    libGAwX_gt_AdevDestroy = TriggerCreate("libGAwX_gt_AdevDestroy_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AdevDestroy, null, libGAwX_gv_adevDamageBuff, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awar - Target Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AwarTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, libGAwX_gv_awarFilter) == true)) {
        UnitBehaviorRemove(lv_caster, libGAwX_gv_awarController, c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lv_caster, libGAwX_gv_awarController, lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AwarTargetCheck_Init () {
    libGAwX_gt_AwarTargetCheck = TriggerCreate("libGAwX_gt_AwarTargetCheck_Func");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_AwarTargetCheck, null, "otau1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abof - Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AbofImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(lv_u, "Abof") == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_u, "Abof") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_u, "AbofSphereEffect", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AbofImpact_Init () {
    libGAwX_gt_AbofImpact = TriggerCreate("libGAwX_gt_AbofImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AbofImpact, c_playerAny, "ocat1");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AbofImpact, c_playerAny, "ocat2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apg2 - Speed Decay
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_Apg2SpeedDecay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnit();
    lv_stack = UnitBehaviorCount(lv_target, libGAwX_gv_apg2BuffEntry);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, libGAwX_gv_apg2BuffEntry, (lv_stack / 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_Apg2SpeedDecay_Init () {
    libGAwX_gt_Apg2SpeedDecay = TriggerCreate("libGAwX_gt_Apg2SpeedDecay_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_Apg2SpeedDecay, null, libGAwX_gv_apg2UpdateNoticeEntry, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Search
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AsplSearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_target;
    int lv_player;
    unit lv_a;
    unit lv_b;
    unitgroup lv_unfitGroup;
    unit lv_testUnit;

    // Automatic Variable Declarations
    unitgroup autoB2BD64C2_g;
    int autoB2BD64C2_u;
    unitgroup autoDB9CB508_g;
    int autoDB9CB508_u;
    unitgroup auto52C715B2_g;
    int auto52C715B2_u;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_unfitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, libGAwX_gv_asplMarkerBuff, c_unitBehaviorCountAll);
    Wait(0.0625, c_timeGame);
    lv_ug = UnitGroupSearch(null, lv_player, UnitGetPosition(lv_target), libGAwX_gv_asplRadius, libGAwX_gv_asplTargetFilter, 0);
    UnitGroupRemove(lv_ug, lv_target);
    autoB2BD64C2_g = lv_ug;
    autoB2BD64C2_u = UnitGroupCount(autoB2BD64C2_g, c_unitCountAll);
    for (;; autoB2BD64C2_u -= 1) {
        lv_testUnit = UnitGroupUnitFromEnd(autoB2BD64C2_g, autoB2BD64C2_u);
        if (lv_testUnit == null) { break; }
        if ((UnitHasBehavior(lv_testUnit, libGAwX_gv_asplMarkerBuff) == true)) {
            UnitGroupAdd(lv_unfitGroup, lv_testUnit);
        }

    }
    UnitGroupRemoveUnitGroup(lv_ug, lv_unfitGroup);
    lv_ug = UnitGroupFilter(null, c_playerAny, lv_ug, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (libGAwX_gv_asplMaxTargets - 1));
    UnitGroupAdd(lv_ug, lv_target);
    autoDB9CB508_g = lv_ug;
    autoDB9CB508_u = UnitGroupCount(autoDB9CB508_g, c_unitCountAll);
    for (;; autoDB9CB508_u -= 1) {
        lv_a = UnitGroupUnitFromEnd(autoDB9CB508_g, autoDB9CB508_u);
        if (lv_a == null) { break; }
        auto52C715B2_g = lv_ug;
        auto52C715B2_u = UnitGroupCount(auto52C715B2_g, c_unitCountAll);
        for (;; auto52C715B2_u -= 1) {
            lv_b = UnitGroupUnitFromEnd(auto52C715B2_g, auto52C715B2_u);
            if (lv_b == null) { break; }
            UnitCreateEffectUnit(lv_a, libGAwX_gv_asplMarkerEffect, lv_b);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AsplSearch_Init () {
    libGAwX_gt_AsplSearch = TriggerCreate("libGAwX_gt_AsplSearch_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AsplSearch, c_playerAny, libGAwX_gv_asplNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Split
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AsplSplit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_stack;
    fixed lv_originalDamage;
    unit lv_damager;
    fixed lv_mainDamage;
    fixed lv_splitDamage;
    unitgroup lv_linkedGroup;
    unit lv_splitTarget;
    int lv_i;

    // Automatic Variable Declarations
    int auto505E370D_ae;
    const int auto505E370D_ai = 1;

    // Variable Initialization
    lv_u = EventUnit();
    lv_player = EventPlayer();
    lv_stack = UnitBehaviorCount(lv_u, libGAwX_gv_asplMarkerBuff);
    lv_originalDamage = EventUnitDamageAbsorbed();
    lv_damager = EventUnitDamageSourceUnit();
    lv_mainDamage = (lv_originalDamage * libGAwX_gv_asplSplitFactor);
    lv_linkedGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_damager) == false)) {
        lv_damager = lv_u;
    }

    if ((lv_stack > 0)) {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_mainDamage);
        lv_splitDamage = ((lv_originalDamage - lv_mainDamage) / lv_stack);
        auto505E370D_ae = (lv_stack - 1);
        lv_i = 0;
        for ( ; ( (auto505E370D_ai >= 0 && lv_i <= auto505E370D_ae) || (auto505E370D_ai < 0 && lv_i >= auto505E370D_ae) ) ; lv_i += auto505E370D_ai ) {
            lv_splitTarget = UnitBehaviorEffectUnit(lv_u, libGAwX_gv_asplMarkerBuff, c_effectUnitCaster, lv_i);
            if ((UnitIsAlive(lv_splitTarget) == true)) {
                UnitDamage(lv_damager, libGAwX_gv_asplSplitDamageEffect, lv_splitTarget, lv_splitDamage);
            }

        }
    }
    else {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_originalDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AsplSplit_Init () {
    libGAwX_gt_AsplSplit = TriggerCreate("libGAwX_gt_AsplSplit_Func");
    TriggerAddEventUnitDamageAbsorbed(libGAwX_gt_AsplSplit, null, libGAwX_gv_asplMarkerBuff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOcl - Damage Array Init 
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOclDamageArrayInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gv_aOclDamageArray[0] = 85.0;
    libGAwX_gv_aOclDamageArray[1] = 125.0;
    libGAwX_gv_aOclDamageArray[2] = 180.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOclDamageArrayInit_Init () {
    libGAwX_gt_AOclDamageArrayInit = TriggerCreate("libGAwX_gt_AOclDamageArrayInit_Func");
    TriggerAddEventMapInit(libGAwX_gt_AOclDamageArrayInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOcl - Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOclImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_level;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_marked;
    fixed lv_damage;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOclAbilLink);
    lv_targetsThisLevel = (libGAwX_gv_aOclTargetsBase + (libGAwX_gv_aOclExtraTargetPerLevel * lv_level));
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_damage = libGAwX_gv_aOclDamageArray[lv_level];
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        lv_damage *= libGAwX_gv_aOclDamageReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOclAoERange, libGAwX_gv_aOclTargetFilter, libGAwX_gv_aOclTargetsMax);
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOclSecondaryLightningDummy", lv_nextTarget);
            Wait(libGAwX_gv_aOclDamageDelay, c_timeGame);
            if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
                UnitDamage(lv_caster, "AOclSecondaryTriggerDamage", lv_nextTarget, lv_damage);
            }

            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOclImpact_Init () {
    libGAwX_gt_AOclImpact = TriggerCreate("libGAwX_gt_AOclImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOclImpact, c_playerAny, "AOclMainmIpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACcl - Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACclImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_marked;
    fixed lv_damage;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetsThisLevel = 4;
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_damage = 100.0;
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        lv_damage *= libGAwX_gv_aOclDamageReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOclAoERange, libGAwX_gv_aOclTargetFilter, libGAwX_gv_aOclTargetsMax);
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOclSecondaryLightningDummy", lv_nextTarget);
            Wait(libGAwX_gv_aOclDamageDelay, c_timeGame);
            if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
                UnitDamage(lv_caster, "AOclSecondaryTriggerDamage", lv_nextTarget, lv_damage);
            }

            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACclImpact_Init () {
    libGAwX_gt_ACclImpact = TriggerCreate("libGAwX_gt_ACclImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ACclImpact, c_playerAny, "ACclMainmIpactDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOcr - Multiplier W1
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOcrMultiplierW1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_level;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOcrAbilLink);
    lv_multiplier = (libGAwX_gv_aOcrMultiplierBase + (lv_level * libGAwX_gv_aOcrExtraMultiplierPerLevel));
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 1, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOcrMultiplierW1_Init () {
    libGAwX_gt_AOcrMultiplierW1 = TriggerCreate("libGAwX_gt_AOcrMultiplierW1_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOcrMultiplierW1, c_playerAny, "W1CritTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOcr - Multiplier W2
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOcrMultiplierW2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_level;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOcrAbilLink);
    lv_multiplier = (libGAwX_gv_aOcrMultiplierBase + (lv_level * libGAwX_gv_aOcrExtraMultiplierPerLevel));
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 2, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOcrMultiplierW2_Init () {
    libGAwX_gt_AOcrMultiplierW2 = TriggerCreate("libGAwX_gt_AOcrMultiplierW2_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOcrMultiplierW2, c_playerAny, "W2CritTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOsf - Unique Summon Buff
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOsfUniqueSummonBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoner;
    unit lv_summoned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoner = EventUnit();
    lv_summoned = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoner, libGAwX_gv_aOsfMarker, c_unitBehaviorCountAll);
    Wait(0.0, c_timeGame);
    UnitBehaviorAdd(lv_summoner, libGAwX_gv_aOsfMarker, lv_summoned, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOsfUniqueSummonBuff_Init () {
    libGAwX_gt_AOsfUniqueSummonBuff = TriggerCreate("libGAwX_gt_AOsfUniqueSummonBuff_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AOsfUniqueSummonBuff, null, libGAwX_gv_aOsfAbilLink, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOhw - Healing Array Init
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOhwHealingArrayInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gv_aOhwHealingArray[0] = UserDataGetFixed("AbilityDataHealingWave", "AOhw", "Healing Array", 1);
    libGAwX_gv_aOhwHealingArray[1] = UserDataGetFixed("AbilityDataHealingWave", "AOhw", "Healing Array", 2);
    libGAwX_gv_aOhwHealingArray[2] = UserDataGetFixed("AbilityDataHealingWave", "AOhw", "Healing Array", 3);
    libGAwX_gv_aOhwHealingArray[3] = UserDataGetFixed("AbilityDataHealingWave", "AOhw", "Healing Array", 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOhwHealingArrayInit_Init () {
    libGAwX_gt_AOhwHealingArrayInit = TriggerCreate("libGAwX_gt_AOhwHealingArrayInit_Func");
    TriggerAddEventMapInit(libGAwX_gt_AOhwHealingArrayInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOhw - Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOhwImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_level;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_searchPoolHeroes;
    unitgroup lv_marked;
    fixed lv_healing;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;
    unitgroup lv_tempug;
    unit lv_tempu;

    // Automatic Variable Declarations
    unitgroup autoA39396A0_g;
    int autoA39396A0_u;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOhwAbilLink);
    lv_targetsThisLevel = (libGAwX_gv_aOhwTargetsBase + (libGAwX_gv_aOhwExtraTargetPerLevel * lv_level));
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_searchPoolHeroes = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_healing = libGAwX_gv_aOhwHealingArray[lv_level];
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_tempug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_HealUnit(lv_lastTarget, lv_healing, lv_caster);
    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = UnitGetPosition(lv_lastTarget);
        lv_healing *= libGAwX_gv_aOhwHealingReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOhwAoERange, libGAwX_gv_aOhwTargetFilter, 0);
        autoA39396A0_g = lv_searchPool;
        autoA39396A0_u = UnitGroupCount(autoA39396A0_g, c_unitCountAll);
        for (;; autoA39396A0_u -= 1) {
            lv_tempu = UnitGroupUnitFromEnd(autoA39396A0_g, autoA39396A0_u);
            if (lv_tempu == null) { break; }
            if ((libGAwX_gf_UnitLifeIsFull(lv_tempu) == false)) {
                UnitGroupAdd(lv_tempug, lv_tempu);
            }

        }
        lv_searchPool = lv_tempug;
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_searchPoolHeroes = UnitGroupFilter(null, c_playerAny, lv_searchPool, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == false)) {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPoolHeroes, lv_searchPoint);
        }
        else {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        }
        if ((UnitIsValid(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOhwSecondaryLightningDummy", lv_nextTarget);
            Wait(libGAwX_gv_aOhwHealingDelay, c_timeGame);
            libGAwX_gf_HealUnit(lv_nextTarget, lv_healing, lv_caster);
            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOhwImpact_Init () {
    libGAwX_gt_AOhwImpact = TriggerCreate("libGAwX_gt_AOhwImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOhwImpact, c_playerAny, "AOhwMainmIpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANhw - Impact
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANhwImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_level;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_searchPoolHeroes;
    unitgroup lv_marked;
    fixed lv_healing;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;
    unitgroup lv_tempug;
    unit lv_tempu;

    // Automatic Variable Declarations
    unitgroup autoFBB24F3C_g;
    int autoFBB24F3C_u;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNhwAbilLink);
    lv_targetsThisLevel = (libGAwX_gv_aOhwTargetsBase + (libGAwX_gv_aOhwExtraTargetPerLevel * lv_level));
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_searchPoolHeroes = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_healing = libGAwX_gv_aOhwHealingArray[lv_level];
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_tempug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_HealUnit(lv_lastTarget, lv_healing, lv_caster);
    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = UnitGetPosition(lv_lastTarget);
        lv_healing *= libGAwX_gv_aOhwHealingReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOhwAoERange, libGAwX_gv_aOhwTargetFilter, 0);
        autoFBB24F3C_g = lv_searchPool;
        autoFBB24F3C_u = UnitGroupCount(autoFBB24F3C_g, c_unitCountAll);
        for (;; autoFBB24F3C_u -= 1) {
            lv_tempu = UnitGroupUnitFromEnd(autoFBB24F3C_g, autoFBB24F3C_u);
            if (lv_tempu == null) { break; }
            if ((libGAwX_gf_UnitLifeIsFull(lv_tempu) == false)) {
                UnitGroupAdd(lv_tempug, lv_tempu);
            }

        }
        lv_searchPool = lv_tempug;
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_searchPoolHeroes = UnitGroupFilter(null, c_playerAny, lv_searchPool, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == false)) {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPoolHeroes, lv_searchPoint);
        }
        else {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        }
        if ((UnitIsValid(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOhwSecondaryLightningDummy", lv_nextTarget);
            Wait(libGAwX_gv_aOhwHealingDelay, c_timeGame);
            libGAwX_gf_HealUnit(lv_nextTarget, lv_healing, lv_caster);
            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANhwImpact_Init () {
    libGAwX_gt_ANhwImpact = TriggerCreate("libGAwX_gt_ANhwImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANhwImpact, c_playerAny, "ANhwMainmIpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Remove All Non-Permanent
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOmiRemoveAllNonPermanent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_RemoveAllNonPermanent(lv_unit);
    UnitBehaviorRemove(lv_unit, libGAwX_gv_aOmiMarker, c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOmiRemoveAllNonPermanent_Init () {
    libGAwX_gt_AOmiRemoveAllNonPermanent = TriggerCreate("libGAwX_gt_AOmiRemoveAllNonPermanent_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AOmiRemoveAllNonPermanent, null, libGAwX_gv_aOmiPrecursorBuffEntry, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Launch
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOmiLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_casterPoint;
    fixed lv_angle;
    int lv_level;
    int lv_numersThisLevel;
    fixed lv_delta;
    point lv_targetPoint;
    int lv_i;

    // Automatic Variable Declarations
    int autoF00B2810_ae;
    const int autoF00B2810_ai = 1;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_casterPoint = UnitGetPosition(lv_caster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOmiAbilEntry);
    lv_numersThisLevel = (libGAwX_gv_aOmiBaseImages + (libGAwX_gv_aOmiExtraImagePerLevel * lv_level));
    lv_delta = (360.0 / (lv_numersThisLevel + 1));
    lv_targetPoint = PointWithOffsetPolar(lv_casterPoint, libGAwX_gv_aOmiRange, lv_angle);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_caster, lv_angle, 0.0);
    UnitCreateEffectPoint(lv_caster, libGAwX_gv_aOmiNonMirrorMissileEffectEntry, lv_targetPoint);
    autoF00B2810_ae = lv_numersThisLevel;
    lv_i = 1;
    for ( ; ( (autoF00B2810_ai >= 0 && lv_i <= autoF00B2810_ae) || (autoF00B2810_ai < 0 && lv_i >= autoF00B2810_ae) ) ; lv_i += autoF00B2810_ai ) {
        lv_angle += lv_delta;
        lv_targetPoint = PointWithOffsetPolar(lv_casterPoint, libGAwX_gv_aOmiRange, lv_angle);
        UnitCreateEffectPoint(lv_caster, libGAwX_gv_aOmiMissileEffectEntry, lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOmiLaunch_Init () {
    libGAwX_gt_AOmiLaunch = TriggerCreate("libGAwX_gt_AOmiLaunch_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AOmiLaunch, null, libGAwX_gv_aOmiPrecursorBuffEntry, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Marker
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOmiMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    unitgroup lv_copysource;
    unit lv_item;
    unit lv_itemCopy;
    int lv_i;
    string lv_abil;
    int lv_level;
    int lv_slot;
    int lv_container;
    int lv_c;
    string lv_buff;
    int lv_stack;

    // Automatic Variable Declarations
    unitgroup auto9EAFE00E_g;
    int auto9EAFE00E_u;
    int autoCCB321C6_i;
    int autoCCB321C6_c;
    string autoCCB321C6_eval;
    int auto39650685_n;
    int auto39650685_i;
    int autoDFCEEC6C_ae;
    const int autoDFCEEC6C_ai = 1;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_copysource = UnitInventoryGroup(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_caster, libGAwX_gv_aOmiMarker, lv_target, 1);
    auto9EAFE00E_g = lv_copysource;
    auto9EAFE00E_u = UnitGroupCount(auto9EAFE00E_g, c_unitCountAll);
    for (;; auto9EAFE00E_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(auto9EAFE00E_g, auto9EAFE00E_u);
        if (lv_item == null) { break; }
        lv_slot = UnitInventorySlot(lv_item);
        lv_container = UnitInventoryContainer(lv_item);
        UnitInventoryCreate(lv_target, UnitGetType(lv_item));
        lv_itemCopy = UnitInventoryLastCreated();
        UnitInventoryMove(lv_itemCopy, lv_container, lv_slot);
    }
    autoCCB321C6_i=0;
    autoCCB321C6_c=c_abilLearnCmdLearn20;
    autoCCB321C6_eval="";
    for(;autoCCB321C6_i<autoCCB321C6_c;autoCCB321C6_i+=1){

        autoCCB321C6_eval=CatalogFieldValueGet(c_gameCatalogAbil,UnitGetType(lv_caster)+"Learn","InfoArray["+IntToString(autoCCB321C6_i)+"].Abil",c_playerAny);
        if(CatalogEntryIsValid(c_gameCatalogAbil,autoCCB321C6_eval)){
            lv_abil=autoCCB321C6_eval;
            lv_i=autoCCB321C6_i;
        }else{continue;}
        lv_level = (UnitAbilityGetLevel(lv_caster, lv_abil) + 1);
        if ((UnitAbilityCheck(lv_caster, lv_abil, true) == true)) {
            auto39650685_n = lv_level;
            for (auto39650685_i = 1; auto39650685_i <= auto39650685_n; auto39650685_i += 1) {
                UnitIssueOrder(lv_target, Order(AbilityCommand("HantLearn", lv_i)), c_orderQueueReplace);
            }
        }

    }
    lv_c = UnitBehaviorCountAll(lv_caster);
    autoDFCEEC6C_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoDFCEEC6C_ai >= 0 && lv_i <= autoDFCEEC6C_ae) || (autoDFCEEC6C_ai < 0 && lv_i >= autoDFCEEC6C_ae) ) ; lv_i += autoDFCEEC6C_ai ) {
        lv_buff = UnitBehaviorGet(lv_caster, lv_i);
        if ((lv_buff != "Str") && (lv_buff != "Agi") && (lv_buff != "Int") && (lv_buff != "RetrainNoUse")) {
            lv_stack = UnitBehaviorCount(lv_caster, lv_buff);
            UnitBehaviorAdd(lv_target, lv_buff, lv_target, lv_stack);
        }

    }
    UnitBehaviorAdd(lv_target, libGAwX_gv_aOmiExtraBuff, lv_caster, 1);
    Wait(0.0625, c_timeGame);
    UnitBehaviorAdd(lv_caster, libGAwX_gv_aOmiMarker, lv_target, 1);
    UnitSetPropertyFixed(lv_target, c_unitPropLifeMax, UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropLife, UnitGetPropertyFixed(lv_caster, c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropEnergyMax, UnitGetPropertyFixed(lv_caster, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropEnergy, UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOmiMarker_Init () {
    libGAwX_gt_AOmiMarker = TriggerCreate("libGAwX_gt_AOmiMarker_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOmiMarker, c_playerAny, "AOmiSpawnEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOsh/AOs2 - Max Targets
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AOshAOs2MaxTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDealt;
    int lv_level;
    fixed lv_maxDmg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageDealt = EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, true);
    lv_level = UnitAbilityGetLevel(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AOsh");
    lv_maxDmg = UserDataGetFixed("AbilityDataShockwave", "AOsh", "Max Damage", (lv_level + 1));

    // Conditions
    if (testConds) {
        if (!((lv_damageDealt >= lv_maxDmg))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AOshAOs2MaxTargets_Init () {
    libGAwX_gt_AOshAOs2MaxTargets = TriggerCreate("libGAwX_gt_AOshAOs2MaxTargets_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AOshAOs2MaxTargets, c_playerAny, "AOshSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUan - Hide Status Info Panel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUanHideStatusInfoPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    UnitRevive(lv_unit);
    UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
    UnitSetState(lv_unit, c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUanHideStatusInfoPanel_Init () {
    libGAwX_gt_AUanHideStatusInfoPanel = TriggerCreate("libGAwX_gt_AUanHideStatusInfoPanel_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AUanHideStatusInfoPanel, null, "BUad", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUan - Change Ghoul
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUanChangeGhoul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    bool lv_inv;
    fixed lv_dur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_inv = UnitHasBehavior(lv_unit, "BUad");
    lv_dur = UnitBehaviorDuration(lv_unit, EventUnitBehavior());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "ughoCorpseGravy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(lv_unit, "ugho", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
    UnitRemove(lv_unit);
    lv_unit = libNtve_gf_LastReplacedUnit();
    UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
    UnitBehaviorAdd(lv_unit, "BUan", lv_unit, 1);
    UnitBehaviorSetDuration(lv_unit, "BUan", lv_dur);
    if ((lv_inv == true)) {
        UnitSetState(lv_unit, c_unitStateInvulnerable, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUanChangeGhoul_Init () {
    libGAwX_gt_AUanChangeGhoul = TriggerCreate("libGAwX_gt_AUanChangeGhoul_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AUanChangeGhoul, null, "BUan", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Agyd - Spawn
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AgydSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_graveyard;
    unit lv_corpse;
    actorscope lv_scope;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_graveyard = EventUnit();
    lv_corpse = EventUnitCreatedUnit();
    lv_scope = ActorScopeFromUnit(lv_corpse);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(lv_corpse);
    UnitSetFacing(lv_corpse, libNtve_gf_RandomAngle(), 0.0);
    ActorScopeSend(lv_scope, "AnimClearAllBut Bone 0.000000");
    ActorScopeSend(lv_scope, "AnimPlay Bone Decay,Bone PlayForever 0.000000 -1.000000 -1.000000 AsAutomatic 3.000000");
    ActorScopeSend(lv_scope, "AnimSetPausedAll");
    UnitBehaviorAdd(lv_corpse, "CreatedCorpse", lv_graveyard, 1);
    UnitBehaviorAdd(lv_graveyard, "AgydSummonMarker", lv_corpse, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AgydSpawn_Init () {
    libGAwX_gt_AgydSpawn = TriggerCreate("libGAwX_gt_AgydSpawn_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AgydSpawn, null, null, "Agyd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apts - Hook
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AptsHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_caster;
    point lv_point;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_caster, "Apts") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "uplg", 0, lv_p, lv_point, 270.0);
    lv_u = UnitLastCreated();
    UnitBehaviorAdd(lv_u, "Bplg", lv_caster, 1);
    Wait(10.0, c_timeGame);
    UnitRemove(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AptsHook_Init () {
    libGAwX_gt_AptsHook = TriggerCreate("libGAwX_gt_AptsHook_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AptsHook, c_playerAny, "umtw1");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AptsHook, c_playerAny, "umtw2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arpl/Arpm - Seach
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ArplArpmSeach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_extraTargets;
    unit lv_caster;
    fixed lv_mP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_extraTargets = (EventPlayerEffectUsedAmountInt(c_effectAmountFound, true) - 1);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_mP = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((lv_extraTargets >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_extraTargets = MaxI(lv_extraTargets, 4);
    UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_mP - (lv_extraTargets * libGAwX_gv_replenishReChargeRate)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ArplArpmSeach_Init () {
    libGAwX_gt_ArplArpmSeach = TriggerCreate("libGAwX_gt_ArplArpmSeach_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ArplArpmSeach, c_playerAny, "ArplSearch");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ArplArpmSeach, c_playerAny, "ArpmSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amel - Get Corpse
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmelGetCorpse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_u;
    string lv_ut;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ut = UnitGetType(lv_u);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_ut == "ughoCorpseGravy")) {
        lv_ut = "ugho";
    }

    UnitRemove(lv_u);
    UnitCargoCreate(lv_c, lv_ut, 1);
    UnitSetOwner(UnitCargoLastCreated(), lv_p, true);
    UnitSetState(UnitCargoLastCreated(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmelGetCorpse_Init () {
    libGAwX_gt_AmelGetCorpse = TriggerCreate("libGAwX_gt_AmelGetCorpse_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AmelGetCorpse, c_playerAny, libGAwX_gv_amelEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amed - Anim
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmedAnim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actorscope lv_scope;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_scope = ActorScopeFromUnit(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(lv_scope, "AnimClearAllBut Bone 0.000000");
    ActorScopeSend(ActorScopeFromUnit(lv_u), "AnimPlay Bone Decay,Bone PlayForever 0.000000 -1.000000 90.000000 AsDuration 3.000000 2000");
    ActorScopeSend(lv_scope, "SoundSetMuted 1 0");
    Wait(2.0, c_timeGame);
    ActorScopeSend(lv_scope, "SoundSetMuted 0 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmedAnim_Init () {
    libGAwX_gt_AmedAnim = TriggerCreate("libGAwX_gt_AmedAnim_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AmedAnim, c_playerAny, libGAwX_gv_amedUnloadEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aexh - Corpses
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AexhCorpses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCargoCreate(lv_caster, libGAwX_gv_aexhCorpseType, 1);
    UnitSetState(UnitCargoLastCreated(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AexhCorpses_Init () {
    libGAwX_gt_AexhCorpses = TriggerCreate("libGAwX_gt_AexhCorpses_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AexhCorpses, c_playerAny, "AexhSpawn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aaha - Place
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AahaPlace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angelBase;
    fixed lv_angelInc;
    unit lv_u;
    unit lv_mine;
    point lv_pa;
    int lv_c;
    point lv_pb;
    int lv_i;

    // Automatic Variable Declarations
    int auto1107781C_ae;
    const int auto1107781C_ai = 1;

    // Variable Initialization
    lv_angelBase = 90.0;
    lv_angelInc = 72.0;
    lv_u = EventUnit();
    lv_mine = EventUnitTargetUnit();
    lv_pa = UnitGetPosition(lv_mine);
    lv_pb = libGAwX_gv_defaultPoint;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    lv_c = UnitBehaviorCount(lv_mine, "AahaHarvesting");
    auto1107781C_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto1107781C_ai >= 0 && lv_i <= auto1107781C_ae) || (auto1107781C_ai < 0 && lv_i >= auto1107781C_ae) ) ; lv_i += auto1107781C_ai ) {
        lv_pb = PointWithOffsetPolar(lv_pa, 1.5625, (lv_angelBase + (lv_i * lv_angelInc)));
        lv_u = UnitBehaviorEffectUnit(lv_mine, "AahaHarvesting", c_effectUnitCaster, lv_i);
        UnitSetPosition(lv_u, lv_pb, true);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AahaPlace_Init () {
    libGAwX_gt_AahaPlace = TriggerCreate("libGAwX_gt_AahaPlace_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AahaPlace, null, AbilityCommand("Aaha", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak Register Unit
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakRegisterUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitAbility(libGAwX_gt_AfakCancel, lv_c, AbilityCommand("Aatk", 0), c_unitAbilStageCancel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakRegisterUnit_Init () {
    libGAwX_gt_AfakRegisterUnit = TriggerCreate("libGAwX_gt_AfakRegisterUnit_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AfakRegisterUnit, null, "AfakUnitRegister", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak - Order Replace
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakOrderReplace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_order = OrderTargetingUnit(AbilityCommand("Aatk", 0), lv_t);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitOrderIsValid(lv_c, lv_order) == true)) {
        UnitIssueOrder(lv_c, OrderTargetingUnit(AbilityCommand("Aatk", 0), lv_t), c_orderQueueReplace);
    }
    else {
        if ((UnitCheckAbilCmdState(lv_c, AbilityCommand("Afak", 0), c_cmdStateIsAutoCast) == false)) {
            UnitBehaviorRemove(lv_c, "UseAfak", c_unitBehaviorCountAll);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakOrderReplace_Init () {
    libGAwX_gt_AfakOrderReplace = TriggerCreate("libGAwX_gt_AfakOrderReplace_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AfakOrderReplace, c_playerAny, "Afak");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak - Auto Apply
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakAutoApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitCheckAbilCmdState(lv_c, AbilityCommand("Afak", 0), c_cmdStateIsAutoCast) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_c, "UseAfak", lv_c, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakAutoApply_Init () {
    libGAwX_gt_AfakAutoApply = TriggerCreate("libGAwX_gt_AfakAutoApply_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AfakAutoApply, null, "AfakUnitRegister", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitAbilityAutoCastChange(libGAwX_gt_AfakAutoApply, null, AbilityCommand("Afak", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak - Auto Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakAutoRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_c, "UseAfak", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakAutoRemove_Init () {
    libGAwX_gt_AfakAutoRemove = TriggerCreate("libGAwX_gt_AfakAutoRemove_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libGAwX_gt_AfakAutoRemove, null, AbilityCommand("Afak", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak - End
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCheckAbilCmdState(lv_c, AbilityCommand("Afak", 0), c_cmdStateIsAutoCast) == false)) {
        UnitBehaviorRemove(lv_c, "UseAfak", c_unitBehaviorCountAll);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakEnd_Init () {
    libGAwX_gt_AfakEnd = TriggerCreate("libGAwX_gt_AfakEnd_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AfakEnd, c_playerAny, "AfakMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afak - Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AfakCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCheckAbilCmdState(lv_c, AbilityCommand("Afak", 0), c_cmdStateIsAutoCast) == false) && (UnitCheckAbilCmdState(lv_c, AbilityCommand("Aatk", 0), c_cmdStateExecuting) == false) && (OrderGetAbilityCommand(UnitOrder(lv_c, 0)) != AbilityCommand("Aatk", 0))) {
        UnitBehaviorRemove(lv_c, "UseAfak", c_unitBehaviorCountAll);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AfakCancel_Init () {
    libGAwX_gt_AfakCancel = TriggerCreate("libGAwX_gt_AfakCancel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arai - Summon Count
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AraiSummonCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    int lv_c;
    int lv_i;
    unit lv_ukill;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_ug = libGAwX_gv_playerSkeletons[lv_p];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_ug, lv_u);
    while ((UnitGroupCount(lv_ug, c_unitCountAlive) > libGAwX_gv_bj_MAX_SKELETONS)) {
        lv_ukill = UnitGroupUnit(lv_ug, 1);
        UnitGroupRemove(lv_ug, lv_ukill);
        UnitKill(lv_ukill);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AraiSummonCount_Init () {
    libGAwX_gt_AraiSummonCount = TriggerCreate("libGAwX_gt_AraiSummonCount_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AraiSummonCount, null, "Arai", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arai - Smart Cast
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AraiSmartCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_w;
    unit lv_t;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();
    lv_w = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_w, "MeatWagonHasCargo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = UnitCargo(lv_w, 1);
    lv_order = Order(AbilityCommand("Sch2", 3));
    OrderSetTargetPassenger(lv_order, lv_t);
    UnitIssueOrder(lv_w, lv_order, c_orderQueueAddToFront);
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_c, "Arai", lv_t);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AraiSmartCast_Init () {
    libGAwX_gt_AraiSmartCast = TriggerCreate("libGAwX_gt_AraiSmartCast_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AraiSmartCast, null, AbilityCommand("Arai", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sacrifice Cancel Remove Buff
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_SacrificeCancelRemoveBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "AsacChanneling", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_SacrificeCancelRemoveBuff_Init () {
    libGAwX_gt_SacrificeCancelRemoveBuff = TriggerCreate("libGAwX_gt_SacrificeCancelRemoveBuff_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_SacrificeCancelRemoveBuff, null, AbilityCommand("usapTrain", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sacrifice Finish Remove Unit
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_SacrificeFinishRemoveUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pit;
    unit lv_acolyte;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pit = EventUnit();
    lv_acolyte = UnitBehaviorEffectUnit(lv_pit, "AsacChanneling", c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, UnitTypeGetName(UnitGetType(lv_acolyte)), true);
    UnitRemove(lv_acolyte);
    UnitBehaviorRemove(lv_pit, "AsacChanneling", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_SacrificeFinishRemoveUnit_Init () {
    libGAwX_gt_SacrificeFinishRemoveUnit = TriggerCreate("libGAwX_gt_SacrificeFinishRemoveUnit_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_SacrificeFinishRemoveUnit, null, AbilityCommand("usapTrain", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Astn - Cancel Cooldown
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AstnCancelCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveCooldown(lv_unit, "Abil/Astn");
    UnitAddCooldown(lv_unit, "Abil/Astn", 30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AstnCancelCooldown_Init () {
    libGAwX_gt_AstnCancelCooldown = TriggerCreate("libGAwX_gt_AstnCancelCooldown_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AstnCancelCooldown, null, AbilityCommand("AstnUn", 0), c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUcb - Unique Summon Buff
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUcbUniqueSummonBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoner;
    unit lv_summoned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoner = EventUnit();
    lv_summoned = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_summoner, libGAwX_gv_aUcbMarker) >= 5)) {
        UnitBehaviorRemove(lv_summoner, libGAwX_gv_aUcbMarker, 1);
    }

    UnitBehaviorAdd(lv_summoner, libGAwX_gv_aUcbMarker, lv_summoned, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUcbUniqueSummonBuff_Init () {
    libGAwX_gt_AUcbUniqueSummonBuff = TriggerCreate("libGAwX_gt_AUcbUniqueSummonBuff_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_AUcbUniqueSummonBuff, null, "AUcb", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUcs - Max Targets
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUcsMaxTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targets = EventPlayerEffectUsedAmountInt(c_effectAmountFound, true);

    // Conditions
    if (testConds) {
        if (!((lv_targets >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUcsMaxTargets_Init () {
    libGAwX_gt_AUcsMaxTargets = TriggerCreate("libGAwX_gt_AUcsMaxTargets_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AUcsMaxTargets, c_playerAny, "AUcsSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUls - Leash
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUlsLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    point lv_tP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnit();
    lv_caster = UnitBehaviorEffectUnit(lv_target, libGAwX_gv_aUlsPermanentBuff, c_effectUnitCaster, 0);
    lv_tP = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_caster), libGAwX_gv_aUlsLeashDistance));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_target, libGAwX_gv_aUlsLeashBuff) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_target, OrderTargetingPoint(null, lv_tP), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUlsLeash_Init () {
    libGAwX_gt_AUlsLeash = TriggerCreate("libGAwX_gt_AUlsLeash_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AUlsLeash, null, libGAwX_gv_aUlsLeashBuff, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AUlsLeash, null, libGAwX_gv_aUlsLeashBuff, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUls - Heal Order
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUlsHealOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = UnitBehaviorEffectUnit(lv_target, libGAwX_gv_aUlsPermanentBuff, c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_target, OrderTargetingUnit(libGAwX_gv_aUlsHealCmd, lv_caster), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUlsHealOrder_Init () {
    libGAwX_gt_AUlsHealOrder = TriggerCreate("libGAwX_gt_AUlsHealOrder_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AUlsHealOrder, c_playerAny, libGAwX_gv_aUlsHealNotice);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUls - Finish
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUlsFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnit();
    lv_caster = UnitBehaviorEffectUnit(lv_target, libGAwX_gv_aUlsPermanentBuff, c_effectUnitCaster, 0);
    lv_order = OrderTargetingUnit(libGAwX_gv_aUlsReturnCmd, lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitOrderIsValid(lv_target, lv_order) == true)) {
        UnitIssueOrder(lv_target, lv_order, c_orderQueueReplace);
    }
    else {
        UnitKill(lv_target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUlsFinish_Init () {
    libGAwX_gt_AUlsFinish = TriggerCreate("libGAwX_gt_AUlsFinish_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AUlsFinish, null, libGAwX_gv_aUlsLeashBuff, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUls - Fail Safe
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AUlsFailSafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AUlsFailSafe_Init () {
    libGAwX_gt_AUlsFailSafe = TriggerCreate("libGAwX_gt_AUlsFailSafe_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_AUlsFailSafe, null, libGAwX_gv_aUlsReturnCmd, c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Time Hack
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ReviveTimeHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_altar;
    fixed lv_progressTime;
    fixed lv_timeNeed;
    unit lv_hero;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_altar = EventUnit();
    lv_progressTime = UnitQueueItemTime(lv_altar, c_unitQueueTimeTotal, 1);
    lv_hero = EventUnitAbilityOtherUnit();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_progressTime >= 3600.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timeNeed = (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_hero), "RepairTime", lv_player) * libGAwX_gv_heroReviveCostTimeLevelFactor * UnitXPGetCurrentLevel(lv_hero, "AHer"));
    if ((libGAwX_gv_heroReviveCostMaxTime < lv_timeNeed)) {
        lv_timeNeed = libGAwX_gv_heroReviveCostMaxTime;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "Arev", "BaseInfo.Time", lv_player, FixedToString(lv_timeNeed, c_fixedPrecisionAny));
    UnitSetProgressStage(lv_altar, 1, c_unitProgressStageCancel);
    UnitIssueOrder(lv_altar, libNtve_gf_ReviveOrderWithNoTarget(EventUnitAbility(), lv_hero), c_orderQueueReplace);
    CatalogFieldValueSet(c_gameCatalogAbil, "Arev", "BaseInfo.Time", lv_player, "5000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ReviveTimeHack_Init () {
    libGAwX_gt_ReviveTimeHack = TriggerCreate("libGAwX_gt_ReviveTimeHack_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_ReviveTimeHack, null, AbilityCommand("Arev", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdl/Abds - Blight Dispel Large/Small
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AbdlAbdsBlightDispelLargeSmall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(UnitGetPosition(EventUnit()), UserDataGetFixed("AbilityDataBlightDispel", ((EventUnitBehavior())), "Radius", 1), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AbdlAbdsBlightDispelLargeSmall_Init () {
    libGAwX_gt_AbdlAbdsBlightDispelLargeSmall = TriggerCreate("libGAwX_gt_AbdlAbdsBlightDispelLargeSmall_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AbdlAbdsBlightDispelLargeSmall, null, "Abdl", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AbdlAbdsBlightDispelLargeSmall, null, "Abds", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anca - Capture
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AncaCapture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_level;
    string lv_effect;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_level = (UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNcaAbilLink) + 1);
    lv_effect = ((libGAwX_gv_aNcaTriggerEffectStringBase + IntToString(lv_level)));
    lv_amount = RandomFixed(UnitWeaponDamage(lv_caster, 1, c_unitAttributeNone, true), UnitWeaponDamage(lv_caster, 1, c_unitAttributeNone, false));

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, lv_effect, "Amount", EventPlayer(), FixedToString(lv_amount, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_caster, lv_effect, lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AncaCapture_Init () {
    libGAwX_gt_AncaCapture = TriggerCreate("libGAwX_gt_AncaCapture_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AncaCapture, c_playerAny, libGAwX_gv_aNcaEventEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANcs - Missile Art
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANcsMissileArt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_center;
    point lv_point;
    unit lv_caster;
    string lv_searchEffect;
    fixed lv_range;
    int lv_level;
    int lv_missileCount;
    int lv_i;
    region lv_reg;
    fixed lv_period;

    // Automatic Variable Declarations
    int auto1FC72BA5_ae;
    const int auto1FC72BA5_ai = 1;

    // Variable Initialization
    lv_center = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchEffect = "";
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNcsAbilLink);
    lv_missileCount = (libGAwX_gv_aNcsMissileCountBase + (libGAwX_gv_aNcsMissileCountFactor * lv_level));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearch", lv_center) == true)) {
        lv_searchEffect = "ANcsStunSearch";
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchA", lv_center) == true)) {
        lv_searchEffect = "ANcsStunSearchA";
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchB", lv_center) == true)) {
        lv_searchEffect = "ANcsStunSearchB";
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchC", lv_center) == true)) {
        lv_searchEffect = "ANcsStunSearchC";
    }
    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_searchEffect, "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_reg = RegionCircle(lv_center, lv_range);
    lv_period = (libGAwX_gv_aNcsMissileDuration / lv_missileCount);
    auto1FC72BA5_ae = lv_missileCount;
    lv_i = 1;
    for ( ; ( (auto1FC72BA5_ai >= 0 && lv_i <= auto1FC72BA5_ae) || (auto1FC72BA5_ai < 0 && lv_i >= auto1FC72BA5_ae) ) ; lv_i += auto1FC72BA5_ai ) {
        if ((UnitHasBehavior(lv_caster, "ChannelingWar3Abilites") == true)) {
            lv_point = RegionRandomPoint(lv_reg);
            UnitCreateEffectPoint(lv_caster, libGAwX_gv_aNcsMissileEffect, lv_point);
            Wait(lv_period, c_timeGame);
        }
        else {
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANcsMissileArt_Init () {
    libGAwX_gt_ANcsMissileArt = TriggerCreate("libGAwX_gt_ANcsMissileArt_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANcsMissileArt, c_playerAny, libGAwX_gv_aNcsEffectLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANcs - Cursor
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANcsCursor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_level;
    point lv_center;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNcsAbilLink);
    lv_center = libGAwX_gv_defaultPoint;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearch", lv_center) == true)) {
        CatalogReferenceSet("Effect,ANcsStunSearchCursor,AreaArray[0].Radius", EventPlayer(), CatalogReferenceGet("Effect,ANcsStunSearch,AreaArray[0].Radius", c_playerAny));
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchA", lv_center) == true)) {
        CatalogReferenceSet("Effect,ANcsStunSearchCursor,AreaArray[0].Radius", EventPlayer(), CatalogReferenceGet("Effect,ANcsStunSearchA,AreaArray[0].Radius", c_playerAny));
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchB", lv_center) == true)) {
        CatalogReferenceSet("Effect,ANcsStunSearchCursor,AreaArray[0].Radius", EventPlayer(), CatalogReferenceGet("Effect,ANcsStunSearchB,AreaArray[0].Radius", c_playerAny));
    }
    else if ((libNtve_gf_UnitCanCreateEffectAtPoint(lv_caster, "ANcsStunSearchC", lv_center) == true)) {
        CatalogReferenceSet("Effect,ANcsStunSearchCursor,AreaArray[0].Radius", EventPlayer(), CatalogReferenceGet("Effect,ANcsStunSearchC,AreaArray[0].Radius", c_playerAny));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANcsCursor_Init () {
    libGAwX_gt_ANcsCursor = TriggerCreate("libGAwX_gt_ANcsCursor_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_ANcsCursor, null, AbilityCommand("NrobLearn", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGAwX_gt_ANcsCursor, null, AbilityCommand("NtinLearn", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANdb - Multiplier W1
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANdbMultiplierW1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_level;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNdbAbilLink);
    lv_multiplier = (libGAwX_gv_aNdbMultiplierBase + (lv_level * libGAwX_gv_aNdbExtraMultiplierPerLevel));
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 1, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANdbMultiplierW1_Init () {
    libGAwX_gt_ANdbMultiplierW1 = TriggerCreate("libGAwX_gt_ANdbMultiplierW1_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANdbMultiplierW1, c_playerAny, "Npbm1Crit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANdb - Multiplier W2
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANdbMultiplierW2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_level;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aNdbAbilLink);
    lv_multiplier = (libGAwX_gv_aNdbMultiplierBase + (lv_level * libGAwX_gv_aNdbExtraMultiplierPerLevel));
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 2, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANdbMultiplierW2_Init () {
    libGAwX_gt_ANdbMultiplierW2 = TriggerCreate("libGAwX_gt_ANdbMultiplierW2_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANdbMultiplierW2, c_playerAny, "Npbm2Crit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANdb - Target Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANdbTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, libGAwX_gv_aNdbFilter) == true)) {
        UnitBehaviorAdd(lv_caster, libGAwX_gv_aNdbControllerContrary, lv_caster, 1);
    }
    else {
        UnitBehaviorRemove(lv_caster, libGAwX_gv_aNdbControllerContrary, c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANdbTargetCheck_Init () {
    libGAwX_gt_ANdbTargetCheck = TriggerCreate("libGAwX_gt_ANdbTargetCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANdb - Target Check Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANdbTargetCheckRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitStartedAttack2(libGAwX_gt_ANdbTargetCheck, lv_u, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANdbTargetCheckRegister_Init () {
    libGAwX_gt_ANdbTargetCheckRegister = TriggerCreate("libGAwX_gt_ANdbTargetCheckRegister_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ANdbTargetCheckRegister, null, "ANdb1", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ANdbTargetCheckRegister, null, "ANdb2", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ANdbTargetCheckRegister, null, "ANdb3", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANhs - Missile Art
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANhsMissileArt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_center;
    point lv_point;
    unit lv_caster;
    string lv_searchEffect;
    fixed lv_range;
    int lv_missileCount;
    int lv_i;
    region lv_reg;

    // Automatic Variable Declarations
    int auto99608869_ae;
    const int auto99608869_ai = 1;

    // Variable Initialization
    lv_center = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchEffect = libGAwX_gv_aNhsSearchEffectLink;
    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_searchEffect, "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_missileCount = libGAwX_gv_aNhsMissileCount;
    lv_reg = RegionCircle(lv_center, lv_range);

    // Actions
    if (!runActions) {
        return true;
    }

    auto99608869_ae = lv_missileCount;
    lv_i = 1;
    for ( ; ( (auto99608869_ai >= 0 && lv_i <= auto99608869_ae) || (auto99608869_ai < 0 && lv_i >= auto99608869_ae) ) ; lv_i += auto99608869_ai ) {
        lv_point = RegionRandomPoint(lv_reg);
        UnitCreateEffectPoint(lv_caster, libGAwX_gv_aNhsMissileEffect, lv_point);
        Wait(libGAwX_gv_aNhsMissilePeriod, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANhsMissileArt_Init () {
    libGAwX_gt_ANhsMissileArt = TriggerCreate("libGAwX_gt_ANhsMissileArt_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANhsMissileArt, c_playerAny, libGAwX_gv_aNhsEffectLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - Register Unit
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaRegisterUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGAwX_gv_aNfaRegisterGroup, lv_u) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGAwX_gv_aNfaRegisterGroup, lv_u);
    GAw3_AddEventUnitAbility(libGAwX_gt_ANfaCancel, lv_u, AbilityCommand("Aatk", 0), c_unitAbilStageCancel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaRegisterUnit_Init () {
    libGAwX_gt_ANfaRegisterUnit = TriggerCreate("libGAwX_gt_ANfaRegisterUnit_Func");
    libGAw3_gf_AnyUnitBehaviorActivateCountPreplaced(libGAwX_gt_ANfaRegisterUnit, libGAwX_gv_aNfaBehaviorLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - Order Replace
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaOrderReplace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_order = OrderTargetingUnit(AbilityCommand("Aatk", 0), lv_t);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitOrderIsValid(lv_c, lv_order) == true)) {
        UnitIssueOrder(lv_c, lv_order, c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaOrderReplace_Init () {
    libGAwX_gt_ANfaOrderReplace = TriggerCreate("libGAwX_gt_ANfaOrderReplace_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANfaOrderReplace, c_playerAny, libGAwX_gv_aNfaShellEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - Auto Apply
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaAutoApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitCheckAbilCmdState(lv_c, libGAwX_gv_aNfaAbilCmd, c_cmdStateIsAutoCast) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_c, libGAwX_gv_aNfaBehaviorLink, lv_c, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaAutoApply_Init () {
    libGAwX_gt_ANfaAutoApply = TriggerCreate("libGAwX_gt_ANfaAutoApply_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libGAwX_gt_ANfaAutoApply, null, libGAwX_gv_aNfaAbilCmd, c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - Auto Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaAutoRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_c, libGAwX_gv_aNfaBehaviorLink, c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaAutoRemove_Init () {
    libGAwX_gt_ANfaAutoRemove = TriggerCreate("libGAwX_gt_ANfaAutoRemove_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libGAwX_gt_ANfaAutoRemove, null, libGAwX_gv_aNfaAbilCmd, c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - End
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_c, libGAwX_gv_aNfaBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCheckAbilCmdState(lv_c, libGAwX_gv_aNfaAbilCmd, c_cmdStateIsAutoCast) == false)) {
        UnitBehaviorRemove(lv_c, libGAwX_gv_aNfaBehaviorLink, c_unitBehaviorCountAll);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaEnd_Init () {
    libGAwX_gt_ANfaEnd = TriggerCreate("libGAwX_gt_ANfaEnd_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANfaEnd, c_playerAny, libGAwX_gv_aNfaCostEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANfa - Cancel
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANfaCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCheckAbilCmdState(lv_c, libGAwX_gv_aNfaAbilCmd, c_cmdStateIsAutoCast) == false) && (UnitCheckAbilCmdState(lv_c, AbilityCommand("Aatk", 0), c_cmdStateExecuting) == false) && (OrderGetAbilityCommand(UnitOrder(lv_c, 0)) != AbilityCommand("Aatk", 0))) {
        UnitBehaviorRemove(lv_c, libGAwX_gv_aNfaBehaviorLink, c_unitBehaviorCountAll);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANfaCancel_Init () {
    libGAwX_gt_ANfaCancel = TriggerCreate("libGAwX_gt_ANfaCancel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANst - Summon
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANstSummon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_c;
    fixed lv_facing;
    point lv_pCaster;
    point lv_pRCenter;
    point lv_p1;
    point lv_p2;
    point lv_p;
    point lv_pt;
    unit lv_dummy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_facing = UnitGetFacing(lv_c);
    lv_pCaster = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_pRCenter = PointWithOffsetPolar(lv_pCaster, (0.0 - libGAwX_gv_aNstArea), lv_facing);
    lv_p1 = PointWithOffsetPolar(lv_pRCenter, libGAwX_gv_aNstArea, (lv_facing + 90.0));
    lv_p2 = PointWithOffsetPolar(lv_pRCenter, libGAwX_gv_aNstArea, (lv_facing - 90.0));
    lv_p = libNtve_gf_RandomPointBetweenPoints(lv_p1, lv_p2);
    lv_pt = PointWithOffsetPolar(lv_p, (libGAwX_gv_aNstArea * 2.0), lv_facing);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libGAwX_gv_aNstCasterDummy, 0, lv_player, lv_p, lv_facing);
    lv_dummy = UnitLastCreated();
    UnitCreateEffectPoint(lv_dummy, libGAwX_gv_aNstMissileEffect, lv_pt);
    UnitRemove(lv_dummy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANstSummon_Init () {
    libGAwX_gt_ANstSummon = TriggerCreate("libGAwX_gt_ANstSummon_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANstSummon, c_playerAny, libGAwX_gv_aNstSummonNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANvc - Missile Pad
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANvcMissilePad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pCenter;
    region lv_r;
    point lv_p;
    unit lv_volcano;
    int lv_i;

    // Automatic Variable Declarations
    const int auto13D334B0_ae = libGAwX_gv_aNvcRockRingCount;
    const int auto13D334B0_ai = 1;

    // Variable Initialization
    lv_pCenter = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_r = RegionCircle(lv_pCenter, libGAwX_gv_aNvcArea);
    lv_volcano = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto13D334B0_ai >= 0 && lv_i <= auto13D334B0_ae) || (auto13D334B0_ai < 0 && lv_i >= auto13D334B0_ae) ) ; lv_i += auto13D334B0_ai ) {
        lv_p = RegionRandomPoint(lv_r);
        UnitCreateEffectPoint(lv_volcano, libGAwX_gv_aNvcRockMissileEffect, lv_p);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANvcMissilePad_Init () {
    libGAwX_gt_ANvcMissilePad = TriggerCreate("libGAwX_gt_ANvcMissilePad_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANvcMissilePad, c_playerAny, libGAwX_gv_aNvcRockNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANlm - Split Duration
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANlmSplitDuration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;
    fixed lv_dur;
    int lv_gen;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_dur = (UnitBehaviorDuration(lv_c, libGAwX_gv_aNlmTimedBuff) + libGAwX_gv_aNlmLifeDurationSplitBonus);
    lv_gen = UnitBehaviorCount(lv_c, libGAwX_gv_aNlmGenerationBuff);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_gen == 0)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_c), "SetTintColor 120,120,120 0.000000 OneShot {Lava Spawn}");
        ActorSend(libNtve_gf_MainActorofUnit(lv_t), "SetTintColor 120,120,120 0.000000 OneShot {Lava Spawn}");
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lv_c), "SetTintColor 85,85,85 0.000000 OneShot {Lava Spawn}");
        ActorSend(libNtve_gf_MainActorofUnit(lv_t), "SetTintColor 85,85,85 0.000000 OneShot {Lava Spawn}");
    }
    UnitBehaviorSetDuration(lv_c, libGAwX_gv_aNlmTimedBuff, lv_dur);
    UnitBehaviorSetDuration(lv_t, libGAwX_gv_aNlmTimedBuff, lv_dur);
    UnitBehaviorAdd(lv_c, "BNlmGeneration", lv_c, 1);
    UnitBehaviorAdd(lv_t, "BNlmGeneration", lv_c, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANlmSplitDuration_Init () {
    libGAwX_gt_ANlmSplitDuration = TriggerCreate("libGAwX_gt_ANlmSplitDuration_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANlmSplitDuration, c_playerAny, libGAwX_gv_aNlmCopyNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANlm - Split Count
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANlmSplitCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_count = UnitBehaviorCount(lv_u, libGAwX_gv_aNlmAttackCountBuff);

    // Conditions
    if (testConds) {
        if (!((lv_count >= libGAwX_gv_aNlmSplitAttackCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_u, libGAwX_gv_aNlmAttackCountBuff, c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_u, libGAwX_gv_aNlmSplitBuff, lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANlmSplitCount_Init () {
    libGAwX_gt_ANlmSplitCount = TriggerCreate("libGAwX_gt_ANlmSplitCount_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ANlmSplitCount, null, libGAwX_gv_aNlmAttackCountBuff, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANef - Summon
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANefSummon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_center;
    unit lv_caster;
    int lv_p;
    unit lv_u1;
    unit lv_u2;
    unit lv_u3;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_center = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "npn5", 0, 0, PointWithOffsetPolar(lv_center, libGAwX_gv_aNefArea, libNtve_gf_RandomAngle()));
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "npn5", 0, 0, PointWithOffsetPolar(lv_center, libGAwX_gv_aNefArea, libNtve_gf_RandomAngle()));
    lv_u2 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "npn5", 0, 0, PointWithOffsetPolar(lv_center, libGAwX_gv_aNefArea, libNtve_gf_RandomAngle()));
    lv_u3 = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_u1, false);
    libNtve_gf_ShowHideUnit(lv_u2, false);
    libNtve_gf_ShowHideUnit(lv_u3, false);
    UnitCreateEffectPoint(lv_caster, libGAwX_gv_aNefMissile1, UnitGetPosition(lv_u1));
    UnitCreateEffectPoint(lv_caster, libGAwX_gv_aNefMissile2, UnitGetPosition(lv_u2));
    UnitCreateEffectPoint(lv_caster, libGAwX_gv_aNefMissile3, UnitGetPosition(lv_u3));
    libNtve_gf_ShowHideUnit(lv_caster, false);
    UnitSetState(lv_caster, c_unitStateStunned, true);
    libNtve_gf_MakeUnitInvulnerable(lv_caster, true);
    UnitRemove(lv_u1);
    UnitRemove(lv_u2);
    UnitRemove(lv_u3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANefSummon_Init () {
    libGAwX_gt_ANefSummon = TriggerCreate("libGAwX_gt_ANefSummon_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANefSummon, c_playerAny, libGAwX_gv_aNefSummonNotice);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANef - Summoned Link
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANefSummonedLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoned;
    unit lv_summoner;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoned = EventUnit();
    lv_summoner = UnitBehaviorEffectUnit(lv_summoned, EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_p = UnitGetOwner(lv_summoner);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_summoner, libGAwX_gv_aNefUniqueBuff, lv_summoned, 1);
    if ((UnitIsSelected(lv_summoner, lv_p) == true)) {
        UnitAddChargeUsed(lv_summoner, "GAw3_SelectedByOwner", 1.0);
        Wait(1.0, c_timeGame);
        UnitSelect(lv_summoner, lv_p, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANefSummonedLink_Init () {
    libGAwX_gt_ANefSummonedLink = TriggerCreate("libGAwX_gt_ANefSummonedLink_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ANefSummonedLink, null, libGAwX_gv_aNefSummonBuff, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANef - Summoned Killed
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANefSummonedKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitBehaviorCount(lv_caster, libGAwX_gv_aNefUniqueBuff) == 0)) {
        UnitSetPosition(lv_caster, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), false);
        libNtve_gf_ShowHideUnit(lv_caster, true);
        UnitSetState(lv_caster, c_unitStateStunned, false);
        libNtve_gf_MakeUnitInvulnerable(lv_caster, false);
        UnitKill(lv_caster);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANefSummonedKilled_Init () {
    libGAwX_gt_ANefSummonedKilled = TriggerCreate("libGAwX_gt_ANefSummonedKilled_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANefSummonedKilled, c_playerAny, libGAwX_gv_aNefKilledNotice);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANef - Summoned Expired
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANefSummonedExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(lv_target);
    if ((libNtve_gf_UnitIsHidden(lv_caster) == true)) {
        libNtve_gf_ShowHideUnit(lv_caster, true);
        UnitSetState(lv_caster, c_unitStateStunned, false);
        libNtve_gf_MakeUnitInvulnerable(lv_caster, false);
        UnitSetPosition(lv_caster, UnitGetPosition(lv_target), false);
        if ((UnitGetChargeUsed(lv_caster, "GAw3_SelectedByOwner") > 0.0)) {
            UnitSelect(lv_target, lv_p, true);
            libNtve_gf_UnitRemoveChargeUsed(lv_caster, "GAw3_SelectedByOwner");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANefSummonedExpired_Init () {
    libGAwX_gt_ANefSummonedExpired = TriggerCreate("libGAwX_gt_ANefSummonedExpired_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ANefSummonedExpired, c_playerAny, libGAwX_gv_aNefExpiredNotice);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ANsy - Rate
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ANsyRate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_factory;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventUnit();
    lv_factory = EventUnitCreatedUnit();
    lv_upgradeLevel = UnitAbilityGetLevel(lv_c, "ANeg");

    // Conditions
    if (testConds) {
        if (!((UnitAbilityCheck(lv_c, "ANeg", true) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_factory, "EngineUpgradeTrainSpeedBuff", lv_c, (lv_upgradeLevel + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ANsyRate_Init () {
    libGAwX_gt_ANsyRate = TriggerCreate("libGAwX_gt_ANsyRate_Func");
    TriggerAddEventUnitCreated(libGAwX_gt_ANsyRate, null, "ANsy", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACct - Multiplier W1
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACctMultiplierW1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_multiplier = libGAwX_gv_aCctMultiplier;
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 1, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACctMultiplierW1_Init () {
    libGAwX_gt_ACctMultiplierW1 = TriggerCreate("libGAwX_gt_ACctMultiplierW1_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ACctMultiplierW1, c_playerAny, "ACctW1CritTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACct - Multiplier W2
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACctMultiplierW2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_multiplier;
    fixed lv_multiplied;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_multiplier = libGAwX_gv_aCctMultiplier;
    lv_multiplied = libGAwX_gf_FireWeaponEffectOnUnitWithMultiplier(lv_caster, lv_target, 2, lv_multiplier);

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_CreateCritTextTag(lv_multiplied, UnitGetPosition(lv_caster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACctMultiplierW2_Init () {
    libGAwX_gt_ACctMultiplierW2 = TriggerCreate("libGAwX_gt_ACctMultiplierW2_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ACctMultiplierW2, c_playerAny, "ACctW2CritTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACct - Target Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACctTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, libGAwX_gv_aCctFilter) == true)) {
        UnitBehaviorRemove(lv_caster, libGAwX_gv_aCctController, c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lv_caster, libGAwX_gv_aCctController, lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACctTargetCheck_Init () {
    libGAwX_gt_ACctTargetCheck = TriggerCreate("libGAwX_gt_ACctTargetCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACct - Target Check Register
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACctTargetCheckRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitStartedAttack2(libGAwX_gt_ACctTargetCheck, lv_u, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACctTargetCheckRegister_Init () {
    libGAwX_gt_ACctTargetCheckRegister = TriggerCreate("libGAwX_gt_ACctTargetCheckRegister_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_ACctTargetCheckRegister, null, libGAwX_gv_aCctAbilBehaviorLink, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACpv - Target Check
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ACpvTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, libGAwX_gv_aCpvFilter) == true)) {
        UnitBehaviorRemove(lv_caster, libGAwX_gv_aCpvController, c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lv_caster, libGAwX_gv_aCpvController, lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ACpvTargetCheck_Init () {
    libGAwX_gt_ACpvTargetCheck = TriggerCreate("libGAwX_gt_ACpvTargetCheck_Func");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_ACpvTargetCheck, null, "npn31");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_ACpvTargetCheck, null, "npn61");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_ACpvTargetCheck, null, "nsgn1");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_ACpvTargetCheck, null, "nsgb1");
    TriggerAddEventUnitStartedAttack2(libGAwX_gt_ACpvTargetCheck, null, "nsgh1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undrop Items
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_UndropItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    unit lv_item;
    unit lv_hero;
    unit lv_charge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_item = OrderGetTargetItem(lv_order);
    lv_hero = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libGAwX_gf_ItemDroppable(lv_item) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "CancelInventoryDropOrder", lv_hero);
    UnitCreateEffectUnit(lv_hero, "CancelInventoryMoveOrder", lv_hero);
    UnitCreateEffectUnit(lv_hero, "CancelInventoryPawnInstantOrder", lv_hero);
    if ((UnitInventoryUnit(lv_item) != lv_hero)) {
        libGAwX_gf_GiveItemToUnit(lv_hero, lv_item);
    }

    libNtve_gf_UIErrorMessage(PlayerGroupSingle(OrderGetPlayer(lv_order)), StringExternal("Errors/Cantdropitem"), SoundLink("ErrorMessage", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_UndropItems_Init () {
    libGAwX_gt_UndropItems = TriggerCreate("libGAwX_gt_UndropItems_Func");
    TriggerAddEventUnitOrder(libGAwX_gt_UndropItems, null, AbilityCommand("AInv", 0));
    TriggerAddEventUnitOrder(libGAwX_gt_UndropItems, null, AbilityCommand("AInv", 6));
}

//--------------------------------------------------------------------------------------------------
// Trigger: APh1
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_APh1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_t, "APh1Search", lv_t);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_APh1_Init () {
    libGAwX_gt_APh1 = TriggerCreate("libGAwX_gt_APh1_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_APh1, c_playerAny, "APh1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: APh2
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_APh2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_t, "APh2Search", lv_t);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_APh2_Init () {
    libGAwX_gt_APh2 = TriggerCreate("libGAwX_gt_APh2_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_APh2, c_playerAny, "APh2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: APh3
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_APh3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_t, "APh3Search", lv_t);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_APh3_Init () {
    libGAwX_gt_APh3 = TriggerCreate("libGAwX_gt_APh3_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_APh3, c_playerAny, "APh3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AIrm - Regen
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AIrmRegen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_currReg;
    fixed lv_currMana;
    fixed lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitHasBehavior(lv_u, libGAwX_gv_aIrmBehaviorLink) == true)) {
            lv_currReg = UnitGetPropertyFixed(lv_u, c_unitPropEnergyRegen, c_unitPropCurrent);
            lv_currMana = UnitGetPropertyFixed(lv_u, c_unitPropEnergy, c_unitPropCurrent);
            lv_count = UnitBehaviorCount(lv_u, libGAwX_gv_aIrmBehaviorLink);
            UnitSetPropertyFixed(lv_u, c_unitPropEnergy, (lv_currMana + (lv_count * (lv_currReg * libGAwX_gv_aIrmManaRegenFraction))));
            Wait(1.0, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AIrmRegen_Init () {
    libGAwX_gt_AIrmRegen = TriggerCreate("libGAwX_gt_AIrmRegen_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AIrmRegen, null, libGAwX_gv_aIrmBehaviorLink, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AIrn - Regen
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AIrnRegen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_currReg;
    fixed lv_currMana;
    fixed lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitHasBehavior(lv_u, libGAwX_gv_aIrnBehaviorLink) == true)) {
            lv_currReg = UnitGetPropertyFixed(lv_u, c_unitPropEnergyRegen, c_unitPropCurrent);
            lv_currMana = UnitGetPropertyFixed(lv_u, c_unitPropEnergy, c_unitPropCurrent);
            lv_count = UnitBehaviorCount(lv_u, libGAwX_gv_aIrnBehaviorLink);
            UnitSetPropertyFixed(lv_u, c_unitPropEnergy, (lv_currMana + (lv_count * (lv_currReg * libGAwX_gv_aIrnManaRegenFraction))));
            Wait(1.0, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AIrnRegen_Init () {
    libGAwX_gt_AIrnRegen = TriggerCreate("libGAwX_gt_AIrnRegen_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AIrnRegen, null, libGAwX_gv_aIrnBehaviorLink, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Double-Click Hack
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_InventoryDoubleClickHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;
    order lv_order;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = libGAwX_gf_EventPlayer();
    lv_u = libGAwX_gf_EventUnit();
    lv_order = Order(AbilityCommand("Hearthstone", 0));
    lv_item = libGAwX_gf_EventUnit2();

    // Conditions
    if (testConds) {
        if (!((UnitOrderIsValid(lv_u, lv_order) == true))) {
            return false;
        }

        if (!((libGAw3_gf_ItemTypeOfUnit(UnitGetType(lv_item)) == "stwp"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, lv_order, c_orderQueueReplace);
    Wait(0.0625, c_timeGame);
    UISetTargetingOrder(PlayerGroupSingle(lv_p), null, null, false);
    Wait(0.0625, c_timeGame);
    UISetTargetingOrder(PlayerGroupSingle(lv_p), null, null, false);
    Wait(0.0625, c_timeGame);
    UISetTargetingOrder(PlayerGroupSingle(lv_p), null, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_InventoryDoubleClickHack_Init () {
    libGAwX_gt_InventoryDoubleClickHack = TriggerCreate("libGAwX_gt_InventoryDoubleClickHack_Func");
    libGAwX_gf_InventoryContainerIsDoubleClicked(libGAwX_gt_InventoryDoubleClickHack);
}

//--------------------------------------------------------------------------------------------------
// Trigger: stwp - Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_stwpRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_item) == "stwp")) {
        UnitBehaviorAdd(lv_unit, "AItpInvulnerable", lv_unit, 1);
        Wait(5.1, c_timeGame);
        UnitRemove(lv_item);
    }

    if ((UnitGetType(lv_item) == "ScrollofTownPortalAI")) {
        UnitBehaviorAdd(lv_unit, "AItpInvulnerable", lv_unit, 1);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_stwpRemove_Init () {
    libGAwX_gt_stwpRemove = TriggerCreate("libGAwX_gt_stwpRemove_Func");
    TriggerAddEventUnitInventoryChange(libGAwX_gt_stwpRemove, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: stwp - Hearthstone Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_stwpHearthstoneRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_items;
    unit lv_item;

    // Automatic Variable Declarations
    unitgroup autoF596DF2B_g;
    int autoF596DF2B_u;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_items = UnitInventoryGroup(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "AItpInvulnerable", lv_unit, 1);
    autoF596DF2B_g = lv_items;
    autoF596DF2B_u = UnitGroupCount(autoF596DF2B_g, c_unitCountAll);
    for (;; autoF596DF2B_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(autoF596DF2B_g, autoF596DF2B_u);
        if (lv_item == null) { break; }
        if ((UnitGetType(lv_item) == "stwp")) {
            break;
        }

    }
    if ((UnitGetType(lv_item) == "stwp")) {
        Wait(5.1, c_timeGame);
        UnitRemove(lv_item);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_stwpHearthstoneRemove_Init () {
    libGAwX_gt_stwpHearthstoneRemove = TriggerCreate("libGAwX_gt_stwpHearthstoneRemove_Func");
    TriggerAddEventUnitAbility(libGAwX_gt_stwpHearthstoneRemove, null, AbilityCommand("Hearthstone", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hearthstone - Set Charge
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_HearthstoneSetCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_c = UnitBehaviorCount(lv_u, libGAwX_gv_hearthstoneChargeBuff);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitRemoveChargeUsed(lv_u, libGAwX_gv_hearthstoneChargeLink);
    UnitAddChargeUsed(lv_u, libGAwX_gv_hearthstoneChargeLink, (libGAwX_gv_hearthstoneChargeMax - lv_c));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_HearthstoneSetCharge_Init () {
    libGAwX_gt_HearthstoneSetCharge = TriggerCreate("libGAwX_gt_HearthstoneSetCharge_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_HearthstoneSetCharge, null, libGAwX_gv_hearthstoneChargeBuff, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_HearthstoneSetCharge, null, libGAwX_gv_hearthstoneChargeBuff, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tret - Validator
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_tretValidator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    unit lv_unit;
    string lv_abil;
    int lv_index;
    int lv_inCheck;
    fixed lv_hp;
    fixed lv_mp;

    // Automatic Variable Declarations
    int autoDAC8A17E_i;
    int autoDAC8A17E_c;
    string autoDAC8A17E_eval;

    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_unit = EventUnit();
    lv_hp = UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent);
    lv_mp = UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_item) == libGAwX_gv_tretItemType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDAC8A17E_i=0;
    autoDAC8A17E_c=c_abilLearnCmdLearn20;
    autoDAC8A17E_eval="";
    for(;autoDAC8A17E_i<autoDAC8A17E_c;autoDAC8A17E_i+=1){

        autoDAC8A17E_eval=CatalogFieldValueGet(c_gameCatalogAbil,UnitGetType(lv_unit)+"Learn","InfoArray["+IntToString(autoDAC8A17E_i)+"].Abil",c_playerAny);
        if(CatalogEntryIsValid(c_gameCatalogAbil,autoDAC8A17E_eval)){
            lv_abil=autoDAC8A17E_eval;
            lv_index=autoDAC8A17E_i;
        }else{continue;}
        if ((UnitAbilityCheck(lv_unit, lv_abil, true) == true) && (UnitCheckAbilCmdState(lv_unit, AbilityCommand(lv_abil, 0), c_cmdStateCooldown) == false)) {
            lv_inCheck += 1;
        }

    }
    if ((lv_inCheck > 0)) {
        UnitRemove(lv_item);
        libGAwX_gf_SaveUnitReal(lv_unit, "temp_HP", lv_hp);
        libGAwX_gf_SaveUnitReal(lv_unit, "temp_MP", lv_mp);
        UnitCreateEffectUnit(lv_unit, libGAwX_gv_tretCopyEffect, lv_unit);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(UnitGetOwner(lv_unit)), StringExternal("Errors/Needretrainablehero"), SoundLink("InterfaceError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_tretValidator_Init () {
    libGAwX_gt_tretValidator = TriggerCreate("libGAwX_gt_tretValidator_Func");
    TriggerAddEventUnitInventoryChange(libGAwX_gt_tretValidator, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tret - Process
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_tretProcess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cu;
    unit lv_tu;
    int lv_c;
    int lv_i;
    unit lv_item;
    int lv_slot;
    int lv_container;
    string lv_abil;
    fixed lv_cooldown;
    int lv_level;
    string lv_cdlink;
    string lv_cdlinkLoc;
    fixed lv_hp;
    fixed lv_mp;
    int lv_p;
    unitgroup lv_selectionGroup;
    string lv_buff;

    // Automatic Variable Declarations
    int autoEE143E81_ae;
    const int autoEE143E81_ai = 1;
    int autoA37AFE0E_i;
    int autoA37AFE0E_c;
    string autoA37AFE0E_eval;
    int auto91A671BD_n;
    int auto91A671BD_i;
    int autoB4B451FC_ae;
    const int autoB4B451FC_ai = 1;

    // Variable Initialization
    lv_cu = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_tu = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_c = UnitInventoryCount(lv_cu, c_unitInventoryCountCarried);
    lv_hp = libGAwX_gf_GetUnitReal(lv_cu, "temp_HP");
    lv_mp = libGAwX_gf_GetUnitReal(lv_cu, "temp_MP");
    lv_p = UnitGetOwner(lv_cu);
    lv_selectionGroup = UnitGroupSelected(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_tu, "SubgroupIncrease", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_cu, "DisableXPGainingWhileDead", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_cu, "HeroHasUnspentSkillPoint", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_cu, "BEia", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_cu, "BEim", c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_cu, "RetrainNoUse", lv_cu, 1);
    autoEE143E81_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoEE143E81_ai >= 0 && lv_i <= autoEE143E81_ae) || (autoEE143E81_ai < 0 && lv_i >= autoEE143E81_ae) ) ; lv_i += autoEE143E81_ai ) {
        lv_item = UnitInventoryItem(lv_cu, lv_i);
        if ((UnitIsValid(lv_item) == true)) {
            lv_slot = UnitInventorySlot(lv_item);
            lv_container = UnitInventoryContainer(lv_item);
            lv_cdlink = libGAwX_gf_ItemTypeCooldownLink(UnitGetType(lv_item));
            lv_cooldown = UnitGetCooldown(lv_cu, lv_cdlink);
            UnitSetPosition(lv_item, UnitGetPosition(lv_cu), false);
            libGAwX_gf_GiveItemToUnit(lv_tu, lv_item);
            UnitInventoryMove(lv_item, lv_container, lv_slot);
            libNtve_gf_UnitRemoveCooldown(lv_tu, lv_cdlink);
            UnitAddCooldown(lv_tu, lv_cdlink, lv_cooldown);
        }

    }
    autoA37AFE0E_i=0;
    autoA37AFE0E_c=c_abilLearnCmdLearn20;
    autoA37AFE0E_eval="";
    for(;autoA37AFE0E_i<autoA37AFE0E_c;autoA37AFE0E_i+=1){

        autoA37AFE0E_eval=CatalogFieldValueGet(c_gameCatalogAbil,UnitGetType(lv_cu)+"Learn","InfoArray["+IntToString(autoA37AFE0E_i)+"].Abil",c_playerAny);
        if(CatalogEntryIsValid(c_gameCatalogAbil,autoA37AFE0E_eval)){
            lv_abil=autoA37AFE0E_eval;
            lv_i=autoA37AFE0E_i;
        }else{continue;}
        if ((UnitCheckAbilCmdState(lv_cu, AbilityCommand(lv_abil, 0), c_cmdStateCooldown) == true)) {
            lv_level = (UnitAbilityGetLevel(lv_cu, lv_abil) + 1);
            lv_cdlink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
            lv_cooldown = UnitGetCooldown(lv_cu, lv_cdlink);
            libNtve_gf_UnitRemoveCooldown(lv_tu, lv_cdlink);
            UnitAddCooldown(lv_tu, lv_cdlink, lv_cooldown);
            auto91A671BD_n = lv_level;
            for (auto91A671BD_i = 1; auto91A671BD_i <= auto91A671BD_n; auto91A671BD_i += 1) {
                UnitIssueOrder(lv_tu, Order(AbilityCommand("HantLearn", lv_i)), c_orderQueueReplace);
            }
        }

    }
    lv_c = UnitBehaviorCountAll(lv_cu);
    autoB4B451FC_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoB4B451FC_ai >= 0 && lv_i <= autoB4B451FC_ae) || (autoB4B451FC_ai < 0 && lv_i >= autoB4B451FC_ae) ) ; lv_i += autoB4B451FC_ai ) {
        lv_buff = UnitBehaviorGet(lv_cu, lv_i);
        if ((lv_buff != "Str") && (lv_buff != "Agi") && (lv_buff != "Int") && (lv_buff != "RetrainNoUse")) {
            UnitBehaviorTransfer(lv_cu, lv_tu, lv_buff, 0);
        }

    }
    UnitSelect(lv_cu, UnitGetOwner(lv_cu), false);
    libGAwX_gf_SetUnitHeroIconFrame(lv_tu, lv_p, libGAwX_gf_UnitHeroIconFrameIndex(lv_cu));
    UnitRemove(lv_cu);
    UnitIssueOrder(lv_tu, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(0.0, c_timeGame);
    ActorSend(ActorFromScope(ActorScopeFromUnit(lv_tu), "_Snapshot"), "Destroy Immediate");
    ActorSend(ActorFromScope(ActorScopeFromUnit(lv_tu), "EventSound"), "Destroy Immediate");
    Wait(0.25, c_timeGame);
    ActorSend(ActorFromScope(ActorScopeFromUnit(lv_tu), "_Snapshot"), "Destroy Immediate");
    libGAwX_gf__UpdateHeroKilledXP(lv_tu);
    UnitSetPropertyFixed(lv_tu, c_unitPropLife, lv_hp);
    UnitSetPropertyFixed(lv_tu, c_unitPropEnergy, lv_mp);
    UnitClearSelection(lv_p);
    UnitSelect(lv_tu, lv_p, true);
    UnitGroupSelect(lv_selectionGroup, lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_tretProcess_Init () {
    libGAwX_gt_tretProcess = TriggerCreate("libGAwX_gt_tretProcess_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_tretProcess, c_playerAny, libGAwX_gv_tretCopyEventEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AIbt - Build Tiny Scout Tower - Build
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AIbtBuildTinyScoutTowerBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pt;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pt = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "hwtw", c_unitCreateConstruct | c_unitCreateIgnorePlacement, lv_p, lv_pt, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AIbtBuildTinyScoutTowerBuild_Init () {
    libGAwX_gt_AIbtBuildTinyScoutTowerBuild = TriggerCreate("libGAwX_gt_AIbtBuildTinyScoutTowerBuild_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AIbtBuildTinyScoutTowerBuild, c_playerAny, "AIbtShell");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AIbg - Build Tiny Great Hall - Build
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AIbgBuildTinyGreatHallBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pt;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pt = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ogre", c_unitCreateConstruct | c_unitCreateIgnorePlacement, lv_p, lv_pt, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AIbgBuildTinyGreatHallBuild_Init () {
    libGAwX_gt_AIbgBuildTinyGreatHallBuild = TriggerCreate("libGAwX_gt_AIbgBuildTinyGreatHallBuild_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AIbgBuildTinyGreatHallBuild, c_playerAny, "AIbgShell");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amec - Mechanical Critter - Mimic
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AmecMechanicalCritterMimic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "AmecMimic", libGAwX_gv_god);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AmecMechanicalCritterMimic_Init () {
    libGAwX_gt_AmecMechanicalCritterMimic = TriggerCreate("libGAwX_gt_AmecMechanicalCritterMimic_Func");
    TriggerAddEventUnitBehaviorChange(libGAwX_gt_AmecMechanicalCritterMimic, null, "Bmec", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: moon - Moonstone - Change TOD
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_moonMoonstoneChangeTOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGAwX_gv_moonTODCritSection == 0)) {
        libGAwX_gv_oldTOD = GameTimeOfDayGet();
        libGAwX_gf_SetWar3TimeOfDay(libGAwX_gv_newTOD);
        libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
        ActorSend(libGAwX_gv_tODActor, "AnimPlay Cover Cover");
    }

    libGAwX_gv_moonTODCritSection += 1;
    Wait(libGAwX_gv_moonDuration, c_timeGame);
    TriggerExecute(libGAwX_gt_moonMoonstoneRestoreTOD, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_moonMoonstoneChangeTOD_Init () {
    libGAwX_gt_moonMoonstoneChangeTOD = TriggerCreate("libGAwX_gt_moonMoonstoneChangeTOD_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_moonMoonstoneChangeTOD, c_playerAny, "AIct");
}

//--------------------------------------------------------------------------------------------------
// Trigger: moon - Moonstone - Restore TOD
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_moonMoonstoneRestoreTOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gv_moonTODCritSection -= 1;
    if ((libGAwX_gv_moonTODCritSection == 0)) {
        libGAwX_gf_SetWar3TimeOfDay(libGAwX_gv_oldTOD);
        libGAwX_gf_PauseUnpauseTimeOfDayWar3(false);
        ActorSend(libGAwX_gv_tODActor, "AnimClear Cover");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_moonMoonstoneRestoreTOD_Init () {
    libGAwX_gt_moonMoonstoneRestoreTOD = TriggerCreate("libGAwX_gt_moonMoonstoneRestoreTOD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tkno - Tome of Power - Level Up
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_tknoTomeofPowerLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_currentLevel = UnitGetPropertyFixed(lv_u, c_unitPropLevel, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_u, c_unitPropLevel, (lv_currentLevel + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_tknoTomeofPowerLevelUp_Init () {
    libGAwX_gt_tknoTomeofPowerLevelUp = TriggerCreate("libGAwX_gt_tknoTomeofPowerLevelUp_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_tknoTomeofPowerLevelUp, c_playerAny, "AIlm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: spsh - Amulet of Spell Shield - Charge
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_spshAmuletofSpellShieldCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(lv_u, "Behavior/ANss", 40.0);
    UnitCreateEffectUnit(lv_u, "ANssRemoveNegative", lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_spshAmuletofSpellShieldCharge_Init () {
    libGAwX_gt_spshAmuletofSpellShieldCharge = TriggerCreate("libGAwX_gt_spshAmuletofSpellShieldCharge_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_spshAmuletofSpellShieldCharge, c_playerAny, "BNssTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: woms - Wand of Mana Stealing - Steal
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_womsWandofManaStealingSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    fixed lv_amount;
    fixed lv_currT;
    fixed lv_currC;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_amount = 50.0;
    lv_currT = UnitGetPropertyFixed(lv_target, c_unitPropEnergy, c_unitPropCurrent);
    lv_currC = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = MinF(lv_amount, lv_currT);
    UnitSetPropertyFixed(lv_target, c_unitPropEnergy, (lv_currT - lv_amount));
    UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_currC + lv_amount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_womsWandofManaStealingSteal_Init () {
    libGAwX_gt_womsWandofManaStealingSteal = TriggerCreate("libGAwX_gt_womsWandofManaStealingSteal_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_womsWandofManaStealingSteal, c_playerAny, "Aste");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ankh - Ankh of Reincarnation - Remove
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_ankhAnkhofReincarnationRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_item;

    // Automatic Variable Declarations
    unitgroup auto745B5ABD_g;
    int auto745B5ABD_u;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    auto745B5ABD_g = UnitInventoryGroup(lv_unit);
    auto745B5ABD_u = UnitGroupCount(auto745B5ABD_g, c_unitCountAll);
    for (;; auto745B5ABD_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(auto745B5ABD_g, auto745B5ABD_u);
        if (lv_item == null) { break; }
        if ((UnitGetType(lv_item) == "ankh")) {
            UnitInventoryRemove(lv_item);
            break;
        }

    }
    UnitCreateEffectUnit(lv_unit, "AIrcHeal", lv_unit);
    Wait(0.125, c_timeGame);
    UnitCreateEffectUnit(lv_unit, "AIrcHeal", lv_unit);
    Wait(0.125, c_timeGame);
    UnitCreateEffectUnit(lv_unit, "AIrcHeal", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_ankhAnkhofReincarnationRemove_Init () {
    libGAwX_gt_ankhAnkhofReincarnationRemove = TriggerCreate("libGAwX_gt_ankhAnkhofReincarnationRemove_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_ankhAnkhofReincarnationRemove, c_playerAny, "AIrcReviveSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ablp - Blight Placement - Creep
//--------------------------------------------------------------------------------------------------
bool libGAwX_gt_AblpBlightPlacementCreep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(lv_p, 2.7344, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAwX_gt_AblpBlightPlacementCreep_Init () {
    libGAwX_gt_AblpBlightPlacementCreep = TriggerCreate("libGAwX_gt_AblpBlightPlacementCreep_Func");
    TriggerAddEventPlayerEffectUsed(libGAwX_gt_AblpBlightPlacementCreep, c_playerAny, "Ablp");
}

void libGAwX_InitTriggers () {
    libGAwX_gt_InventoryContainerHook_Init();
    libGAwX_gt_InventoryContainerDoubleClicked_Init();
    libGAwX_gt_ClockTempFix_Init();
    libGAwX_gt_InitWarnPlayer_Init();
    libGAwX_gt_GodSet_Init();
    libGAwX_gt_NonHeroItemDeathDrop_Init();
    libGAwX_gt_IllusionPersist_Init();
    libGAwX_gt_Override_Init();
    libGAwX_gt_HDSkin_Init();
    libGAwX_gt_ModInit_Init();
    libGAwX_gt_LumberMill_Init();
    libGAwX_gt_BackToWorkMark_Init();
    libGAwX_gt_BackToWorkEffect_Init();
    libGAwX_gt_CallToArmDropResource_Init();
    libGAwX_gt_MeleeHeroSlotChange_Init();
    libGAwX_gt_HeroTrainingCheck_Init();
    libGAwX_gt_IllusionCheck_Init();
    libGAwX_gt_HeroQueue_Init();
    libGAwX_gt_HeroCancel_Init();
    libGAwX_gt__FreeTownPortalScroll_Init();
    libGAwX_gt_HeroGainLevelKilledXPGrantUpdate_Init();
    libGAwX_gt_HeroLossLevelKilledXPGrantUpdate_Init();
    libGAwX_gt_UpkeepFrameInit_Init();
    libGAwX_gt_Upkeep_Init();
    libGAwX_gt_CreepInit_Init();
    libGAwX_gt_CreepAlertXPGoldPrePlacedMarker_Init();
    libGAwX_gt_CreepAlertXPGoldSummonedMarker_Init();
    libGAwX_gt_WakeUp_Init();
    libGAwX_gt_BuildingConstructionWakeUp_Init();
    libGAwX_gt_CreepXPGold_Init();
    libGAwX_gt_AlliedShopRegister_Init();
    libGAwX_gt_AlliedShopSelected_Init();
    libGAwX_gt_AlliedShopDeselected_Init();
    libGAwX_gt_AlliedShopChangeOwner_Init();
    libGAwX_gt_TavernRegister_Init();
    libGAwX_gt_TavernSelected_Init();
    libGAwX_gt_TavernDeselected_Init();
    libGAwX_gt_DebuffOn_Init();
    libGAwX_gt_DebuffOff_Init();
    libGAwX_gt_CmdCardHook_Init();
    libGAwX_gt_TODInit_Init();
    libGAwX_gt_TODUpdateClock_Init();
    libGAwX_gt_DayWarning_Init();
    libGAwX_gt_NightWarning_Init();
    libGAwX_gt_HeroFrameHook_Init();
    libGAwX_gt_HeroCreationLink_Init();
    libGAwX_gt_HeroChangeOwner_Init();
    libGAwX_gt_HeroGainLevelUpdate_Init();
    libGAwX_gt_HeroLossLevelUpdate_Init();
    libGAwX_gt_DeathGray_Init();
    libGAwX_gt_ReviveDeGray_Init();
    libGAwX_gt_SkillPointsUsedUp_Init();
    libGAwX_gt_GoldMarker_Init();
    libGAwX_gt_LumberMarker_Init();
    libGAwX_gt_ResourceDrop_Init();
    libGAwX_gt_PawnWorkarounds_Init();
    libGAwX_gt_WispLumber_Init();
    libGAwX_gt_WispGold_Init();
    libGAwX_gt_WindWalkDamgeMarker_Init();
    libGAwX_gt_AEevMiss_Init();
    libGAwX_gt_ManaBurnTextTag_Init();
    libGAwX_gt_AEshTextTag_Init();
    libGAwX_gt_AbilDataInit_Init();
    libGAwX_gt_AttackGroundOn_Init();
    libGAwX_gt_AttackGroundOff_Init();
    libGAwX_gt_ThornsAuraThornyShieldInitRegister_Init();
    libGAwX_gt_ThornsAuraThornyShieldHandle_Init();
    libGAwX_gt_TOOAbsorbInit_Init();
    libGAwX_gt_TOOAbsorbImpactUnitTarget_Init();
    libGAwX_gt_TOOMissileLaunch_Init();
    libGAwX_gt_TOOMissileImpactUnitTarget_Init();
    libGAwX_gt_TOOMissileImpactPointTarget_Init();
    libGAwX_gt_BuildTime_Init();
    libGAwX_gt_BuildMark_Init();
    libGAwX_gt_BuildPause_Init();
    libGAwX_gt_BuildUnpause_Init();
    libGAwX_gt_RegisterChannelingUnits_Init();
    libGAwX_gt_ChannelMoveCancel_Init();
    libGAwX_gt_ChannelStopCancel_Init();
    libGAwX_gt_AcmgIssueManaCheck_Init();
    libGAwX_gt_AcmgApproachManaCheck_Init();
    libGAwX_gt_AcmgSpendAddionalMana_Init();
    libGAwX_gt_AHbuFacingPort_Init();
    libGAwX_gt_AHbhTargetCheck_Init();
    libGAwX_gt_AbilClassDefendDataInit_Init();
    libGAwX_gt_AbilClassDefendDamageAbosorbed_Init();
    libGAwX_gt_AspsSpellSteal_Init();
    libGAwX_gt_AspsSpellStealBuffImpact_Init();
    libGAwX_gt_AspsSpellStealDebuffImpact_Init();
    libGAwX_gt_AsphSphereMissile_Init();
    libGAwX_gt_AHdrSiphonManaBonusMana_Init();
    libGAwX_gt_AHdrSiphonManaBonusManaOff_Init();
    libGAwX_gt_AHpxPhoenixUniqueSummonBuff_Init();
    libGAwX_gt_AHreResurrectionFix_Init();
    libGAwX_gt_AdtnSearch_Init();
    libGAwX_gt_AshmFadeDuration_Init();
    libGAwX_gt_AwhaPlace_Init();
    libGAwX_gt_AwhaStop_Init();
    libGAwX_gt_AwhaGold_Init();
    libGAwX_gt_AadmBuffRemove_Init();
    libGAwX_gt_AentRoot_Init();
    libGAwX_gt_AentUprootDestory_Init();
    libGAwX_gt_Aco2MergeOrderMarker_Init();
    libGAwX_gt_Aco2MergeCancel_Init();
    libGAwX_gt_Aco2MergeVital_Init();
    libGAwX_gt_AdecDismountSetLifeCooldown_Init();
    libGAwX_gt_AvngUniqueSummonBuff_Init();
    libGAwX_gt_AEshSpeedDecay_Init();
    libGAwX_gt_AmflRegister_Init();
    libGAwX_gt_AmflDestroy_Init();
    libGAwX_gt_AmflTemplate_Init();
    libGAwX_gt_AmflAugumentHack_Init();
    libGAwX_gt_AdevSetProgressTemplate_Init();
    libGAwX_gt_AdevRegister_Init();
    libGAwX_gt_AdevDestroy_Init();
    libGAwX_gt_AwarTargetCheck_Init();
    libGAwX_gt_AbofImpact_Init();
    libGAwX_gt_Apg2SpeedDecay_Init();
    libGAwX_gt_AsplSearch_Init();
    libGAwX_gt_AsplSplit_Init();
    libGAwX_gt_AOclDamageArrayInit_Init();
    libGAwX_gt_AOclImpact_Init();
    libGAwX_gt_ACclImpact_Init();
    libGAwX_gt_AOcrMultiplierW1_Init();
    libGAwX_gt_AOcrMultiplierW2_Init();
    libGAwX_gt_AOsfUniqueSummonBuff_Init();
    libGAwX_gt_AOhwHealingArrayInit_Init();
    libGAwX_gt_AOhwImpact_Init();
    libGAwX_gt_ANhwImpact_Init();
    libGAwX_gt_AOmiRemoveAllNonPermanent_Init();
    libGAwX_gt_AOmiLaunch_Init();
    libGAwX_gt_AOmiMarker_Init();
    libGAwX_gt_AOshAOs2MaxTargets_Init();
    libGAwX_gt_AUanHideStatusInfoPanel_Init();
    libGAwX_gt_AUanChangeGhoul_Init();
    libGAwX_gt_AgydSpawn_Init();
    libGAwX_gt_AptsHook_Init();
    libGAwX_gt_ArplArpmSeach_Init();
    libGAwX_gt_AmelGetCorpse_Init();
    libGAwX_gt_AmedAnim_Init();
    libGAwX_gt_AexhCorpses_Init();
    libGAwX_gt_AahaPlace_Init();
    libGAwX_gt_AfakRegisterUnit_Init();
    libGAwX_gt_AfakOrderReplace_Init();
    libGAwX_gt_AfakAutoApply_Init();
    libGAwX_gt_AfakAutoRemove_Init();
    libGAwX_gt_AfakEnd_Init();
    libGAwX_gt_AfakCancel_Init();
    libGAwX_gt_AraiSummonCount_Init();
    libGAwX_gt_AraiSmartCast_Init();
    libGAwX_gt_SacrificeCancelRemoveBuff_Init();
    libGAwX_gt_SacrificeFinishRemoveUnit_Init();
    libGAwX_gt_AstnCancelCooldown_Init();
    libGAwX_gt_AUcbUniqueSummonBuff_Init();
    libGAwX_gt_AUcsMaxTargets_Init();
    libGAwX_gt_AUlsLeash_Init();
    libGAwX_gt_AUlsHealOrder_Init();
    libGAwX_gt_AUlsFinish_Init();
    libGAwX_gt_AUlsFailSafe_Init();
    libGAwX_gt_ReviveTimeHack_Init();
    libGAwX_gt_AbdlAbdsBlightDispelLargeSmall_Init();
    libGAwX_gt_AncaCapture_Init();
    libGAwX_gt_ANcsMissileArt_Init();
    libGAwX_gt_ANcsCursor_Init();
    libGAwX_gt_ANdbMultiplierW1_Init();
    libGAwX_gt_ANdbMultiplierW2_Init();
    libGAwX_gt_ANdbTargetCheck_Init();
    libGAwX_gt_ANdbTargetCheckRegister_Init();
    libGAwX_gt_ANhsMissileArt_Init();
    libGAwX_gt_ANfaRegisterUnit_Init();
    libGAwX_gt_ANfaOrderReplace_Init();
    libGAwX_gt_ANfaAutoApply_Init();
    libGAwX_gt_ANfaAutoRemove_Init();
    libGAwX_gt_ANfaEnd_Init();
    libGAwX_gt_ANfaCancel_Init();
    libGAwX_gt_ANstSummon_Init();
    libGAwX_gt_ANvcMissilePad_Init();
    libGAwX_gt_ANlmSplitDuration_Init();
    libGAwX_gt_ANlmSplitCount_Init();
    libGAwX_gt_ANefSummon_Init();
    libGAwX_gt_ANefSummonedLink_Init();
    libGAwX_gt_ANefSummonedKilled_Init();
    libGAwX_gt_ANefSummonedExpired_Init();
    libGAwX_gt_ANsyRate_Init();
    libGAwX_gt_ACctMultiplierW1_Init();
    libGAwX_gt_ACctMultiplierW2_Init();
    libGAwX_gt_ACctTargetCheck_Init();
    libGAwX_gt_ACctTargetCheckRegister_Init();
    libGAwX_gt_ACpvTargetCheck_Init();
    libGAwX_gt_UndropItems_Init();
    libGAwX_gt_APh1_Init();
    libGAwX_gt_APh2_Init();
    libGAwX_gt_APh3_Init();
    libGAwX_gt_AIrmRegen_Init();
    libGAwX_gt_AIrnRegen_Init();
    libGAwX_gt_InventoryDoubleClickHack_Init();
    libGAwX_gt_stwpRemove_Init();
    libGAwX_gt_stwpHearthstoneRemove_Init();
    libGAwX_gt_HearthstoneSetCharge_Init();
    libGAwX_gt_tretValidator_Init();
    libGAwX_gt_tretProcess_Init();
    libGAwX_gt_AIbtBuildTinyScoutTowerBuild_Init();
    libGAwX_gt_AIbgBuildTinyGreatHallBuild_Init();
    libGAwX_gt_AmecMechanicalCritterMimic_Init();
    libGAwX_gt_moonMoonstoneChangeTOD_Init();
    libGAwX_gt_moonMoonstoneRestoreTOD_Init();
    libGAwX_gt_tknoTomeofPowerLevelUp_Init();
    libGAwX_gt_spshAmuletofSpellShieldCharge_Init();
    libGAwX_gt_womsWandofManaStealingSteal_Init();
    libGAwX_gt_ankhAnkhofReincarnationRemove_Init();
    libGAwX_gt_AblpBlightPlacementCreep_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGAwX_InitLib_completed = false;

void libGAwX_InitLib () {
    if (libGAwX_InitLib_completed) {
        return;
    }

    libGAwX_InitLib_completed = true;

    libGAwX_InitLibraries();
    libGAwX_InitVariables();
    libGAwX_InitCustomScript();
    libGAwX_InitTriggers();
}

