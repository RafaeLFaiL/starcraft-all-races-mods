include "TriggerLibs/NativeLib"

include "Lib40AFD156_h"

//--------------------------------------------------------------------------------------------------
// Library: SCMR
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib40AFD156_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib40AFD156_InitVariables_completed = false;

void lib40AFD156_InitVariables () {
    int init_i;

    if (lib40AFD156_InitVariables_completed) {
        return;
    }

    lib40AFD156_InitVariables_completed = true;

    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib40AFD156_gv_aICurrentAttackWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib40AFD156_gv_aISurvivors[init_i] = UnitGroupEmpty();
    }
    lib40AFD156_gv_aIAdvanceWaveRandomTimerSetting = 2;
    lib40AFD156_gv_aITerranComSat = UnitGroupEmpty();
    lib40AFD156_gv__TP_DropPod_Units = UnitGroupEmpty();
}

// Presets
// Functions
void lib40AFD156_gf_DisableNonBroodWar () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto49DB817C_g;
    string autoD64B07D4_val;

    // Variable Initialization
    lv_player = 1;

    // Implementation
    auto49DB817C_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto49DB817C_g, lv_player);
        if (lv_player < 0) { break; }
        TechTreeUnitAllow(lv_player, "Diamondback", false);
        TechTreeUnitAllow(lv_player, "Predator", false);
        TechTreeUnitAllow(lv_player, "ThorAP", false);
        TechTreeUnitAllow(lv_player, "Thor", false);
        TechTreeUnitAllow(lv_player, "Cyclone", false);
        TechTreeUnitAllow(lv_player, "RoachWarren", false);
        TechTreeUnitAllow(lv_player, "InfestationPit", false);
        TechTreeUnitAllow(lv_player, "Brutalisk", false);
        TechTreeUnitAllow(lv_player, "InfestedAbomination", false);
        if ((GameAttributeGameValue("1") == "0001")) {
            TechTreeUnitAllow(lv_player, "Marauder", false);
            TechTreeUnitAllow(lv_player, "Reaper", false);
            TechTreeUnitAllow(lv_player, "Hellion", false);
            TechTreeUnitAllow(lv_player, "HellionTank", false);
            TechTreeUnitAllow(lv_player, "Banshee", false);
            TechTreeUnitAllow(lv_player, "VikingAssault", false);
            TechTreeUnitAllow(lv_player, "VikingFighter", false);
            TechTreeUnitAllow(lv_player, "Raven", false);
            TechTreeUnitAllow(lv_player, "WidowMine", false);
            TechTreeUnitAllow(lv_player, "WarHound", false);
            TechTreeUnitAllow(lv_player, "ThorAP", false);
            TechTreeUnitAllow(lv_player, "LiberatorSkinPreview", false);
            TechTreeUnitAllow(lv_player, "MercCompound", false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("TerranBuild", 12), false);
            TechTreeUnitAllow(lv_player, "PerditionTurret", false);
            TechTreeUnitAllow(lv_player, "SensorTower", false);
            TechTreeUnitAllow(lv_player, "Phoenix", false);
            TechTreeUnitAllow(lv_player, "VoidRay", false);
            TechTreeUnitAllow(lv_player, "VoidRayShakuras", false);
            TechTreeUnitAllow(lv_player, "VoidRayTaldarim", false);
            TechTreeUnitAllow(lv_player, "VoidRayAiur", false);
            TechTreeUnitAllow(lv_player, "StalkerShakuras", false);
            TechTreeUnitAllow(lv_player, "Stalker", false);
            TechTreeUnitAllow(lv_player, "StalkerShakurasHallucination", false);
            TechTreeUnitAllow(lv_player, "StalkerShakurasACGluescreenDummy", false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("ProtossBuild", 21), false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("GatewayTrain", 5), false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("RoboticsFacilityTrain", 4), false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("StargateTrain", 1), false);
            TechTreeUnitAllow(lv_player, "Immortal", false);
            TechTreeUnitAllow(lv_player, "ImmortalShakuras", false);
            TechTreeUnitAllow(lv_player, "ImmortalTaldarim", false);
            TechTreeUnitAllow(lv_player, "Oracle", false);
            TechTreeUnitAllow(lv_player, "Tempest", false);
            TechTreeUnitAllow(lv_player, "CarrierAiur", false);
            TechTreeUnitAllow(lv_player, "CarrierTaldarim", false);
            TechTreeUnitAllow(lv_player, "Mothership", false);
            TechTreeUnitAllow(lv_player, "MothershipCore", false);
            TechTreeUnitAllow(lv_player, "Disruptor", false);
            TechTreeUnitAllow(lv_player, "Adept", false);
            TechTreeUnitAllow(lv_player, "ShieldBatteryNerazim", false);
            TechTreeUnitAllow(lv_player, "WarpPrism", false);
            TechTreeUnitAllow(lv_player, "WarpPrismPhasing", false);
            TechTreeUnitAllow(lv_player, "Sentry", false);
            TechTreeUnitAllow(lv_player, "SentryAiur", false);
            TechTreeUnitAllow(lv_player, "Monitor", false);
            TechTreeUnitAllow(lv_player, "Colossus", false);
            TechTreeUnitAllow(lv_player, "ColossusTaldarim", false);
            TechTreeUnitAllow(lv_player, "DarkShrine", false);
            TechTreeUnitAllow(lv_player, "KhaydarinMonolith", false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("LarvaTrain", 9), false);
            TechTreeUnitAllow(lv_player, "Queen", false);
            TechTreeUnitAllow(lv_player, "Roach", false);
            TechTreeUnitAllow(lv_player, "Ravager", false);
            TechTreeUnitAllow(lv_player, "Baneling", false);
            TechTreeUnitAllow(lv_player, "BanelingNest", false);
            TechTreeUnitAllow(lv_player, "Infestor", false);
            TechTreeUnitAllow(lv_player, "BroodLord", false);
            TechTreeUnitAllow(lv_player, "Corruptor", false);
            TechTreeUnitAllow(lv_player, "SpineCrawler", false);
            TechTreeUnitAllow(lv_player, "Overseer", false);
            TechTreeUnitAllow(lv_player, "Viper", false);
            TechTreeUnitAllow(lv_player, "SwarmHostMP", false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(lv_player, AbilityCommand("MorphToOverseer", 0), false);
        }

        if ((GameAttributeGameValue("3") == "0001")) {
            autoD64B07D4_val = PlayerRace(lv_player);
            if (autoD64B07D4_val == "Zerg") {
                SoundtrackDefault(PlayerGroupSingle(lv_player), c_soundtrackCategoryMusic, "MusicZergEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
            }
            else if (autoD64B07D4_val == "Prot") {
                SoundtrackDefault(PlayerGroupSingle(lv_player), c_soundtrackCategoryMusic, "MusicProtossEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
            }
            else if (autoD64B07D4_val == "Terr") {
                SoundtrackDefault(PlayerGroupSingle(lv_player), c_soundtrackCategoryMusic, "MusicTerranEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
            }
            else {
            }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWAudioBuildings", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWAudioAbilities", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWAudioWeapons", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOAdjutant", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVORaynor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOSCV", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOMarine", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOFirebat", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOMedic", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOGhost", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOVulture", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOSiegeTank", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOGoliath", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOWraith", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODropship", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOScienceVessel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOBattlecruiser", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOValkyrie", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOCerebrate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOLarva", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODrone", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOOverlord", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOZergling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOHydralisk", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOLurker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOInfestedTerran", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODefiler", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOUltralisk", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOScourge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOQueen", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOMutalisk", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOGuardian", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODevourer", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOAdvisor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOProbe", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOZealot", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODragoon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOHighTemplar", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODarkTemplar", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOArchon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVODarkArchon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOShuttle", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOReaver", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOObserver", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOScout", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOCarrier", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOArbiter", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWVOCorsair", 1);
        }

        if ((GameAttributeGameValue("2") == "0001")) {
            lib40AFD156_gf_FactionModels(lv_player);
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOSupplyDepot", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOAcademy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOSunkenColony", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOSporeColony", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOShieldBattery", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BWMOCitadelOfAdun", 1);
    }
}

void lib40AFD156_gf_FactionModels (int lp_player) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAdjutant", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORaynor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMengsk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOKerrigan", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSCV", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFirebat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMarine", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOVulture", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMedic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGhost", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSiegeTank", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGoliath", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOWraith", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScienceVessel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBattlecruiser", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCommandCenter", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsT", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORefinery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBarracks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEngineeringBay", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBunker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMissileTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFactory", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStarport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArmory", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOvermind", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCerebrate", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedKerrigan", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOverlord", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZergling", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHydralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOLurker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODefiler", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOQueen", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMutalisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGuardian", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODevourer", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHatchery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsZ", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOExtractor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltraliskCavern", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSpire", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONydusCanal", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEvolutionChamber", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArtanis", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZeratul", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOProbe", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZealot", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODragoon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHighTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOReaver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOObserver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScout", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCorsair", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCarrier", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArbiter", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONexus", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsP", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAssimilator", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPylon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGateway", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOForge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCyberneticsCore", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPhotonCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStargate", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORoboticsFacility", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupportBay", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFleetBeacon", 1);
}

void lib40AFD156_gf_AIInitialization (int lp_player, int lp_startingminerals, int lp_startinggas, string lp_alwaysRebuildUnit) {
    // Automatic Variable Declarations
    unitgroup auto83D13143_g;
    int auto83D13143_u;
    unit auto83D13143_var;
    unitgroup autoEACE3136_g;
    int autoEACE3136_u;
    unit autoEACE3136_var;
    unitgroup auto0BB7AAD9_g;
    int auto0BB7AAD9_u;
    unit auto0BB7AAD9_var;
    playergroup autoB6470679_g;
    int autoB6470679_var;

    // Implementation
    AICampaignStart(lp_player);
    AIAttackWaveSetTargetMelee(lp_player);
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, lp_startingminerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, lp_startinggas);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 1, 2, 3), false, lp_player);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), true, lp_player);
    AISetDefenseRadii(lp_player, 7.0, 10.0, 12.0);
    auto83D13143_g = UnitGroup(null, lp_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto83D13143_u = UnitGroupCount(auto83D13143_g, c_unitCountAll);
    for (;; auto83D13143_u -= 1) {
        auto83D13143_var = UnitGroupUnitFromEnd(auto83D13143_g, auto83D13143_u);
        if (auto83D13143_var == null) { break; }
        AISetUnitNotUsableInWaves(auto83D13143_var, true);
    }
    autoEACE3136_g = UnitGroup("Overlord", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEACE3136_u = UnitGroupCount(autoEACE3136_g, c_unitCountAll);
    for (;; autoEACE3136_u -= 1) {
        autoEACE3136_var = UnitGroupUnitFromEnd(autoEACE3136_g, autoEACE3136_u);
        if (autoEACE3136_var == null) { break; }
        UnitBehaviorAdd(autoEACE3136_var, "CritterWanderLeash", autoEACE3136_var, 1);
    }
    auto0BB7AAD9_g = UnitGroup(lp_alwaysRebuildUnit, lp_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0BB7AAD9_u = UnitGroupCount(auto0BB7AAD9_g, c_unitCountAll);
    for (;; auto0BB7AAD9_u -= 1) {
        auto0BB7AAD9_var = UnitGroupUnitFromEnd(auto0BB7AAD9_g, auto0BB7AAD9_u);
        if (auto0BB7AAD9_var == null) { break; }
        AISetUnitNotUsableInWaves(auto0BB7AAD9_var, false);
    }
    AISetSpecificRebuildCount(14, lp_alwaysRebuildUnit, lp_player);
    autoB6470679_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoB6470679_var = -1;
    while (true) {
        autoB6470679_var = PlayerGroupNextPlayer(autoB6470679_g, autoB6470679_var);
        if (autoB6470679_var < 0) { break; }
        RegionAddCircle(lib40AFD156_gv_aIBase[autoB6470679_var], true, UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDetector - 32))), 0), c_unitCountAlive)), 7.0);
    }
}

void lib40AFD156_gf_EnemyProtossWarpIn (unit lp_superWarpGate, string lp_warpedUnit, point lp_warpPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_warpedUnit == "Zealot")) {
        UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
    }
    else {
        if ((lp_warpedUnit == "Dragoon")) {
            UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
        }
        else {
            if ((lp_warpedUnit == "HighTemplar")) {
                UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
            }
            else {
                if ((lp_warpedUnit == "Archon")) {
                    UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                }
                else {
                    if ((lp_warpedUnit == "Scout")) {
                        UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                    }
                    else {
                        if ((lp_warpedUnit == "Carrier")) {
                            UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                        }

                    }
                }
            }
        }
    }
}

void lib40AFD156_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto535AA1BC_g;
    int auto535AA1BC_u;
    unitgroup autoCD2F1B8B_g;
    int autoCD2F1B8B_u;

    // Variable Initialization

    // Implementation
    auto535AA1BC_g = lp_units;
    auto535AA1BC_u = UnitGroupCount(auto535AA1BC_g, c_unitCountAll);
    for (;; auto535AA1BC_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto535AA1BC_g, auto535AA1BC_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    autoCD2F1B8B_g = lp_units;
    autoCD2F1B8B_u = UnitGroupCount(autoCD2F1B8B_g, c_unitCountAll);
    for (;; autoCD2F1B8B_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoCD2F1B8B_g, autoCD2F1B8B_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void lib40AFD156_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup auto03522889_g;
    int auto03522889_u;
    unitgroup autoB0A2DBFC_g;
    int autoB0A2DBFC_u;

    // Variable Initialization

    // Implementation
    auto03522889_g = lp_units;
    auto03522889_u = UnitGroupCount(auto03522889_g, c_unitCountAll);
    for (;; auto03522889_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto03522889_g, auto03522889_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    autoB0A2DBFC_g = lp_units;
    autoB0A2DBFC_u = UnitGroupCount(autoB0A2DBFC_g, c_unitCountAll);
    for (;; autoB0A2DBFC_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB0A2DBFC_g, autoB0A2DBFC_u);
        if (lv_indexUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void lib40AFD156_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto6CE9BBE3_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, lib40AFD156_gf__LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto6CE9BBE3_val = lp_race;
    if (auto6CE9BBE3_val == lib40AFD156_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            lib40AFD156_gf__TerranDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            lib40AFD156_gv__TP_DropPod_Location = lv_dropLocation;
            lib40AFD156_gv__TP_DropPod_Units = lv_dropUnits;
            lib40AFD156_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(lib40AFD156_gt__TerranDropPod, true, false);
        }
    }
    else if (auto6CE9BBE3_val == lib40AFD156_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            lib40AFD156_gf__ZergDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            lib40AFD156_gv__TP_DropPod_Location = lv_dropLocation;
            lib40AFD156_gv__TP_DropPod_Units = lv_dropUnits;
            lib40AFD156_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(lib40AFD156_gt__ZergDropPod, true, false);
        }
    }
    else {
    }
}

void lib40AFD156_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool autoBC9EDA91_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    lib40AFD156_gv__TP_ZergDropPod_Building = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, lib40AFD156_gf__LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoBC9EDA91_val = lp_waitDontWait;
    if (autoBC9EDA91_val == true) {
        lib40AFD156_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoBC9EDA91_val == false) {
        lib40AFD156_gf__CreateDropPodForBuildingDontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_Trigger = null;
string auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
point auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
int auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_player;

void lib40AFD156_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_buildingType = lp_buildingType;
    auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_landingPoint = lp_landingPoint;
    auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_player = lp_player;

    if (auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_Trigger == null) {
        auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_Trigger = TriggerCreate("auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_TriggerFunc");
    }

    TriggerExecute(auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_Trigger, false, false);
}

bool auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
    point lp_landingPoint = auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
    int lp_player = auto_lib40AFD156_gf__CreateDropPodForBuildingDontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    lib40AFD156_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void lib40AFD156_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup auto9D2BB2AE_g;
    int auto9D2BB2AE_u;
    unit auto9D2BB2AE_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    auto9D2BB2AE_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D2BB2AE_u = UnitGroupCount(auto9D2BB2AE_g, c_unitCountAll);
    for (;; auto9D2BB2AE_u -= 1) {
        auto9D2BB2AE_var = UnitGroupUnitFromEnd(auto9D2BB2AE_g, auto9D2BB2AE_u);
        if (auto9D2BB2AE_var == null) { break; }
        if ((UnitGetType(auto9D2BB2AE_var) != "ZergDropPodLarge") && (auto9D2BB2AE_var != UnitLastCreated())) {
            if (((UnitGetOwner(auto9D2BB2AE_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(auto9D2BB2AE_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(auto9D2BB2AE_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(auto9D2BB2AE_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(auto9D2BB2AE_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(lib40AFD156_gv__TP_ZergDropPod_Building, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string lib40AFD156_gf__LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup lib40AFD156_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, lib40AFD156_gf__LastDroppedUnitsDataTableName());
}

void lib40AFD156_gf_MRRescueSingleUnit (unit lp_unit, int lp_newOwner, int lp_newOwnerColor) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    UnitSetOwner(lp_unit, lp_newOwner, false);
    UnitBehaviorAddPlayer(lp_unit, lv_behavior, 0, 1);
    if ((lp_newOwnerColor == 1)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 255,255,255 195,195,195 1.000000");
    }
    else {
        if ((lp_newOwnerColor == 2)) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 180,20,30 139,37,37 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 3)) {
                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 0,66,255 0,66,255 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 4)) {
                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 28,167,234 17,132,187 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 5)) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 77,0,200 70,45,160 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 6)) {
                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 235,225,41 150,150,30 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 7)) {
                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 254,138,14 254,138,14 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 8)) {
                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 9)) {
                                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 10)) {
                                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 11)) {
                                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 12)) {
                                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 13)) {
                                                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 14)) {
                                                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 15)) {
                                                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 16)) {
                                                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib40AFD156_gf_MRRescueRegion (region lp_region, int lp_newOwner, int lp_newOwnerColor, int lp_oldOwner) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    unitgroup auto7CAD49C5_g;
    int auto7CAD49C5_u;
    unit auto7CAD49C5_var;

    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    auto7CAD49C5_g = UnitGroup(null, lp_oldOwner, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7CAD49C5_u = UnitGroupCount(auto7CAD49C5_g, c_unitCountAll);
    for (;; auto7CAD49C5_u -= 1) {
        auto7CAD49C5_var = UnitGroupUnitFromEnd(auto7CAD49C5_g, auto7CAD49C5_u);
        if (auto7CAD49C5_var == null) { break; }
        UnitSetOwner(auto7CAD49C5_var, lp_newOwner, false);
        UnitBehaviorAddPlayer(auto7CAD49C5_var, lv_behavior, 0, 1);
        if ((lp_newOwnerColor == 1)) {
            libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 255,255,255 195,195,195 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 2)) {
                libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 180,20,30 139,37,37 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 3)) {
                    libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 0,66,255 0,66,255 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 4)) {
                        libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 28,167,234 17,132,187 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 5)) {
                            libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 77,0,200 70,45,160 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 6)) {
                                libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 235,225,41 150,150,30 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 7)) {
                                    libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 254,138,14 254,138,14 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 8)) {
                                        libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 9)) {
                                            libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 10)) {
                                                libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 11)) {
                                                    libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 12)) {
                                                        libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 13)) {
                                                            libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 14)) {
                                                                libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 15)) {
                                                                    libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                                }
                                                                else {
                                                                    if ((lp_newOwnerColor == 16)) {
                                                                        libNtve_gf_SendActorMessageToUnit(auto7CAD49C5_var, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib40AFD156_gf_MRRescueAllUnitsFromPlayer (int lp_newOwner, int lp_newOwnerColor, int lp_oldOwner) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    unitgroup auto6BA2829C_g;
    int auto6BA2829C_u;
    unit auto6BA2829C_var;

    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    auto6BA2829C_g = UnitGroup(null, lp_oldOwner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6BA2829C_u = UnitGroupCount(auto6BA2829C_g, c_unitCountAll);
    for (;; auto6BA2829C_u -= 1) {
        auto6BA2829C_var = UnitGroupUnitFromEnd(auto6BA2829C_g, auto6BA2829C_u);
        if (auto6BA2829C_var == null) { break; }
        UnitSetOwner(auto6BA2829C_var, lp_newOwner, false);
        UnitBehaviorAddPlayer(auto6BA2829C_var, lv_behavior, 0, 1);
        if ((lp_newOwnerColor == 1)) {
            libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 255,255,255 195,195,195 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 2)) {
                libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 180,20,30 139,37,37 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 3)) {
                    libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 0,66,255 0,66,255 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 4)) {
                        libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 28,167,234 17,132,187 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 5)) {
                            libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 77,0,200 70,45,160 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 6)) {
                                libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 235,225,41 150,150,30 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 7)) {
                                    libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 254,138,14 254,138,14 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 8)) {
                                        libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 9)) {
                                            libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 10)) {
                                                libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 11)) {
                                                    libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 12)) {
                                                        libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 13)) {
                                                            libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 14)) {
                                                                libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 15)) {
                                                                    libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                                }
                                                                else {
                                                                    if ((lp_newOwnerColor == 16)) {
                                                                        libNtve_gf_SendActorMessageToUnit(auto6BA2829C_var, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib40AFD156_gf_DisableNonBroodWar();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_Init_Init () {
    lib40AFD156_gt_Init = TriggerCreate("lib40AFD156_gt_Init_Func");
    TriggerAddEventMapInit(lib40AFD156_gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mining
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_OrderReHarvest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LabMineralField"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RichMineralField"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MineralField"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnitTargetUnit(), 0) == 1.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("RichMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("LabMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("RichMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("LabMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("RichMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("LabMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupRandomUnit(libNtve_gf_UnitsInUnitGroupWithCustomValue(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0, 0.0), c_unitCountAll)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "BounceSlow", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_OrderReHarvest_Init () {
    lib40AFD156_gt_OrderReHarvest = TriggerCreate("lib40AFD156_gt_OrderReHarvest_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_OrderReHarvest, null, AbilityCommand("DroneHarvest", 0), c_abilHarvestStageWaitAtResource, false);
    TriggerAddEventUnitAbility(lib40AFD156_gt_OrderReHarvest, null, AbilityCommand("ProbeHarvest", 0), c_abilHarvestStageWaitAtResource, false);
    TriggerAddEventUnitAbility(lib40AFD156_gt_OrderReHarvest, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageWaitAtResource, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - TURN EVERYTHING ON!
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITURNEVERYTHINGON_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
    TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
    TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
    TriggerEnable(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, true);
    TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, true);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, true);
    TriggerEnable(lib40AFD156_gt_AITerranRebuildNukes, true);
    TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, true);
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, true);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, true);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, true);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, true);
    TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, true);
    TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, true);
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, true);
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, true);
    TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
    TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, true);
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, true);
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, true);
    TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITURNEVERYTHINGON_Init () {
    lib40AFD156_gt_AITURNEVERYTHINGON = TriggerCreate("lib40AFD156_gt_AITURNEVERYTHINGON_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - TURN EVERYTHING OFF!
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITURNEVERYTHINGOFF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib40AFD156_gt_AITerranComsat, false);
    TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, false);
    TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, false);
    TriggerEnable(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, false);
    TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, false);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, false);
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, false);
    TriggerEnable(lib40AFD156_gt_AITerranRebuildNukes, false);
    TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, false);
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, false);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, false);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, false);
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, false);
    TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, false);
    TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, false);
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, false);
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, false);
    TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, false);
    TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, false);
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, false);
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, false);
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, false);
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, false);
    TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITURNEVERYTHINGOFF_Init () {
    lib40AFD156_gt_AITURNEVERYTHINGOFF = TriggerCreate("lib40AFD156_gt_AITURNEVERYTHINGOFF_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default AI Upgrades and Abilities
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_Briefing2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8FD4E940_g;
    int auto8FD4E940_var;
    int auto1A1D03D9_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib40AFD156_gt_GeneralMicro, false, false);
    auto8FD4E940_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto8FD4E940_var = -1;
    while (true) {
        auto8FD4E940_var = PlayerGroupNextPlayer(auto8FD4E940_g, auto8FD4E940_var);
        if (auto8FD4E940_var < 0) { break; }
        auto1A1D03D9_val = PlayerDifficulty(auto8FD4E940_var);
        if (auto1A1D03D9_val == 1) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SiegeTech", 1);
            TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MindControl", 1);
            TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1A1D03D9_val == 2) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserEnableSpecializations", 1);
            TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolvePlague", 1);
            TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MindControl", 1);
            TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1A1D03D9_val == 3) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel1", 1);
            TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel1", 1);
            TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel1", 1);
            TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1A1D03D9_val == 4) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel2", 1);
            TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, true);
            TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Antennae", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel2", 1);
            TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel2", 1);
            TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1A1D03D9_val == 5) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranInfantryWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranShipArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "TerranVehicleArmorsLevel3", 1);
            TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsat, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, true);
            TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Antennae", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMeleeWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergMissileWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ZergFlyerWeaponsLevel3", 1);
            TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, true);
            TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossAirArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8FD4E940_var, "ProtossShieldsLevel3", 1);
            TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, true);
            TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_Briefing2_Init () {
    lib40AFD156_gt_Briefing2 = TriggerCreate("lib40AFD156_gt_Briefing2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI General Micro
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_GeneralMicro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto390983EA_g;
    int auto390983EA_var;
    int auto062765F2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto390983EA_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto390983EA_var = -1;
    while (true) {
        auto390983EA_var = PlayerGroupNextPlayer(auto390983EA_g, auto390983EA_var);
        if (auto390983EA_var < 0) { break; }
        auto062765F2_val = PlayerDifficulty(auto390983EA_var);
        if (auto062765F2_val == 1) {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
        }
        else if (auto062765F2_val == 2) {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto390983EA_var, c_diffPressForward, true);
            AISetDifficulty(auto390983EA_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto390983EA_var, c_diffDefendWithPeons, true);
        }
        else if (auto062765F2_val == 3) {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto390983EA_var, c_diffPressForward, true);
            AISetDifficulty(auto390983EA_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto390983EA_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDanger, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDamage, true);
        }
        else if (auto062765F2_val == 4) {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto390983EA_var, c_diffPressForward, true);
            AISetDifficulty(auto390983EA_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto390983EA_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDanger, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffAllowKiting, true);
            AISetDifficulty(auto390983EA_var, c_diffAdvancedRetreatLogic, true);
        }
        else if (auto062765F2_val == 5) {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto390983EA_var, c_diffPressForward, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDanger, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto390983EA_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto390983EA_var, c_diffAllowKiting, true);
            AISetDifficulty(auto390983EA_var, c_diffAdvancedRetreatLogic, true);
        }
        else {
            AISetDifficulty(auto390983EA_var, c_diffRepairDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto390983EA_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto390983EA_var, c_diffPressForward, true);
            AISetDifficulty(auto390983EA_var, c_diffFleeDamage, true);
            AISetDifficulty(auto390983EA_var, c_diffNormalTargetPrio, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_GeneralMicro_Init () {
    lib40AFD156_gt_GeneralMicro = TriggerCreate("lib40AFD156_gt_GeneralMicro_Func");
    TriggerEnable(lib40AFD156_gt_GeneralMicro, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat Add to Group
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranComsatAddtoGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib40AFD156_gv_aITerranComSat, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranComsatAddtoGroup_Init () {
    lib40AFD156_gt_AITerranComsatAddtoGroup = TriggerCreate("lib40AFD156_gt_AITerranComsatAddtoGroup_Func");
    TriggerEnable(lib40AFD156_gt_AITerranComsatAddtoGroup, false);
    TriggerAddEventUnitCreated(lib40AFD156_gt_AITerranComsatAddtoGroup, null, "ScannerSweep", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranComsat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) == "Terr"))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), EventPlayer()) == false))) {
            return false;
        }

        if (!((true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.2, 1.0), c_timeGame);
    libNtve_gf_AICast(UnitGroupRandomUnit(UnitGroupFilterPlayer(lib40AFD156_gv_aITerranComSat, EventPlayer(), 1), c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())));
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranComsat_Init () {
    lib40AFD156_gt_AITerranComsat = TriggerCreate("lib40AFD156_gt_AITerranComsat_Func");
    TriggerEnable(lib40AFD156_gt_AITerranComsat, false);
    TriggerAddEventUnitDamaged(lib40AFD156_gt_AITerranComsat, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat - Force Scan Lurkers/DarkTemplar
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "LurkerBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "DarkTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitGroupRandomUnit(lib40AFD156_gv_aITerranComSat, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar_Init () {
    lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar = TriggerCreate("lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar_Func");
    TriggerEnable(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, false);
    TriggerAddEventUnitDamaged(lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Optical Flare Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranMedicOpticalFlareResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranMedicOpticalFlareResponse_Init () {
    lib40AFD156_gt_AITerranMedicOpticalFlareResponse = TriggerCreate("lib40AFD156_gt_AITerranMedicOpticalFlareResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, false);
    TriggerAddEventUnitDamaged(lib40AFD156_gt_AITerranMedicOpticalFlareResponse, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Restore Defense
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranMedicRestoreDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;
    unitgroup lv_medicGroup;

    // Automatic Variable Declarations
    playergroup auto3F18FC0E_g;
    int auto3F18FC0E_var;
    unitgroup auto5B764DEC_g;
    int auto5B764DEC_u;
    unit auto5B764DEC_var;

    // Variable Initialization
    lv_medicGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 1))) {
            return false;
        }

        if (!(((EventUnitAbility() == AbilityCommand("Irradiate", 0)) || (EventUnitAbility() == AbilityCommand("Lockdown", 0)) || (EventUnitAbility() == AbilityCommand("OpticalFlare", 0)) || (EventUnitAbility() == AbilityCommand("Parasite", 0)) || (EventUnitAbility() == AbilityCommand("Ensnare", 0)) || (EventUnitAbility() == AbilityCommand("Plague", 0)) || (EventUnitAbility() == AbilityCommand("Maelstrom", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3F18FC0E_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto3F18FC0E_var = -1;
    while (true) {
        auto3F18FC0E_var = PlayerGroupNextPlayer(auto3F18FC0E_g, auto3F18FC0E_var);
        if (auto3F18FC0E_var < 0) { break; }
        auto5B764DEC_g = UnitGroup("Medic", auto3F18FC0E_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5B764DEC_u = UnitGroupCount(auto5B764DEC_g, c_unitCountAll);
        for (;; auto5B764DEC_u -= 1) {
            auto5B764DEC_var = UnitGroupUnitFromEnd(auto5B764DEC_g, auto5B764DEC_u);
            if (auto5B764DEC_var == null) { break; }
            UnitGroupAdd(lv_medicGroup, auto5B764DEC_var);
        }
    }
    Wait(RandomFixed(1.5, 3.0), c_timeGame);
    UnitIssueOrder(UnitGroupClosestToPoint(lv_medicGroup, UnitGetPosition(EventUnitTargetUnit())), OrderTargetingUnit(AbilityCommand("Restoration", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranMedicRestoreDefense_Init () {
    lib40AFD156_gt_AITerranMedicRestoreDefense = TriggerCreate("lib40AFD156_gt_AITerranMedicRestoreDefense_Func");
    TriggerEnable(lib40AFD156_gt_AITerranMedicRestoreDefense, false);
    TriggerAddEventUnitAbility(lib40AFD156_gt_AITerranMedicRestoreDefense, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Marine/Firebat - Stim Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranMarineFirebatStimResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA652E4B0_g;
    int autoA652E4B0_u;
    unit autoA652E4B0_var;
    unitgroup autoFFDEB0D7_g;
    int autoFFDEB0D7_u;
    unit autoFFDEB0D7_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "Firebat")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    autoA652E4B0_g = UnitGroup("Marine", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA652E4B0_u = UnitGroupCount(autoA652E4B0_g, c_unitCountAll);
    for (;; autoA652E4B0_u -= 1) {
        autoA652E4B0_var = UnitGroupUnitFromEnd(autoA652E4B0_g, autoA652E4B0_u);
        if (autoA652E4B0_var == null) { break; }
        UnitIssueOrder(autoA652E4B0_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    autoFFDEB0D7_g = UnitGroup("Firebat", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFFDEB0D7_u = UnitGroupCount(autoFFDEB0D7_g, c_unitCountAll);
    for (;; autoFFDEB0D7_u -= 1) {
        autoFFDEB0D7_var = UnitGroupUnitFromEnd(autoFFDEB0D7_g, autoFFDEB0D7_u);
        if (autoFFDEB0D7_var == null) { break; }
        UnitIssueOrder(autoFFDEB0D7_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    Wait(20.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranMarineFirebatStimResponse_Init () {
    lib40AFD156_gt_AITerranMarineFirebatStimResponse = TriggerCreate("lib40AFD156_gt_AITerranMarineFirebatStimResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranMarineFirebatStimResponse, false);
    TriggerAddEventUnitStartedAttack2(lib40AFD156_gt_AITerranMarineFirebatStimResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Defensive Matrix Defense
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "SiegeTank") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "Goliath")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), OrderTargetingUnit(AbilityCommand("DefensiveMatrix2", 0), EventUnit()), c_orderQueueReplace);
        Wait(30.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(5.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense_Init () {
    lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense = TriggerCreate("lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense_Func");
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate/EMP Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scienceVessel;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoA15DDA4F_g;
    int autoA15DDA4F_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA15DDA4F_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoA15DDA4F_var = -1;
    while (true) {
        autoA15DDA4F_var = PlayerGroupNextPlayer(autoA15DDA4F_g, autoA15DDA4F_var);
        if (autoA15DDA4F_var < 0) { break; }
        lv_scienceVessel = UnitGroupRandomUnit(UnitGroup("ScienceVessel", autoA15DDA4F_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("SCV", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Zealot", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel)))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_scienceVessel)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass_Init () {
    lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass = TriggerCreate("lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass_Func");
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass, libNtve_gf_DifficultyValueInt(200, 180, 160, 140), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranScienceVesselIrradiateResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Irradiate", 0), EventUnitTarget()), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranScienceVesselIrradiateResponse_Init () {
    lib40AFD156_gt_AITerranScienceVesselIrradiateResponse = TriggerCreate("lib40AFD156_gt_AITerranScienceVesselIrradiateResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranScienceVesselIrradiateResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - EMP Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranScienceVesselEMPResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeGetProperty(UnitGetType(EventUnitTarget()), c_unitPropEnergyPercent) >= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranScienceVesselEMPResponse_Init () {
    lib40AFD156_gt_AITerranScienceVesselEMPResponse = TriggerCreate("lib40AFD156_gt_AITerranScienceVesselEMPResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranScienceVesselEMPResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranScienceVesselEMPResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Launch Nuke
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranLaunchNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ghost;

    // Automatic Variable Declarations
    playergroup autoE64CAD51_g;
    int autoE64CAD51_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE64CAD51_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoE64CAD51_var = -1;
    while (true) {
        autoE64CAD51_var = PlayerGroupNextPlayer(autoE64CAD51_g, autoE64CAD51_var);
        if (autoE64CAD51_var < 0) { break; }
        lv_ghost = UnitGroupRandomUnit(UnitGroup("Ghost", autoE64CAD51_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_ghost, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_ghost, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_ghost), UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranLaunchNuke_Init () {
    lib40AFD156_gt_AITerranLaunchNuke = TriggerCreate("lib40AFD156_gt_AITerranLaunchNuke_Func");
    TriggerEnable(lib40AFD156_gt_AITerranLaunchNuke, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AITerranLaunchNuke, libNtve_gf_DifficultyValueInt(380, 360, 340, 320), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Rebuild Nukes
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranRebuildNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7B747AA1_g;
    int auto7B747AA1_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(25.0, c_timeGame);
    auto7B747AA1_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto7B747AA1_var = -1;
    while (true) {
        auto7B747AA1_var = PlayerGroupNextPlayer(auto7B747AA1_g, auto7B747AA1_var);
        if (auto7B747AA1_var < 0) { break; }
        UnitGroupIssueOrder(UnitGroup("BarracksReactor", auto7B747AA1_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("ArmSiloWithNuke", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranRebuildNukes_Init () {
    lib40AFD156_gt_AITerranRebuildNukes = TriggerCreate("lib40AFD156_gt_AITerranRebuildNukes_Func");
    TriggerEnable(lib40AFD156_gt_AITerranRebuildNukes, false);
    TriggerAddEventUnitAbility(lib40AFD156_gt_AITerranRebuildNukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranGhostCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranGhostCloakResponse_Init () {
    lib40AFD156_gt_AITerranGhostCloakResponse = TriggerCreate("lib40AFD156_gt_AITerranGhostCloakResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranGhostCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranGhostCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Lockdown Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranGhostLockdownResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeMechanical) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Lockdown", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranGhostLockdownResponse_Init () {
    lib40AFD156_gt_AITerranGhostLockdownResponse = TriggerCreate("lib40AFD156_gt_AITerranGhostLockdownResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranGhostLockdownResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranGhostLockdownResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Wraith - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranWraithCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Wraith"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "SporeCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranWraithCloakResponse_Init () {
    lib40AFD156_gt_AITerranWraithCloakResponse = TriggerCreate("lib40AFD156_gt_AITerranWraithCloakResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranWraithCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranWraithCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Battlecruiser"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "DevourerMP") || (UnitGetType(EventUnitTarget()) == "Battlecruiser") || (UnitGetType(EventUnitTarget()) == "Carrier") || (UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "ImmortalAiur") || (UnitGetType(EventUnitTarget()) == "VoidRay") || (UnitGetType(EventUnitTarget()) == "Corruptor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Yamato", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse_Init () {
    lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse = TriggerCreate("lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse_Func");
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_battlecruiser;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto43691653_g;
    int auto43691653_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto43691653_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto43691653_var = -1;
    while (true) {
        auto43691653_var = PlayerGroupNextPlayer(auto43691653_g, auto43691653_var);
        if (auto43691653_var < 0) { break; }
        lv_battlecruiser = UnitGroupRandomUnit(UnitGroup("Battlecruiser", auto43691653_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("MissileTurret", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("SunkenColony", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("PhotonCannon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Bunker", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Pylon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    UnitIssueOrder(lv_battlecruiser, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_battlecruiser)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass_Init () {
    lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass = TriggerCreate("lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass_Func");
    TriggerEnable(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass, libNtve_gf_DifficultyValueInt(320, 300, 280, 260), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Defensive Matrix Remove Behavior (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "DefensiveMatrix") == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "DefensiveMatrix", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Init () {
    lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive = TriggerCreate("lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Func");
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AT Terran Raynor Mine Requirement - Disable (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("RaynorSpiderMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 2) || (UnitGroupCount(UnitGroup("RaynorSpiderMineBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 0);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Init () {
    lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive = TriggerCreate("lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive, null, AbilityCommand("UseSpiderMinesTarget2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AT Terran Raynor Mine Requirement - Renable (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "RaynorSpiderMine") || (UnitGetType(EventUnit()) == "RaynorSpiderMineBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("RaynorSpiderMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 2) || (UnitGroupCount(UnitGroup("RaynorSpiderMineBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Init () {
    lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive = TriggerCreate("lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Func");
    TriggerAddEventUnitDied(lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Broodlings/Ensare Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "QueenClassic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Stalker"))) {
        libNtve_gf_AICast(EventUnit(), OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), EventUnitTarget()));
    }
    else {
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Ensnare", 0), UnitGetPosition(EventUnitTarget())));
        Wait(15.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse_Init () {
    lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse = TriggerCreate("lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Parasite/Broodlings Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_queen;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto9A46D64B_g;
    int auto9A46D64B_var;
    unitgroup autoABB516E8_g;
    int autoABB516E8_u;
    unit autoABB516E8_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A46D64B_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto9A46D64B_var = -1;
    while (true) {
        auto9A46D64B_var = PlayerGroupNextPlayer(auto9A46D64B_g, auto9A46D64B_var);
        if (auto9A46D64B_var < 0) { break; }
        lv_queen = UnitGroupRandomUnit(UnitGroup("QueenClassic", auto9A46D64B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        autoABB516E8_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoABB516E8_u = UnitGroupCount(autoABB516E8_g, c_unitCountAll);
        for (;; autoABB516E8_u -= 1) {
            autoABB516E8_var = UnitGroupUnitFromEnd(autoABB516E8_g, autoABB516E8_u);
            if (autoABB516E8_var == null) { break; }
            UnitGroupAdd(lv_playerUnits, autoABB516E8_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Parasite", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_queen)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass_Init () {
    lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass = TriggerCreate("lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass_Func");
    TriggerEnable(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Dark Swarm Defense
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergDefilerDarkSwarmDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(UnitGroup("DefilerMP", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_defiler = UnitGroupClosestToPoint(UnitGroup("DefilerMP", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("DarkSwarm", 0), UnitGetPosition(EventUnitTarget())));
        Wait(40.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergDefilerDarkSwarmDefense_Init () {
    lib40AFD156_gt_AIZergDefilerDarkSwarmDefense = TriggerCreate("lib40AFD156_gt_AIZergDefilerDarkSwarmDefense_Func");
    TriggerEnable(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIZergDefilerDarkSwarmDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergDefilerPlagueResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DefilerMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 150.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(EventUnitTarget())));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergDefilerPlagueResponse_Init () {
    lib40AFD156_gt_AIZergDefilerPlagueResponse = TriggerCreate("lib40AFD156_gt_AIZergDefilerPlagueResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIZergDefilerPlagueResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Harass Structures
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergDefilerPlagueHarassStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;
    unitgroup lv_playerStructures;

    // Automatic Variable Declarations
    playergroup auto6C10EA31_g;
    int auto6C10EA31_var;
    unitgroup auto4B2FB869_g;
    int auto4B2FB869_u;
    unit auto4B2FB869_var;

    // Variable Initialization
    lv_playerStructures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C10EA31_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto6C10EA31_var = -1;
    while (true) {
        auto6C10EA31_var = PlayerGroupNextPlayer(auto6C10EA31_g, auto6C10EA31_var);
        if (auto6C10EA31_var < 0) { break; }
        lv_defiler = UnitGroupRandomUnit(UnitGroup("DefilerMP", auto6C10EA31_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        auto4B2FB869_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto4B2FB869_u = UnitGroupCount(auto4B2FB869_g, c_unitCountAll);
        for (;; auto4B2FB869_u -= 1) {
            auto4B2FB869_var = UnitGroupUnitFromEnd(auto4B2FB869_g, auto4B2FB869_u);
            if (auto4B2FB869_var == null) { break; }
            UnitGroupAdd(lv_playerStructures, auto4B2FB869_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerStructures, 1, 0), UnitGetPosition(lv_defiler)))), c_orderQueueReplace);
    }

    UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_defiler)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergDefilerPlagueHarassStructures_Init () {
    lib40AFD156_gt_AIZergDefilerPlagueHarassStructures = TriggerCreate("lib40AFD156_gt_AIZergDefilerPlagueHarassStructures_Func");
    TriggerEnable(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIZergDefilerPlagueHarassStructures, libNtve_gf_DifficultyValueInt(420, 360, 320, 280), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Fungal Growth
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergInfestorFungalGrowth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Infestor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("FungalGrowth", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergInfestorFungalGrowth_Init () {
    lib40AFD156_gt_AIZergInfestorFungalGrowth = TriggerCreate("lib40AFD156_gt_AIZergInfestorFungalGrowth_Func");
    TriggerEnable(lib40AFD156_gt_AIZergInfestorFungalGrowth, false);
    TriggerAddEventUnitAttacked(lib40AFD156_gt_AIZergInfestorFungalGrowth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Infested Terrans
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_DarkSwarm3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_infestor;

    // Automatic Variable Declarations
    unitgroup autoB37A402E_g;
    int autoB37A402E_u;
    unit autoB37A402E_var;

    // Variable Initialization
    lv_infestor = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_infestor, UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoB37A402E_g = lv_infestor;
    autoB37A402E_u = UnitGroupCount(autoB37A402E_g, c_unitCountAll);
    for (;; autoB37A402E_u -= 1) {
        autoB37A402E_var = UnitGroupUnitFromEnd(autoB37A402E_g, autoB37A402E_u);
        if (autoB37A402E_var == null) { break; }
        if (((UnitGetOwner(autoB37A402E_var) == 1) || (UnitGetPropertyFixed(autoB37A402E_var, c_unitPropEnergy, c_unitPropCurrent) < 100.0))) {
            UnitGroupRemove(lv_infestor, autoB37A402E_var);
        }

    }
    if ((UnitGroupCount(lv_infestor, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_AICast(UnitGroupRandomUnit(lv_infestor, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), UnitGetPosition(EventUnit())));
        Wait(2.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_DarkSwarm3_Init () {
    lib40AFD156_gt_DarkSwarm3 = TriggerCreate("lib40AFD156_gt_DarkSwarm3_Func");
    TriggerEnable(lib40AFD156_gt_DarkSwarm3, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_DarkSwarm3, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Corruptor - Corruption
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIZergCorruptorCorruption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Corruptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Corruption", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIZergCorruptorCorruption_Init () {
    lib40AFD156_gt_AIZergCorruptorCorruption = TriggerCreate("lib40AFD156_gt_AIZergCorruptorCorruption_Func");
    TriggerEnable(lib40AFD156_gt_AIZergCorruptorCorruption, false);
    TriggerAddEventUnitAttacked(lib40AFD156_gt_AIZergCorruptorCorruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control/Maelstrom Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkArchon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLife, c_unitPropNormal) >= 130.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("MindControl2", 0), EventUnitTarget()), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Maelstrom", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToFront);
    }
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init () {
    lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse = TriggerCreate("lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossDarkArchonMindControlHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_darkArchon;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoBB0E00A8_g;
    int autoBB0E00A8_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB0E00A8_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoBB0E00A8_var = -1;
    while (true) {
        autoBB0E00A8_var = PlayerGroupNextPlayer(autoBB0E00A8_g, autoBB0E00A8_var);
        if (autoBB0E00A8_var < 0) { break; }
        lv_darkArchon = UnitGroupRandomUnit(UnitGroup("DarkArchon", autoBB0E00A8_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(2.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("SiegeTankSieged", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Ultralisk", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Archon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
        else {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Battlecruiser", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("GuardianMP", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Carrier", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
    }
    UnitIssueOrder(lv_darkArchon, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_darkArchon)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossDarkArchonMindControlHarass_Init () {
    lib40AFD156_gt_AIProtossDarkArchonMindControlHarass = TriggerCreate("lib40AFD156_gt_AIProtossDarkArchonMindControlHarass_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIProtossDarkArchonMindControlHarass, libNtve_gf_DifficultyValueInt(220, 200, 180, 160), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Mind Control Tech (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string[5] lv_upgrade;
    int lv_cycle;

    // Automatic Variable Declarations
    string auto2894F868_val;
    const int auto3BA31756_ae = 4;
    const int auto3BA31756_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_upgrade[init_i] = "NeosteelFrame";
    }

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitTargetUnit(), 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "MindControl", 1);
    auto2894F868_val = UnitGetType(EventUnitTargetUnit());
    if (auto2894F868_val == "Marine") {
        lv_upgrade[1] = "U238Shells";
        lv_upgrade[2] = "Stimpack";
    }
    else if (auto2894F868_val == "Firebat") {
        lv_upgrade[1] = "Stimpack";
    }
    else if (auto2894F868_val == "Medic") {
        lv_upgrade[1] = "Restoration";
        lv_upgrade[2] = "OpticalFlare";
        lv_upgrade[3] = "MedicCaduceusReactor";
    }
    else if (auto2894F868_val == "Ghost") {
        lv_upgrade[1] = "PersonalCloaking";
        lv_upgrade[2] = "Lockdown";
        lv_upgrade[3] = "OcularImplants2";
        lv_upgrade[4] = "GhostMoebiusReactor";
    }
    else if (auto2894F868_val == "Vulture") {
        lv_upgrade[1] = "IonThrusters";
        lv_upgrade[2] = "ResearchSpiderMines";
    }
    else if (auto2894F868_val == "SiegeTank") {
        lv_upgrade[1] = "SiegeTech";
    }
    else if (auto2894F868_val == "SiegeTankSieged") {
        lv_upgrade[1] = "SiegeTech";
    }
    else if (auto2894F868_val == "Goliath") {
        lv_upgrade[1] = "AresClassWeaponsSystem";
    }
    else if (auto2894F868_val == "Wraith") {
        lv_upgrade[1] = "WraithCloak";
        lv_upgrade[2] = "WraithApolloReactor";
    }
    else if (auto2894F868_val == "ScienceVessel") {
        lv_upgrade[1] = "ResearchEMPShockwave";
        lv_upgrade[2] = "ResearchIrradiate";
        lv_upgrade[3] = "ScienceVesselTitanReactor";
    }
    else if (auto2894F868_val == "Battlecruiser") {
        lv_upgrade[1] = "BattlecruiserEnableSpecializations";
        lv_upgrade[2] = "BattlecruiserBehemothReactor";
    }
    else if (auto2894F868_val == "Drone") {
        lv_upgrade[1] = "Burrow";
    }
    else if (auto2894F868_val == "DroneBurrowed") {
        lv_upgrade[1] = "Burrow";
    }
    else if (auto2894F868_val == "Zergling") {
        lv_upgrade[1] = "zerglingmovementspeed";
        lv_upgrade[2] = "zerglingattackspeed";
        lv_upgrade[3] = "Burrow";
    }
    else if (auto2894F868_val == "ZerglingBurrowed") {
        lv_upgrade[1] = "zerglingmovementspeed";
        lv_upgrade[2] = "zerglingattackspeed";
        lv_upgrade[3] = "Burrow";
    }
    else if (auto2894F868_val == "Overlord") {
        lv_upgrade[1] = "overlordtransport";
        lv_upgrade[2] = "Antennae";
        lv_upgrade[3] = "overlordspeed";
    }
    else if (auto2894F868_val == "Hydralisk") {
        lv_upgrade[1] = "hydraliskspeed";
        lv_upgrade[2] = "hydraliskspeed2";
        lv_upgrade[3] = "EvolveLurkerAspect";
        lv_upgrade[4] = "Burrow";
    }
    else if (auto2894F868_val == "HydraliskBurrowed") {
        lv_upgrade[1] = "hydraliskspeed";
        lv_upgrade[2] = "hydraliskspeed2";
        lv_upgrade[3] = "EvolveLurkerAspect";
        lv_upgrade[4] = "Burrow";
    }
    else if (auto2894F868_val == "Lurker") {
        lv_upgrade[1] = "EvolveLurkerAspect";
    }
    else if (auto2894F868_val == "LurkerBurrowed") {
        lv_upgrade[1] = "EvolveLurkerAspect";
    }
    else if (auto2894F868_val == "Queen") {
        lv_upgrade[1] = "EvolveSpawnBroodling";
        lv_upgrade[2] = "EvolveEnsnare";
        lv_upgrade[3] = "InfestorEnergyUpgrade";
    }
    else if (auto2894F868_val == "Infestor") {
        lv_upgrade[1] = "EvolvePlague";
        lv_upgrade[2] = "EvolveConsume";
        lv_upgrade[3] = "ResearchMetasynapticNode";
        lv_upgrade[4] = "Burrow";
    }
    else if (auto2894F868_val == "InfestorBurrowed") {
        lv_upgrade[1] = "EvolvePlague";
        lv_upgrade[2] = "EvolveConsume";
        lv_upgrade[3] = "ResearchMetasynapticNode";
        lv_upgrade[4] = "Burrow";
    }
    else if (auto2894F868_val == "Ultralisk") {
        lv_upgrade[1] = "AnabolicSynthesis";
        lv_upgrade[2] = "ChitinousPlating";
    }
    else if (auto2894F868_val == "EthanStewart") {
        lv_upgrade[1] = "Burrow";
    }
    else if (auto2894F868_val == "InfestedCivilianBurrowed") {
        lv_upgrade[1] = "Burrow";
    }
    else if (auto2894F868_val == "Zealot") {
        lv_upgrade[1] = "Charge";
    }
    else if (auto2894F868_val == "Stalker") {
        lv_upgrade[1] = "SingularityCharge";
    }
    else if (auto2894F868_val == "HighTemplar") {
        lv_upgrade[1] = "PsiStormTech";
        lv_upgrade[2] = "haltech";
        lv_upgrade[3] = "HighTemplarKhaydarinAmulet";
    }
    else if (auto2894F868_val == "DarkArchonSCMR") {
        lv_upgrade[1] = "Maelstrom";
        lv_upgrade[2] = "ArgusTalisman";
    }
    else if (auto2894F868_val == "WarpPrism") {
        lv_upgrade[1] = "GraviticDrive";
    }
    else if (auto2894F868_val == "Reaver") {
        lv_upgrade[1] = "ScarabDamage";
        lv_upgrade[2] = "IncreasedReaverCapacity";
    }
    else if (auto2894F868_val == "Observer") {
        lv_upgrade[1] = "ObserverGraviticBooster";
        lv_upgrade[2] = "SensorArray";
    }
    else if (auto2894F868_val == "Scout") {
        lv_upgrade[1] = "ApialSensors";
        lv_upgrade[2] = "GraviticThrusters";
    }
    else if (auto2894F868_val == "Phoenix") {
        lv_upgrade[1] = "ResearchDisruptionWeb";
        lv_upgrade[2] = "ArgusJewel";
    }
    else if (auto2894F868_val == "Carrier") {
        lv_upgrade[1] = "InterceptorLimit6";
    }
    else if (auto2894F868_val == "VoidRay") {
        lv_upgrade[1] = "ResearchRecall";
        lv_upgrade[2] = "ResearchStasis";
        lv_upgrade[3] = "KhaydarinCore";
    }
    else {
    }
    lv_cycle = 1;
    for ( ; ( (auto3BA31756_ai >= 0 && lv_cycle <= auto3BA31756_ae) || (auto3BA31756_ai < 0 && lv_cycle >= auto3BA31756_ae) ) ; lv_cycle += auto3BA31756_ai ) {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitTargetUnit()), lv_upgrade[lv_cycle], c_techCountCompleteOnly) >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), lv_upgrade[lv_cycle], 1);
        }

    }
    UnitSetOwner(EventUnitTargetUnit(), UnitGetOwner(EventUnit()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive_Init () {
    lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive = TriggerCreate("lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive, null, AbilityCommand("MindControl2", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Corsair - Disruption Web Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corsair;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CorsairMP"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "Marine") || (UnitGetType(EventUnitTarget()) == "Ghost") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Hydralisk") || (UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Archon") || (UnitGetType(EventUnitTarget()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DisruptionWeb", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse_Init () {
    lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse = TriggerCreate("lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse_Init () {
    lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse = TriggerCreate("lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_highTemplar;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoEF002110_g;
    int autoEF002110_var;
    unitgroup autoCED5F0E7_g;
    int autoCED5F0E7_u;
    unit autoCED5F0E7_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF002110_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoEF002110_var = -1;
    while (true) {
        autoEF002110_var = PlayerGroupNextPlayer(autoEF002110_g, autoEF002110_var);
        if (autoEF002110_var < 0) { break; }
        lv_highTemplar = UnitGroupRandomUnit(UnitGroup("HighTemplar", autoEF002110_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    autoCED5F0E7_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoCED5F0E7_u = UnitGroupCount(autoCED5F0E7_g, c_unitCountAll);
    for (;; autoCED5F0E7_u -= 1) {
        autoCED5F0E7_var = UnitGroupUnitFromEnd(autoCED5F0E7_g, autoCED5F0E7_u);
        if (autoCED5F0E7_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, autoCED5F0E7_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_highTemplar)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_highTemplar)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass_Init () {
    lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass = TriggerCreate("lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Reaver - Scarab Build
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossReaverScarabBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6399241A_g;
    int auto6399241A_var;
    unitgroup auto459E4FD7_g;
    int auto459E4FD7_u;
    unit auto459E4FD7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6399241A_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto6399241A_var = -1;
    while (true) {
        auto6399241A_var = PlayerGroupNextPlayer(auto6399241A_g, auto6399241A_var);
        if (auto6399241A_var < 0) { break; }
        auto459E4FD7_g = UnitGroup("Reaver", auto6399241A_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto459E4FD7_u = UnitGroupCount(auto459E4FD7_g, c_unitCountAll);
        for (;; auto459E4FD7_u -= 1) {
            auto459E4FD7_var = UnitGroupUnitFromEnd(auto459E4FD7_g, auto459E4FD7_u);
            if (auto459E4FD7_var == null) { break; }
            libNtve_gf_AICast(auto459E4FD7_var, Order(AbilityCommand("ReaverHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossReaverScarabBuild_Init () {
    lib40AFD156_gt_AIProtossReaverScarabBuild = TriggerCreate("lib40AFD156_gt_AIProtossReaverScarabBuild_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossReaverScarabBuild, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIProtossReaverScarabBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Carrier- Interceptor Build
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossCarrierInterceptorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC2E43427_g;
    int autoC2E43427_var;
    unitgroup auto73F3A6AA_g;
    int auto73F3A6AA_u;
    unit auto73F3A6AA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC2E43427_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoC2E43427_var = -1;
    while (true) {
        autoC2E43427_var = PlayerGroupNextPlayer(autoC2E43427_g, autoC2E43427_var);
        if (autoC2E43427_var < 0) { break; }
        auto73F3A6AA_g = UnitGroup("Carrier", autoC2E43427_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto73F3A6AA_u = UnitGroupCount(auto73F3A6AA_g, c_unitCountAll);
        for (;; auto73F3A6AA_u -= 1) {
            auto73F3A6AA_var = UnitGroupUnitFromEnd(auto73F3A6AA_g, auto73F3A6AA_u);
            if (auto73F3A6AA_var == null) { break; }
            libNtve_gf_AICast(auto73F3A6AA_var, Order(AbilityCommand("CarrierHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossCarrierInterceptorBuild_Init () {
    lib40AFD156_gt_AIProtossCarrierInterceptorBuild = TriggerCreate("lib40AFD156_gt_AIProtossCarrierInterceptorBuild_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIProtossCarrierInterceptorBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Timed Response
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossArbiterStasisTimedResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ArbiterMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 150.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(libNtve_gf_DifficultyValueInt(400, 360, 320, 280), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossArbiterStasisTimedResponse_Init () {
    lib40AFD156_gt_AIProtossArbiterStasisTimedResponse = TriggerCreate("lib40AFD156_gt_AIProtossArbiterStasisTimedResponse_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIProtossArbiterStasisTimedResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Harass
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossArbiterStasisHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto6F80992B_g;
    int auto6F80992B_var;
    unitgroup autoDDF09229_g;
    int autoDDF09229_u;
    unit autoDDF09229_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F80992B_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto6F80992B_var = -1;
    while (true) {
        auto6F80992B_var = PlayerGroupNextPlayer(auto6F80992B_g, auto6F80992B_var);
        if (auto6F80992B_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", auto6F80992B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    autoDDF09229_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoDDF09229_u = UnitGroupCount(autoDDF09229_g, c_unitCountAll);
    for (;; autoDDF09229_u -= 1) {
        autoDDF09229_var = UnitGroupUnitFromEnd(autoDDF09229_g, autoDDF09229_u);
        if (autoDDF09229_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, autoDDF09229_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_arbiter)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossArbiterStasisHarass_Init () {
    lib40AFD156_gt_AIProtossArbiterStasisHarass = TriggerCreate("lib40AFD156_gt_AIProtossArbiterStasisHarass_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterStasisHarass, false);
    TriggerAddEventTimePeriodic(lib40AFD156_gt_AIProtossArbiterStasisHarass, libNtve_gf_DifficultyValueInt(400, 380, 360, 340), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Recall Defense
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossArbiterRecallDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;

    // Automatic Variable Declarations
    playergroup auto464248E3_g;
    int auto464248E3_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Carrier") || (UnitGetType(EventUnit()) == "Reaver") || (UnitGetType(EventUnit()) == "Archon")))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto464248E3_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto464248E3_var = -1;
    while (true) {
        auto464248E3_var = PlayerGroupNextPlayer(auto464248E3_g, auto464248E3_var);
        if (auto464248E3_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", auto464248E3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib40AFD156_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossArbiterRecallDefense_Init () {
    lib40AFD156_gt_AIProtossArbiterRecallDefense = TriggerCreate("lib40AFD156_gt_AIProtossArbiterRecallDefense_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossArbiterRecallDefense, false);
    TriggerAddEventUnitAttacked2(lib40AFD156_gt_AIProtossArbiterRecallDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Stalker - Blink
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_AIProtossStalkerBlink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 3.0))), c_orderQueueReplace);
    }

    Wait(7.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_AIProtossStalkerBlink_Init () {
    lib40AFD156_gt_AIProtossStalkerBlink = TriggerCreate("lib40AFD156_gt_AIProtossStalkerBlink_Func");
    TriggerEnable(lib40AFD156_gt_AIProtossStalkerBlink, false);
    TriggerAddEventUnitDamaged(lib40AFD156_gt_AIProtossStalkerBlink, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Sentry - Force Field
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_PsiStorm8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Monitor") || (UnitGetType(EventUnit()) == "Sentry")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    if ((UnitGetType(EventUnit()) == "Sentry")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceField", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Monitor")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceFieldMonitor", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    Wait(8.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_PsiStorm8_Init () {
    lib40AFD156_gt_PsiStorm8 = TriggerCreate("lib40AFD156_gt_PsiStorm8_Func");
    TriggerEnable(lib40AFD156_gt_PsiStorm8, false);
    TriggerAddEventUnitDamaged(lib40AFD156_gt_PsiStorm8, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Anim Bandaid Fix
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_DropAnimBandaidFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Neutral) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitCargo()), 0.15, UnitGetFacing(EventUnitCargo()))), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_DropAnimBandaidFix_Init () {
    lib40AFD156_gt_DropAnimBandaidFix = TriggerCreate("lib40AFD156_gt_DropAnimBandaidFix_Func");
    TriggerAddEventUnitCargo(lib40AFD156_gt_DropAnimBandaidFix, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nukes
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_Nukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    libNtve_gf_CreateActorAtPoint("NukeCracks", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_Nukes_Init () {
    lib40AFD156_gt_Nukes = TriggerCreate("lib40AFD156_gt_Nukes_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_Nukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Structures
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_DestroyedStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("BuildingCracks", UnitGetPosition(EventUnit()));
            if ((RandomInt(1, 10) >= 8)) {
                libNtve_gf_CreateActorAtPoint("BuildingDebris", UnitGetPosition(EventUnit()));
            }

        }
        else {
            libNtve_gf_CreateActorAtPoint("BuildingCracksSmall", UnitGetPosition(EventUnit()));
        }
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("ZergStructureRemains", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -3.800000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {187,187,255 0.800000}");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_DestroyedStructures_Init () {
    lib40AFD156_gt_DestroyedStructures = TriggerCreate("lib40AFD156_gt_DestroyedStructures_Func");
    TriggerAddEventUnitDied(lib40AFD156_gt_DestroyedStructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Vehicles
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_DestroyedVehicles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor1;
    actor lv_actor2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeUser1) == false))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnit(), c_planeGround) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 10) >= 8)) {
        if ((PlayerRace(EventPlayer()) == "Terr")) {
            libNtve_gf_CreateActorAtPoint("Fire", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.500000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
        }
        else {
            libNtve_gf_CreateActorAtPoint("GenericProtossFire_Medium", UnitGetPosition(EventUnit()));
            lv_actor1 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,0.500000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -0.400000");
            libNtve_gf_CreateActorAtPoint("FireProtoss", UnitGetPosition(EventUnit()));
            lv_actor2 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "AddRoll -10.000000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(lv_actor1, "Destroy");
            ActorSend(lv_actor2, "Destroy");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_DestroyedVehicles_Init () {
    lib40AFD156_gt_DestroyedVehicles = TriggerCreate("lib40AFD156_gt_DestroyedVehicles_Func");
    TriggerAddEventUnitDied(lib40AFD156_gt_DestroyedVehicles, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Implosion (ER Version)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_ImplosionERVersion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.3, c_timeReal);
    if (((UnitGetType(EventUnitTargetUnit()) == "Battlecruiser") || (UnitGetType(EventUnitTargetUnit()) == "Carrier") || (UnitGetType(EventUnitTargetUnit()) == "Colossus"))) {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Large", EventUnitTargetUnit());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Medium", EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_ImplosionERVersion_Init () {
    lib40AFD156_gt_ImplosionERVersion = TriggerCreate("lib40AFD156_gt_ImplosionERVersion_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_ImplosionERVersion, null, AbilityCommand("Implosion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Implosion (Damage Version) (Required)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_ImplosionDamageVersionRequired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.3, c_timeReal);
    if (((UnitGetType(EventUnitTargetUnit()) == "Battlecruiser") || (UnitGetType(EventUnitTargetUnit()) == "Carrier"))) {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Large", EventUnitTargetUnit());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Medium", EventUnitTargetUnit());
    }
    Wait(0.1, c_timeReal);
    UnitBehaviorRemove(EventUnitTargetUnit(), "ImplosionTempBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_ImplosionDamageVersionRequired_Init () {
    lib40AFD156_gt_ImplosionDamageVersionRequired = TriggerCreate("lib40AFD156_gt_ImplosionDamageVersionRequired_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_ImplosionDamageVersionRequired, null, AbilityCommand("Implosion2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purification Beam Expire (Required)
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_PurificationBeamExpireRequired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_gant_location;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Gantrithor"))) {
            return false;
        }

        if (!((lib40AFD156_gv_beam_on == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gant_location = UnitGetPosition(EventUnit());
    lib40AFD156_gv_beam_on = true;
    while (!(((EventUnitAbilityStage() == c_unitAbilStageCancel) || (EventUnitAbilityStage() == c_unitAbilStageComplete) || (UnitGetPosition(EventUnit()) != lv_gant_location) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 5.0)))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(EventUnit(), "PurificationBeamSelfDamage", 1);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("KerriganEpilogue03QuantumRay", 1)), c_orderQueueReplace);
    libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_40AFD156_B9562A6A"), SoundLink("UI_GenericError", 0));
    lv_gant_location = null;
    lib40AFD156_gv_beam_on = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_PurificationBeamExpireRequired_Init () {
    lib40AFD156_gt_PurificationBeamExpireRequired = TriggerCreate("lib40AFD156_gt_PurificationBeamExpireRequired_Func");
    TriggerAddEventUnitAbility(lib40AFD156_gt_PurificationBeamExpireRequired, null, AbilityCommand("KerriganEpilogue03QuantumRay", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt__ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib40AFD156_gf__ZergDropPod(lib40AFD156_gv__TP_DropPod_Location, lib40AFD156_gv__TP_DropPod_Units, lib40AFD156_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt__ZergDropPod_Init () {
    lib40AFD156_gt__ZergDropPod = TriggerCreate("lib40AFD156_gt__ZergDropPod_Func");
    TriggerEnable(lib40AFD156_gt__ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt__TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib40AFD156_gf__TerranDropPod(lib40AFD156_gv__TP_DropPod_Location, lib40AFD156_gv__TP_DropPod_Units, lib40AFD156_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt__TerranDropPod_Init () {
    lib40AFD156_gt__TerranDropPod = TriggerCreate("lib40AFD156_gt__TerranDropPod_Func");
    TriggerEnable(lib40AFD156_gt__TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Music Change
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_gt_BriefCancelButton16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/lib_40AFD156_F5A38252") + StringToText(EventChatMessage(false))));
    if ((EventChatMessage(false) == "tmusic1")) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        if ((EventChatMessage(false) == "tmusic2")) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }
        else {
            if ((EventChatMessage(false) == "tmusic3")) {
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            }
            else {
                if ((EventChatMessage(false) == "zmusic1")) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else {
                    if ((EventChatMessage(false) == "zmusic2")) {
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    }
                    else {
                        if ((EventChatMessage(false) == "zmusic3")) {
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        }
                        else {
                            if ((EventChatMessage(false) == "pmusic1")) {
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            }
                            else {
                                if ((EventChatMessage(false) == "pmusic2")) {
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                }
                                else {
                                    if ((EventChatMessage(false) == "pmusic3")) {
                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib40AFD156_gt_BriefCancelButton16_Init () {
    lib40AFD156_gt_BriefCancelButton16 = TriggerCreate("lib40AFD156_gt_BriefCancelButton16_Func");
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "tmusic1", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "tmusic2", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "tmusic3", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "zmusic1", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "zmusic2", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "zmusic3", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "pmusic1", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "pmusic2", true);
    TriggerAddEventChatMessage(lib40AFD156_gt_BriefCancelButton16, 1, "pmusic3", true);
}

void lib40AFD156_InitTriggers () {
    lib40AFD156_gt_Init_Init();
    lib40AFD156_gt_OrderReHarvest_Init();
    lib40AFD156_gt_AITURNEVERYTHINGON_Init();
    lib40AFD156_gt_AITURNEVERYTHINGOFF_Init();
    lib40AFD156_gt_Briefing2_Init();
    lib40AFD156_gt_GeneralMicro_Init();
    lib40AFD156_gt_AITerranComsatAddtoGroup_Init();
    lib40AFD156_gt_AITerranComsat_Init();
    lib40AFD156_gt_AITerranComsatForceScanLurkersDarkTemplar_Init();
    lib40AFD156_gt_AITerranMedicOpticalFlareResponse_Init();
    lib40AFD156_gt_AITerranMedicRestoreDefense_Init();
    lib40AFD156_gt_AITerranMarineFirebatStimResponse_Init();
    lib40AFD156_gt_AITerranScienceVesselDefensiveMatrixDefense_Init();
    lib40AFD156_gt_AITerranScienceVesselIrradiateEMPHarass_Init();
    lib40AFD156_gt_AITerranScienceVesselIrradiateResponse_Init();
    lib40AFD156_gt_AITerranScienceVesselEMPResponse_Init();
    lib40AFD156_gt_AITerranLaunchNuke_Init();
    lib40AFD156_gt_AITerranRebuildNukes_Init();
    lib40AFD156_gt_AITerranGhostCloakResponse_Init();
    lib40AFD156_gt_AITerranGhostLockdownResponse_Init();
    lib40AFD156_gt_AITerranWraithCloakResponse_Init();
    lib40AFD156_gt_AITerranBattlecruiserYamatoCannonResponse_Init();
    lib40AFD156_gt_AITerranBattlecruiserYamatoCannonHarass_Init();
    lib40AFD156_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Init();
    lib40AFD156_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Init();
    lib40AFD156_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Init();
    lib40AFD156_gt_AIZergQueenBroodlingsEnsareResponse_Init();
    lib40AFD156_gt_AIZergQueenParasiteBroodlingsHarass_Init();
    lib40AFD156_gt_AIZergDefilerDarkSwarmDefense_Init();
    lib40AFD156_gt_AIZergDefilerPlagueResponse_Init();
    lib40AFD156_gt_AIZergDefilerPlagueHarassStructures_Init();
    lib40AFD156_gt_AIZergInfestorFungalGrowth_Init();
    lib40AFD156_gt_DarkSwarm3_Init();
    lib40AFD156_gt_AIZergCorruptorCorruption_Init();
    lib40AFD156_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init();
    lib40AFD156_gt_AIProtossDarkArchonMindControlHarass_Init();
    lib40AFD156_gt_ProtossMindControlTechAlwaysleaveactive_Init();
    lib40AFD156_gt_AIProtossCorsairDisruptionWebResponse_Init();
    lib40AFD156_gt_AIProtossHighTemplarPsiStormResponse_Init();
    lib40AFD156_gt_AIProtossHighTemplarPsiStormHarass_Init();
    lib40AFD156_gt_AIProtossReaverScarabBuild_Init();
    lib40AFD156_gt_AIProtossCarrierInterceptorBuild_Init();
    lib40AFD156_gt_AIProtossArbiterStasisTimedResponse_Init();
    lib40AFD156_gt_AIProtossArbiterStasisHarass_Init();
    lib40AFD156_gt_AIProtossArbiterRecallDefense_Init();
    lib40AFD156_gt_AIProtossStalkerBlink_Init();
    lib40AFD156_gt_PsiStorm8_Init();
    lib40AFD156_gt_DropAnimBandaidFix_Init();
    lib40AFD156_gt_Nukes_Init();
    lib40AFD156_gt_DestroyedStructures_Init();
    lib40AFD156_gt_DestroyedVehicles_Init();
    lib40AFD156_gt_ImplosionERVersion_Init();
    lib40AFD156_gt_ImplosionDamageVersionRequired_Init();
    lib40AFD156_gt_PurificationBeamExpireRequired_Init();
    lib40AFD156_gt__ZergDropPod_Init();
    lib40AFD156_gt__TerranDropPod_Init();
    lib40AFD156_gt_BriefCancelButton16_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib40AFD156_InitLib_completed = false;

void lib40AFD156_InitLib () {
    if (lib40AFD156_InitLib_completed) {
        return;
    }

    lib40AFD156_InitLib_completed = true;

    lib40AFD156_InitLibraries();
    lib40AFD156_InitVariables();
    lib40AFD156_InitTriggers();
}

