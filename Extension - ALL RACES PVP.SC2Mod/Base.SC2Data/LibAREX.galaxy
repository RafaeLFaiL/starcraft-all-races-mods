include "TriggerLibs/NativeLib"
include "LibARMP"

include "LibAREX_h"

//--------------------------------------------------------------------------------------------------
// Library: ALL RACES EXTENSION
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAREX_InitLibraries () {
    libNtve_InitVariables();
    libARMP_InitVariables();
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Game Attributes
//--------------------------------------------------------------------------------------------------
bool libAREX_gt_GameAttributes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_aG_GameType;
    string lv_aG_Supplies;
    string lv_aG_Money;
    string lv_aG_Resources;
    string lv_aG_Zomies;
    string lv_aG_Bounty;
    int lv_zombieDifficulty;
    int lv_zombieBounty;
    int lv_supplies;

    // Automatic Variable Declarations
    string autoBF819B9B_val;
    string auto9AE61E81_val;
    string autoDA350B19_val;
    string autoB53E56E7_val;
    string autoE8BA9AD2_val;

    // Variable Initialization
    lv_aG_GameType = GameAttributeGameValue("6");
    lv_aG_Supplies = GameAttributeGameValue("2");
    lv_aG_Money = GameAttributeGameValue("5");
    lv_aG_Resources = GameAttributeGameValue("3");
    lv_aG_Zomies = GameAttributeGameValue("8");
    lv_aG_Bounty = GameAttributeGameValue("9");
    lv_supplies = 200;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAREX_gt_RaceRestrictions, true, false);
    TriggerExecute(libAREX_gt_CheckRace, true, false);
    autoBF819B9B_val = lv_aG_Money;
    if (autoBF819B9B_val == "0002") {
        libARMP_gf_SetInitialResources(10000, 5000);
    }
    else {
    }
    if (((lv_aG_Resources == "0003") || (lv_aG_Resources == "0004"))) {
        libARMP_gf_SetHarvestableResourcesType(libARMP_ge_HarvestableResourcesType_Rich);
    }
    else {
        auto9AE61E81_val = lv_aG_Resources;
        if (auto9AE61E81_val == "0005") {
            libARMP_gf_SetHarvestableResourcesAmount(0.5);
        }
        else if (auto9AE61E81_val == "0006") {
            libARMP_gf_SetHarvestableResourcesAmount(2.0);
        }
        else if (auto9AE61E81_val == "0007") {
            libARMP_gf_SetHarvestableResourcesAmount(4.0);
        }
        else if (auto9AE61E81_val == "0002") {
            libARMP_gf_SetHarvestableResourcesAmount(1000.0);
        }
        else if (auto9AE61E81_val == "0004") {
            libARMP_gf_SetHarvestableResourcesAmount(1000.0);
        }
        else {
        }
    }
    autoDA350B19_val = lv_aG_Supplies;
    if (autoDA350B19_val == "0001") {
        lv_supplies = 100;
    }
    else if (autoDA350B19_val == "0003") {
        lv_supplies = 300;
    }
    else if (autoDA350B19_val == "0005") {
        lv_supplies = 400;
    }
    else if (autoDA350B19_val == "0004") {
        lv_supplies = 500;
    }
    else if (autoDA350B19_val == "0006") {
        lv_supplies = 1000;
    }
    else {
    }
    libARMP_gf_SetMaximumSupplies(lv_supplies);
    if ((lv_aG_GameType == "0003")) {
        libARMP_gf_SetWorkersMode(libARMP_ge_WorkersAlliance_All);
    }

    if ((lv_aG_GameType == "0004")) {
        autoB53E56E7_val = lv_aG_Zomies;
        if (autoB53E56E7_val == "0004") {
            lv_zombieDifficulty = 1;
        }
        else if (autoB53E56E7_val == "0001") {
            lv_zombieDifficulty = 2;
        }
        else if (autoB53E56E7_val == "0002") {
            lv_zombieDifficulty = 3;
        }
        else if (autoB53E56E7_val == "0003") {
            lv_zombieDifficulty = 4;
        }
        else {
        }
        autoE8BA9AD2_val = lv_aG_Bounty;
        if (autoE8BA9AD2_val == "0001") {
            lv_zombieBounty = 0;
        }
        else if (autoE8BA9AD2_val == "0002") {
            lv_zombieBounty = 1;
        }
        else if (autoE8BA9AD2_val == "0003") {
            lv_zombieBounty = 2;
        }
        else if (autoE8BA9AD2_val == "0004") {
            lv_zombieBounty = 3;
        }
        else if (autoE8BA9AD2_val == "0005") {
            lv_zombieBounty = 4;
        }
        else {
        }
        libARMP_gf_SetInfestedBounty(lv_zombieBounty, lv_zombieBounty);
        libARMP_gf_SetInfestedDifficulty(lv_zombieDifficulty);
    }

    libARMP_gf_InitializeMeleeGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAREX_gt_GameAttributes_Init () {
    libAREX_gt_GameAttributes = TriggerCreate("libAREX_gt_GameAttributes_Func");
    TriggerAddEventMapInit(libAREX_gt_GameAttributes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Restrictions
//--------------------------------------------------------------------------------------------------
bool libAREX_gt_RaceRestrictions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_aG_Factions;

    // Automatic Variable Declarations
    string autoF843ACEE_val;

    // Variable Initialization
    lv_aG_Factions = GameAttributeGameValue("12");

    // Actions
    if (!runActions) {
        return true;
    }

    libARMP_gf_AllowAllRaces();
    autoF843ACEE_val = lv_aG_Factions;
    if (autoF843ACEE_val == "0001") {
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_UPL);
    }
    else if (autoF843ACEE_val == "0004") {
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_UED);
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_UPL);
    }
    else if (autoF843ACEE_val == "0003") {
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_Hybrids);
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_UPL);
    }
    else if (autoF843ACEE_val == "0002") {
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_Dragon);
        libARMP_gf_RestrictRace(libARMP_ge_RaceChoice_UPL);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAREX_gt_RaceRestrictions_Init () {
    libAREX_gt_RaceRestrictions = TriggerCreate("libAREX_gt_RaceRestrictions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Race
//--------------------------------------------------------------------------------------------------
bool libAREX_gt_CheckRace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    string lv_aP_Host;
    string lv_aG_Factions;
    string lv_aP_AlternateRace;
    int lv_AttributeValueIndex;
    string lv_aP_StandardRace;
    int lv_race;
    int lv_player;
    int[13] lv_races;

    // Automatic Variable Declarations
    playergroup autoCDFA99E7_g;
    string autoA5154B5B_val;
    string autoC0894490_val;
    string auto98A81700_val;

    // Variable Initialization
    lv_aG_Factions = GameAttributeGameValue("12");

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 2;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Random;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Terran;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Zerg;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Protoss;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Genetron;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Xayid;
    lv_index += 1;
    lv_races[lv_index] = libARMP_ge_RaceChoice_Keiron;
    autoCDFA99E7_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCDFA99E7_g, lv_player);
        if (lv_player < 0) { break; }
        lv_aP_Host = GameAttributePlayerValue("15", lv_player);
        lv_aP_StandardRace = GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3001", lv_player);
        autoA5154B5B_val = lv_aP_Host;
        if (autoA5154B5B_val == "0001") {
            lv_index = 9;
            lv_races[lv_index] = libARMP_ge_RaceChoice_UED;
            lv_index += 1;
            lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
            lv_index += 1;
            lv_races[lv_index] = libARMP_ge_RaceChoice_Hybrids;
            lv_index += 1;
            lv_races[lv_index] = libARMP_ge_RaceChoice_UPL;
            lv_aP_AlternateRace = GameAttributePlayerValue("1", lv_player);
        }
        else if (autoA5154B5B_val == "0002") {
            autoC0894490_val = lv_aG_Factions;
            if (autoC0894490_val == "0009") {
                lv_index = 9;
                lv_races[lv_index] = libARMP_ge_RaceChoice_UED;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Hybrids;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_UPL;
                lv_aP_AlternateRace = GameAttributePlayerValue("16", lv_player);
            }
            else if (autoC0894490_val == "0001") {
                lv_index = 9;
                lv_races[lv_index] = libARMP_ge_RaceChoice_UED;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Hybrids;
                lv_aP_AlternateRace = GameAttributePlayerValue("17", lv_player);
            }
            else if (autoC0894490_val == "0003") {
                lv_index = 9;
                lv_races[lv_index] = libARMP_ge_RaceChoice_UED;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
                lv_aP_AlternateRace = GameAttributePlayerValue("19", lv_player);
            }
            else if (autoC0894490_val == "0004") {
                lv_index = 9;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Hybrids;
                lv_aP_AlternateRace = GameAttributePlayerValue("20", lv_player);
            }
            else if (autoC0894490_val == "0002") {
                lv_index = 9;
                lv_races[lv_index] = libARMP_ge_RaceChoice_UED;
                lv_index += 1;
                lv_races[lv_index] = libARMP_ge_RaceChoice_Dragon;
                lv_aP_AlternateRace = GameAttributePlayerValue("18", lv_player);
            }
            else {
            }
        }
        else {
        }
        lv_AttributeValueIndex = StringToInt(lv_aP_AlternateRace);
        if ((lv_AttributeValueIndex == 1)) {
            auto98A81700_val = lv_aP_StandardRace;
            if (auto98A81700_val == "Prot") {
                lv_race = libARMP_ge_RaceChoice_Protoss;
            }
            else if (auto98A81700_val == "Terr") {
                lv_race = libARMP_ge_RaceChoice_Terran;
            }
            else if (auto98A81700_val == "Zerg") {
                lv_race = libARMP_ge_RaceChoice_Zerg;
            }
            else {
                lv_race = libARMP_ge_RaceChoice_RandomKoprulu;
            }
        }
        else {
            lv_race = lv_races[lv_AttributeValueIndex];
        }
        libARMP_gf_SetPlayerRaceChoice(lv_player, lv_race);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAREX_gt_CheckRace_Init () {
    libAREX_gt_CheckRace = TriggerCreate("libAREX_gt_CheckRace_Func");
}

void libAREX_InitTriggers () {
    libAREX_gt_GameAttributes_Init();
    libAREX_gt_RaceRestrictions_Init();
    libAREX_gt_CheckRace_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAREX_InitLib_completed = false;

void libAREX_InitLib () {
    if (libAREX_InitLib_completed) {
        return;
    }

    libAREX_InitLib_completed = true;

    libAREX_InitLibraries();
    libAREX_InitTriggers();
}

