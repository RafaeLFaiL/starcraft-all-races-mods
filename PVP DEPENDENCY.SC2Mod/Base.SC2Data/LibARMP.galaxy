include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibUEDC"
include "LibDRAG"
include "LibNHBR"
include "LibARZM_h"
include "LibARMB_h"

include "LibARMP_h"

//--------------------------------------------------------------------------------------------------
// Library: ALL RACES
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARMP_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libUEDC_InitVariables();
    libNHBR_InitVariables();
    libARZM_InitVariables();
    libARMB_InitVariables();
}

// Variable Initialization
bool libARMP_InitVariables_completed = false;

void libARMP_InitVariables () {
    if (libARMP_InitVariables_completed) {
        return;
    }

    libARMP_InitVariables_completed = true;

}

// Presets
// Functions
void libARMP_gf_ApplyRichResources () {
    // Automatic Variable Declarations
    unitgroup autoAF6B57F5_g;
    int autoAF6B57F5_u;
    unit autoAF6B57F5_var;
    string auto54832AD7_val;
    string autoCEA67A5D_val;

    // Implementation
    autoAF6B57F5_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF6B57F5_u = UnitGroupCount(autoAF6B57F5_g, c_unitCountAll);
    for (;; autoAF6B57F5_u -= 1) {
        autoAF6B57F5_var = UnitGroupUnitFromEnd(autoAF6B57F5_g, autoAF6B57F5_u);
        if (autoAF6B57F5_var == null) { break; }
        auto54832AD7_val = UnitGetType(autoAF6B57F5_var);
        if (auto54832AD7_val == "PurifierMineralField") {
            libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "PurifierRichMineralField", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto54832AD7_val == "PurifierMineralField750") {
            libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "PurifierRichMineralField750", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
            autoCEA67A5D_val = UnitBehaviorGet(autoAF6B57F5_var, 1);
            if (autoCEA67A5D_val == "MineralFieldMinerals750") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichMineralField750", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else if (autoCEA67A5D_val == "MineralFieldMinerals") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichMineralField", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else if (autoCEA67A5D_val == "RawVespeneGeyserGas") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichVespeneGeyser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
            }
        }
    }
}

void libARMP_gf_ApplyBigGameHunters () {
    // Automatic Variable Declarations
    unitgroup auto38B0BDBC_g;
    int auto38B0BDBC_u;
    unit auto38B0BDBC_var;
    string autoA8BB282A_val;

    // Implementation
    auto38B0BDBC_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38B0BDBC_u = UnitGroupCount(auto38B0BDBC_g, c_unitCountAll);
    for (;; auto38B0BDBC_u -= 1) {
        auto38B0BDBC_var = UnitGroupUnitFromEnd(auto38B0BDBC_g, auto38B0BDBC_u);
        if (auto38B0BDBC_var == null) { break; }
        autoA8BB282A_val = UnitBehaviorGet(auto38B0BDBC_var, 1);
        if (autoA8BB282A_val == "MineralFieldMinerals750") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralFieldMineralsBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "MineralFieldMinerals") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralFieldMineralsBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "HighYieldMineralFieldMinerals750") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralsHighYieldBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "HighYieldMineralFieldMinerals") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralsHighYieldBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "RawRichVespeneGeyserGas") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "GasRawRichVespeneGeyserBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "RawVespeneGeyserGas") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "GasRawVespeneGeyserBGH", auto38B0BDBC_var, 1);
        }
        else {
        }
    }
}

void libARMP_gf_ApplySupplyLimit (int lp_limit) {
    // Automatic Variable Declarations
    playergroup autoE750B4CE_g;
    int autoE750B4CE_var;

    // Implementation
    if ((lp_limit != 200)) {
        autoE750B4CE_g = PlayerGroupAll();
        autoE750B4CE_var = -1;
        while (true) {
            autoE750B4CE_var = PlayerGroupNextPlayer(autoE750B4CE_g, autoE750B4CE_var);
            if (autoE750B4CE_var < 0) { break; }
            PlayerModifyPropertyInt(autoE750B4CE_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lp_limit);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_ARMP_5F85BCE5") + IntToText(lp_limit)));
    }

}

void libARMP_gf_CheckRaceTriggers (string lp_race) {
    // Automatic Variable Declarations
    string auto9F0DAB9D_val;

    // Implementation
    auto9F0DAB9D_val = lp_race;
    if (auto9F0DAB9D_val == "UED") {
        if ((libARMP_gv_uED_Players == false)) {
            libARMP_gv_uED_Players = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }
    else if (auto9F0DAB9D_val == "NHbr") {
        if ((libARMP_gv_hybrids_Players == false)) {
            libARMP_gv_hybrids_Players = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

    }
    else if (auto9F0DAB9D_val == "Dragon") {
        if ((libARMP_gv_dragon_Players == false)) {
            libARMP_gv_dragon_Players = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }
    else {
    }
}

void libARMP_gf_ApplyWorkersAlliance (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_workers;
    string lv_mainWorkerUnitType;
    string lv_unit;
    string lv_replacementUnitType;
    string lv_race;
    string[13] lv_replacementsUnit;
    int lv_i;
    int lv_additionalWorkerIndex;
    int lv_count;
    int lv_startingUnitsCount;
    unitgroup lv_minerals;
    unit lv_mineral;
    point lv_point;
    unit lv_townhall;

    // Automatic Variable Declarations
    int auto067673C7_ae;
    const int auto067673C7_ai = 1;
    int auto80839633_val;
    const int auto69E691D0_ae = 11;
    const int auto69E691D0_ai = 1;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();
    lv_race = PlayerRace(lp_player);
    lv_startingUnitsCount = CatalogFieldValueCount(c_gameCatalogRace, lv_race, "StartingUnitArray", lp_player);
    lv_minerals = UnitGroupEmpty();
    lv_point = PlayerStartLocation(lp_player);

    // Implementation
    lv_minerals = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto067673C7_ae = (lv_startingUnitsCount - 1);
    lv_i = 0;
    for ( ; ( (auto067673C7_ai >= 0 && lv_i <= auto067673C7_ae) || (auto067673C7_ai < 0 && lv_i >= auto067673C7_ae) ) ; lv_i += auto067673C7_ai ) {
        lv_unit = (CatalogFieldValueGet(c_gameCatalogRace, lv_race, "StartingUnitArray[" + IntToString(lv_i) + "].Unit", lp_player));
        lv_count = CatalogFieldValueGetAsInt(c_gameCatalogRace, lv_race, "StartingUnitArray[" + IntToString(lv_i) + "].Count", lp_player);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unit, "FlagArray[" + IntToString(c_unitFlagPreventDefeat) + "]", lp_player) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, lv_unit, 0, lp_player, lv_point);
            lv_townhall = UnitLastCreated();
        }
        else {
            if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unit, "FlagArray[" + IntToString(c_unitFlagWorker) + "]", lp_player) == 1)) {
                lv_mainWorkerUnitType = lv_unit;
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, lv_unit, c_unitCreateIgnorePlacement, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_minerals), 13.0, lv_point));
            }
        }
    }
    auto80839633_val = lp_preset;
    if (auto80839633_val == libARMP_ge_WorkersAlliance_All) {
        lv_replacementsUnit[0] = "Drone";
        lv_replacementsUnit[1] = "SCV";
        lv_replacementsUnit[2] = "Probe";
        lv_replacementsUnit[3] = "Scavenger";
        lv_replacementsUnit[4] = "ACR";
        lv_replacementsUnit[5] = "Converter";
        lv_replacementsUnit[6] = "NHbrMinion";
        lv_replacementsUnit[7] = "Salvager";
        lv_replacementsUnit[8] = "Plodder";
        lv_replacementsUnit[9] = lv_mainWorkerUnitType;
        lv_replacementsUnit[10] = lv_mainWorkerUnitType;
        lv_replacementsUnit[11] = lv_mainWorkerUnitType;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BeaconUED", c_unitCreateIgnorePlacement, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_minerals), 10.0, lv_point));
        libARMP_gf_CheckRaceTriggers("UED");
        libARMP_gf_CheckRaceTriggers("NHbr");
        libARMP_gf_CheckRaceTriggers("Dragon");
    }
    else if (auto80839633_val == libARMP_ge_WorkersAlliance_Scion) {
        lv_replacementsUnit[0] = "Converter";
        lv_replacementsUnit[1] = "Converter";
        lv_replacementsUnit[2] = "Converter";
        lv_replacementsUnit[3] = "Converter";
        lv_replacementsUnit[4] = "ACR";
        lv_replacementsUnit[5] = "ACR";
        lv_replacementsUnit[6] = "ACR";
        lv_replacementsUnit[7] = "ACR";
        lv_replacementsUnit[8] = "Scavenger";
        lv_replacementsUnit[9] = "Scavenger";
        lv_replacementsUnit[10] = "Scavenger";
        lv_replacementsUnit[11] = "Scavenger";
    }
    else if (auto80839633_val == libARMP_ge_WorkersAlliance_Standart) {
        lv_replacementsUnit[0] = "Probe";
        lv_replacementsUnit[1] = "Probe";
        lv_replacementsUnit[2] = "Probe";
        lv_replacementsUnit[3] = "Probe";
        lv_replacementsUnit[4] = "Drone";
        lv_replacementsUnit[5] = "Drone";
        lv_replacementsUnit[6] = "Drone";
        lv_replacementsUnit[7] = "Drone";
        lv_replacementsUnit[8] = "SCV";
        lv_replacementsUnit[9] = "SCV";
        lv_replacementsUnit[10] = "SCV";
        lv_replacementsUnit[11] = "SCV";
    }
    else {
    }
    lv_i = 0;
    for ( ; ( (auto69E691D0_ai >= 0 && lv_i <= auto69E691D0_ae) || (auto69E691D0_ai < 0 && lv_i >= auto69E691D0_ae) ) ; lv_i += auto69E691D0_ai ) {
        lv_replacementUnitType = lv_replacementsUnit[lv_i];
        lv_mineral = UnitGroupRandomUnit(lv_minerals, c_unitCountAlive);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_replacementsUnit[lv_i], c_unitCreateIgnorePlacement, lp_player, MidPoint(UnitGetPosition(lv_mineral), lv_point));
        UnitGroupRemove(lv_minerals, lv_mineral);
        if ((UnitGroupCount(lv_minerals, c_unitCountAlive) == 0)) {
            lv_minerals = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    PlayerSetRace(lp_player, "Neut");
    if ((PlayerRace(lp_player) == "Zerg")) {
        CreepModify(UnitGetPosition(lv_townhall), 11.0, true, false);
    }

    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), lp_player);
}

void libARMP_gf_ApplyChosenRace (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_race;
    string[20] lv_randomRaces;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMP_gv_raceChoices[lp_player] = lp_preset;
    if ((GameAttributeGameValue("6") == "0001")) {
        PlayerSetRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
    else {
        libARMP_gf_ApplyPlayerCustomRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
}

string libARMP_gf_GetPlayerRaceChoice (int lp_player) {
    // Variable Declarations
    string lv_race;
    int lv_racesCount;
    string[20] lv_randomRaces;

    // Automatic Variable Declarations
    int auto048C1C23_val;

    // Variable Initialization

    // Implementation
    lv_randomRaces[1] = "Zerg";
    lv_randomRaces[2] = "Terr";
    lv_randomRaces[3] = "Prot";
    lv_randomRaces[4] = "Xayi";
    lv_randomRaces[5] = "Gen";
    lv_randomRaces[6] = "Keir";
    lv_randomRaces[7] = "NHbr";
    lv_randomRaces[8] = "UED";
    lv_randomRaces[9] = "Dragon";
    auto048C1C23_val = libARMP_gv_raceChoices[lp_player];
    if (auto048C1C23_val == libARMP_ge_RaceChoice_Protoss) {
        lv_race = "Prot";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Terran) {
        lv_race = "Terr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Zerg) {
        lv_race = "Zerg";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Keiron) {
        lv_race = "Keir";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Genetron) {
        lv_race = "Gen";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Xayid) {
        lv_race = "Xayi";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_UED) {
        lv_race = "UED";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Hybrids) {
        lv_race = "NHbr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Dragon) {
        lv_race = "Dragon";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        lv_race = lv_randomRaces[RandomInt(1, 3)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomScion) {
        lv_race = lv_randomRaces[RandomInt(4, 6)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomOther) {
        lv_race = lv_randomRaces[RandomInt(7, 9)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Random) {
        if ((libARMP_gv_acceptedSpecified == true)) {
            if ((libARMP_gv_acceptedDragon == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Dragon";
            }

            if ((libARMP_gv_acceptedGenetron == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Gen";
            }

            if ((libARMP_gv_acceptedHybrids == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "NHbr";
            }

            if ((libARMP_gv_acceptedKeiron == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Keir";
            }

            if ((libARMP_gv_acceptedProtoss == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Prot";
            }

            if ((libARMP_gv_acceptedTerran == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Terr";
            }

            if ((libARMP_gv_acceptedZerg == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Zerg";
            }

            if ((libARMP_gv_acceptedUED == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "UED";
            }

            if ((libARMP_gv_acceptedXayid == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Xayi";
            }

            lv_race = lv_randomRaces[RandomInt(1, lv_racesCount)];
        }
        else {
            lv_race = lv_randomRaces[RandomInt(1, 9)];
        }
    }
    else {
    }
    return lv_race;
}

bool libARMP_gf_IsRandomRaceChoice (int lp_player) {
    // Automatic Variable Declarations
    int autoD1C45702_val;

    // Implementation
    autoD1C45702_val = libARMP_gv_raceChoices[lp_player];
    if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomOther) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomScion) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_Random) {
        return true;
    }
    else {
        return false;
    }
}

int libARMP_gf_GetRacesVariationCount () {
    // Variable Declarations
    bool[9] lv_raceAccepted;
    int lv_raceAcceptedCount;
    string lv_race;

    // Automatic Variable Declarations
    playergroup autoE041F39C_g;
    int autoE041F39C_var;

    // Variable Initialization

    // Implementation
    if ((libARMP_gv_acceptedSpecified == true)) {
        if ((libARMP_gv_acceptedDragon == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedGenetron == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedHybrids == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedKeiron == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedProtoss == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedTerran == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedZerg == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedUED == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedXayid == true)) {
            lv_raceAcceptedCount += 1;
        }

    }

    autoE041F39C_g = libARMB_gv_startactiveplayers;
    autoE041F39C_var = -1;
    while (true) {
        autoE041F39C_var = PlayerGroupNextPlayer(autoE041F39C_g, autoE041F39C_var);
        if (autoE041F39C_var < 0) { break; }
        if ((PlayerRace(autoE041F39C_var) == "Dragon") && (libARMP_gv_acceptedDragon == false)) {
            libARMP_gv_acceptedDragon = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Gen") && (libARMP_gv_acceptedGenetron == false)) {
            libARMP_gv_acceptedGenetron = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "NHbr") && (libARMP_gv_acceptedHybrids == false)) {
            libARMP_gv_acceptedHybrids = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Keir") && (libARMP_gv_acceptedKeiron == false)) {
            libARMP_gv_acceptedKeiron = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Prot") && (libARMP_gv_acceptedProtoss == false)) {
            libARMP_gv_acceptedProtoss = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Terr") && (libARMP_gv_acceptedTerran == false)) {
            libARMP_gv_acceptedTerran = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Zerg") && (libARMP_gv_acceptedZerg == false)) {
            libARMP_gv_acceptedZerg = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "UED") && (libARMP_gv_acceptedUED == false)) {
            libARMP_gv_acceptedUED = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Xayi") && (libARMP_gv_acceptedXayid == false)) {
            libARMP_gv_acceptedXayid = true;
            lv_raceAcceptedCount += 1;
        }

    }
    return lv_raceAcceptedCount;
}

void libARMP_gf_ApplyPlayerCustomRace (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
    if ((lp_race == "UED")) {
        PlayerSetCommander(lp_player, "UED");
        PlayerSetSpray(lp_player, 1, "Decal_Spray_0059_01");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryVoice, "ReverbForest");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryReady, "ReverbForest");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryAlert, "ReverbForest");
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "UEDAdvisorUpgradeBecauseEditorIsFunctionalHelp", 1);
        if ((libARMP_gv_uED_Players == false)) {
            libARMP_gv_uED_Players = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }

    if ((lp_race == "NHbr")) {
        if ((libARMP_gv_hybrids_Players == false)) {
            libARMP_gv_hybrids_Players = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

    }

    if ((lp_race == "Dragon")) {
        if ((libARMP_gv_dragon_Players == false)) {
            libARMP_gv_dragon_Players = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }

}

void libARMP_gf_ApplyStartResources (int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    playergroup autoC0D37757_g;
    int autoC0D37757_var;

    // Implementation
    autoC0D37757_g = PlayerGroupAll();
    autoC0D37757_var = -1;
    while (true) {
        autoC0D37757_var = PlayerGroupNextPlayer(autoC0D37757_g, autoC0D37757_var);
        if (autoC0D37757_var < 0) { break; }
        libARMP_gv_startingMinerals = lp_minerals;
        libARMP_gv_startingVespene = lp_vespene;
    }
    TriggerExecute(libARMP_gt_StartingResources, true, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Starting Resources
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_StartingResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0E030966_g;
    int auto0E030966_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    auto0E030966_g = PlayerGroupAll();
    auto0E030966_var = -1;
    while (true) {
        auto0E030966_var = PlayerGroupNextPlayer(auto0E030966_g, auto0E030966_var);
        if (auto0E030966_var < 0) { break; }
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropMinerals, c_playerPropOperSetTo, libARMP_gv_startingMinerals);
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropVespene, c_playerPropOperSetTo, libARMP_gv_startingVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_StartingResources_Init () {
    libARMP_gt_StartingResources = TriggerCreate("libARMP_gt_StartingResources_Func");
}

void libARMP_InitTriggers () {
    libARMP_gt_StartingResources_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARMP_InitLib_completed = false;

void libARMP_InitLib () {
    if (libARMP_InitLib_completed) {
        return;
    }

    libARMP_InitLib_completed = true;

    libARMP_InitLibraries();
    libARMP_InitVariables();
    libARMP_InitTriggers();
}

include "LibARZM"
include "LibARMB"

