include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibUEDC"
include "LibDRAG"
include "LibNHBR"
include "LibARZM_h"
include "LibARMB_h"

include "LibARMP_h"

//--------------------------------------------------------------------------------------------------
// Library: ALL RACES
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARMP_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libUEDC_InitVariables();
    libNHBR_InitVariables();
    libARZM_InitVariables();
    libARMB_InitVariables();
}

// Variable Initialization
bool libARMP_InitVariables_completed = false;

void libARMP_InitVariables () {
    if (libARMP_InitVariables_completed) {
        return;
    }

    libARMP_InitVariables_completed = true;

}

// Presets
// Functions
void libARMP_gf_ApplyRichResources () {
    // Automatic Variable Declarations
    unitgroup autoAF6B57F5_g;
    int autoAF6B57F5_u;
    unit autoAF6B57F5_var;
    string auto54832AD7_val;
    string autoCEA67A5D_val;

    // Implementation
    autoAF6B57F5_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF6B57F5_u = UnitGroupCount(autoAF6B57F5_g, c_unitCountAll);
    for (;; autoAF6B57F5_u -= 1) {
        autoAF6B57F5_var = UnitGroupUnitFromEnd(autoAF6B57F5_g, autoAF6B57F5_u);
        if (autoAF6B57F5_var == null) { break; }
        auto54832AD7_val = UnitGetType(autoAF6B57F5_var);
        if (auto54832AD7_val == "PurifierMineralField") {
            libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "PurifierRichMineralField", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto54832AD7_val == "PurifierMineralField750") {
            libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "PurifierRichMineralField750", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
            autoCEA67A5D_val = UnitBehaviorGet(autoAF6B57F5_var, 1);
            if (autoCEA67A5D_val == "MineralFieldMinerals750") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichMineralField750", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else if (autoCEA67A5D_val == "MineralFieldMinerals") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichMineralField", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else if (autoCEA67A5D_val == "RawVespeneGeyserGas") {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichVespeneGeyser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
            }
        }
    }
}

void libARMP_gf_ApplyBigGameHunters () {
    // Automatic Variable Declarations
    unitgroup auto38B0BDBC_g;
    int auto38B0BDBC_u;
    unit auto38B0BDBC_var;
    string autoA8BB282A_val;

    // Implementation
    auto38B0BDBC_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38B0BDBC_u = UnitGroupCount(auto38B0BDBC_g, c_unitCountAll);
    for (;; auto38B0BDBC_u -= 1) {
        auto38B0BDBC_var = UnitGroupUnitFromEnd(auto38B0BDBC_g, auto38B0BDBC_u);
        if (auto38B0BDBC_var == null) { break; }
        autoA8BB282A_val = UnitBehaviorGet(auto38B0BDBC_var, 1);
        if (autoA8BB282A_val == "MineralFieldMinerals750") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralFieldMineralsBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "MineralFieldMinerals") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralFieldMineralsBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "HighYieldMineralFieldMinerals750") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralsHighYieldBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "HighYieldMineralFieldMinerals") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "MineralsHighYieldBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "RawRichVespeneGeyserGas") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "GasRawRichVespeneGeyserBGH", auto38B0BDBC_var, 1);
        }
        else if (autoA8BB282A_val == "RawVespeneGeyserGas") {
            UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
            UnitBehaviorAdd(auto38B0BDBC_var, "GasRawVespeneGeyserBGH", auto38B0BDBC_var, 1);
        }
        else {
        }
    }
}

void libARMP_gf_ApplySupplyLimit (int lp_limit) {
    // Automatic Variable Declarations
    playergroup autoE750B4CE_g;
    int autoE750B4CE_var;

    // Implementation
    if ((lp_limit != 200)) {
        autoE750B4CE_g = PlayerGroupAll();
        autoE750B4CE_var = -1;
        while (true) {
            autoE750B4CE_var = PlayerGroupNextPlayer(autoE750B4CE_g, autoE750B4CE_var);
            if (autoE750B4CE_var < 0) { break; }
            PlayerModifyPropertyInt(autoE750B4CE_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lp_limit);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_ARMP_5F85BCE5") + IntToText(lp_limit)));
    }

}

void libARMP_gf_ApplyWorkersAlliance (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_type;
    unitgroup lv_workers;
    string lv_unit;

    // Automatic Variable Declarations
    string auto93CBBFA5_val;
    int autoD54BDDD5_val;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();

    // Implementation
    CatalogFieldValueModify(c_gameCatalogRace, "Gen", "StartingUnitArray[" + IntToString(0) + "].Offset", lp_player, "", c_upgradeOperationSet);
    auto93CBBFA5_val = PlayerRace(lp_player);
    if (auto93CBBFA5_val == "Terr") {
        lv_type = "SCV";
    }
    else if (auto93CBBFA5_val == "Prot") {
        lv_type = "Probe";
    }
    else if (auto93CBBFA5_val == "Zerg") {
        lv_type = "Drone";
    }
    else if (auto93CBBFA5_val == "Keir") {
        lv_type = "Converter";
    }
    else if (auto93CBBFA5_val == "Gen") {
        lv_type = "ACR";
    }
    else if (auto93CBBFA5_val == "Xayi") {
        lv_type = "Scavenger";
    }
    else if (auto93CBBFA5_val == "UED") {
        lv_type = "Salvager";
    }
    else if (auto93CBBFA5_val == "NHbr") {
        lv_type = "NHbrMinion";
    }
    else if (auto93CBBFA5_val == "Dragon") {
        lv_type = "Plodder";
    }
    else {
    }
    lv_workers = UnitGroup(lv_type, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD54BDDD5_val = lp_preset;
    if (autoD54BDDD5_val == libARMP_ge_WorkersAlliance_All) {
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 1), "Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 2), "SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 3), "Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 4), "Scavenger", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 5), "ACR", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 6), "Converter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 7), "NHbrMinion", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 8), "Salvager", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 9), "Plodder", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 10), "BeaconUED", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        if ((libARMP_gv_uED_Players == false)) {
            libARMP_gv_uED_Players = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

        if ((libARMP_gv_hybrids_Players == false)) {
            libARMP_gv_hybrids_Players = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

        if ((libARMP_gv_dragon_Players == false)) {
            libARMP_gv_dragon_Players = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }
    else if (autoD54BDDD5_val == libARMP_ge_WorkersAlliance_Scion) {
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 1), "Converter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 2), "Converter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 3), "Converter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 4), "Converter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 5), "Scavenger", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 6), "Scavenger", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 7), "Scavenger", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 8), "Scavenger", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 9), "ACR", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 10), "ACR", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 11), "ACR", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 12), "ACR", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    else if (autoD54BDDD5_val == libARMP_ge_WorkersAlliance_Standart) {
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 1), "Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 2), "Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 3), "Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 4), "Drone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 5), "SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 6), "SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 7), "SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 8), "SCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 9), "Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 10), "Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 11), "Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_ReplaceUnit(UnitGroupUnit(lv_workers, 12), "Probe", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    else {
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), lp_player);
}

void libARMP_gf_ApplyChosenRace (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_race;
    string[20] lv_randomRaces;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMP_gv_raceChoices[lp_player] = lp_preset;
    if ((GameAttributeGameValue("6") == "0001")) {
        PlayerSetRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
    else {
        libARMP_gf_ApplyPlayerCustomRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
}

string libARMP_gf_GetPlayerRaceChoice (int lp_player) {
    // Variable Declarations
    string lv_race;
    int lv_racesCount;
    string[20] lv_randomRaces;

    // Automatic Variable Declarations
    int auto048C1C23_val;

    // Variable Initialization

    // Implementation
    lv_randomRaces[1] = "Zerg";
    lv_randomRaces[2] = "Terr";
    lv_randomRaces[3] = "Prot";
    lv_randomRaces[4] = "Xayi";
    lv_randomRaces[5] = "Gen";
    lv_randomRaces[6] = "Keir";
    lv_randomRaces[7] = "NHbr";
    lv_randomRaces[8] = "UED";
    lv_randomRaces[9] = "Dragon";
    auto048C1C23_val = libARMP_gv_raceChoices[lp_player];
    if (auto048C1C23_val == libARMP_ge_RaceChoice_Protoss) {
        lv_race = "Prot";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Terran) {
        lv_race = "Terr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Zerg) {
        lv_race = "Zerg";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Keiron) {
        lv_race = "Keir";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Genetron) {
        lv_race = "Gen";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Xayid) {
        lv_race = "Xayi";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_UED) {
        lv_race = "UED";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Hybrids) {
        lv_race = "NHbr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Dragon) {
        lv_race = "Dragon";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        lv_race = lv_randomRaces[RandomInt(1, 3)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomScion) {
        lv_race = lv_randomRaces[RandomInt(4, 6)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomOther) {
        lv_race = lv_randomRaces[RandomInt(7, 9)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Random) {
        if ((libARMP_gv_acceptedSpecified == true)) {
            if ((libARMP_gv_acceptedDragon == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Dragon";
            }

            if ((libARMP_gv_acceptedGenetron == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Gen";
            }

            if ((libARMP_gv_acceptedHybrids == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "NHbr";
            }

            if ((libARMP_gv_acceptedKeiron == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Keir";
            }

            if ((libARMP_gv_acceptedProtoss == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Prot";
            }

            if ((libARMP_gv_acceptedTerran == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Terr";
            }

            if ((libARMP_gv_acceptedZerg == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Zerg";
            }

            if ((libARMP_gv_acceptedUED == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "UED";
            }

            if ((libARMP_gv_acceptedXayid == true)) {
                lv_racesCount += 1;
                lv_randomRaces[lv_racesCount] = "Xayi";
            }

            lv_race = lv_randomRaces[RandomInt(1, lv_racesCount)];
        }
        else {
            lv_race = lv_randomRaces[RandomInt(1, 9)];
        }
    }
    else {
    }
    return lv_race;
}

bool libARMP_gf_IsRandomRaceChoice (int lp_player) {
    // Automatic Variable Declarations
    int autoD1C45702_val;

    // Implementation
    autoD1C45702_val = libARMP_gv_raceChoices[lp_player];
    if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomOther) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomScion) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_Random) {
        return true;
    }
    else {
        return false;
    }
}

int libARMP_gf_GetRacesVariationCount () {
    // Variable Declarations
    bool[9] lv_raceAccepted;
    int lv_raceAcceptedCount;
    string lv_race;

    // Automatic Variable Declarations
    playergroup autoE041F39C_g;
    int autoE041F39C_var;

    // Variable Initialization

    // Implementation
    if ((libARMP_gv_acceptedSpecified == true)) {
        if ((libARMP_gv_acceptedDragon == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedGenetron == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedHybrids == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedKeiron == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedProtoss == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedTerran == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedZerg == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedUED == true)) {
            lv_raceAcceptedCount += 1;
        }

        if ((libARMP_gv_acceptedXayid == true)) {
            lv_raceAcceptedCount += 1;
        }

    }

    autoE041F39C_g = libARMB_gv_startactiveplayers;
    autoE041F39C_var = -1;
    while (true) {
        autoE041F39C_var = PlayerGroupNextPlayer(autoE041F39C_g, autoE041F39C_var);
        if (autoE041F39C_var < 0) { break; }
        if ((PlayerRace(autoE041F39C_var) == "Dragon") && (libARMP_gv_acceptedDragon == false)) {
            libARMP_gv_acceptedDragon = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Gen") && (libARMP_gv_acceptedGenetron == false)) {
            libARMP_gv_acceptedGenetron = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "NHbr") && (libARMP_gv_acceptedHybrids == false)) {
            libARMP_gv_acceptedHybrids = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Keir") && (libARMP_gv_acceptedKeiron == false)) {
            libARMP_gv_acceptedKeiron = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Prot") && (libARMP_gv_acceptedProtoss == false)) {
            libARMP_gv_acceptedProtoss = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Terr") && (libARMP_gv_acceptedTerran == false)) {
            libARMP_gv_acceptedTerran = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Zerg") && (libARMP_gv_acceptedZerg == false)) {
            libARMP_gv_acceptedZerg = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "UED") && (libARMP_gv_acceptedUED == false)) {
            libARMP_gv_acceptedUED = true;
            lv_raceAcceptedCount += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Xayi") && (libARMP_gv_acceptedXayid == false)) {
            libARMP_gv_acceptedXayid = true;
            lv_raceAcceptedCount += 1;
        }

    }
    return lv_raceAcceptedCount;
}

void libARMP_gf_ApplyPlayerCustomRace (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
    if ((lp_race == "UED")) {
        PlayerSetCommander(lp_player, "UED");
        PlayerSetSpray(lp_player, 1, "Decal_Spray_0059_01");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryVoice, "ReverbForest");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryReady, "ReverbForest");
        SoundChannelDSPInsert(PlayerGroupSingle(lp_player), c_soundCategoryAlert, "ReverbForest");
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "UEDAdvisorUpgradeBecauseEditorIsFunctionalHelp", 1);
        if ((libARMP_gv_uED_Players == false)) {
            libARMP_gv_uED_Players = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }

    if ((lp_race == "NHbr")) {
        if ((libARMP_gv_hybrids_Players == false)) {
            libARMP_gv_hybrids_Players = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

    }

    if ((lp_race == "Dragon")) {
        if ((libARMP_gv_dragon_Players == false)) {
            libARMP_gv_dragon_Players = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }

}

void libARMP_gf_ApplyStartResources (int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    playergroup autoC0D37757_g;
    int autoC0D37757_var;

    // Implementation
    autoC0D37757_g = PlayerGroupAll();
    autoC0D37757_var = -1;
    while (true) {
        autoC0D37757_var = PlayerGroupNextPlayer(autoC0D37757_g, autoC0D37757_var);
        if (autoC0D37757_var < 0) { break; }
        libARMP_gv_startingMinerals = lp_minerals;
        libARMP_gv_startingVespene = lp_vespene;
    }
    TriggerExecute(libARMP_gt_StartingResources, true, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Starting Resources
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_StartingResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0E030966_g;
    int auto0E030966_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    auto0E030966_g = PlayerGroupAll();
    auto0E030966_var = -1;
    while (true) {
        auto0E030966_var = PlayerGroupNextPlayer(auto0E030966_g, auto0E030966_var);
        if (auto0E030966_var < 0) { break; }
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropMinerals, c_playerPropOperSetTo, libARMP_gv_startingMinerals);
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropVespene, c_playerPropOperSetTo, libARMP_gv_startingVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_StartingResources_Init () {
    libARMP_gt_StartingResources = TriggerCreate("libARMP_gt_StartingResources_Func");
}

void libARMP_InitTriggers () {
    libARMP_gt_StartingResources_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARMP_InitLib_completed = false;

void libARMP_InitLib () {
    if (libARMP_InitLib_completed) {
        return;
    }

    libARMP_InitLib_completed = true;

    libARMP_InitLibraries();
    libARMP_InitVariables();
    libARMP_InitTriggers();
}

include "LibARZM"
include "LibARMB"

