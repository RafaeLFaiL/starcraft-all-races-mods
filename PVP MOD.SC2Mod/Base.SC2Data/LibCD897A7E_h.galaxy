include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: MONOBATTLE
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libCD897A7E_ge_MonobattleUnitGroup_Disabled = 0;
const int libCD897A7E_ge_MonobattleUnitGroup_Pacific = 1;
const int libCD897A7E_ge_MonobattleUnitGroup_Danger = 2;
const int libCD897A7E_ge_SearchMode_Agressive = 0;
const int libCD897A7E_ge_SearchMode_Detection = 1;
const int libCD897A7E_ge_SearchMode_Ability = 2;

// Constants
const int libCD897A7E_gv_unitArrayCount = 200;
const int libCD897A7E_gv_mAX_UNITTYPES = 200;
const int libCD897A7E_gv_pLAYERS = 15;
const int libCD897A7E_gv_cONST_CACHE_SIZE = 1000;

// Structures
struct libCD897A7E_gs_UnitData {
    string[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_thumbnail;
    string[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_unitType;
    text[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_unitName;
    int[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_tier;
    string[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_profile;
    string[libCD897A7E_gv_mAX_UNITTYPES + 1] lv_unitSound;
    int[libCD897A7E_gv_pLAYERS + 1] lv_playerUnitLink;
};

struct libCD897A7E_gs_PlayerData {
    bool lv_repick;
};

// Variable Declarations
int libCD897A7E_gv_monobattlesProfilesBriefDialog;
int[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_dIALOG;
int[libCD897A7E_gv_pLAYERS + 1][21] libCD897A7E_gv_dIALOG_BUTTONS;
string[libCD897A7E_gv_pLAYERS + 1][21] libCD897A7E_gv_dIALOG_PROFILES;
int[3] libCD897A7E_gv__pointsCount;
point[3][5] libCD897A7E_gv_points;
int libCD897A7E_gv_unitDataCount;
libCD897A7E_gs_UnitData libCD897A7E_gv_unitData;
libCD897A7E_gs_PlayerData[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_playerData;
unitgroup libCD897A7E_gv_hidden;
int[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_playerraces;
bool libCD897A7E_gv_testing;
int libCD897A7E_gv_draftMode;
bool libCD897A7E_gv_meleeInitialized;
int libCD897A7E_gv_cAbilityArmMagazine;
int libCD897A7E_gv_cAbilityAugment;
int libCD897A7E_gv_cAbilityBehavior;
int libCD897A7E_gv_cAbilityBuild;
int libCD897A7E_gv_cAbilityEffectInstant;
int libCD897A7E_gv_cAbilityEffectTarget;
int libCD897A7E_gv_cAbilityMorph;
int libCD897A7E_gv_cAbilityRally;
int libCD897A7E_gv_cAbilityStop;
int libCD897A7E_gv_cAbilityAttack;
int libCD897A7E_gv_cAbilityMove;
int libCD897A7E_gv_cAbilityQueue;
int libCD897A7E_gv_cAbilityMerge;
int libCD897A7E_gv_cAbilityTrain;
int libCD897A7E_gv_cAbilityTransport;
int libCD897A7E_gv_cEffectApplyBehavior;
int libCD897A7E_gv_cEffectCreateHealer;
int libCD897A7E_gv_cEffectCreatePersistent;
int libCD897A7E_gv_cEffectCreateUnit;
int libCD897A7E_gv_cEffectDamage;
int libCD897A7E_gv_cEffectModifyUnit;
int libCD897A7E_gv_cEffectLaunchMissile;
int libCD897A7E_gv_cEffectSearchArea;
int libCD897A7E_gv_cEffectSet;
int libCD897A7E_gv_cEffectTeleport;
int libCD897A7E_gv_cEffectIssueOrder;
int libCD897A7E_gv_cEffectSwitch;
int libCD897A7E_gv_cValidatorCombine;
int libCD897A7E_gv_cValidatorPlayerReqirement;
int libCD897A7E_gv_cRequirementAnd;
int libCD897A7E_gv_cRequirementEq;
int libCD897A7E_gv_cRequirementOr;
int libCD897A7E_gv_cRequirementGTE;
int libCD897A7E_gv_cRequirementGT;
int libCD897A7E_gv_cRequirementCountUnit;
int libCD897A7E_gv_cRequirementCountUpgrade;
int libCD897A7E_gv_cBehaviorSpawn;
int libCD897A7E_gv_cBehaviorBuff;
int libCD897A7E_gv_cACHE_TMPEFFECTS_SIZE;
string[1001] libCD897A7E_gv_cACHE_TMPEFFECTS;
int libCD897A7E_gv_cACHESIZE_WEAPONS;
int libCD897A7E_gv_cACHESIZE_UPGRADES;
int libCD897A7E_gv_cACHESIZE_EFFECTS;
int libCD897A7E_gv_cACHESIZE_BEHAVIORS;
int libCD897A7E_gv_cACHESIZE_ABILITIES;
int libCD897A7E_gv_cACHESIZE_UNITS;
int libCD897A7E_gv_cACHESIZE_REQUIREMENT;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_WEAPONS;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_REQUIREMENT;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_UPGRADES;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_BEHAVIORS;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_EFFECTS;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_ABILITIES;
string[libCD897A7E_gv_cONST_CACHE_SIZE + 1] libCD897A7E_gv_cACHE_UNITS;
playergroup libCD897A7E_gv_startactiveplayers;
string[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_unitSelection;
string[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_profiles;
string[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_profilesCategories;
abilcmd libCD897A7E_gv_bYPASS_SEARCH_ABILITY_COMMAND;
int libCD897A7E_gv_sEARCHMODE;
string[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_cACHE_DISARMED;
string[libCD897A7E_gv_pLAYERS + 1] libCD897A7E_gv_cACHE_ARMED;
string libCD897A7E_gv_cACHE_DANGER_UNITS;
string libCD897A7E_gv_cACHE_DANGER_ABILITIES;
string libCD897A7E_gv_cACHE_DANGER_BEHAVIOR;
string libCD897A7E_gv_cACHE_SAFE_UNITS;
string libCD897A7E_gv_cACHE_SAFE_ABILITIES;
string libCD897A7E_gv_cACHE_SAFE_BEHAVIOR;
int[16] libCD897A7E_gv_enemyDefenseBuildingTickCount;
bool[16] libCD897A7E_gv_restrictedmovementofaerialbuildings;
fixed[16] libCD897A7E_gv_maximumdistancefromthebuildingstoppedsurfacetothenearestshoreline;

// Function Declarations
playergroup libCD897A7E_gf_Aplayeronateamwithaplayer (int lp_index);
int libCD897A7E_gf_Numberofteamswithplayers ();
void libCD897A7E_gf_UnitSelectionPanel (int lp_player);
void libCD897A7E_gf_AddTeamStartPoint (int lp_team, point lp_point);
void libCD897A7E_gf_CreateMeleeStartingUnitsForTeams ();
void libCD897A7E_gf_initUnitData ();
void libCD897A7E_gf_MonobattleStart ();
void libCD897A7E_gf_MonobattleInit ();
void libCD897A7E_gf_ShowTerrainObjects ();
void libCD897A7E_gf_ClearPreplacedBuildings ();
void libCD897A7E_gf_HideTerranObjects ();
void libCD897A7E_gf_RandomDraftSetrandomunitnumber (int lp_player);
void libCD897A7E_gf_AssignUnitAndRace (int lp_player);
void libCD897A7E_gf_ClearArmedCache (int lp_player);
void libCD897A7E_gf_Armunit (int lp_player, unit lp_unit);
void libCD897A7E_gf_Disarmunit (int lp_player, unit lp_unit);
void libCD897A7E_gf_ArmUnitType (int lp_player, string lp_unit);
void libCD897A7E_gf_Disarmunittype (int lp_player, string lp_unit);
bool libCD897A7E_gf_UnitTypeisArmed (int lp_player, string lp_unit);
bool libCD897A7E_gf_UnitTypeisDisArmed (int lp_player, string lp_unit);
bool libCD897A7E_gf_BehaviorisDetector (int lp_player, string lp_behavior);
bool libCD897A7E_gf_AbilityIsDetector (int lp_player, string lp_ability);
bool libCD897A7E_gf_FilterEnemyisExcluded (string lp_filter);
bool libCD897A7E_gf_UnitIsDanger (int lp_player, string lp_unit);
bool libCD897A7E_gf_AbilityIsDanger (int lp_player, string lp_ability);
bool libCD897A7E_gf_BehaviorisDanger (int lp_player, string lp_behavior);
void libCD897A7E_gf_ResolveUnitAffectedUpgrades (int lp_player);
bool libCD897A7E_gf_UpgradeIsUseful (int lp_player, string lp_upgrade);
bool libCD897A7E_gf_AbilityIsIgnored (int lp_player, string lp_ability);
string libCD897A7E_gf_GetUnitRace (string lp_unit);
string libCD897A7E_gf_GetUpgradeRace (string lp_upgrade);
bool libCD897A7E_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil);
bool libCD897A7E_gf_ByPassBehavior (int lp_player, string lp_behavior);
bool libCD897A7E_gf_ByPassEffect (int lp_player, string lp_effect);
bool libCD897A7E_gf_ByPassAbility (int lp_player, string lp_ability);
void libCD897A7E_gf_ActivateMonobattleProfile (int lp_player, string lp_profile);
string libCD897A7E_gf_GetRandomProfile (string lp_race);
void libCD897A7E_gf_AllowCommonUnits (int lp_player);
int libCD897A7E_gf_AllowCommonUnit (int lp_player, string lp_unit);
void libCD897A7E_gf_DisallowAll (int lp_player);
void libCD897A7E_gf_ClearCache ();
void libCD897A7E_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan);
void libCD897A7E_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command);
void libCD897A7E_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan);
void libCD897A7E_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan);
void libCD897A7E_gf_CacheWeapon (int lp_player, string lp_weapon);
void libCD897A7E_gf_CacheBehavior (int lp_player, string lp_behavior);
void libCD897A7E_gf_CacheEffect (int lp_player, string lp_effect);
void libCD897A7E_gf_CacheValidator (int lp_player, string lp_validator);
void libCD897A7E_gf_CacheRequirement (int lp_player, string lp_requirement);
void libCD897A7E_gf_CacheRequirementNode (int lp_player, string lp_requirementNode);
bool libCD897A7E_gf_StructureIsFlying (unit lp_unit);
bool libCD897A7E_gf_UnitIsAntiAir (string lp_unit, int lp_player);
bool libCD897A7E_gf_UnitIsAir (string lp_unit, int lp_player);
bool libCD897A7E_gf_Canbebuilton (unit lp_unit, point lp_point);
bool libCD897A7E_gf_Canbebuiltonabranch (point lp_point, int lp_number);
point libCD897A7E_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales);
void libCD897A7E_gf_Therangethataerialbuildingscanstay ();

// Trigger Declarations
trigger libCD897A7E_gt_CreateUnitBriefUI;
trigger libCD897A7E_gt_Unitselected;
trigger libCD897A7E_gt_MBUnitCreated;
trigger libCD897A7E_gt_MBUnitChanges;
trigger libCD897A7E_gt_MBForcingaerialbuildingstomove;
trigger libCD897A7E_gt_MBForcingastationaryaerialbuildingtomove;

// Library Initialization
void libCD897A7E_InitVariables ();

