//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Monobattle LotV - All Races
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "Lib3BE10C68"
include "LibCD897A7E"
include "ai472043F9"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib3BE10C68_InitLib();
    libCD897A7E_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_GameAttributes;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai472043F9") { return ai472043F9_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai472043F9") { return ai472043F9_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai472043F9") { ai472043F9_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai472043F9") { ai472043F9_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai472043F9") { return ai472043F9_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai472043F9") { return ai472043F9_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai472043F9") { return ai472043F9_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Attributes
//--------------------------------------------------------------------------------------------------
bool gt_GameAttributes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto15BDA094_val;
    playergroup auto58F8A923_g;
    int auto58F8A923_var;
    string autoB50313D7_val;
    playergroup auto9F73BAE9_g;
    int auto9F73BAE9_var;
    string autoD656A66B_val;
    playergroup auto3F69270D_g;
    int auto3F69270D_var;
    string auto0538A3B1_val;
    playergroup auto84819377_g;
    int auto84819377_var;
    string autoBDB2B99C_val;
    playergroup autoE679B8C3_g;
    int autoE679B8C3_var;
    string autoD2F7B4C6_val;
    playergroup auto2F6B148E_g;
    int auto2F6B148E_var;
    string auto1034E508_val;

    // Actions
    if (!runActions) {
        return true;
    }

    libCD897A7E_gf_AddTeamStartPoint(1, PointFromId(1377365901));
    libCD897A7E_gf_AddTeamStartPoint(1, PointFromId(581971780));
    libCD897A7E_gf_AddTeamStartPoint(1, PointFromId(237516450));
    libCD897A7E_gf_AddTeamStartPoint(1, PointFromId(1741212367));
    libCD897A7E_gf_AddTeamStartPoint(2, PointFromId(1828151028));
    libCD897A7E_gf_AddTeamStartPoint(2, PointFromId(1361136642));
    libCD897A7E_gf_AddTeamStartPoint(2, PointFromId(1552635220));
    libCD897A7E_gf_AddTeamStartPoint(2, PointFromId(1934916357));
    MeleeInitResources();
    MeleeInitAI();
    auto15BDA094_val = GameAttributeGameValue("4");
    if (auto15BDA094_val == "0004") {
        lib3BE10C68_gv_acceptedSpecified = true;
        lib3BE10C68_gv_acceptedGenetron = true;
        lib3BE10C68_gv_acceptedHybrids = true;
        lib3BE10C68_gv_acceptedKeiron = true;
        lib3BE10C68_gv_acceptedProtoss = true;
        lib3BE10C68_gv_acceptedTerran = true;
        lib3BE10C68_gv_acceptedUED = true;
        lib3BE10C68_gv_acceptedXayid = true;
        lib3BE10C68_gv_acceptedZerg = true;
        lib3BE10C68_gv_acceptedDragon = true;
        auto58F8A923_g = PlayerGroupAll();
        auto58F8A923_var = -1;
        while (true) {
            auto58F8A923_var = PlayerGroupNextPlayer(auto58F8A923_g, auto58F8A923_var);
            if (auto58F8A923_var < 0) { break; }
            autoB50313D7_val = GameAttributePlayerValue("2", auto58F8A923_var);
            if (autoB50313D7_val == "0003") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Protoss);
            }
            else if (autoB50313D7_val == "0004") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Terran);
            }
            else if (autoB50313D7_val == "0005") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Zerg);
            }
            else if (autoB50313D7_val == "0008") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Keiron);
            }
            else if (autoB50313D7_val == "0009") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Genetron);
            }
            else if (autoB50313D7_val == "0007") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Xayid);
            }
            else if (autoB50313D7_val == "0011") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Hybrids);
            }
            else if (autoB50313D7_val == "0010") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_UED);
            }
            else if (autoB50313D7_val == "0012") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Dragon);
            }
            else if (autoB50313D7_val == "0002") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_RandomKoprulu);
            }
            else if (autoB50313D7_val == "0006") {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_RandomScion);
            }
            else {
                lib3BE10C68_gf_ApplyChosenRace(auto58F8A923_var, lib3BE10C68_ge_RaceChoice_Random);
            }
        }
    }
    else if (auto15BDA094_val == "0005") {
        lib3BE10C68_gv_acceptedSpecified = true;
        lib3BE10C68_gv_acceptedKeiron = true;
        lib3BE10C68_gv_acceptedProtoss = true;
        lib3BE10C68_gv_acceptedTerran = true;
        lib3BE10C68_gv_acceptedZerg = true;
        auto9F73BAE9_g = PlayerGroupAll();
        auto9F73BAE9_var = -1;
        while (true) {
            auto9F73BAE9_var = PlayerGroupNextPlayer(auto9F73BAE9_g, auto9F73BAE9_var);
            if (auto9F73BAE9_var < 0) { break; }
            autoD656A66B_val = GameAttributePlayerValue("6", auto9F73BAE9_var);
            if (autoD656A66B_val == "0002") {
                lib3BE10C68_gf_ApplyChosenRace(auto9F73BAE9_var, lib3BE10C68_ge_RaceChoice_Protoss);
            }
            else if (autoD656A66B_val == "0003") {
                lib3BE10C68_gf_ApplyChosenRace(auto9F73BAE9_var, lib3BE10C68_ge_RaceChoice_Terran);
            }
            else if (autoD656A66B_val == "0004") {
                lib3BE10C68_gf_ApplyChosenRace(auto9F73BAE9_var, lib3BE10C68_ge_RaceChoice_Zerg);
            }
            else if (autoD656A66B_val == "0005") {
                lib3BE10C68_gf_ApplyChosenRace(auto9F73BAE9_var, lib3BE10C68_ge_RaceChoice_Keiron);
            }
            else {
                lib3BE10C68_gf_ApplyChosenRace(auto9F73BAE9_var, lib3BE10C68_ge_RaceChoice_Random);
            }
        }
    }
    else if (auto15BDA094_val == "0002") {
        lib3BE10C68_gv_acceptedSpecified = true;
        lib3BE10C68_gv_acceptedProtoss = true;
        lib3BE10C68_gv_acceptedTerran = true;
        lib3BE10C68_gv_acceptedZerg = true;
        auto3F69270D_g = PlayerGroupAll();
        auto3F69270D_var = -1;
        while (true) {
            auto3F69270D_var = PlayerGroupNextPlayer(auto3F69270D_g, auto3F69270D_var);
            if (auto3F69270D_var < 0) { break; }
            auto0538A3B1_val = GameAttributePlayerValue("7", auto3F69270D_var);
            if (auto0538A3B1_val == "0002") {
                lib3BE10C68_gf_ApplyChosenRace(auto3F69270D_var, lib3BE10C68_ge_RaceChoice_Protoss);
            }
            else if (auto0538A3B1_val == "0004") {
                lib3BE10C68_gf_ApplyChosenRace(auto3F69270D_var, lib3BE10C68_ge_RaceChoice_Terran);
            }
            else if (auto0538A3B1_val == "0003") {
                lib3BE10C68_gf_ApplyChosenRace(auto3F69270D_var, lib3BE10C68_ge_RaceChoice_Zerg);
            }
            else {
                lib3BE10C68_gf_ApplyChosenRace(auto3F69270D_var, lib3BE10C68_ge_RaceChoice_Random);
            }
        }
    }
    else if (auto15BDA094_val == "0001") {
        lib3BE10C68_gv_acceptedSpecified = true;
        lib3BE10C68_gv_acceptedGenetron = true;
        lib3BE10C68_gv_acceptedKeiron = true;
        lib3BE10C68_gv_acceptedProtoss = true;
        lib3BE10C68_gv_acceptedTerran = true;
        lib3BE10C68_gv_acceptedXayid = true;
        lib3BE10C68_gv_acceptedZerg = true;
        auto84819377_g = PlayerGroupAll();
        auto84819377_var = -1;
        while (true) {
            auto84819377_var = PlayerGroupNextPlayer(auto84819377_g, auto84819377_var);
            if (auto84819377_var < 0) { break; }
            autoBDB2B99C_val = GameAttributePlayerValue("3", auto84819377_var);
            if (autoBDB2B99C_val == "0001") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Protoss);
            }
            else if (autoBDB2B99C_val == "0002") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Terran);
            }
            else if (autoBDB2B99C_val == "0003") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Zerg);
            }
            else if (autoBDB2B99C_val == "0006") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Keiron);
            }
            else if (autoBDB2B99C_val == "0005") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Genetron);
            }
            else if (autoBDB2B99C_val == "0004") {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Xayid);
            }
            else {
                lib3BE10C68_gf_ApplyChosenRace(auto84819377_var, lib3BE10C68_ge_RaceChoice_Random);
            }
        }
    }
    else if (auto15BDA094_val == "0003") {
        lib3BE10C68_gv_acceptedSpecified = true;
        lib3BE10C68_gv_acceptedGenetron = true;
        lib3BE10C68_gv_acceptedKeiron = true;
        lib3BE10C68_gv_acceptedXayid = true;
        autoE679B8C3_g = PlayerGroupAll();
        autoE679B8C3_var = -1;
        while (true) {
            autoE679B8C3_var = PlayerGroupNextPlayer(autoE679B8C3_g, autoE679B8C3_var);
            if (autoE679B8C3_var < 0) { break; }
            autoD2F7B4C6_val = GameAttributePlayerValue("5", autoE679B8C3_var);
            if (autoD2F7B4C6_val == "0004") {
                lib3BE10C68_gf_ApplyChosenRace(autoE679B8C3_var, lib3BE10C68_ge_RaceChoice_Keiron);
            }
            else if (autoD2F7B4C6_val == "0002") {
                lib3BE10C68_gf_ApplyChosenRace(autoE679B8C3_var, lib3BE10C68_ge_RaceChoice_Genetron);
            }
            else if (autoD2F7B4C6_val == "0003") {
                lib3BE10C68_gf_ApplyChosenRace(autoE679B8C3_var, lib3BE10C68_ge_RaceChoice_Xayid);
            }
            else {
                lib3BE10C68_gf_ApplyChosenRace(autoE679B8C3_var, lib3BE10C68_ge_RaceChoice_Random);
            }
        }
    }
    else {
    }
    auto2F6B148E_g = libCD897A7E_gv_startactiveplayers;
    auto2F6B148E_var = -1;
    while (true) {
        auto2F6B148E_var = PlayerGroupNextPlayer(auto2F6B148E_g, auto2F6B148E_var);
        if (auto2F6B148E_var < 0) { break; }
        if ((PlayerType(auto2F6B148E_var) == c_playerTypeUser)) {
            libCD897A7E_gf_DisallowAll(auto2F6B148E_var);
        }

    }
    auto1034E508_val = GameAttributeGameValue("1");
    if (auto1034E508_val == "0001") {
        libCD897A7E_gv_draftMode = 0;
    }
    else if (auto1034E508_val == "0003") {
        libCD897A7E_gv_draftMode = 1;
    }
    else if (auto1034E508_val == "0002") {
        libCD897A7E_gv_draftMode = 2;
    }
    else if (auto1034E508_val == "0004") {
        libCD897A7E_gv_draftMode = 3;
    }
    else {
    }
    libCD897A7E_gf_MonobattleInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameAttributes_Init () {
    gt_GameAttributes = TriggerCreate("gt_GameAttributes_Func");
    TriggerAddEventMapInit(gt_GameAttributes);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_GameAttributes_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitCustomAI();
    InitTriggers();
}
