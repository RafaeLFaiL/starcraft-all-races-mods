include "TriggerLibs/NativeLib"

include "Lib50365395_h"

//--------------------------------------------------------------------------------------------------
// Library: LotC_Data
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib50365395_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib50365395_InitVariables_completed = false;

void lib50365395_InitVariables () {
    if (lib50365395_InitVariables_completed) {
        return;
    }

    lib50365395_InitVariables_completed = true;

}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: TargetingHandler
//--------------------------------------------------------------------------------------------------
bool libCOMI_gf_PlayerInCinematicModeCampaign(){return false;}
void libCOMI_gf_CM_SetFogAlphaOverTime(fixed a, fixed b, int c){}
void libCOMI_gf_CM_ResetFogAlphaOverTime(fixed a, int b){}
trigger LOTC_Targeting_gt_Activated;
trigger LOTC_Targeting_gt_ForceOff;
trigger LOTC_Targeting_gt_Deactivated;
trigger LOTC_Targeting_gt_PointChosen;
trigger LOTC_Targeting_gt_DirectionChosen;
trigger LOTC_Targeting_gt_EffectFired;
trigger LOTC_Targeting_gt_Cancel;
trigger LOTC_Targeting_gt_CancelFromUI;
trigger LOTC_Targeting_gt_CameraShake;
const int c_TargetingPhaseType_None = 0;
const int c_TargetingPhaseType_Location = 1;
const int c_TargetingPhaseType_Direction = 2;
static const int c_TARGETCOUNTMAX = 5;
struct LOTC_TargetingStruct{
	int lv_ChargesSpent;
	int lv_ChargesTotal;
	int lv_UsageCount;
	int lv_Phase;
	bool lv_Transitioning;
	bool lv_UnrefundableStageEntered;
	bool lv_AlreadyCanceled;
	string lv_Model;
	string lv_UnitType;
	unit[c_TARGETCOUNTMAX + 1] lv_Unit;
	actor[c_TARGETCOUNTMAX + 1] lv_Actors;
	string lv_Behavior;
	string lv_ActivateAbility;
	abilcmd lv_ExecuteCommand;
	text lv_InstructionsPrimary;
	text lv_InstructionsSecondary;
	string lv_Cooldown;
	order lv_Order;
	unitgroup lv_DirectionGroup;
	bool lv_Cycling;
	bool lv_ExitInstantly;
	unit lv_CasterUnit;
	unitgroup lv_CasterGroup;
};
typedef structref<LOTC_TargetingStruct> LOTC_TargetingStructRef;
LOTC_TargetingStruct[c_maxPlayers] LOTC_TargetingGlobal;
void LOTC_Targeting_ModeEnter (int lp_player) {
	int lv_count;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	Targeting.lv_UnrefundableStageEntered = false;
	Targeting.lv_AlreadyCanceled = false;
	Targeting.lv_Transitioning = false;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
		return ;
	}
	TriggerEnable(LOTC_Targeting_gt_Cancel, true);
	Targeting.lv_ExitInstantly = false;
	Targeting.lv_UsageCount += 1;
	Targeting.lv_ChargesSpent = 0;
	////libCOUI_gf_CU_TargetingSetCharges(Targeting.lv_ChargesTotal, Targeting.lv_ChargesTotal, lp_player);
	if ((Targeting.lv_Order != null)) {
		TriggerEnable(LOTC_Targeting_gt_PointChosen, true);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, true);
		UISetTargetingOrder(PlayerGroupSingle(lp_player), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	else {
		Targeting.lv_Phase = c_TargetingPhaseType_None;
	}
	Targeting.lv_Transitioning = true;
	//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
	//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lp_player);
	libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
	CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
	CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
	CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
	Targeting.lv_Transitioning = false;
	Targeting.lv_Cycling = false;
}
void LOTC_Targeting_ModeExit (int lp_player) {
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	Targeting.lv_Phase = c_TargetingPhaseType_None;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	Targeting.lv_Transitioning = true;
	if ((Targeting.lv_ExitInstantly == true)) {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
	}
	else {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
	}
	CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
	if ((Targeting.lv_ExitInstantly == true)) {
		VisResetFoWAlpha(lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
	}
	else {
		libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
	}
	libNtve_gf_RestoreUnitSelection(lp_player);
	Targeting.lv_ActivateAbility = null;
	Targeting.lv_Transitioning = false;
	Targeting.lv_UsageCount -= 1;
	if ((Targeting.lv_UsageCount == 0)) {
		TriggerEnable(LOTC_Targeting_gt_Cancel, false);
		TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	}
}
void LOTC_Targeting_CleanupActorsAndUnits (int lp_player) {
	int lv_i;
	const int lv_count = c_TARGETCOUNTMAX;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	for (lv_i = 1; (lv_i <= lv_count); lv_i += 1 ) {
		if ((Targeting.lv_Actors[lv_i] != null)) {
			ActorSend(Targeting.lv_Actors[lv_i], "Signal Destroy");
			Targeting.lv_Actors[lv_i] = null;
		}
		if ((Targeting.lv_Unit[lv_i] != null)) {
			UnitRemove(Targeting.lv_Unit[lv_i]);
			Targeting.lv_Unit[lv_i] = null;
		}
	}
}
void LOTC_Targeting_Cancel (int lp_player) {
	string lv_cost;
	string lv_costField;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	lv_cost = "";
	lv_costField = "";
	// Implementation
	UnitIssueOrder(Targeting.lv_CasterUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
	Targeting.lv_AlreadyCanceled = true;
	LOTC_Targeting_CleanupActorsAndUnits(lp_player);
	if ((Targeting.lv_UnitType != null) && (Targeting.lv_Phase == c_TargetingPhaseType_Direction)) {
		Targeting.lv_ChargesSpent -= 1;
	}
	if ((Targeting.lv_ChargesSpent == 0) && (Targeting.lv_UnrefundableStageEntered == false)) {
		libNtve_gf_UnitAbilityRemoveCooldown(Targeting.lv_CasterUnit, Targeting.lv_ActivateAbility, Targeting.lv_Cooldown);
		lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
		lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, Targeting.lv_ActivateAbility, (lv_costField), lp_player);
		UnitSetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, (UnitGetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
	}
	UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
	Targeting.lv_UnrefundableStageEntered = true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_EffectFired
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_EffectFired_Func (bool testConds, bool runActions) {
	// Automatic Variable Declarations
	// Actions
	if (!runActions) {
		return true;
	}
	LOTC_Targeting_CleanupActorsAndUnits(EventPlayer());
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_Deactivated
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_Deactivated_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = UnitGetOwner(EventUnit());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (!runActions) {
		return true;
	}
	UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, null, false);
	Targeting.lv_ChargesSpent = 0;
	LOTC_Targeting_ModeExit(lv_casterPlayer);
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingForceOff
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingForceOff_Func (bool testConds, bool runActions) {
	// Variable Declarations
	int lv_indexPlayer = 0;
	LOTC_TargetingStructRef Targeting;// = LOTC_TargetingGlobal[lv_indexPlayer];
	// Automatic Variable Declarations
	playergroup pg;
	// Variable Initialization
	// Actions
	if (!runActions) {
		return true;
	}
	TriggerEnable(LOTC_Targeting_gt_Cancel, false);
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	pg = PlayerGroupActive();//libCOOC_gf_CommanderPlayers();
	lv_indexPlayer = -1;
	while (true) {
		lv_indexPlayer = PlayerGroupNextPlayer(pg, lv_indexPlayer);
		if (lv_indexPlayer < 0) { break; }
		Targeting = LOTC_TargetingGlobal[lv_indexPlayer];
		Targeting.lv_ExitInstantly = true;
		if ((Targeting.lv_Phase != c_TargetingPhaseType_None)) {
			Targeting.lv_Transitioning = false;
			UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), Targeting.lv_CasterGroup, null, false);
			LOTC_Targeting_Cancel(lv_indexPlayer);
		}
	}
	Targeting.lv_UsageCount = 0;
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingPointChosen_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (testConds) {
		if (!(Targeting.lv_Phase == c_TargetingPhaseType_Location)) {
			return false;
		}
		if (!(Targeting.lv_ChargesSpent < Targeting.lv_ChargesTotal)) {
			return false;
		}
	}
	// Actions
	if (!runActions) {
		return true;
	}
	lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
	lv_casterPlayer = EventPlayer();
	if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
		return true;
	}
	Targeting.lv_Cycling = true;
	Targeting.lv_ChargesSpent += 1;
	libNtve_gf_CreateActorAtPoint(Targeting.lv_Model, lv_targetPoint);
	Targeting.lv_Actors[Targeting.lv_ChargesSpent] = libNtve_gf_ActorLastCreated();
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	if ((Targeting.lv_UnitType == null)) {
		UnitIssueOrder(Targeting.lv_CasterUnit, OrderTargetingPoint(Targeting.lv_ExecuteCommand, lv_targetPoint), c_orderQueueAddToEnd);
		if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
			Wait(0.125, c_timeGame);
			UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		}
		else {
			Wait(0.1, c_timeGame);
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}
	}
	else {
		libNtve_gf_CreateUnitsWithDefaultFacing(1, Targeting.lv_UnitType, 0, lv_casterPlayer, lv_targetPoint);
		Targeting.lv_Unit[Targeting.lv_ChargesSpent] = UnitLastCreated();
		UnitSetState(Targeting.lv_Unit[Targeting.lv_ChargesSpent], c_unitStateTooltipable, false);
		Targeting.lv_DirectionGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_Unit[Targeting.lv_ChargesSpent]);
		Wait(0.1, c_timeGame);
		if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == true)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_DirectionGroup, OrderTargetingPoint(Targeting.lv_ExecuteCommand, UnitGetPosition(Targeting.lv_Unit[Targeting.lv_ChargesSpent])), false);
			//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsSecondary, lv_casterPlayer);
			Targeting.lv_Phase = c_TargetingPhaseType_Direction;
		}
	}
	Targeting.lv_Cycling = false;
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_DirectionChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_DirectionChosen_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (testConds) {
		if (!((Targeting.lv_Phase == c_TargetingPhaseType_Direction))) {
			return false;
		}
	}
	Targeting.lv_Cycling = true;
	Targeting.lv_UnrefundableStageEntered = true;
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	ActorSend(Targeting.lv_Actors[Targeting.lv_ChargesSpent], "Signal Destroy");
	if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == false)) {
		return true;
	}
	libNtve_gf_MakeUnitFacePoint(Targeting.lv_Unit[Targeting.lv_ChargesSpent], lv_targetPoint, 0.0);
	if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
		UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		Wait(0.1, c_timeGame);
	}
	else {
		//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lv_casterPlayer);
		Wait(0.1, c_timeGame);
		if ((Targeting.lv_AlreadyCanceled == false)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}
		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	Targeting.lv_Cycling = false;
	return true;
}
bool LOTC_Targeting_Activated_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	int lv_casterPlayer = 1;//UnitGetOwner(lv_caster);
	string UDType = "LotC_Targetable";
	string UDInstance = "Test_HornerAirFleet";
	string BehaviorActivated = EventUnitBehavior();
	int lv_HornerAirFleet_Cost;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	Targeting.lv_CasterUnit = EventUnit();
	Targeting.lv_CasterGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_CasterUnit);
	Targeting.lv_ActivateAbility = UserDataGetGameLink(UDType,UDInstance,"ActivateAbility",1); //"HornerAirFleetActivate";
	Targeting.lv_ExecuteCommand = UserDataGetAbilCmd(UDType,UDInstance,"ExecuteCommand",1);//AbilityCommand("HornerAirFleetExecute", 0);
	Targeting.lv_Cooldown = UserDataGetString(UDType,UDInstance,"Cooldown",1);//"Abil/HornerAirFleetActivate";
	Targeting.lv_Behavior = UserDataGetGameLink(UDType,UDInstance,"Behavior",1);//"HornerAirFleetActivate";
	Targeting.lv_Model = UserDataGetGameLink(UDType,UDInstance,"Model",1);//"HornerAirFleetTargetingModel";
	Targeting.lv_Order = OrderTargetingPoint(UserDataGetAbilCmd(UDType,UDInstance,"Order",1), UnitGetPosition(Targeting.lv_CasterUnit));//"HornerAirFleetTargetingDummy"
	Targeting.lv_UnitType = UserDataGetGameLink(UDType,UDInstance,"UnitType",1);//"HornerAirFleetTargeter";
	Targeting.lv_ChargesTotal = UserDataGetInt(UDType,UDInstance,"ChargesTotal",1);//1;
	Targeting.lv_InstructionsPrimary = UserDataGetText(UDType,UDInstance,"InstructionsPrimary",1);//StringExternal("Param/Value/lib_COMI_BE46DBD9");//Fleet Starting Location
	Targeting.lv_InstructionsSecondary = UserDataGetText(UDType,UDInstance,"InstructionsSecondary",1);//StringExternal("Param/Value/lib_COMI_A3DA54C0");//Choose Fleet Direction
	lv_HornerAirFleet_Cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, Targeting.lv_ActivateAbility, "Cost[0].Resource[0]", lv_casterPlayer);
	LOTC_Targeting_ModeEnter(lv_casterPlayer);
	return true;
}
void LOTC_Targeting_Init(){
	trigger t;
	string ActivateBehavior = "Test_HornerAirFleetActivate";
	LOTC_Targeting_gt_Activated = TriggerCreate("LOTC_Targeting_Activated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Activated, null, ActivateBehavior, c_unitBehaviorChangeActivate);
	LOTC_Targeting_gt_Deactivated = TriggerCreate("LOTC_Targeting_Deactivated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Deactivated, null, ActivateBehavior, c_unitBehaviorChangeDeactivate);
	LOTC_Targeting_gt_PointChosen = TriggerCreate("LOTC_Targeting_TargetingPointChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_PointChosen, null, AbilityCommand("Test_HornerAirFleetTargetingDummy", 0));
	LOTC_Targeting_gt_DirectionChosen = TriggerCreate("LOTC_Targeting_DirectionChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_DirectionChosen, null, AbilityCommand("Test_HornerAirFleetExecute", 0));
	LOTC_Targeting_gt_ForceOff = TriggerCreate("LOTC_Targeting_TargetingForceOff_Func");
	TriggerAddEventGeneric(LOTC_Targeting_gt_ForceOff, "CinematicModeOn");
	LOTC_Targeting_gt_EffectFired = TriggerCreate("LOTC_Targeting_EffectFired_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MiningWorkerHandler
//--------------------------------------------------------------------------------------------------
trigger LotC_MiningWorkerConstructionDeath;
trigger LotC_MiningWorkerConstructionComplete;
bool LotC_MiningWorkerConstructionDeathHandler(bool a, bool b){
    bool trigRan = true;
    unit building = EventUnit();
    int buildingTag = UnitGetTag(building);
    unit worker;
    if(DataTableValueExists(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker")){
        worker= DataTableGetUnit(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
        DataTableValueRemove(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
        UnitKill(worker);
    }
    else{trigRan=false;}
    return trigRan;
}
bool LotC_MiningWorkerClearBuilder(bool a, bool b){
    bool trigRan = true;
    unit worker = EventUnit();
    unit building = EventUnitProgressUnit();
    int buildingTag = UnitGetTag(building);
    if(DataTableValueExists(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker")){
        DataTableValueRemove(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
    }
    else{trigRan=false;}    
    return trigRan;
}
bool LotC_MiningWorkerTrackBuilder(bool a, bool b){
    bool trigRan = true;
    unit worker = EventUnit();
    unit building = EventUnitProgressUnit();
    int buildingTag = UnitGetTag(building);
    if(UnitGetType(worker)=="MiningDrone"){
        DataTableSetUnit(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker",worker);
        TriggerAddEventUnitDied(LotC_MiningWorkerConstructionDeath, UnitRefFromUnit(building));
        TriggerAddEventUnitConstructProgress(LotC_MiningWorkerConstructionComplete, UnitRefFromUnit(worker), c_unitProgressStageComplete);
        TriggerAddEventUnitConstructProgress(LotC_MiningWorkerConstructionComplete, UnitRefFromUnit(worker), c_unitProgressStageCancel);
    }
    else{trigRan=false;}
    return trigRan;
}
void LotC_MiningWorker_Init(){
    trigger t;
    t= TriggerCreate("LotC_MiningWorkerTrackBuilder");
    TriggerAddEventUnitConstructProgress(t, null, c_unitProgressStageStart);
    LotC_MiningWorkerConstructionDeath = TriggerCreate("LotC_MiningWorkerConstructionDeathHandler");
    LotC_MiningWorkerConstructionComplete = TriggerCreate("LotC_MiningWorkerClearBuilder");
    //TriggerAddEventUnitDied(t, null);
}

void lib50365395_InitCustomScript () {
    LOTC_Targeting_Init();
    LotC_MiningWorker_Init();
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UPL Race
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_InitializeUPLRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto12AFAF27_g;
    int auto12AFAF27_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto12AFAF27_g = PlayerGroupAll();
    auto12AFAF27_var = -1;
    while (true) {
        auto12AFAF27_var = PlayerGroupNextPlayer(auto12AFAF27_g, auto12AFAF27_var);
        if (auto12AFAF27_var < 0) { break; }
        if ((PlayerRace(auto12AFAF27_var) == "UPL")) {
            PlayerApplySkin(auto12AFAF27_var, "UPLAnnouncer", true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_InitializeUPLRace_Init () {
    lib50365395_gt_InitializeUPLRace = TriggerCreate("lib50365395_gt_InitializeUPLRace_Func");
    TriggerAddEventMapInit(lib50365395_gt_InitializeUPLRace);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infantry Mortar Launch
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_InfantryMortarLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitIsValid(lv_target) == true)) {
        UnitCreateEffectUnit(lv_caster, "InfantryMortarLaunch", lv_target);
    }
    else {
        UnitCreateEffectPoint(lv_caster, "InfantryMortarLaunch", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_InfantryMortarLaunch_Init () {
    lib50365395_gt_InfantryMortarLaunch = TriggerCreate("lib50365395_gt_InfantryMortarLaunch_Func");
    TriggerAddEventPlayerEffectUsed(lib50365395_gt_InfantryMortarLaunch, c_playerAny, "InfantryMortarLaunchDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMinePlaceDummy
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_ClaymoreMinePlaceDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_queued;
    unitgroup lv_ug;
    unit lv_caster;
    unit lv_claymorePH;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_queued = OrderGetFlag(EventUnitOrder(), c_cmdQueued);
    lv_ug = UnitGroupEmpty();
    lv_caster = EventUnit();
    lv_player = 1;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_queued == true)) {
        UnitBehaviorAdd(lv_caster, "ClaymoreMineQueued", lv_caster, 1);
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitCreateEffectPoint(lv_caster, "ClaymoreMineMakeDummy", OrderGetTargetPosition(EventUnitOrder()));
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    if ((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true)) {
        lv_ug = UnitGetTrackedUnitGroup(lv_caster, "ClaymoreMineTracker");
        if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
            lv_claymorePH = UnitGroupUnit(lv_ug, UnitGroupCount(lv_ug, c_unitCountAlive));
            if ((lv_queued == true)) {
                UnitBehaviorAdd(lv_claymorePH, "ClaymoreMineQueued", lv_caster, 1);
            }

            lv_ug = libNtve_gf_ConvertUnitToUnitGroup(lv_claymorePH);
            if ((UnitIsValid(lv_caster) == true) && (UnitIsValid(lv_claymorePH) == true)) {
                UISetTargetingOrder(PlayerGroupSingle(lv_player), lv_ug, OrderTargetingPoint(AbilityCommand("ClaymoreMineSetDirection", 0), UnitGetPosition(lv_claymorePH)), false);
                while ((UnitIsValid(lv_caster) == true) && (UnitIsValid(lv_claymorePH) == true)) {
                    Wait(0.0625, c_timeGame);
                }
            }

        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_50365395_1F1EC273"), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_ClaymoreMinePlaceDummy_Init () {
    lib50365395_gt_ClaymoreMinePlaceDummy = TriggerCreate("lib50365395_gt_ClaymoreMinePlaceDummy_Func");
    TriggerAddEventUnitOrder(lib50365395_gt_ClaymoreMinePlaceDummy, null, AbilityCommand("ClaymoreMineDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMineSetDirection
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_ClaymoreMineSetDirection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unitgroup lv_ug;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGetTrackedUnitGroup(EventUnit(), "ClaymoreMineTracker");
    if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
        lv_caster = UnitGroupUnit(lv_ug, 1);
        if ((UnitIsValid(lv_caster) == true)) {
            UnitCreateEffectUnit(EventUnit(), "ClaymoreMineSignalReady", lv_caster);
            if ((UnitHasBehavior2(EventUnit(), "ClaymoreMineQueued") == true)) {
                lv_ug = UnitGroupSelected(lv_player);
                UISetTargetingOrder(PlayerGroupSingle(lv_player), lv_ug, OrderTargetingPoint(AbilityCommand("ClaymoreMineDummy", 0), UnitGetPosition(lv_caster)), false);
                Wait(30.0, c_timeReal);
                return true;
            }

        }

    }

    UISetTargetingOrder(PlayerGroupSingle(lv_player), libNtve_gf_ConvertUnitToUnitGroup(EventUnit()), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_ClaymoreMineSetDirection_Init () {
    lib50365395_gt_ClaymoreMineSetDirection = TriggerCreate("lib50365395_gt_ClaymoreMineSetDirection_Func");
    TriggerAddEventUnitOrder(lib50365395_gt_ClaymoreMineSetDirection, null, AbilityCommand("ClaymoreMineSetDirection", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMineSetDirectionCancel
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_ClaymoreMineSetDirectionCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto1DED529D_g;
    int auto1DED529D_u;
    unit auto1DED529D_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1DED529D_g = UnitGroupSelected(lv_player);
    auto1DED529D_u = UnitGroupCount(auto1DED529D_g, c_unitCountAll);
    for (;; auto1DED529D_u -= 1) {
        auto1DED529D_var = UnitGroupUnitFromEnd(auto1DED529D_g, auto1DED529D_u);
        if (auto1DED529D_var == null) { break; }
        PlayerCreateEffectUnit(lv_player, "ClaymoreMineCancelChannelOrder", auto1DED529D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_ClaymoreMineSetDirectionCancel_Init () {
    lib50365395_gt_ClaymoreMineSetDirectionCancel = TriggerCreate("lib50365395_gt_ClaymoreMineSetDirectionCancel_Func");
    TriggerAddEventTargetModeUpdate(lib50365395_gt_ClaymoreMineSetDirectionCancel, c_playerAny, AbilityCommand("ClaymoreMineSetDirection", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastOn
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_SelfCastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib50365395_gv_selfCasting = true;
    TriggerEnable(lib50365395_gt_SelfCastMyraHeal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_SelfCastOn_Init () {
    lib50365395_gt_SelfCastOn = TriggerCreate("lib50365395_gt_SelfCastOn_Func");
    TriggerAddEventHotkeyPressed(lib50365395_gt_SelfCastOn, c_playerAny, c_hotkeyHeroCharacterSheetPanel, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastOff
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_SelfCastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib50365395_gv_selfCasting = false;
    TriggerEnable(lib50365395_gt_SelfCastMyraHeal, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_SelfCastOff_Init () {
    lib50365395_gt_SelfCastOff = TriggerCreate("lib50365395_gt_SelfCastOff_Func");
    TriggerAddEventHotkeyPressed(lib50365395_gt_SelfCastOff, c_playerAny, c_hotkeyHeroCharacterSheetPanel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastMyraHeal
//--------------------------------------------------------------------------------------------------
bool lib50365395_gt_SelfCastMyraHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    order lv_order;

    // Automatic Variable Declarations
    unitgroup auto24040CE4_g;
    int auto24040CE4_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib50365395_gv_selfCasting == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24040CE4_g = UnitGroupSelected(EventPlayer());
    auto24040CE4_u = UnitGroupCount(auto24040CE4_g, c_unitCountAll);
    for (;; auto24040CE4_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto24040CE4_g, auto24040CE4_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == "MyraDavisOfficer") || (UnitGetType(lv_u) == "MyraDavisRiotOfficer"))) {
            UnitIssueOrder(lv_u, OrderTargetingUnit(AbilityCommand("MyraDavisHealingPatch", 0), lv_u), c_orderQueueAddToFront);
        }

    }
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), null, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib50365395_gt_SelfCastMyraHeal_Init () {
    lib50365395_gt_SelfCastMyraHeal = TriggerCreate("lib50365395_gt_SelfCastMyraHeal_Func");
    TriggerEnable(lib50365395_gt_SelfCastMyraHeal, false);
    TriggerAddEventTargetModeUpdate(lib50365395_gt_SelfCastMyraHeal, c_playerAny, AbilityCommand("MyraDavisHealingPatch", 0), c_targetModeStateOn);
}

void lib50365395_InitTriggers () {
    lib50365395_gt_InitializeUPLRace_Init();
    lib50365395_gt_InfantryMortarLaunch_Init();
    lib50365395_gt_ClaymoreMinePlaceDummy_Init();
    lib50365395_gt_ClaymoreMineSetDirection_Init();
    lib50365395_gt_ClaymoreMineSetDirectionCancel_Init();
    lib50365395_gt_SelfCastOn_Init();
    lib50365395_gt_SelfCastOff_Init();
    lib50365395_gt_SelfCastMyraHeal_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib50365395_InitLib_completed = false;

void lib50365395_InitLib () {
    if (lib50365395_InitLib_completed) {
        return;
    }

    lib50365395_InitLib_completed = true;

    lib50365395_InitLibraries();
    lib50365395_InitVariables();
    lib50365395_InitCustomScript();
    lib50365395_InitTriggers();
}

