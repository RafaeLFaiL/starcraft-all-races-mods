include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"
include "Lib0DE1D9D6"

include "Lib9770F675_h"

//--------------------------------------------------------------------------------------------------
// Library: SCMR
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib9770F675_InitLibraries () {
    libNtve_InitVariables();
    lib0DE1D9D6_InitVariables();
}

// Variable Initialization
bool lib9770F675_InitVariables_completed = false;

void lib9770F675_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (lib9770F675_InitVariables_completed) {
        return;
    }

    lib9770F675_InitVariables_completed = true;

    lib9770F675_gv_portrait = c_invalidPortraitId;
    lib9770F675_gv_videoLocalSoundLink = SoundLink("EditorDefaultSound", -1);
    lib9770F675_gv_videoduration = 146;
    lib9770F675_gv_timerduration = TimerCreate();
    lib9770F675_gv_preVideoTxt = true;
    lib9770F675_gv_cinematicEndUnmuteAmbient = true;
    lib9770F675_gv_cinematicEndUnmuteMusic = true;
    lib9770F675_gv_interstitialsTextHeight = 195;
    lib9770F675_gv_interstitialsTextHeight_Image = 235;
    lib9770F675_gv_text_background = c_invalidDialogControlId;
    lib9770F675_gv_sCMRCore.lv_dDifficulty = StringExternal("Param/Value/lib_9770F675_9FB57FEE");
    lib9770F675_gv_sCMRCore.lv_dObjectives = StringExternal("Param/Value/lib_9770F675_B16C7FC2");
    lib9770F675_gv_sCMRCore.lv__1epEasy = StringExternal("Param/Value/lib_9770F675_9847B977");
    lib9770F675_gv_sCMRCore.lv__1epMedium = StringExternal("Param/Value/lib_9770F675_9D8C687C");
    lib9770F675_gv_sCMRCore.lv__1epHard = StringExternal("Param/Value/lib_9770F675_BFA7636F");
    lib9770F675_gv_sCMRCore.lv__1epBrutal = StringExternal("Param/Value/lib_9770F675_0EFF942F");
    lib9770F675_gv_sCMRCore.lv__1epInsane = StringExternal("Param/Value/lib_9770F675_09FC489F");
    lib9770F675_gv_sCMRCore.lv__2epEasy = StringExternal("Param/Value/lib_9770F675_7F065C41");
    lib9770F675_gv_sCMRCore.lv__2epMedium = StringExternal("Param/Value/lib_9770F675_B233E3ED");
    lib9770F675_gv_sCMRCore.lv__2epHard = StringExternal("Param/Value/lib_9770F675_3EDBBA8F");
    lib9770F675_gv_sCMRCore.lv__2epBrutal = StringExternal("Param/Value/lib_9770F675_C0F46B6C");
    lib9770F675_gv_sCMRCore.lv__2epInsane = StringExternal("Param/Value/lib_9770F675_C279A1CC");
    lib9770F675_gv_sCMRCore.lv__3epEasy = StringExternal("Param/Value/lib_9770F675_D5F350E9");
    lib9770F675_gv_sCMRCore.lv__3epMedium = StringExternal("Param/Value/lib_9770F675_C8B85E8B");
    lib9770F675_gv_sCMRCore.lv__3epHard = StringExternal("Param/Value/lib_9770F675_E4328BF9");
    lib9770F675_gv_sCMRCore.lv__3epBrutal = StringExternal("Param/Value/lib_9770F675_56FE2D6E");
    lib9770F675_gv_sCMRCore.lv__3epInsane = StringExternal("Param/Value/lib_9770F675_401F3EF7");
    lib9770F675_gv_sCMRCore.lv__4epEasy = StringExternal("Param/Value/lib_9770F675_9681AA64");
    lib9770F675_gv_sCMRCore.lv__4epMedium = StringExternal("Param/Value/lib_9770F675_5CC56295");
    lib9770F675_gv_sCMRCore.lv__4epHard = StringExternal("Param/Value/lib_9770F675_3CE7A6DC");
    lib9770F675_gv_sCMRCore.lv__4epBrutal = StringExternal("Param/Value/lib_9770F675_ED29FE28");
    lib9770F675_gv_sCMRCore.lv__4epInsane = StringExternal("Param/Value/lib_9770F675_732F844E");
    lib9770F675_gv_sCMRCore.lv__5epEasy = StringExternal("Param/Value/lib_9770F675_155EEC7C");
    lib9770F675_gv_sCMRCore.lv__5epMedium = StringExternal("Param/Value/lib_9770F675_0C2631E5");
    lib9770F675_gv_sCMRCore.lv__5epHard = StringExternal("Param/Value/lib_9770F675_26AAD32F");
    lib9770F675_gv_sCMRCore.lv__5epBrutal = StringExternal("Param/Value/lib_9770F675_BBF37C8F");
    lib9770F675_gv_sCMRCore.lv__5epInsane = StringExternal("Param/Value/lib_9770F675_CB2F8496");
    lib9770F675_gv_sCMRCore.lv__6epEasy = StringExternal("Param/Value/lib_9770F675_DA52BC2C");
    lib9770F675_gv_sCMRCore.lv__6epMedium = StringExternal("Param/Value/lib_9770F675_66F07782");
    lib9770F675_gv_sCMRCore.lv__6epHard = StringExternal("Param/Value/lib_9770F675_749CDCC3");
    lib9770F675_gv_sCMRCore.lv__6epBrutal = StringExternal("Param/Value/lib_9770F675_EF1F85D1");
    lib9770F675_gv_sCMRCore.lv__6epInsane = StringExternal("Param/Value/lib_9770F675_D97DA575");
    lib9770F675_gv_sCMRCore.lv__0epEasy = StringExternal("Param/Value/lib_9770F675_DB38B592");
    lib9770F675_gv_sCMRCore.lv__0epMedium = StringExternal("Param/Value/lib_9770F675_D0A96FE7");
    lib9770F675_gv_sCMRCore.lv__0epHard = StringExternal("Param/Value/lib_9770F675_5BD2228B");
    lib9770F675_gv_sCMRCore.lv__0epBrutal = StringExternal("Param/Value/lib_9770F675_A0EFA66D");
    lib9770F675_gv_sCMRCore.lv__0epInsane = StringExternal("Param/Value/lib_9770F675_ABC633CF");
    lib9770F675_gv_sCMRCore.lv__7epEasy = StringExternal("Param/Value/lib_9770F675_8D56D137");
    lib9770F675_gv_sCMRCore.lv__7epMedium = StringExternal("Param/Value/lib_9770F675_4CF9E6DE");
    lib9770F675_gv_sCMRCore.lv__7epHard = StringExternal("Param/Value/lib_9770F675_F9842C28");
    lib9770F675_gv_sCMRCore.lv__7epBrutal = StringExternal("Param/Value/lib_9770F675_301BD8DB");
    lib9770F675_gv_sCMRCore.lv__7epInsane = StringExternal("Param/Value/lib_9770F675_A8E596DE");
    lib9770F675_gv_sCMRCore.lv__8ep_1Easy = StringExternal("Param/Value/lib_9770F675_1C593ECA");
    lib9770F675_gv_sCMRCore.lv__8ep_1Medium = StringExternal("Param/Value/lib_9770F675_CD12CCE8");
    lib9770F675_gv_sCMRCore.lv__8ep_1Hard = StringExternal("Param/Value/lib_9770F675_14821F00");
    lib9770F675_gv_sCMRCore.lv__8ep_1Brutal = StringExternal("Param/Value/lib_9770F675_15A277C8");
    lib9770F675_gv_sCMRCore.lv__8ep_1Insane = StringExternal("Param/Value/lib_9770F675_518353D8");
    lib9770F675_gv_sCMRCore.lv__8ep_2Easy = StringExternal("Param/Value/lib_9770F675_303C8EB0");
    lib9770F675_gv_sCMRCore.lv__8ep_2Medium = StringExternal("Param/Value/lib_9770F675_4008DE1B");
    lib9770F675_gv_sCMRCore.lv__8ep_2Hard = StringExternal("Param/Value/lib_9770F675_5F92B57B");
    lib9770F675_gv_sCMRCore.lv__8ep_2Brutal = StringExternal("Param/Value/lib_9770F675_38C781DD");
    lib9770F675_gv_sCMRCore.lv__8ep_2Insane = StringExternal("Param/Value/lib_9770F675_858DF995");
    lib9770F675_gv_sCMRCore.lv__8ep_3Easy = StringExternal("Param/Value/lib_9770F675_FD520E59");
    lib9770F675_gv_sCMRCore.lv__8ep_3Medium = StringExternal("Param/Value/lib_9770F675_DA03BD1B");
    lib9770F675_gv_sCMRCore.lv__8ep_3Hard = StringExternal("Param/Value/lib_9770F675_1FAB9314");
    lib9770F675_gv_sCMRCore.lv__8ep_3Brutal = StringExternal("Param/Value/lib_9770F675_C036BD0D");
    lib9770F675_gv_sCMRCore.lv__8ep_3Insane = StringExternal("Param/Value/lib_9770F675_FA175248");
    lib9770F675_gv_sCMRCore.lv_bStart = StringExternal("Param/Value/lib_9770F675_8A5B3ACE");
    lib9770F675_gv_sCMRCore.lv_bReplay = StringExternal("Param/Value/lib_9770F675_BD112706");
    lib9770F675_gv_sCMRCore.lv_bCancel = StringExternal("Param/Value/lib_9770F675_7262E91D");
    lib9770F675_gv_sCMRCore.lv_bLoad = StringExternal("Param/Value/lib_9770F675_4949AA3C");
    lib9770F675_gv_sCMRCore.lv_bRestart = StringExternal("Param/Value/lib_9770F675_20C423F5");
    lib9770F675_gv_sCMRCore.lv_bQuit = StringExternal("Param/Value/lib_9770F675_E8E6F571");
    lib9770F675_gv_sCMRCore.lv_bAbort = StringExternal("Param/Value/lib_9770F675_07057FA4");
    lib9770F675_gv_sCMRCore.lv_sVictory = StringExternal("Param/Value/lib_9770F675_52644F0F");
    lib9770F675_gv_sCMRCore.lv_sDefeat = StringExternal("Param/Value/lib_9770F675_C6245AEB");
    lib9770F675_gv_sCMRCore.lv_sCinematic = StringExternal("Param/Value/lib_9770F675_84F041AB");
    lib9770F675_gv_sCMRCore.lv_sElapsedTime = StringExternal("Param/Value/lib_9770F675_18DF8CF5");
    lib9770F675_gv_sCMRCore.lv_sUnitsProduced = StringExternal("Param/Value/lib_9770F675_B44C16A7");
    lib9770F675_gv_sCMRCore.lv_sKilled = StringExternal("Param/Value/lib_9770F675_46CC519B");
    lib9770F675_gv_sCMRCore.lv_sLost = StringExternal("Param/Value/lib_9770F675_21320E5F");
    lib9770F675_gv_sCMRCore.lv_sKillsDeaths = StringExternal("Param/Value/lib_9770F675_0DE6C91A");
    lib9770F675_gv_sCMRCore.lv_sSurvivalRate = StringExternal("Param/Value/lib_9770F675_F6A841F8");
    lib9770F675_gv_sCMRCore.lv_sContinueCampaign = StringExternal("Param/Value/lib_9770F675_BF5B063C");
    lib9770F675_gv_sCMRCore.lv_sRestartMission = StringExternal("Param/Value/lib_9770F675_4987D3EA");
    lib9770F675_gv_sCMRCore.lv_pPlanetaryProfile = StringExternal("Param/Value/lib_9770F675_DA85122B");
    lib9770F675_gv_sCMRCore.lv_pPlanetaryProfileNew = StringExternal("Param/Value/lib_9770F675_CB775309");
    lib9770F675_gv_sCMRCore.lv_pUnitProfileNew = StringExternal("Param/Value/lib_9770F675_C6941527");
    lib9770F675_gv_sCMRCore.lv_pUnitCharacterNew = StringExternal("Param/Value/lib_9770F675_707538FB");
    lib9770F675_gv_sCMRCore.lv_pNEWINTELAVAILABLE = StringExternal("Param/Value/lib_9770F675_F6AF6525");
    lib9770F675_gv_sCMRCore.lv_pNEURALLINKACTIVATED = StringExternal("Param/Value/lib_9770F675_0CC9D39C");
    lib9770F675_gv_sCMRCore.lv_pINFORMATIONARCHIVED = StringExternal("Param/Value/lib_9770F675_DCCB5955");
    lib9770F675_gv_sCMRCore.lv_mHeroTakingDamage = StringExternal("Param/Value/lib_9770F675_F4B1C719");
    lib9770F675_gv_sCMRCore.lv_deCheatEnabled = StringExternal("Param/Value/lib_9770F675_C2EA3A8B");
    lib9770F675_gv_sCMRCore.lv_deCheatDisabled = StringExternal("Param/Value/lib_9770F675_FC12E662");
    lib9770F675_gv_iniEpisode = 1;
    lib9770F675_gv_iniEpisode_StukovSeries = 1;
    lib9770F675_gv_iniEpisode_EnslaversRedux = 1;
    lib9770F675_gv_iniEpisode_InsurrectionRedux = 1;
    lib9770F675_gv_iniEpisode_RetributionRedux = 1;
    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/1. Rebel Yell/Terran";
    lib9770F675_gv_iniLastMap = "Starcraft Mass Recall/1. Rebel Yell/Terran";
    lib9770F675_gv_iniNextMapNr = "01";
    lib9770F675_gv_iniLastMapNr = "01";
    lib9770F675_gv_iniPlayerDecal = "decal_terran_0009_01";
    lib9770F675_gv_iniPlayerDecal_IMG = "Assets\\Textures\\decal_terran_0007_01.dds";
    lib9770F675_gv_iniNextCinematicLink = "";
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            lib9770F675_gv_iniMapWeatherEffectsTreshold[init_i][init_j] = 1;
        }
    }
    lib9770F675_gv_iniMapProgressCurrent = 1;
    lib9770F675_gv_iniMapProgressNextMap = 1;
    lib9770F675_gv_consoleSkinMap = 1;
    lib9770F675_gv_briefing_Text_Style = "MRBriefText";
    lib9770F675_gv_briefing_Text_Color = Color(60.78, 100.00, 74.51);
    lib9770F675_gv_briefing_Text_Color_T = Color(62.75, 100.00, 64.71);
    lib9770F675_gv_briefing_Text_Color_Z = Color(94.51, 65.49, 47.84);
    lib9770F675_gv_briefing_Text_Color_P = Color(68.63, 81.96, 98.04);
    lib9770F675_gv_portrait1 = c_invalidPortraitId;
    lib9770F675_gv_portrait2 = c_invalidPortraitId;
    lib9770F675_gv_portrait3 = c_invalidPortraitId;
    lib9770F675_gv_portrait4 = c_invalidPortraitId;
    lib9770F675_gv_briefingPortrait1 = c_invalidDialogControlId;
    lib9770F675_gv_briefingPortrait2 = c_invalidDialogControlId;
    lib9770F675_gv_briefingPortrait3 = c_invalidDialogControlId;
    lib9770F675_gv_briefingPortrait4 = c_invalidDialogControlId;
    lib9770F675_gv_objectivesDisplay = c_invalidDialogControlId;
    lib9770F675_gv_briefingTemplate = c_invalidDialogControlId;
    lib9770F675_gv_briefingTextDisplay = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib9770F675_gv_briefingScrollingItem[init_i] = c_invalidDialogControlId;
    }
    lib9770F675_gv_briefingScrolling = c_invalidDialogId;
    lib9770F675_gv_backgroundImageString = "";
    lib9770F675_gv_background = c_invalidDialogId;
    lib9770F675_gv_briefingAnimation = c_invalidDialogControlId;
    lib9770F675_gv_briefingAnimationButton = c_invalidDialogControlId;
    lib9770F675_gv_briefingAnimationButton2 = c_invalidDialogControlId;
    lib9770F675_gv_btnStart = c_invalidDialogControlId;
    lib9770F675_gv_btnReplay = c_invalidDialogControlId;
    lib9770F675_gv_btnCancel = c_invalidDialogControlId;
    lib9770F675_gv_btnSkip = c_invalidDialogControlId;
    lib9770F675_gv_difficultySelection = c_invalidDialogControlId;
    lib9770F675_gv_portrait5 = c_invalidDialogControlId;
    lib9770F675_gv_p1_dist = c_invalidDialogControlId;
    lib9770F675_gv_p2_dist = c_invalidDialogControlId;
    lib9770F675_gv_p3_dist = c_invalidDialogControlId;
    lib9770F675_gv_p4_dist = c_invalidDialogControlId;
    lib9770F675_gv_p1_dist2 = c_invalidDialogControlId;
    lib9770F675_gv_p2_dist2 = c_invalidDialogControlId;
    lib9770F675_gv_p3_dist2 = c_invalidDialogControlId;
    lib9770F675_gv_p4_dist2 = c_invalidDialogControlId;
    lib9770F675_gv_talkingPortrait = c_invalidPortraitId;
    lib9770F675_gv_talkingPortraitNA = c_invalidPortraitId;
    lib9770F675_gv_optionsGameSpeed = 3;
    lib9770F675_gv_optionsDifficulty = 2;
    lib9770F675_gv_optionsConsole = 1;
    lib9770F675_gv_optionsMusic = 1;
    lib9770F675_gv_optionsBWtech = true;
    lib9770F675_gv_optionsCinematics = true;
    lib9770F675_gv_optionsHeroAbilities = true;
    lib9770F675_gv_optionsHeroAlert = true;
    lib9770F675_gv_optionsHeroNamePlates = true;
    lib9770F675_gv_optionsInterstitials = true;
    lib9770F675_gv_optionsTPS = true;
    lib9770F675_gv_optionsMicroMapCameraZoom = true;
    lib9770F675_gv_optionsExtraMusic = true;
    lib9770F675_gv_optionsExtraDialogue = true;
    lib9770F675_gv_optionsEffectsNukes = true;
    lib9770F675_gv_optionsEffectsStructures = true;
    lib9770F675_gv_optionsEffectsFires = true;
    lib9770F675_gv_optionsWeather = true;
    lib9770F675_gv_optionsEffectsWeather = 2;
    lib9770F675_gv_optionsAudioAbilities = true;
    lib9770F675_gv_optionsAudioWeapons = true;
    lib9770F675_gv_optionsAudioBuildings = true;
    lib9770F675_gv_optionsProfilesPlanet = true;
    lib9770F675_gv_optionsProfilesUnit = true;
    lib9770F675_gv_optionsProfilesCharacter = true;
    lib9770F675_gv_sounds.lv_sCV = true;
    lib9770F675_gv_sounds.lv_vulture = true;
    lib9770F675_gv_sounds.lv_goliath = true;
    lib9770F675_gv_sounds.lv_overlord = true;
    lib9770F675_gv_sounds.lv_zergling = true;
    lib9770F675_gv_sounds.lv_hydralisk = true;
    lib9770F675_gv_sounds.lv_lurker = true;
    lib9770F675_gv_sounds.lv_defiler = true;
    lib9770F675_gv_sounds.lv_scourge = true;
    lib9770F675_gv_sounds.lv_queen = true;
    lib9770F675_gv_sounds.lv_devourer = true;
    lib9770F675_gv_sounds.lv_probe = true;
    lib9770F675_gv_sounds.lv_dragoon = true;
    lib9770F675_gv_cutsceneUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib9770F675_gv_aICurrentAttackWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib9770F675_gv_aISurvivors[init_i] = UnitGroupEmpty();
    }
    lib9770F675_gv_aIAdvanceWaveRandomTimerSetting = 2;
    lib9770F675_gv_unlimited_food = true;
    lib9770F675_gv_aITerranComSat = UnitGroupEmpty();
    lib9770F675_gv_inteHeader = c_invalidDialogId;
    lib9770F675_gv_creditTimings.lv_creditsWait01Swap = 0.8;
    lib9770F675_gv_creditTimings.lv_creditsWait02Short = 4.0;
    lib9770F675_gv_creditTimings.lv_creditsWait03Med = 7.0;
    lib9770F675_gv_creditTimings.lv_creditsWait04Long = 11.0;
    lib9770F675_gv__FadeDialog = c_invalidDialogId;
    lib9770F675_gv__FadeImage = c_invalidDialogControlId;
    lib9770F675_gv_zS_PlanetPortrait = c_invalidPortraitId;
    lib9770F675_gv__TP_DropPod_Units = UnitGroupEmpty();
    lib9770F675_gv_scoreBorder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib9770F675_gv_scoreScreenLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib9770F675_gv_backgroundImageTop = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 2; init_k += 1) {
                lib9770F675_gv_scoreScreenMatrix[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    lib9770F675_gv_scoreScreenFailSafe = true;
    lib9770F675_gv_btnSSContinueCampaign = c_invalidDialogControlId;
    lib9770F675_gv_btnSSRestart = c_invalidDialogControlId;
    lib9770F675_gv_btnSSQuit = c_invalidDialogControlId;
    lib9770F675_gv_victoryImageString = "";
    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
    lib9770F675_gv_defeatImageString = "";
    lib9770F675_gv_defeatMusicLink = SoundLink("BWTvictory", -1);
    lib9770F675_gv_tuneup = 1;
    lib9770F675_gv_evolve = 1;
    lib9770F675_gv_forge = 1;
    lib9770F675_gv_introTxt4 = "";
    lib9770F675_gv_achievement_timer = TimerCreate();
    lib9770F675_gv_achievement_timer2 = TimerCreate();
    lib9770F675_gv_achievement_Needed = 16;
    lib9770F675_gv_achievement_Remaining = 16;
    lib9770F675_gv_palIrid_CheatLevel = 1;
    lib9770F675_gv_exp_CheatLevel = 1;
    lib9770F675_gv_bio_CheatLevel = 1;
    lib9770F675_gv_hellfire_count = 5;
    lib9770F675_gv_objective_Palladium = c_invalidObjectiveId;
    lib9770F675_gv_objective_Iridium = c_invalidObjectiveId;
    lib9770F675_gv_commanderLeaderboard = c_boardNone;
    lib9770F675_gv_shrines_pylon_scmr = UnitGroupEmpty();
    lib9770F675_gv_shrines_total_scmr = UnitGroupEmpty();
    lib9770F675_gv_shrine_beacons_scmr = UnitGroupEmpty();
    lib9770F675_gv_cloakUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_cloakUpgrade2 = c_invalidDialogControlId;
    lib9770F675_gv_blinkUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_blinkUpgrade2 = c_invalidDialogControlId;
    lib9770F675_gv_prisonUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_prisonUpgrade2 = c_invalidDialogControlId;
    lib9770F675_gv_temporalUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_temporalUpgrade2 = c_invalidDialogControlId;
    lib9770F675_gv_armorUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_shadowUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_strikeUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_furyUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_expCap = 1;
    lib9770F675_gv_objective_Artifact = c_invalidObjectiveId;
    lib9770F675_gv_zeratulLevelCurrent = 1;
    lib9770F675_gv_zeratulLeaderboard = c_boardNone;
    lib9770F675_gv_zeratulUpgradeDialog = c_invalidDialogId;
    lib9770F675_gv_lair = UnitGroupEmpty();
    lib9770F675_gv_hive = UnitGroupEmpty();
    lib9770F675_gv_hatchery = UnitGroupEmpty();
    lib9770F675_gv_deep_tunnel_timer = TimerCreate();
    lib9770F675_gv_strUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_strUpgradeFail = c_invalidDialogControlId;
    lib9770F675_gv_defUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_defUpgradeFail = c_invalidDialogControlId;
    lib9770F675_gv_psiUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_psiUpgradeFail = c_invalidDialogControlId;
    lib9770F675_gv_cancelUpgrade = c_invalidDialogControlId;
    lib9770F675_gv_objective_Psi = c_invalidObjectiveId;
    lib9770F675_gv_biomassCap = 1;
    lib9770F675_gv_metamorphButton = 20;
    lib9770F675_gv_kerriganLeaderboard = c_boardNone;
    lib9770F675_gv_DropTimer_Increment2 = c_invalidDialogId;
    lib9770F675_gv_textStyle = StringExternal("Param/Value/lib_9770F675_86652B93");
    lib9770F675_gv_nydusSpawnDelay = 2.0;
}

// Presets
// Functions
void lib9770F675_gf_Cinematic () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib9770F675_gt_CinematicPlay, false, true);
}

void lib9770F675_gf_CinematicNewGettysburg () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib9770F675_gt_CinematicPlayNewGettysburg, false, true);
}

void lib9770F675_gf_CinematicZertaul_ER () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib9770F675_gt_CinematicPlayZeratul_ER, false, true);
}

void lib9770F675_gf_CinematicBWIntro () {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(lib9770F675_gt_CinematicPlayBWIntro, false, true);
}

void lib9770F675_gf_InterstitialsPlay (int lp_condition, string lp_video, text lp_text) {
    // Variable Declarations
    string lv_video;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_video = "";

    // Implementation
    lv_video = (lp_video);
    lib9770F675_gv_videoTexture = (lv_video);
    lib9770F675_gv_video = (("Video\\video_" + lv_video + ".ogv"));
    if ((lp_condition == lib9770F675_ge_InterstitialsCondition_Start)) {
        PreloadMovie(lib9770F675_gv_video, false);
        libNtve_gf_PreloadSoundObject("TVMovieTemplate", false);
        Wait(1.0, c_timeGame);
        if ((lib9770F675_gv_portrait == c_invalidPortraitId)) {
            PortraitCreate(0, 0, c_anchorCenter, 500, 500, "VideoPlayer2", "", "", false, false);
            PortraitSetRenderType(PortraitLastCreated(), c_portraitRenderTypeHDR);
            PortraitSetFullscreen(PortraitLastCreated(), true);
            PortraitSetBorderVisible(PortraitLastCreated(), false);
            PortraitSetBackgroundVisible(PortraitLastCreated(), false);
            lib9770F675_gv_portrait = PortraitLastCreated();
            PortraitWaitForLoad(PortraitLastCreated());
            PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), true, false);
            PortraitSetMouseTarget(PortraitLastCreated(), false);
        }

    }

    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), "SoundSetVolume Linear 1.000000@0.000000");
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), (("TextureSelectById " + (lib9770F675_gv_videoTexture))));
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 15, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    Wait(0.1, c_timeReal);
    if ((lp_condition != lib9770F675_ge_InterstitialsCondition_Stop)) {
        lib9770F675_gf_InterstitialsText(lp_text, 1430);
    }
    else {
        ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoStop("video", c_textureSlotComponentDefault));
        PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), false, false);
    }
}

void lib9770F675_gf_InterstitialsText (text lp_text, int lp_width) {
    // Variable Declarations
    int lv_textbk_dialog;
    int lv_text_background;
    text lv_text_font_test;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textbk_dialog = c_invalidDialogId;
    lv_text_background = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1150, 195, c_anchorBottom, 0, 20, false);
    lv_textbk_dialog = DialogLastCreated();
    DialogSetVisible(lv_textbk_dialog, PlayerGroupAll(), true);
    DialogSetImageVisible(lv_textbk_dialog, false);
    libNtve_gf_CreateDialogItemImage(lv_textbk_dialog, 1150, 195, c_anchorCenter, 0, 0, StringToText(""), "Images\\Interstitials\\blackalpha.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_text_background = DialogControlLastCreated();
    DialogSetTransparency(lv_textbk_dialog, 70.0);
    DialogControlSetVisible(lv_text_background, PlayerGroupAll(), true);
    lib9770F675_gv_showIntroTextWidth = lp_width;
    if ((lib9770F675_gv_showIntroTextWidth > 1150)) {
        lib9770F675_gv_showIntroTextWidth = 1150;
    }

    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenLabel(1, lp_text, "CreditsMovieRightColumn_Nova", lib9770F675_gv_showIntroTextWidth, lib9770F675_gv_interstitialsTextHeight, c_anchorBottom, 5, 50);
        lv_text_font_test = StringExternal("Param/Value/lib_9770F675_01927FDC");
    }
    else {
        libNtve_gf_SetDialogItemText(libNtve_gf_ScreenLabelDialogItem(1), lp_text, PlayerGroupAll());
        DialogControlSetSize(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), lib9770F675_gv_showIntroTextWidth, lib9770F675_gv_interstitialsTextHeight);
        libNtve_gf_HideScreenImage2(true, 1);
    }
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 1.0, 0.0);
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenButton(2, StringToText(""), 3000, 3000, c_anchorCenter, 0, 0, lib9770F675_gt_MouseClickedInterstitials);
    }
    else {
        libNtve_gf_HideScreenButton(true, 2);
    }
    DialogControlSetVisible(lv_text_background, PlayerGroupAll(), true);
    DialogSetTransparency(libNtve_gf_ScreenButtonDialog(2), 100.0);
    lib9770F675_gv_showIntroTextLabelCreated = true;
    TriggerEnable(lib9770F675_gt_KeyPressedInterstitials, true);
    TriggerWaitForTrigger(lib9770F675_gt_KeyPressedInterstitials, true);
}

void lib9770F675_gf_InterstitialsPlay_Image (int lp_condition, string lp_image, text lp_text, trigger lp_briefInitTrig) {
    // Variable Declarations
    string lv_image;
    string lv_image2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "";
    lv_image2 = "";

    // Implementation
    if ((lp_condition == lib9770F675_ge_InterstitialsCondition_Image_Start)) {
        PreloadImage(lp_image, false);
        Wait(1.0, c_timeGame);
    }

    Wait(2.0, c_timeReal);
    if ((lp_condition != lib9770F675_ge_InterstitialsCondition_Image_Stop)) {
        CinematicOverlay(true, 1.0, lp_image, 0.0, true);
        lib9770F675_gf_InterstitialsText_Image(lp_text, 1430);
        CinematicOverlay(false, 1.0, lp_image, 0.0, true);
        DialogControlDestroy(lib9770F675_gv_text_background);
    }
    else {
        TriggerExecute(lp_briefInitTrig, false, false);
    }
}

void lib9770F675_gf_InterstitialsText_Image (text lp_text, int lp_width) {
    // Variable Declarations
    int lv_textbk_dialog;
    text lv_text_font_test;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textbk_dialog = c_invalidDialogId;

    // Implementation
    DialogCreate(1150, 250, c_anchorBottom, 0, 20, true);
    lv_textbk_dialog = DialogLastCreated();
    DialogSetVisible(lv_textbk_dialog, PlayerGroupAll(), true);
    DialogSetImageVisible(lv_textbk_dialog, false);
    libNtve_gf_CreateDialogItemImage(lv_textbk_dialog, 1150, 250, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\blackalpha.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib9770F675_gv_text_background = DialogControlLastCreated();
    DialogSetTransparency(lv_textbk_dialog, 70.0);
    DialogControlSetVisible(lib9770F675_gv_text_background, PlayerGroupAll(), true);
    lib9770F675_gv_showIntroTextWidth = lp_width;
    if ((lib9770F675_gv_showIntroTextWidth > 1150)) {
        lib9770F675_gv_showIntroTextWidth = 1150;
    }

    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenLabel(1, lp_text, "CreditsMovieRightColumn_Nova", lib9770F675_gv_showIntroTextWidth, lib9770F675_gv_interstitialsTextHeight_Image, c_anchorBottom, 5, 50);
    }
    else {
        libNtve_gf_SetDialogItemText(libNtve_gf_ScreenLabelDialogItem(1), lp_text, PlayerGroupAll());
        DialogControlSetSize(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), lib9770F675_gv_showIntroTextWidth, lib9770F675_gv_interstitialsTextHeight_Image);
        libNtve_gf_HideScreenImage2(true, 1);
    }
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 1.0, 0.0);
    Wait(1.0, c_timeReal);
    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenButton(2, StringToText(""), 3000, 3000, c_anchorCenter, 0, 0, lib9770F675_gt_KeyPressed);
    }
    else {
        libNtve_gf_HideScreenButton(true, 2);
    }
    DialogSetTransparency(libNtve_gf_ScreenButtonDialog(2), 100.0);
    lib9770F675_gv_showIntroTextLabelCreated = true;
    TriggerEnable(lib9770F675_gt_KeyPressedInterstitials_Image, true);
    TriggerWaitForTrigger(lib9770F675_gt_KeyPressedInterstitials_Image, true);
}

void lib9770F675_gf_Initialization (int lp_episode) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto097237ED_ae = 5;
    const int auto097237ED_ai = 1;
    const int auto07B28A64_ae = 8;
    const int auto07B28A64_ai = 1;
    const int auto32270579_ae = 8;
    const int auto32270579_ai = 1;
    const int autoCEDAF513_ae = 8;
    const int autoCEDAF513_ai = 1;
    const int auto361E5D97_ae = 8;
    const int auto361E5D97_ai = 1;
    const int auto404509C1_ae = 8;
    const int auto404509C1_ai = 1;
    unitgroup autoAB7D94B3_g;
    int autoAB7D94B3_u;
    unit autoAB7D94B3_var;
    unitgroup autoADFB8D6F_g;
    int autoADFB8D6F_u;
    unit autoADFB8D6F_var;
    unitgroup autoE24F75D1_g;
    int autoE24F75D1_u;
    unit autoE24F75D1_var;
    unitgroup auto76B3E736_g;
    int auto76B3E736_u;
    unit auto76B3E736_var;
    unitgroup auto11EA7E8E_g;
    int auto11EA7E8E_u;
    unit auto11EA7E8E_var;
    unitgroup auto5FA6D1E6_g;
    int auto5FA6D1E6_u;
    unit auto5FA6D1E6_var;
    unitgroup autoC7A7348C_g;
    int autoC7A7348C_u;
    unit autoC7A7348C_var;
    unitgroup auto42AEF4EF_g;
    int auto42AEF4EF_u;
    unit auto42AEF4EF_var;
    unitgroup auto55D7FA53_g;
    int auto55D7FA53_u;
    unit auto55D7FA53_var;
    unitgroup autoB7046AA8_g;
    int autoB7046AA8_u;
    unit autoB7046AA8_var;
    unitgroup auto9BFB9BD6_g;
    int auto9BFB9BD6_u;
    unit auto9BFB9BD6_var;
    unitgroup auto15A6631F_g;
    int auto15A6631F_u;
    unit auto15A6631F_var;
    unitgroup auto6C3417A3_g;
    int auto6C3417A3_u;
    unit auto6C3417A3_var;
    const int auto4ADDEBCD_ae = 8;
    const int auto4ADDEBCD_ai = 1;
    playergroup auto73375C26_g;
    int auto73375C26_var;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    TriggerExecute(lib9770F675_gt_BriefCancelButton21, false, true);
    SoundChannelPause(PlayerGroupAll(), c_soundCategoryMusic, true);
    lib9770F675_gv_iniEpisode = lp_episode;
    CameraLockInput(1, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
    UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogAbortButton, StringExternal("Param/Value/lib_9770F675_34333940"));
    lv_i = 1;
    for ( ; ( (auto097237ED_ai >= 0 && lv_i <= auto097237ED_ae) || (auto097237ED_ai < 0 && lv_i >= auto097237ED_ae) ) ; lv_i += auto097237ED_ai ) {
        lib9770F675_gv_iniPlayerName[lv_i] = lib9770F675_gv_iniPlayerScoreScreen[lv_i];
    }
    TriggerExecute(lib9770F675_gt_LoadBank, false, true);
    Wait(0.1, c_timeReal);
    TriggerExecute(lib9770F675_gt_iniEpisode, false, true);
    PlayerOptionOverride(1, "simplecommandcard", "0");
    lib9770F675_gv_consoleSkinMap = (lib9770F675_gv_iniMapProgressNextMap - 1);
    TriggerExecute(lib9770F675_gv_iniTrigger, false, true);
    if ((lp_episode < 4)) {
        if ((lib9770F675_gv_optionsBWtech == false)) {
            lv_i = 1;
            for ( ; ( (auto32270579_ai >= 0 && lv_i <= auto32270579_ae) || (auto32270579_ai < 0 && lv_i >= auto32270579_ae) ) ; lv_i += auto32270579_ai ) {
                TechTreeUnitAllow(lv_i, "Medic", false);
                TechTreeUnitAllow(lv_i, "Valkyrie", false);
                TechTreeUnitAllow(lv_i, "Lurker", false);
                TechTreeUnitAllow(lv_i, "DevourerMP", false);
                TechTreeUnitAllow(lv_i, "DarkTemplar", false);
                TechTreeUnitAllow(lv_i, "DarkArchon", false);
                TechTreeUnitAllow(lv_i, "CorsairMP", false);
                TechTreeUpgradeAllow(lv_i, "OpticalFlare", false);
                TechTreeUpgradeAllow(lv_i, "Restoration", false);
                TechTreeUpgradeAllow(lv_i, "MedicCaduceusReactor", false);
                TechTreeUpgradeAllow(lv_i, "AresClassWeaponsSystem", false);
                TechTreeUpgradeAllow(lv_i, "EvolveLurkerAspect", false);
                TechTreeUpgradeAllow(lv_i, "AnabolicSynthesis", false);
                TechTreeUpgradeAllow(lv_i, "ChitinousPlating", false);
                TechTreeUpgradeAllow(lv_i, "Maelstrom", false);
                TechTreeUpgradeAllow(lv_i, "MindControl", false);
                TechTreeUpgradeAllow(lv_i, "ArgusTalisman", false);
            }
        }
        else {
            lv_i = 1;
            for ( ; ( (auto07B28A64_ai >= 0 && lv_i <= auto07B28A64_ae) || (auto07B28A64_ai < 0 && lv_i >= auto07B28A64_ae) ) ; lv_i += auto07B28A64_ai ) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "KopruluMedic", 1);
            }
        }
    }

    if ((lib9770F675_gv_optionsHeroAbilities == false)) {
        lv_i = 1;
        for ( ; ( (autoCEDAF513_ai >= 0 && lv_i <= autoCEDAF513_ae) || (autoCEDAF513_ai < 0 && lv_i >= autoCEDAF513_ae) ) ; lv_i += autoCEDAF513_ai ) {
            TechTreeAbilityAllow(lv_i, AbilityCommand("UseSpiderMinesTarget2", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("TossGrenade", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("NovaSnipe", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("SkyTankMissileBarrage", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("MissilePods", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("DefensiveMatrix", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("HyperionOverchargeOn", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("HyperionOverchargeOff", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("Implosion2", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("Charge", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("Feedback2", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("PlasmaShield", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("FenixBarrier", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("ZeratulBlink", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("ZeratulBlinkSCMR", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("KerriganEpilogue03QuantumRay", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("KerriganEpilogue03QuantumRay", 1), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("ScoutSpeedBoost", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("SuperStimpackMarine", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("DevastatingShot", 0), false);
        }
        if ((lp_episode != 8)) {
            TechTreeAbilityAllow(1, AbilityCommand("VorazunShadowFury", 0), false);
        }

        TechTreeAbilityAllow(1, AbilityCommand("AleksanderSeekerMissile", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("DukesRevengeMissilePods", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("DukesRevengeDefensiveMatrix", 0), false);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 1);
    }
    if ((lib9770F675_gv_optionsEffectsStructures == false)) {
        TriggerEnable(lib9770F675_gt_DestroyedStructures, false);
    }

    if ((lib9770F675_gv_optionsEffectsNukes == false)) {
        TriggerEnable(lib9770F675_gt_Nukes, false);
    }

    if ((lib9770F675_gv_optionsEffectsFires == false)) {
        TriggerEnable(lib9770F675_gt_DestroyedVehicles, false);
    }

    if ((lib9770F675_gv_optionsWeather == false)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CloudShadows");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CloudsBrown");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CloudsChar");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CloudsUlaan");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CloudsWhite");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CreepCloud");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "DustStorms");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Elsecaro_Ash_Wind");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Elsecaro_Ash_Wind_Grey");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Elsecaro_Leaf_Wind");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogStormDeepWhite");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogStormDeep");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Aiur");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Aiur_Thick");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Hazy");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogBlue");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogGrey");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogMist");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "FogMistSnow");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Ulnar");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Shakuras");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Shakuras_Windy");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "GasGiantStorm");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "GasGiantWind");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "WindEnergyDust");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "WindVertical");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Hybrid01GasCloud");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Korhal_Platform_ReentryCloudsBig");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "RainSprinkle");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "RainEmitterLarge");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "RainEmitterMedium");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "RainEmitterMediumRaynor03");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Shakuras_Ash_Wind");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Shakuras_Storm_Weather_Effect");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Snow");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowBase_Clouds_Snow");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowBase_Snow_Flurry");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowBase_Wind_Tunnel");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowBlizzard");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowLight");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "SnowWind");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Sunrays");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "TerazineVaporCloud");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ThunderLightning");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "Wind_Storm");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "WindyAsh");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "WindRough");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "CharAshWeather");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ZerusLightning");
    }

    if ((lib9770F675_gv_optionsHeroAlert == true)) {
        TriggerEnable(lib9770F675_gt_HeroDamageWarning, true);
    }

    if ((lib9770F675_gv_optionsHeroNamePlates == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWHeroStatusBar", 1);
    }

    if ((lib9770F675_gv_optionsHideKillsWhenZero == true)) {
        TriggerEnable(lib9770F675_gt_KillCountHideWhenZero, true);
        TriggerEnable(lib9770F675_gt_KillCountShow, true);
    }

    lv_i = 1;
    for ( ; ( (auto361E5D97_ai >= 0 && lv_i <= auto361E5D97_ae) || (auto361E5D97_ai < 0 && lv_i >= auto361E5D97_ae) ) ; lv_i += auto361E5D97_ai ) {
        if ((lib9770F675_gv_optionsAudioBuildings == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWAudioBuildings", 1);
        }

        if ((lib9770F675_gv_optionsAudioAbilities == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWAudioAbilities", 1);
        }

        if ((lib9770F675_gv_optionsAudioWeapons == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWAudioWeapons", 1);
        }

    }
    lv_i = 1;
    for ( ; ( (auto404509C1_ai >= 0 && lv_i <= auto404509C1_ae) || (auto404509C1_ai < 0 && lv_i >= auto404509C1_ae) ) ; lv_i += auto404509C1_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOAdjutant", BoolToInt(lib9770F675_gv_sounds.lv_adjutant));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVORaynor", BoolToInt(lib9770F675_gv_sounds.lv_raynor));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOSCV", BoolToInt(lib9770F675_gv_sounds.lv_sCV));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOMarine", BoolToInt(lib9770F675_gv_sounds.lv_marine));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOFirebat", BoolToInt(lib9770F675_gv_sounds.lv_firebat));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOMedic", BoolToInt(lib9770F675_gv_sounds.lv_medic));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOGhost", BoolToInt(lib9770F675_gv_sounds.lv_ghost));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOVulture", BoolToInt(lib9770F675_gv_sounds.lv_vulture));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOSiegeTank", BoolToInt(lib9770F675_gv_sounds.lv_siegeTank));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOGoliath", BoolToInt(lib9770F675_gv_sounds.lv_goliath));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOWraith", BoolToInt(lib9770F675_gv_sounds.lv_wraith));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODropship", BoolToInt(lib9770F675_gv_sounds.lv_dropship));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOScienceVessel", BoolToInt(lib9770F675_gv_sounds.lv_scienceVessel));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOBattlecruiser", BoolToInt(lib9770F675_gv_sounds.lv_battlecruiser));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOValkyrie", BoolToInt(lib9770F675_gv_sounds.lv_valkyrie));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOCerebrate", BoolToInt(lib9770F675_gv_sounds.lv_cerebrate));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOLarva", BoolToInt(lib9770F675_gv_sounds.lv_larva));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODrone", BoolToInt(lib9770F675_gv_sounds.lv_drone));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOOverlord", BoolToInt(lib9770F675_gv_sounds.lv_overlord));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOZergling", BoolToInt(lib9770F675_gv_sounds.lv_zergling));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOHydralisk", BoolToInt(lib9770F675_gv_sounds.lv_hydralisk));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOLurker", BoolToInt(lib9770F675_gv_sounds.lv_lurker));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOInfestedTerran", BoolToInt(lib9770F675_gv_sounds.lv_infestedTerran));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODefiler", BoolToInt(lib9770F675_gv_sounds.lv_defiler));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOUltralisk", BoolToInt(lib9770F675_gv_sounds.lv_ultralisk));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOScourge", BoolToInt(lib9770F675_gv_sounds.lv_scourge));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOQueen", BoolToInt(lib9770F675_gv_sounds.lv_queen));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOMutalisk", BoolToInt(lib9770F675_gv_sounds.lv_mutalisk));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOGuardian", BoolToInt(lib9770F675_gv_sounds.lv_guardian));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODevourer", BoolToInt(lib9770F675_gv_sounds.lv_devourer));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOAdvisor", BoolToInt(lib9770F675_gv_sounds.lv_advisor));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOProbe", BoolToInt(lib9770F675_gv_sounds.lv_probe));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOZealot", BoolToInt(lib9770F675_gv_sounds.lv_zealot));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODragoon", BoolToInt(lib9770F675_gv_sounds.lv_dragoon));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOHighTemplar", BoolToInt(lib9770F675_gv_sounds.lv_highTemplar));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODarkTemplar", BoolToInt(lib9770F675_gv_sounds.lv_darkTemplar));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOArchon", BoolToInt(lib9770F675_gv_sounds.lv_archon));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVODarkArchon", BoolToInt(lib9770F675_gv_sounds.lv_darkArchon));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOShuttle", BoolToInt(lib9770F675_gv_sounds.lv_shuttle));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOReaver", BoolToInt(lib9770F675_gv_sounds.lv_reaver));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOObserver", BoolToInt(lib9770F675_gv_sounds.lv_observer));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOScout", BoolToInt(lib9770F675_gv_sounds.lv_scout));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOCarrier", BoolToInt(lib9770F675_gv_sounds.lv_carrier));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOArbiter", BoolToInt(lib9770F675_gv_sounds.lv_arbiter));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "BWVOCorsair", BoolToInt(lib9770F675_gv_sounds.lv_corsair));
    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORaynor", BoolToInt(lib9770F675_gv_models.lv_raynor));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMengsk", BoolToInt(lib9770F675_gv_models.lv_mengsk));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOKerrigan", BoolToInt(lib9770F675_gv_models.lv_kerrigan));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOvermind", BoolToInt(lib9770F675_gv_models.lv_overmind));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCerebrate", BoolToInt(lib9770F675_gv_models.lv_cerebrate));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOInfestedKerrigan", BoolToInt(lib9770F675_gv_models.lv_infestedKerrigan));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArtanis", BoolToInt(lib9770F675_gv_models.lv_artanis));
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZeratul", BoolToInt(lib9770F675_gv_models.lv_zeratul));
    if ((lp_episode <= 6)) {
        autoAB7D94B3_g = UnitGroup("VikingFighter", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoAB7D94B3_u = UnitGroupCount(autoAB7D94B3_g, c_unitCountAll);
        for (;; autoAB7D94B3_u -= 1) {
            autoAB7D94B3_var = UnitGroupUnitFromEnd(autoAB7D94B3_g, autoAB7D94B3_u);
            if (autoAB7D94B3_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoAB7D94B3_var, "Valkyrie", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        autoADFB8D6F_g = UnitGroup("Medivac", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoADFB8D6F_u = UnitGroupCount(autoADFB8D6F_g, c_unitCountAll);
        for (;; autoADFB8D6F_u -= 1) {
            autoADFB8D6F_var = UnitGroupUnitFromEnd(autoADFB8D6F_g, autoADFB8D6F_u);
            if (autoADFB8D6F_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoADFB8D6F_var, "Dropship", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        autoE24F75D1_g = UnitGroup("Queen", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoE24F75D1_u = UnitGroupCount(autoE24F75D1_g, c_unitCountAll);
        for (;; autoE24F75D1_u -= 1) {
            autoE24F75D1_var = UnitGroupUnitFromEnd(autoE24F75D1_g, autoE24F75D1_u);
            if (autoE24F75D1_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoE24F75D1_var, "QueenClassic", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto76B3E736_g = UnitGroup("Corruptor", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto76B3E736_u = UnitGroupCount(auto76B3E736_g, c_unitCountAll);
        for (;; auto76B3E736_u -= 1) {
            auto76B3E736_var = UnitGroupUnitFromEnd(auto76B3E736_g, auto76B3E736_u);
            if (auto76B3E736_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto76B3E736_var, "DevourerMP", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto11EA7E8E_g = UnitGroup("InfestedTerranCampaign", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto11EA7E8E_u = UnitGroupCount(auto11EA7E8E_g, c_unitCountAll);
        for (;; auto11EA7E8E_u -= 1) {
            auto11EA7E8E_var = UnitGroupUnitFromEnd(auto11EA7E8E_g, auto11EA7E8E_u);
            if (auto11EA7E8E_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto11EA7E8E_var, "InfestedTerranSCMR", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto5FA6D1E6_g = UnitGroup("InfestorTerran", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto5FA6D1E6_u = UnitGroupCount(auto5FA6D1E6_g, c_unitCountAll);
        for (;; auto5FA6D1E6_u -= 1) {
            auto5FA6D1E6_var = UnitGroupUnitFromEnd(auto5FA6D1E6_g, auto5FA6D1E6_u);
            if (auto5FA6D1E6_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto5FA6D1E6_var, "InfestedTerranSCMR", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        autoC7A7348C_g = UnitGroup("InfestedTerranCampaignBurrowed", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoC7A7348C_u = UnitGroupCount(autoC7A7348C_g, c_unitCountAll);
        for (;; autoC7A7348C_u -= 1) {
            autoC7A7348C_var = UnitGroupUnitFromEnd(autoC7A7348C_g, autoC7A7348C_u);
            if (autoC7A7348C_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoC7A7348C_var, "InfestedTerranSCMRBurrowed", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto42AEF4EF_g = UnitGroup("InfestorTerranBurrowed", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto42AEF4EF_u = UnitGroupCount(auto42AEF4EF_g, c_unitCountAll);
        for (;; auto42AEF4EF_u -= 1) {
            auto42AEF4EF_var = UnitGroupUnitFromEnd(auto42AEF4EF_g, auto42AEF4EF_u);
            if (auto42AEF4EF_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto42AEF4EF_var, "InfestedTerranSCMRBurrowed", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto55D7FA53_g = UnitGroup("WarpPrism", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto55D7FA53_u = UnitGroupCount(auto55D7FA53_g, c_unitCountAll);
        for (;; auto55D7FA53_u -= 1) {
            auto55D7FA53_var = UnitGroupUnitFromEnd(auto55D7FA53_g, auto55D7FA53_u);
            if (auto55D7FA53_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto55D7FA53_var, "Shuttle", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        autoB7046AA8_g = UnitGroup("Stalker", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoB7046AA8_u = UnitGroupCount(autoB7046AA8_g, c_unitCountAll);
        for (;; autoB7046AA8_u -= 1) {
            autoB7046AA8_var = UnitGroupUnitFromEnd(autoB7046AA8_g, autoB7046AA8_u);
            if (autoB7046AA8_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoB7046AA8_var, "Dragoon", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto9BFB9BD6_g = UnitGroup("Infestor", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto9BFB9BD6_u = UnitGroupCount(auto9BFB9BD6_g, c_unitCountAll);
        for (;; auto9BFB9BD6_u -= 1) {
            auto9BFB9BD6_var = UnitGroupUnitFromEnd(auto9BFB9BD6_g, auto9BFB9BD6_u);
            if (auto9BFB9BD6_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto9BFB9BD6_var, "DefilerMP", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto15A6631F_g = UnitGroup("InfestorBurrowed", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto15A6631F_u = UnitGroupCount(auto15A6631F_g, c_unitCountAll);
        for (;; auto15A6631F_u -= 1) {
            auto15A6631F_var = UnitGroupUnitFromEnd(auto15A6631F_g, auto15A6631F_u);
            if (auto15A6631F_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto15A6631F_var, "DefilerMPBurrowed", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto6C3417A3_g = UnitGroup("PrimalSunkenColony", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto6C3417A3_u = UnitGroupCount(auto6C3417A3_g, c_unitCountAll);
        for (;; auto6C3417A3_u -= 1) {
            auto6C3417A3_var = UnitGroupUnitFromEnd(auto6C3417A3_g, auto6C3417A3_u);
            if (auto6C3417A3_var == null) { break; }
            libNtve_gf_ReplaceUnit(auto6C3417A3_var, "SunkenColony", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
    }

    if ((lp_episode != 8)) {
        lv_i = 1;
        for ( ; ( (auto4ADDEBCD_ai >= 0 && lv_i <= auto4ADDEBCD_ae) || (auto4ADDEBCD_ai < 0 && lv_i >= auto4ADDEBCD_ae) ) ; lv_i += auto4ADDEBCD_ai ) {
            TechTreeUnitAllow(lv_i, "Marauder", false);
            TechTreeUnitAllow(lv_i, "Reaper", false);
            TechTreeUnitAllow(lv_i, "Hellion", false);
            TechTreeUnitAllow(lv_i, "HellionTank", false);
            TechTreeUnitAllow(lv_i, "Diamondback", false);
            TechTreeUnitAllow(lv_i, "Predator", false);
            TechTreeUnitAllow(lv_i, "Banshee", false);
            TechTreeUnitAllow(lv_i, "VikingAssault", false);
            TechTreeUnitAllow(lv_i, "VikingFighter", false);
            TechTreeUnitAllow(lv_i, "Raven", false);
            TechTreeUnitAllow(lv_i, "WidowMine", false);
            TechTreeUnitAllow(lv_i, "WarHound", false);
            TechTreeUnitAllow(lv_i, "ThorAP", false);
            TechTreeUnitAllow(lv_i, "LiberatorSkinPreview", false);
            TechTreeUnitAllow(lv_i, "MercCompound", false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("TerranBuild", 12), false);
            TechTreeUnitAllow(lv_i, "PerditionTurret", false);
            TechTreeUnitAllow(lv_i, "SensorTower", false);
            TechTreeUnitAllow(lv_i, "Phoenix", false);
            TechTreeUnitAllow(lv_i, "VoidRay", false);
            TechTreeUnitAllow(lv_i, "VoidRayShakuras", false);
            TechTreeUnitAllow(lv_i, "VoidRayTaldarim", false);
            TechTreeUnitAllow(lv_i, "VoidRayAiur", false);
            TechTreeUnitAllow(lv_i, "StalkerShakuras", false);
            TechTreeUnitAllow(lv_i, "Stalker", false);
            TechTreeUnitAllow(lv_i, "StalkerShakurasHallucination", false);
            TechTreeUnitAllow(lv_i, "StalkerShakurasACGluescreenDummy", false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("ProtossBuild", 21), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("GatewayTrain", 5), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("RoboticsFacilityTrain", 4), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("StargateTrain", 1), false);
            TechTreeUnitAllow(lv_i, "Immortal", false);
            TechTreeUnitAllow(lv_i, "ImmortalShakuras", false);
            TechTreeUnitAllow(lv_i, "ImmortalTaldarim", false);
            TechTreeUnitAllow(lv_i, "Oracle", false);
            TechTreeUnitAllow(lv_i, "Tempest", false);
            TechTreeUnitAllow(lv_i, "CarrierAiur", false);
            TechTreeUnitAllow(lv_i, "CarrierTaldarim", false);
            TechTreeUnitAllow(lv_i, "Mothership", false);
            TechTreeUnitAllow(lv_i, "MothershipCore", false);
            TechTreeUnitAllow(lv_i, "Disruptor", false);
            TechTreeUnitAllow(lv_i, "Adept", false);
            TechTreeUnitAllow(lv_i, "ShieldBatteryNerazim", false);
            TechTreeUnitAllow(lv_i, "WarpPrism", false);
            TechTreeUnitAllow(lv_i, "WarpPrismPhasing", false);
            TechTreeUnitAllow(lv_i, "Sentry", false);
            TechTreeUnitAllow(lv_i, "SentryAiur", false);
            TechTreeUnitAllow(lv_i, "Monitor", false);
            TechTreeUnitAllow(lv_i, "Colossus", false);
            TechTreeUnitAllow(lv_i, "ColossusTaldarim", false);
            TechTreeUnitAllow(lv_i, "DarkShrine", false);
            TechTreeUnitAllow(lv_i, "KhaydarinMonolith", false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("LarvaTrain", 9), false);
            TechTreeUnitAllow(lv_i, "Queen", false);
            TechTreeUnitAllow(lv_i, "Roach", false);
            TechTreeUnitAllow(lv_i, "Ravager", false);
            TechTreeUnitAllow(lv_i, "Baneling", false);
            TechTreeUnitAllow(lv_i, "BanelingNest", false);
            TechTreeUnitAllow(lv_i, "InfestedAbomination", false);
            TechTreeUnitAllow(lv_i, "Brutalisk", false);
            TechTreeUnitAllow(lv_i, "Infestor", false);
            TechTreeUnitAllow(lv_i, "BroodLord", false);
            TechTreeUnitAllow(lv_i, "Corruptor", false);
            TechTreeUnitAllow(lv_i, "SpineCrawler", false);
            TechTreeUnitAllow(lv_i, "Overseer", false);
            TechTreeUnitAllow(lv_i, "Viper", false);
            TechTreeUnitAllow(lv_i, "SwarmHostMP", false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(lv_i, AbilityCommand("MorphToOverseer", 0), false);
        }
    }

    auto73375C26_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto73375C26_var = -1;
    while (true) {
        auto73375C26_var = PlayerGroupNextPlayer(auto73375C26_g, auto73375C26_var);
        if (auto73375C26_var < 0) { break; }
        PlayerModifyPropertyInt(auto73375C26_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
        PlayerModifyPropertyInt(auto73375C26_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
    }
    if ((lp_episode == 1) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap <= 3)) {
        PlayerSetConsoleSkin(1, "ConsoleTerran_Classic");
    }
    else {
        if ((lp_episode == 1) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap >= 4)) {
            PlayerSetConsoleSkin(1, "ConsoleTerran_Swann");
        }
        else {
            if ((lp_episode == 5) && (lib9770F675_gv_optionsConsole == 3)) {
                PlayerSetConsoleSkin(1, "ConsoleTerran_CovertOps");
            }
            else {
                if ((lib9770F675_gv_optionsConsole == 2) && ((lp_episode == 1) || (lp_episode == 5))) {
                    PlayerSetConsoleSkin(1, "ConsoleTerran_Classic");
                }

            }
        }
    }
    if ((lp_episode == 2) && (lib9770F675_gv_optionsConsole == 3)) {
        PlayerSetConsoleSkin(1, "ConsoleZerg_Abathur");
    }
    else {
        if ((lp_episode == 6) && (lib9770F675_gv_optionsConsole == 3)) {
            PlayerSetConsoleSkin(1, "ConsoleZerg_Dehaka");
        }
        else {
            if ((lib9770F675_gv_optionsConsole == 2) && ((lp_episode == 2) || (lp_episode == 6))) {
                PlayerSetConsoleSkin(1, "ConsoleZerg_Classic");
            }

        }
    }
    if ((lp_episode == 3) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap <= 4)) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Fenix");
    }
    else {
        if ((lp_episode == 3) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap >= 5)) {
            PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
        }
        else {
            if ((lp_episode == 4) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap == 1)) {
                PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
            }
            else {
                if ((lp_episode == 4) && (lib9770F675_gv_optionsConsole == 3) && (lib9770F675_gv_consoleSkinMap >= 2)) {
                    PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
                }
                else {
                    if ((lib9770F675_gv_optionsConsole == 2) && ((lp_episode == 3) || (lp_episode == 4))) {
                        PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
                    }

                }
            }
        }
    }
    if ((lp_episode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 2) && (lib9770F675_gv_optionsConsole == 3)) {
        PlayerSetConsoleSkin(1, "ConsoleTerran_Swann");
    }
    else {
        if ((lp_episode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 4) && (lib9770F675_gv_optionsConsole == 3)) {
            PlayerSetConsoleSkin(1, "ConsoleTerran_Default");
        }
        else {
            if ((lp_episode == 7) && (lib9770F675_gv_optionsConsole == 2) && ((lib9770F675_gv_iniEpisode_StukovSeries == 2) || (lib9770F675_gv_iniEpisode_StukovSeries == 4))) {
                PlayerSetConsoleSkin(1, "ConsoleTerran_Classic");
            }

        }
    }
    if ((lp_episode == 7) && (lib9770F675_gv_optionsConsole == 3) && ((lib9770F675_gv_iniEpisode_StukovSeries == 1) || (lib9770F675_gv_iniEpisode_StukovSeries == 3) || (lib9770F675_gv_iniEpisode_StukovSeries == 5))) {
        PlayerSetConsoleSkin(1, "ConsoleZerg_Abathur");
    }
    else {
        if ((lp_episode == 7) && (lib9770F675_gv_optionsConsole == 2) && ((lib9770F675_gv_iniEpisode_StukovSeries == 1) || (lib9770F675_gv_iniEpisode_StukovSeries == 3) || (lib9770F675_gv_iniEpisode_StukovSeries == 5))) {
            PlayerSetConsoleSkin(1, "ConsoleZerg_Classic");
        }

    }
    TriggerExecute(lib9770F675_gt_iniEpisode, false, true);
}

void lib9770F675_gf_FactionModelTerran (int lp_player, bool lp_sOK, bool lp_uED, bool lp_retro) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_sOK == true) && (lib9770F675_gv_optionsSOKModels == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORaynor", BoolToInt(lib9770F675_gv_models.lv_raynor));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMengsk", BoolToInt(lib9770F675_gv_models.lv_mengsk));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOKerrigan", BoolToInt(lib9770F675_gv_models.lv_kerrigan));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOVulture", BoolToInt(lib9770F675_gv_models.lv_vulture));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOKSkins", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOKSkinsBuildings", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAdjutant", BoolToInt(lib9770F675_gv_models.lv_adjutant));
        lib9770F675_gf_FactionModelFlyingTerranStructureSkinFix(1, lp_player);
    }
    else {
        if ((lp_uED == true) && (lib9770F675_gv_optionsUEDModels == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORaynor", BoolToInt(lib9770F675_gv_models.lv_raynor));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMengsk", BoolToInt(lib9770F675_gv_models.lv_mengsk));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOKerrigan", BoolToInt(lib9770F675_gv_models.lv_kerrigan));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "UEDSkins", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "UEDSkinsBuildingsSCMR", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BLDAdjutantUED", 1);
            lib9770F675_gf_FactionModelFlyingTerranStructureSkinFix(2, lp_player);
        }
        else {
            lib9770F675_gf_FactionModelFlyingTerranStructureSkinFix(3, lp_player);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAdjutant", BoolToInt(lib9770F675_gv_models.lv_adjutant));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORaynor", BoolToInt(lib9770F675_gv_models.lv_raynor));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMengsk", BoolToInt(lib9770F675_gv_models.lv_mengsk));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOKerrigan", BoolToInt(lib9770F675_gv_models.lv_kerrigan));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSCV", BoolToInt(lib9770F675_gv_models.lv_sCV));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMarine", BoolToInt(lib9770F675_gv_models.lv_marine));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFirebat", BoolToInt(lib9770F675_gv_models.lv_firebat));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMedic", BoolToInt(lib9770F675_gv_models.lv_medic));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGhost", BoolToInt(lib9770F675_gv_models.lv_ghost));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOVulture", BoolToInt(lib9770F675_gv_models.lv_vulture));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSiegeTank", BoolToInt(lib9770F675_gv_models.lv_siegeTank));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGoliath", BoolToInt(lib9770F675_gv_models.lv_goliath));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOWraith", BoolToInt(lib9770F675_gv_models.lv_wraith));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScienceVessel", BoolToInt(lib9770F675_gv_models.lv_scienceVessel));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBattlecruiser", BoolToInt(lib9770F675_gv_models.lv_battlecruiser));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCommandCenter", BoolToInt(lib9770F675_gv_models.lv_commandCenter));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsT", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORefinery", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupplyDepot", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBarracks", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEngineeringBay", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBunker", BoolToInt(lib9770F675_gv_models.lv_bunker));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAcademy", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMissileTurret", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFactory", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStarport", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArmory", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsT));
        }
    }
}

void lib9770F675_gf_FactionModelZerg (int lp_player, bool lp_overmind, bool lp_renegade, bool lp_retro) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_overmind == true) && (lib9770F675_gv_optionsOvermindModels == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOvermind", BoolToInt(lib9770F675_gv_models.lv_overmind));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCerebrate", BoolToInt(lib9770F675_gv_models.lv_cerebrate));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedKerrigan", BoolToInt(lib9770F675_gv_models.lv_infestedKerrigan));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", BoolToInt(lib9770F675_gv_models.lv_infestedTerran));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsZ", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOExtractor", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSunkenColony", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSporeColony", BoolToInt(lib9770F675_gv_models.lv_sporeColony));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltraliskCavern", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSpire", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONydusCanal", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEvolutionChamber", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "OvermindSkins", 1);
    }
    else {
        if ((lp_renegade == true) && (lib9770F675_gv_optionsCerebrateModels == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOvermind", BoolToInt(lib9770F675_gv_models.lv_overmind));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCerebrate", BoolToInt(lib9770F675_gv_models.lv_cerebrate));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedKerrigan", BoolToInt(lib9770F675_gv_models.lv_infestedKerrigan));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", BoolToInt(lib9770F675_gv_models.lv_infestedTerran));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsZ", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOExtractor", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSunkenColony", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSporeColony", BoolToInt(lib9770F675_gv_models.lv_sporeColony));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltraliskCavern", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSpire", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONydusCanal", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEvolutionChamber", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CerebrateSkins", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOvermind", BoolToInt(lib9770F675_gv_models.lv_overmind));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCerebrate", BoolToInt(lib9770F675_gv_models.lv_cerebrate));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedKerrigan", BoolToInt(lib9770F675_gv_models.lv_infestedKerrigan));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODrone", BoolToInt(lib9770F675_gv_models.lv_drone));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOverlord", BoolToInt(lib9770F675_gv_models.lv_overlord));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZergling", BoolToInt(lib9770F675_gv_models.lv_zergling));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHydralisk", BoolToInt(lib9770F675_gv_models.lv_hydralisk));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOLurker", BoolToInt(lib9770F675_gv_models.lv_lurker));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODefiler", BoolToInt(lib9770F675_gv_models.lv_defiler));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", BoolToInt(lib9770F675_gv_models.lv_infestedTerran));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltralisk", BoolToInt(lib9770F675_gv_models.lv_ultralisk));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOQueen", BoolToInt(lib9770F675_gv_models.lv_queen));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMutalisk", BoolToInt(lib9770F675_gv_models.lv_mutalisk));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGuardian", BoolToInt(lib9770F675_gv_models.lv_guardian));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODevourer", BoolToInt(lib9770F675_gv_models.lv_devourer));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHatchery", BoolToInt(lib9770F675_gv_models.lv_hatchery));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsZ", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOExtractor", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSunkenColony", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSporeColony", BoolToInt(lib9770F675_gv_models.lv_sporeColony));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltraliskCavern", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSpire", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONydusCanal", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEvolutionChamber", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsZ));
        }
    }
}

void lib9770F675_gf_FactionModelProtoss (int lp_player, bool lp_khalai, bool lp_nerazim, bool lp_retro) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_khalai == true) && (lib9770F675_gv_optionsKhalaiModels == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArtanis", BoolToInt(lib9770F675_gv_models.lv_artanis));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZeratul", BoolToInt(lib9770F675_gv_models.lv_zeratul));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOReaver", BoolToInt(lib9770F675_gv_models.lv_reaver));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsP", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAssimilator", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGateway", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOForge", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCyberneticsCore", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOShieldBattery", BoolToInt(lib9770F675_gv_models.lv_shieldBattery));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPhotonCannon", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCitadelOfAdun", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStargate", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORoboticsFacility", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupportBay", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFleetBeacon", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KhalaiSkins", 1);
    }
    else {
        if ((lp_nerazim == true) && (lib9770F675_gv_optionsNerazimModels == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArtanis", BoolToInt(lib9770F675_gv_models.lv_artanis));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZeratul", BoolToInt(lib9770F675_gv_models.lv_zeratul));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCorsair", BoolToInt(lib9770F675_gv_models.lv_corsair));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NerazimSkins", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NerazimSkinsBuildings", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BLDRaszagal", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArtanis", BoolToInt(lib9770F675_gv_models.lv_artanis));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZeratul", BoolToInt(lib9770F675_gv_models.lv_zeratul));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOProbe", BoolToInt(lib9770F675_gv_models.lv_probe));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZealot", BoolToInt(lib9770F675_gv_models.lv_zealot));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODragoon", BoolToInt(lib9770F675_gv_models.lv_dragoon));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHighTemplar", BoolToInt(lib9770F675_gv_models.lv_highTemplar));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkTemplar", BoolToInt(lib9770F675_gv_models.lv_darkTemplar));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArchon", BoolToInt(lib9770F675_gv_models.lv_archon));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkArchon", BoolToInt(lib9770F675_gv_models.lv_darkArchon));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOReaver", BoolToInt(lib9770F675_gv_models.lv_reaver));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOObserver", BoolToInt(lib9770F675_gv_models.lv_observer));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScout", BoolToInt(lib9770F675_gv_models.lv_scout));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCorsair", BoolToInt(lib9770F675_gv_models.lv_corsair));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCarrier", BoolToInt(lib9770F675_gv_models.lv_carrier));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArbiter", BoolToInt(lib9770F675_gv_models.lv_arbiter));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONexus", BoolToInt(lib9770F675_gv_models.lv_nexus));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsP", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAssimilator", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPylon", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGateway", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOForge", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCyberneticsCore", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOShieldBattery", BoolToInt(lib9770F675_gv_models.lv_shieldBattery));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPhotonCannon", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCitadelOfAdun", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStargate", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORoboticsFacility", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupportBay", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFleetBeacon", BoolToInt(lib9770F675_gv_models.lv_otherBuildingsP));
        }
    }
}

void lib9770F675_gf_FactionModelFlyingTerranStructureSkinFix (int lp_skin, int lp_player) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto0C6ED169_g;
    int auto0C6ED169_u;
    unit auto0C6ED169_var;
    unitgroup auto301B631F_g;
    int auto301B631F_u;
    unit auto301B631F_var;
    unitgroup auto9CDB5CDF_g;
    int auto9CDB5CDF_u;
    unit auto9CDB5CDF_var;
    unitgroup autoD8B56731_g;
    int autoD8B56731_u;
    unit autoD8B56731_var;
    unitgroup autoF4AD6614_g;
    int autoF4AD6614_u;
    unit autoF4AD6614_var;
    unitgroup auto43756389_g;
    int auto43756389_u;
    unit auto43756389_var;
    unitgroup auto3598765B_g;
    int auto3598765B_u;
    unit auto3598765B_var;
    unitgroup autoFB6751E8_g;
    int autoFB6751E8_u;
    unit autoFB6751E8_var;
    unitgroup auto80293EB7_g;
    int auto80293EB7_u;
    unit auto80293EB7_var;
    unitgroup autoEAA4EE02_g;
    int autoEAA4EE02_u;
    unit autoEAA4EE02_var;
    unitgroup auto303DB7C9_g;
    int auto303DB7C9_u;
    unit auto303DB7C9_var;
    unitgroup autoB85BDD68_g;
    int autoB85BDD68_u;
    unit autoB85BDD68_var;
    unitgroup auto7691A84B_g;
    int auto7691A84B_u;
    unit auto7691A84B_var;
    unitgroup autoA1EBEF50_g;
    int autoA1EBEF50_u;
    unit autoA1EBEF50_var;
    unitgroup autoBB3A6440_g;
    int autoBB3A6440_u;
    unit autoBB3A6440_var;
    unitgroup auto554CE7B1_g;
    int auto554CE7B1_u;
    unit auto554CE7B1_var;

    // Variable Initialization

    // Implementation
    if ((lp_skin == 1)) {
        auto0C6ED169_g = UnitGroup("CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0C6ED169_u = UnitGroupCount(auto0C6ED169_g, c_unitCountAll);
        for (;; auto0C6ED169_u -= 1) {
            auto0C6ED169_var = UnitGroupUnitFromEnd(auto0C6ED169_g, auto0C6ED169_u);
            if (auto0C6ED169_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto0C6ED169_var, "ModelSwap SOKCommandCenter 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto0C6ED169_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        auto301B631F_g = UnitGroup("BarracksFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto301B631F_u = UnitGroupCount(auto301B631F_g, c_unitCountAll);
        for (;; auto301B631F_u -= 1) {
            auto301B631F_var = UnitGroupUnitFromEnd(auto301B631F_g, auto301B631F_u);
            if (auto301B631F_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto301B631F_var, "ModelSwap SOKBarracks 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto301B631F_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        auto9CDB5CDF_g = UnitGroup("EngineeringBayFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9CDB5CDF_u = UnitGroupCount(auto9CDB5CDF_g, c_unitCountAll);
        for (;; auto9CDB5CDF_u -= 1) {
            auto9CDB5CDF_var = UnitGroupUnitFromEnd(auto9CDB5CDF_g, auto9CDB5CDF_u);
            if (auto9CDB5CDF_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto9CDB5CDF_var, "ModelSwap SOKEngineeringBay 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto9CDB5CDF_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        autoD8B56731_g = UnitGroup("FactoryFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD8B56731_u = UnitGroupCount(autoD8B56731_g, c_unitCountAll);
        for (;; autoD8B56731_u -= 1) {
            autoD8B56731_var = UnitGroupUnitFromEnd(autoD8B56731_g, autoD8B56731_u);
            if (autoD8B56731_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoD8B56731_var, "ModelSwap SOKFactory 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(autoD8B56731_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        autoF4AD6614_g = UnitGroup("StarportFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF4AD6614_u = UnitGroupCount(autoF4AD6614_g, c_unitCountAll);
        for (;; autoF4AD6614_u -= 1) {
            autoF4AD6614_var = UnitGroupUnitFromEnd(autoF4AD6614_g, autoF4AD6614_u);
            if (autoF4AD6614_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoF4AD6614_var, "ModelSwap SOKStarport 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(autoF4AD6614_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
    }

    if ((lp_skin == 2)) {
        auto43756389_g = UnitGroup("CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto43756389_u = UnitGroupCount(auto43756389_g, c_unitCountAll);
        for (;; auto43756389_u -= 1) {
            auto43756389_var = UnitGroupUnitFromEnd(auto43756389_g, auto43756389_u);
            if (auto43756389_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto43756389_var, "ModelSwap UEDCommandCenter 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto43756389_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        auto3598765B_g = UnitGroup("BarracksFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3598765B_u = UnitGroupCount(auto3598765B_g, c_unitCountAll);
        for (;; auto3598765B_u -= 1) {
            auto3598765B_var = UnitGroupUnitFromEnd(auto3598765B_g, auto3598765B_u);
            if (auto3598765B_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto3598765B_var, "ModelSwap UEDBarracks 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto3598765B_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        autoFB6751E8_g = UnitGroup("EngineeringBayFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFB6751E8_u = UnitGroupCount(autoFB6751E8_g, c_unitCountAll);
        for (;; autoFB6751E8_u -= 1) {
            autoFB6751E8_var = UnitGroupUnitFromEnd(autoFB6751E8_g, autoFB6751E8_u);
            if (autoFB6751E8_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoFB6751E8_var, "ModelSwap UEDEngineeringBay 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(autoFB6751E8_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        auto80293EB7_g = UnitGroup("FactoryFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto80293EB7_u = UnitGroupCount(auto80293EB7_g, c_unitCountAll);
        for (;; auto80293EB7_u -= 1) {
            auto80293EB7_var = UnitGroupUnitFromEnd(auto80293EB7_g, auto80293EB7_u);
            if (auto80293EB7_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto80293EB7_var, "ModelSwap UEDFactory 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto80293EB7_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        autoEAA4EE02_g = UnitGroup("StarportFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEAA4EE02_u = UnitGroupCount(autoEAA4EE02_g, c_unitCountAll);
        for (;; autoEAA4EE02_u -= 1) {
            autoEAA4EE02_var = UnitGroupUnitFromEnd(autoEAA4EE02_g, autoEAA4EE02_u);
            if (autoEAA4EE02_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoEAA4EE02_var, "ModelSwap UEDStarport 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(autoEAA4EE02_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
        auto303DB7C9_g = UnitGroup("ScienceFacilityFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto303DB7C9_u = UnitGroupCount(auto303DB7C9_g, c_unitCountAll);
        for (;; auto303DB7C9_u -= 1) {
            auto303DB7C9_var = UnitGroupUnitFromEnd(auto303DB7C9_g, auto303DB7C9_u);
            if (auto303DB7C9_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto303DB7C9_var, "ModelSwap UEDScienceFacility 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
            libNtve_gf_SendActorMessageToUnit(auto303DB7C9_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
        }
    }

    if ((lp_skin == 3)) {
        if ((TechTreeUpgradeCount(lp_player, "BWMOAdjutant", c_techCountQueuedOrBetter) == 1)) {
            autoB85BDD68_g = UnitGroup("CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB85BDD68_u = UnitGroupCount(autoB85BDD68_g, c_unitCountAll);
            for (;; autoB85BDD68_u -= 1) {
                autoB85BDD68_var = UnitGroupUnitFromEnd(autoB85BDD68_g, autoB85BDD68_u);
                if (autoB85BDD68_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoB85BDD68_var, "ModelSwap SC1CommandCenter 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
                libNtve_gf_SendActorMessageToUnit(autoB85BDD68_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
            }
        }

        if ((TechTreeUpgradeCount(lp_player, "BWMOBarracks", c_techCountQueuedOrBetter) == 1)) {
            auto7691A84B_g = UnitGroup("BarracksFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7691A84B_u = UnitGroupCount(auto7691A84B_g, c_unitCountAll);
            for (;; auto7691A84B_u -= 1) {
                auto7691A84B_var = UnitGroupUnitFromEnd(auto7691A84B_g, auto7691A84B_u);
                if (auto7691A84B_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto7691A84B_var, "ModelSwap SC1Barracks 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
                libNtve_gf_SendActorMessageToUnit(auto7691A84B_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
            }
        }

        if ((TechTreeUpgradeCount(lp_player, "BWMOEngineeringBay", c_techCountQueuedOrBetter) == 1)) {
            autoA1EBEF50_g = UnitGroup("EngineeringBayFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA1EBEF50_u = UnitGroupCount(autoA1EBEF50_g, c_unitCountAll);
            for (;; autoA1EBEF50_u -= 1) {
                autoA1EBEF50_var = UnitGroupUnitFromEnd(autoA1EBEF50_g, autoA1EBEF50_u);
                if (autoA1EBEF50_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoA1EBEF50_var, "ModelSwap SC1EngineeringBay 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
                libNtve_gf_SendActorMessageToUnit(autoA1EBEF50_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
            }
        }

        if ((TechTreeUpgradeCount(lp_player, "BWMOFactory", c_techCountQueuedOrBetter) == 1)) {
            autoBB3A6440_g = UnitGroup("FactoryFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBB3A6440_u = UnitGroupCount(autoBB3A6440_g, c_unitCountAll);
            for (;; autoBB3A6440_u -= 1) {
                autoBB3A6440_var = UnitGroupUnitFromEnd(autoBB3A6440_g, autoBB3A6440_u);
                if (autoBB3A6440_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoBB3A6440_var, "ModelSwap SC1Factory 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
                libNtve_gf_SendActorMessageToUnit(autoBB3A6440_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
            }
        }

        if ((TechTreeUpgradeCount(lp_player, "BWMOStarport", c_techCountQueuedOrBetter) == 1)) {
            auto554CE7B1_g = UnitGroup("StarportFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto554CE7B1_u = UnitGroupCount(auto554CE7B1_g, c_unitCountAll);
            for (;; auto554CE7B1_u -= 1) {
                auto554CE7B1_var = UnitGroupUnitFromEnd(auto554CE7B1_g, auto554CE7B1_u);
                if (auto554CE7B1_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto554CE7B1_var, "ModelSwap SC1Starport 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
                libNtve_gf_SendActorMessageToUnit(auto554CE7B1_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
            }
        }

    }

}

void lib9770F675_gf_BriefingSetup (bool lp_difficultyLevels, bool lp_briefingMusic) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    DialogCreate(2134, 1200, c_anchorCenter, 0, 0, false);
    lib9770F675_gv_background = DialogLastCreated();
    lib9770F675_gf_MRMusicSetup();
    if ((lp_briefingMusic == true)) {
        TriggerExecute(lib9770F675_gt_BriefingMusic, true, false);
    }

    libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 100, 100, DialogGetAnchor(lib9770F675_gv_background), 0, 0, StringToText(""), lib9770F675_gv_backgroundImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetChannel(lib9770F675_gv_background, 3);
    DialogSetVisible(lib9770F675_gv_background, PlayerGroupAll(), true);
    if (((lib9770F675_gv_iniEpisode == 0) || (lib9770F675_gv_iniEpisode == 1) || (lib9770F675_gv_iniEpisode == 5) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 2)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 4)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 1)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 4)))) {
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 494, 725, c_anchorCenter, 592, 237, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_briefingAnimation = DialogControlLastCreated();
        TriggerExecute(lib9770F675_gt_BriefAnimation, true, false);
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 490, 720, c_anchorCenter, 558, 236, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib9770F675_gv_briefingAnimationButton = DialogControlLastCreated();
        DialogControlSetFullDialog(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImageType(lib9770F675_gv_briefingAnimationButton, c_triggerImageTypeNormal, PlayerGroupAll());
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.0, 75.0);
        TriggerExecute(lib9770F675_gt_BriefAnimationButton, true, false);
    }
    else {
        if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 291, 281, c_anchorCenter, 30, 345, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_briefingAnimation = DialogControlLastCreated();
            TriggerExecute(lib9770F675_gt_BriefAnimation, true, false);
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 561, 719, c_anchorCenter, 522, 240, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lib9770F675_gv_briefingAnimationButton = DialogControlLastCreated();
            DialogControlSetFullDialog(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemImageType(lib9770F675_gv_briefingAnimationButton, c_triggerImageTypeNormal, PlayerGroupAll());
            DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.0, 75.0);
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 561, 719, c_anchorCenter, 522, 240, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lib9770F675_gv_briefingAnimationButton2 = DialogControlLastCreated();
            DialogControlSetFullDialog(lib9770F675_gv_briefingAnimationButton2, PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemImageType(lib9770F675_gv_briefingAnimationButton2, c_triggerImageTypeNormal, PlayerGroupAll());
            DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton2, PlayerGroupAll(), 0.0, 75.0);
            TriggerExecute(lib9770F675_gt_BriefAnimationButton, true, false);
        }
        else {
            if (((lib9770F675_gv_iniEpisode == 3) || (lib9770F675_gv_iniEpisode == 4) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 2)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 6)))) {
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 400, 150, c_anchorCenter, 510, 490, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), false);
                lib9770F675_gv_briefingAnimation = DialogControlLastCreated();
                TriggerExecute(lib9770F675_gt_BriefAnimation, true, false);
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 400, 446, c_anchorCenter, 509, 191, StringToText(""), "Images\\transparent.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                lib9770F675_gv_briefingAnimationButton = DialogControlLastCreated();
                DialogControlSetFullDialog(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemImageType(lib9770F675_gv_briefingAnimationButton, c_triggerImageTypeNormal, PlayerGroupAll());
                DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.0, 75.0);
                TriggerExecute(lib9770F675_gt_BriefAnimationButton, true, false);
            }

        }
    }
    DialogControlCreateFromTemplate(lib9770F675_gv_background, c_triggerControlTypePanel, "SCMRBrief/BriefingPanel");
    lib9770F675_gv_briefingTemplate = DialogControlLastCreated();
    DialogControlSetVisible(lib9770F675_gv_briefingTemplate, PlayerGroupAll(), false);
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "p1terr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "PortraitPanel");
    lib9770F675_gv_briefingPortrait1 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePortrait, "PortraitTemp");
    lib9770F675_gv_portrait1 = PortraitGetTriggerControl(DialogControlLastCreated());
    PortraitSetModel(lib9770F675_gv_portrait1, "StaticPortrait", true);
    PortraitSetTintColor(lib9770F675_gv_portrait1, Color(75.29, 75.29, 75.29));
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "p2terr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "PortraitPanel");
    lib9770F675_gv_briefingPortrait2 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePortrait, "PortraitTemp");
    lib9770F675_gv_portrait2 = PortraitGetTriggerControl(DialogControlLastCreated());
    PortraitSetModel(lib9770F675_gv_portrait2, "StaticPortrait", true);
    PortraitSetTintColor(lib9770F675_gv_portrait2, Color(75.29, 75.29, 75.29));
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "p3terr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "PortraitPanel");
    lib9770F675_gv_briefingPortrait3 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePortrait, "PortraitTemp");
    lib9770F675_gv_portrait3 = PortraitGetTriggerControl(DialogControlLastCreated());
    PortraitSetModel(lib9770F675_gv_portrait3, "StaticPortrait", true);
    PortraitSetTintColor(lib9770F675_gv_portrait3, Color(75.29, 75.29, 75.29));
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "p4terr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "PortraitPanel");
    lib9770F675_gv_briefingPortrait4 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePortrait, "PortraitTemp");
    lib9770F675_gv_portrait4 = PortraitGetTriggerControl(DialogControlLastCreated());
    PortraitSetModel(lib9770F675_gv_portrait4, "StaticPortrait", true);
    PortraitSetTintColor(lib9770F675_gv_portrait4, Color(75.29, 75.29, 75.29));
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "p1terr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "TextDisplay");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "TitleLabel");
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
    lib9770F675_gv_briefingTextDisplay = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "ObjectivesDisplay");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "TitleLabel");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "MRBriefObjectiveTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_dObjectives, PlayerGroupAll());
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "ObjectivesDisplay");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "SubtitleLabel");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    lib9770F675_gv_objectivesDisplay = DialogControlLastCreated();
    if ((lp_difficultyLevels == true)) {
        DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "butterr");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "image2");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "butterr");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePulldown, "StandardPulldownTemplate");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        lib9770F675_gv_difficultySelection = DialogControlLastCreated();
        if ((lib9770F675_gv_iniEpisode == 1)) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__1epEasy);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__1epMedium);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__1epHard);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
            if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__1epBrutal);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
            }

        }
        else {
            if ((lib9770F675_gv_iniEpisode == 2)) {
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__2epEasy);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__2epMedium);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__2epHard);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__2epBrutal);
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                }

            }
            else {
                if ((lib9770F675_gv_iniEpisode == 3)) {
                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__3epEasy);
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__3epMedium);
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__3epHard);
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                    if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__3epBrutal);
                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                    }

                }
                else {
                    if ((lib9770F675_gv_iniEpisode == 4)) {
                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__4epEasy);
                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__4epMedium);
                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__4epHard);
                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                        if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__4epBrutal);
                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                        }

                    }
                    else {
                        if ((lib9770F675_gv_iniEpisode == 5)) {
                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__5epEasy);
                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__5epMedium);
                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__5epHard);
                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                            if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__5epBrutal);
                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                            }

                        }
                        else {
                            if ((lib9770F675_gv_iniEpisode == 6)) {
                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__6epEasy);
                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__6epMedium);
                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__6epHard);
                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__6epBrutal);
                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                }

                            }
                            else {
                                if ((lib9770F675_gv_iniEpisode == 0)) {
                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__0epEasy);
                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__0epMedium);
                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__0epHard);
                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                    if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__0epBrutal);
                                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                    }

                                }
                                else {
                                    if ((lib9770F675_gv_iniEpisode == 7)) {
                                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__7epEasy);
                                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__7epMedium);
                                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__7epHard);
                                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                        if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__7epBrutal);
                                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                        }

                                    }
                                    else {
                                        if ((lib9770F675_gv_iniEpisode == 8) && ((lib9770F675_gv_iniEpisode_EnslaversRedux == 1) || (lib9770F675_gv_iniEpisode_EnslaversRedux == 4))) {
                                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_1Easy);
                                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_1Medium);
                                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_1Hard);
                                            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                            if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_1Brutal);
                                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                            }

                                        }
                                        else {
                                            if ((lib9770F675_gv_iniEpisode == 8) && ((lib9770F675_gv_iniEpisode_EnslaversRedux == 2) || (lib9770F675_gv_iniEpisode_EnslaversRedux == 6))) {
                                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_2Easy);
                                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_2Medium);
                                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_2Hard);
                                                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_2Brutal);
                                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                }

                                            }
                                            else {
                                                if ((lib9770F675_gv_iniEpisode == 8) && ((lib9770F675_gv_iniEpisode_EnslaversRedux == 3) || (lib9770F675_gv_iniEpisode_EnslaversRedux == 5))) {
                                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_3Easy);
                                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_3Medium);
                                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_3Hard);
                                                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                    if ((lib9770F675_gv_optionsPsiEmitters == true)) {
                                                        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv__8ep_3Brutal);
                                                        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
                                                    }

                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), lib9770F675_gv_optionsDifficulty);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
        TriggerExecute(lib9770F675_gt_BriefDifficultySelection, false, false);
    }
    else {
        DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "butterr");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "image1");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "butterr");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "ReplayButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bReplay, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    lib9770F675_gv_btnReplay = DialogControlLastCreated();
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "pcancel");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "CancelButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bCancel, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    lib9770F675_gv_btnCancel = DialogControlLastCreated();
    DialogControlHookup(lib9770F675_gv_briefingTemplate, c_triggerControlTypePanel, "ObjectivesDisplay");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "SkipButton");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "SkipButton");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_BCAFB20B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lib9770F675_gv_briefing_Text_Color, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib9770F675_gv_btnSkip = DialogControlLastCreated();
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingTemplate, PlayerGroupAll(), "Show");
    lib9770F675_gf_BriefStaticAll();
    DialogControlSetVisible(lib9770F675_gv_briefingTemplate, PlayerGroupAll(), true);
    Wait(0.87, c_timeReal);
    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_background, 425, 375, c_anchorRight, 310, 200, StringToText(""), (lib9770F675_gv_iniStartButtonStyle + (lib9770F675_gv_sCMRCore.lv_bStart + StringExternal("Param/Value/lib_9770F675_475A3950"))), "Images\\transparent.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Images\\transparent.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    lib9770F675_gv_btnStart = DialogControlLastCreated();
    TriggerEnable(lib9770F675_gt_BriefScrollUpDown, true);
    TriggerExecute(lib9770F675_gv_iniTriggerBriefing, false, false);
}

void lib9770F675_gf_BriefStaticAll () {
    // Variable Declarations
    int lv_p1;
    int lv_p2;
    int lv_p3;
    int lv_p4;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p1 = c_invalidDialogControlId;
    lv_p2 = c_invalidDialogControlId;
    lv_p3 = c_invalidDialogControlId;
    lv_p4 = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lib9770F675_gv_briefingPortrait1, c_triggerControlTypePanel, "TransmissionStatic");
    lv_p1 = DialogControlLastCreated();
    DialogControlHookup(lib9770F675_gv_briefingPortrait2, c_triggerControlTypePanel, "TransmissionStatic");
    lv_p2 = DialogControlLastCreated();
    DialogControlHookup(lib9770F675_gv_briefingPortrait3, c_triggerControlTypePanel, "TransmissionStatic");
    lv_p3 = DialogControlLastCreated();
    DialogControlHookup(lib9770F675_gv_briefingPortrait4, c_triggerControlTypePanel, "TransmissionStatic");
    lv_p4 = DialogControlLastCreated();
    if ((lib9770F675_gv_optionsStatic == true)) {
        DialogControlSendAnimationEvent(lv_p1, PlayerGroupAll(), "ShimmerAnimate");
        DialogControlSendAnimationEvent(lv_p2, PlayerGroupAll(), "ShimmerAnimate");
        DialogControlSendAnimationEvent(lv_p3, PlayerGroupAll(), "ShimmerAnimate");
        DialogControlSendAnimationEvent(lv_p4, PlayerGroupAll(), "ShimmerAnimate");
    }
    else {
        DialogControlSetVisible(lv_p1, PlayerGroupAll(), false);
        DialogControlSetVisible(lv_p2, PlayerGroupAll(), false);
        DialogControlSetVisible(lv_p3, PlayerGroupAll(), false);
        DialogControlSetVisible(lv_p4, PlayerGroupAll(), false);
    }
}

void lib9770F675_gf_SCRBriefingSetup (bool lp_difficultyLevels, bool lp_briefingMusic) {
    // Automatic Variable Declarations
    // Deprecated
    TriggerExecute(lib9770F675_gv_iniTriggerBriefing, false, false);
}

void lib9770F675_gf_playTransmissionBriefingInterrupt2 (string lp_text, int lp_soundindex, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model, fixed lp_interrupt) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Deprecated
}

void lib9770F675_gf_playTransmissionBriefing2 (string lp_text, int lp_soundindex, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Deprecated
    if ((lp_text == "Terran00t|Line00007") && (lp_soundindex == 10)) {
        if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), lp_model, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_portraitActor, "Talk", null, null, null, SoundLengthSync(lv_sound), c_transmissionDurationAdd, false, c_maxPlayers, false);
        }
        else {
            SoundPlay(lv_sound, PlayerGroupAll(), 100.0, 0.0);
        }
    }
    else {
        lv_sound = SoundLink(ConversationDataGetSound(lp_text, true), c_soundIndexAny);
        if ((lv_trigger == lib9770F675_gt_EndBriefing)) {
            libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, 2.0, PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_74D028EB", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_74D028EB", "Text", SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_74D028EB"), PlayerGroupAll());
        }
        else {
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 297, 270);
            libNtve_gf_SetDialogItemBorderImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 203, -385);
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_background, 324, 298, c_anchorCenter, 206, -384, StringToText(""), "Assets/Textures/Briefing/tframe3.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            PortraitSetTintColor(lp_portrait, Color(100.00, 100.00, 100.00));
            libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, (SoundLengthSync(lv_sound) - (SoundLengthSync(lv_sound) * 0.15)), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_698F9BEA", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_698F9BEA", "Text", SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_698F9BEA"), PlayerGroupAll());
            if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
                SoundPlay(lv_sound, PlayerGroupAll(), 100.0, 0.0);
                SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            }
            else {
                SoundPlay(lv_sound, PlayerGroupAll(), 100.0, 0.0);
            }
            PortraitSetTintColor(lp_portrait, Color(75.29, 75.29, 75.29));
        }
    }
}

void lib9770F675_gf_playTransmissionBriefingEnd2 () {
    // Automatic Variable Declarations
    // Deprecated
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
}

void lib9770F675_gf_playTransmissionSpeakerBriefing2 (int lp_portrait, soundlink lp_sound, trigger lp_trigger, fixed lp_interrupt) {
    // Automatic Variable Declarations
    // Deprecated
    if ((lp_trigger == lib9770F675_gt_showStukovBriefingPortrait)) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "InfestedStukovPortraitAddition", "Stand", 0, true);
    }

}

void lib9770F675_gf_BriefScrollCreate () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(800, 480, c_anchorCenter, 0, 115, false);
    lib9770F675_gv_briefingScrolling = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, (DialogGetHeight(DialogLastCreated())-100), c_anchorRight, 43, 0, StringToText(""), lib9770F675_gv_scrollTexture[0][0], c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib9770F675_gv_briefingScrollingItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 100, c_anchorRight, 25, 0, StringToText(""), StringToText(""), lib9770F675_gv_scrollTexture[1][1]);
    lib9770F675_gv_briefingScrollingItem[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lib9770F675_gv_scrollTexture[1][2], PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 40, c_anchorRight, 30, (DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[2], 1)/2+3), StringToText(""), StringToText(""), lib9770F675_gv_scrollTexture[2][3]);
    lib9770F675_gv_briefingScrollingItem[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lib9770F675_gv_scrollTexture[2][4], PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 40, c_anchorRight, 30, (-DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[2], 1)/2-3), StringToText(""), StringToText(""), lib9770F675_gv_scrollTexture[2][1]);
    lib9770F675_gv_briefingScrollingItem[4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lib9770F675_gv_scrollTexture[2][2], PlayerGroupAll());
    lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min] = (-(DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[2], 1)-DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[1], 1))/2);
    lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max] = ((DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[2], 1)-DialogControlGetHeight(lib9770F675_gv_briefingScrollingItem[1], 1))/2);
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void lib9770F675_gf_BriefScrollSliderMoving (int lp_offset) {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gv_briefScrollYOffset = (lp_offset);
    if ((lib9770F675_gv_briefScrollYOffset >= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]) && (lib9770F675_gv_briefScrollYOffset <= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max])) {
        DialogControlSetPosition(lib9770F675_gv_briefingScrollingItem[1], PlayerGroupAll(), DialogControlGetAnchor(lib9770F675_gv_briefingScrollingItem[1], 1), DialogControlGetOffsetX(lib9770F675_gv_briefingScrollingItem[1], 1), lib9770F675_gv_briefScrollYOffset);
        DialogControlSetPosition(lib9770F675_gv_briefingTextDisplay, PlayerGroupAll(), DialogControlGetAnchor(lib9770F675_gv_briefingTextDisplay, 1), DialogControlGetOffsetX(lib9770F675_gv_briefingTextDisplay, 1), (-(-lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]+lib9770F675_gv_briefScrollYOffset)));
    }

}

void lib9770F675_gf_playTransmissionRaynorBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showRaynorBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showRaynorBriefingPortrait);
}

void lib9770F675_gf_playTransmissionCollinsBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showCollinsBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCollinsBriefingPortrait);
}

void lib9770F675_gf_playTransmissionCerberusBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showCerberusBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCerberusBriefingPortrait);
}

void lib9770F675_gf_playTransmissionAdjutantBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showAdjutantBriefing, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAdjutantBriefing);
}

void lib9770F675_gf_playTransmissionConfederateAdjutantBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showConfederateAdjutantBriefing, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showConfederateAdjutantBriefing);
}

void lib9770F675_gf_playTransmissionDukeBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showDukeBriefing, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDukeBriefing);
}

void lib9770F675_gf_playTransmissionDugalleBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showDugalleBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDugalleBriefingPortrait);
}

void lib9770F675_gf_playTransmissionDuranBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showDuranBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDuranBriefingPortrait);
}

void lib9770F675_gf_playTransmissionInfestedDuranBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showInfestedDuranBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedDuranBriefingPortrait);
}

void lib9770F675_gf_playTransmissionXelnagaDuranBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showXelnagaDuranBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showXelnagaDuranBriefingPortrait);
}

void lib9770F675_gf_playTransmissionStukovBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showStukovBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerStop(lib9770F675_gt_showStukovBriefingPortrait);
    TransmissionClearAll();
    PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Stand", 0, true);
}

void lib9770F675_gf_playTransmissionSarahBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showSarahBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSarahBriefingPortrait);
}

void lib9770F675_gf_playTransmissionMengskBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showMengskBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMengskBriefingPortrait);
}

void lib9770F675_gf_playTransmissionInfestedKerriganBriefing (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showInfestedKerriganBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortrait);
}

void lib9770F675_gf_playTransmissionRaz (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lib9770F675_gt_showRazBriefingPortrait, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showRazBriefingPortrait);
}

void lib9770F675_gf_playTransmissionBriefingPortraitPreload (trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model) {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gf_playTransmissionBriefing("Terran00t|Line00007", 0, lp_animationMouth, lp_portrait, lp_model);
}

void lib9770F675_gf_playTransmissionBriefingInterrupt (string lp_text, int lp_soundindex, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model, fixed lp_interrupt) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;
    int lv_portraitD;

    // Automatic Variable Declarations
    int autoFB0ABBD6_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitD = c_invalidDialogControlId;

    // Implementation
    autoFB0ABBD6_val = lp_portrait;
    if (autoFB0ABBD6_val == lib9770F675_gv_portrait1) {
        lv_portraitD = lib9770F675_gv_briefingPortrait1;
    }
    else if (autoFB0ABBD6_val == lib9770F675_gv_portrait2) {
        lv_portraitD = lib9770F675_gv_briefingPortrait2;
    }
    else if (autoFB0ABBD6_val == lib9770F675_gv_portrait3) {
        lv_portraitD = lib9770F675_gv_briefingPortrait3;
    }
    else if (autoFB0ABBD6_val == lib9770F675_gv_portrait4) {
        lv_portraitD = lib9770F675_gv_briefingPortrait4;
    }
    else {
        lv_portraitD = lib9770F675_gv_briefingPortrait1;
    }
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
    lv_trigger = (lp_animationMouth);
    lv_sound = SoundLink(ConversationDataGetSound(lp_text, true), c_soundIndexAny);
    DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOn");
    PortraitSetTintColor(lp_portrait, Color(100.00, 100.00, 100.00));
    libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, (SoundLengthSync(lv_sound) - (SoundLengthSync(lv_sound) * 0.1)), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_645EFC2D", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_645EFC2D", "Text", SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_645EFC2D"), PlayerGroupAll());
    if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
        TransmissionSend(PlayerGroupAll(), lp_model, lp_portrait, "Talk", null, null, null, SoundLengthSync(lv_sound), c_transmissionDurationAdd, false);
        SoundPlay(lv_sound, PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), lp_interrupt, c_soundOffsetEnd);
    }
    else {
        lib9770F675_gf_playTransmissionSpeakerBriefing(lp_portrait, lv_sound, lv_trigger, lp_interrupt);
    }
    PortraitSetTintColor(lp_portrait, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOff");
}

void lib9770F675_gf_playTransmissionBriefing (string lp_text, int lp_soundindex, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;
    string lv_portraitActor;
    int lv_portraitD;
    int lv_i;

    // Automatic Variable Declarations
    int auto442FFA6F_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";
    lv_portraitD = c_invalidDialogControlId;

    // Implementation
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
    lv_trigger = (lp_animationMouth);
    if ((lp_model == TransmissionSourceFromModel("VorazunEx2Portrait"))) {
        lv_portraitActor = "VorazunEx2Portrait";
    }

    if ((lp_model == TransmissionSourceFromModel("ArtanisEx2Portrait"))) {
        lv_portraitActor = "ArtanisEx2Portrait";
    }

    if ((lp_text == "Terran00t|Line00007") && (lp_soundindex >= 10)) {
        if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), lp_model, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_portraitActor, "Talk", null, null, null, SoundLengthSync(lv_sound), c_transmissionDurationAdd, false, c_maxPlayers, false);
        }
        else {
            lib9770F675_gf_playTransmissionSpeakerBriefing(lp_portrait, lv_sound, lv_trigger, 0.0);
        }
    }
    else {
        lv_sound = SoundLink(ConversationDataGetSound(lp_text, true), c_soundIndexAny);
        if ((lv_trigger == lib9770F675_gt_EndBriefing)) {
            libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, 2.0, PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_C9393B60", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_C9393B60", "Text", SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_C9393B60"), PlayerGroupAll());
        }
        else {
            auto442FFA6F_val = lp_portrait;
            if (auto442FFA6F_val == lib9770F675_gv_portrait1) {
                lv_portraitD = lib9770F675_gv_briefingPortrait1;
            }
            else if (auto442FFA6F_val == lib9770F675_gv_portrait2) {
                lv_portraitD = lib9770F675_gv_briefingPortrait2;
            }
            else if (auto442FFA6F_val == lib9770F675_gv_portrait3) {
                lv_portraitD = lib9770F675_gv_briefingPortrait3;
            }
            else if (auto442FFA6F_val == lib9770F675_gv_portrait4) {
                lv_portraitD = lib9770F675_gv_briefingPortrait4;
            }
            else {
                lv_portraitD = lib9770F675_gv_briefingPortrait1;
            }
            DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOn");
            PortraitSetTintColor(lp_portrait, Color(100.00, 100.00, 100.00));
            libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, (SoundLengthSync(lv_sound) - (SoundLengthSync(lv_sound) * 0.15)), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_3834A7E9", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_3834A7E9", "Text", SoundSubtitleText(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_3834A7E9"), PlayerGroupAll());
            if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
                SoundPlay(lv_sound, PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lp_portrait, null, SoundLengthSync(lv_sound), c_transmissionDurationAdd, true);
                SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            }
            else {
                lib9770F675_gf_playTransmissionSpeakerBriefing(lp_portrait, lv_sound, lv_trigger, 0.0);
            }
            PortraitSetTintColor(lp_portrait, Color(75.29, 75.29, 75.29));
            DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOff");
        }
    }
}

void lib9770F675_gf_playTransmissionBriefingEnd () {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gf_playTransmissionBriefing("Terran00t|Line00007", 0, lib9770F675_gt_EndBriefing, c_invalidPortraitId, TransmissionSource());
}

void lib9770F675_gf_playTransmissionSpeakerBriefing (int lp_portrait, soundlink lp_sound, trigger lp_trigger, fixed lp_interrupt) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lp_trigger, false, false);
    SoundWait(SoundLastPlayed(), lp_interrupt, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lp_trigger);
    if ((lp_trigger == lib9770F675_gt_showStukovBriefingPortrait)) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Stand", 0, true);
    }

    if ((lp_trigger == lib9770F675_gt_showRazBriefingPortrait)) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "RaszagalPortrait", "Stand", 0, true);
    }

}

void lib9770F675_gf_playTransmissionConfederateAdjutant (text lp_text, int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showConfederateAdjutantPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_59E024AF"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showConfederateAdjutantPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionRaynor (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showRaynorPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_00A97468"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showRaynorPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionCollins (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showCollinsPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_E3E9D451"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCollinsPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionCerberus (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showCerberusPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_AE2DCA7A"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCerberusPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionAdjutant (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showAdjutantPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_7DD8FEE7"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAdjutantPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionSCV (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showSCVPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_77A6A860"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSCVPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionDuke (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showDukePortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_00F6551C"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDukePortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionBattlecruiser (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showBattlecruiserPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_744EE009"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDukePortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionMarine (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showMarinePortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_B70D36CA"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMarinePortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionDugalle (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showDugallePortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_1417F4E2"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDugallePortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionDuran (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showDuranPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_92894209"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDuranPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionInfestedDuran (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showInfestedDuranPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_96AB78DA"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedDuranPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionXelnagaDuran (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showXelnagaDuranPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_65E9013F"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showXelnagaDuranPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionStukov (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), true, true);
    PortraitSetModel(lp_portrait, "InfestedStukovPortraitAddition", true);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showStukovPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_30957080"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerStop(lib9770F675_gt_showStukovPortrait);
    TransmissionClearAll();
    PortraitSetVisible(lib9770F675_gv_talkingPortrait, PlayerGroupAll(), false, false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionSarah (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showSarahPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_4DA7D5C0"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSarahPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionMengsk (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showMengskPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_D8091BE3"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMengskPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionInfestedKerrigan (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showInfestedKerriganPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_F9A95AC2"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionCivilian (text lp_text, soundlink lp_sound, int lp_portrait, text lp_name) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showCivilianPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, lp_name, lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCivilianPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionMedic (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showMedicPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "", null, StringExternal("Param/Value/lib_9770F675_A2625C6A"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMedicPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionVulture (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showVulturePortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_E97B24F4"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showVulturePortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionDropship (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showDropshipPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_686C80E9"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDropshipPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionSiegeTank (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showSiegeTankPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_46865714"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSiegeTankPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmissionRaza (text lp_text, soundlink lp_sound, int lp_portrait) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    lib9770F675_gv_talkingPortrait = lp_portrait;
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(lib9770F675_gt_showRazPortrait, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), lp_portrait, "", null, StringExternal("Param/Value/lib_9770F675_96AAA0E0"), lp_text, 90.0, c_transmissionDurationAdd, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showRazPortrait);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void lib9770F675_gf_playTransmission (string lp_text, int lp_soundindex, int lp_portrait, trigger lp_animationMouth, transmissionsource lp_model) {
    // Variable Declarations
    string lv_portraitActor;
    trigger lv_talkingAnimTrigger;
    string lv_animation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portraitActor = "";
    lv_animation = "Talk";

    // Implementation
    lv_talkingAnimTrigger = (lp_animationMouth);
    if ((lp_model == TransmissionSourceFromModel("VorazunEx2Portrait"))) {
        lv_portraitActor = "VorazunEx2Portrait";
        lv_animation = "Stand";
    }

    if ((lp_model == TransmissionSourceFromModel("ArtanisEx2Portrait"))) {
        lv_portraitActor = "ArtanisEx2Portrait";
        lv_animation = "Stand";
    }

    if ((lv_talkingAnimTrigger == lib9770F675_gt_NoAnimationMouth)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), lp_model, lp_portrait, lv_portraitActor, lv_animation, SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        if ((lv_talkingAnimTrigger == lib9770F675_gt_showStukovPortrait)) {
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), true, true);
            PortraitSetModel(lp_portrait, "AlexiStukovPortrait", true);
        }

        if ((lv_talkingAnimTrigger == lib9770F675_gt_showRazPortrait)) {
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), true, true);
            PortraitSetModel(lp_portrait, "RaszagalPortrait", true);
        }

        lib9770F675_gv_talkingPortrait = lp_portrait;
        TriggerExecute(lv_talkingAnimTrigger, false, false);
        libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex), 0.0, c_transmissionDurationAdd, true);
        TransmissionClearAll();
        TriggerStop(lv_talkingAnimTrigger);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        if ((lv_talkingAnimTrigger == lib9770F675_gt_showStukovPortrait)) {
            PortraitSetVisible(lib9770F675_gv_talkingPortrait, PlayerGroupAll(), false, false);
        }

        if ((lv_talkingAnimTrigger == lib9770F675_gt_showRazPortrait)) {
            PortraitSetVisible(lib9770F675_gv_talkingPortrait, PlayerGroupAll(), false, false);
        }

        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
}

void lib9770F675_gf_playTransmissionInterrupt (string lp_text, int lp_soundindex, int lp_portrait, trigger lp_animationMouth, transmissionsource lp_model, fixed lp_interrupt) {
    // Variable Declarations
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_trigger = (lp_animationMouth);
    if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
        TransmissionSend(PlayerGroupAll(), lp_model, lp_portrait, "Talk", SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex), null, null, 90.0, c_transmissionDurationAdd, false);
        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)) - lp_interrupt), c_timeReal);
    }
    else {
        if ((lv_trigger == lib9770F675_gt_showStukovPortrait)) {
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), true, true);
            PortraitSetModel(lp_portrait, "AlexiStukovPortrait", true);
        }

        if ((lv_trigger == lib9770F675_gt_showRazPortrait)) {
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), true, true);
            PortraitSetModel(lp_portrait, "RaszagalPortrait", true);
        }

        lib9770F675_gv_talkingPortrait = lp_portrait;
        TriggerExecute(lv_trigger, false, false);
        libNtve_gf_SendTransmissionSimple(TransmissionSource(), c_invalidPortraitId, SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex), 90.0, c_transmissionDurationAdd, false);
        Wait((SoundLengthSync(SoundLink(ConversationDataGetSound(lp_text, true), lp_soundindex)) - lp_interrupt), c_timeReal);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        TransmissionClearAll();
        TriggerStop(lv_trigger);
        if ((lv_trigger == lib9770F675_gt_showStukovPortrait)) {
            PortraitSetVisible(lib9770F675_gv_talkingPortrait, PlayerGroupAll(), false, false);
        }

        if ((lv_trigger == lib9770F675_gt_showRazPortrait)) {
            PortraitSetVisible(lib9770F675_gv_talkingPortrait, PlayerGroupAll(), false, false);
        }

        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
}

void lib9770F675_gf_SkipTransmission () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(lib9770F675_gt_showVulturePortrait);
    TriggerStop(lib9770F675_gt_showStukovPortrait);
    TriggerStop(lib9770F675_gt_showSiegeTankPortrait);
    TriggerStop(lib9770F675_gt_showSCVPortrait);
    TriggerStop(lib9770F675_gt_showSarahPortrait);
    TriggerStop(lib9770F675_gt_showRaynorPortrait);
    TriggerStop(lib9770F675_gt_showMengskPortrait);
    TriggerStop(lib9770F675_gt_showMedicPortrait);
    TriggerStop(lib9770F675_gt_showMarinePortrait);
    TriggerStop(lib9770F675_gt_showInfestedKerriganPortrait);
    TriggerStop(lib9770F675_gt_showDuranPortrait);
    TriggerStop(lib9770F675_gt_showInfestedDuranPortrait);
    TriggerStop(lib9770F675_gt_showDukePortrait);
    TriggerStop(lib9770F675_gt_showDugallePortrait);
    TriggerStop(lib9770F675_gt_showDropshipPortrait);
    TriggerStop(lib9770F675_gt_showConfederateAdjutantPortrait);
    TriggerStop(lib9770F675_gt_showCollinsPortrait);
    TriggerStop(lib9770F675_gt_showCivilianPortrait);
    TriggerStop(lib9770F675_gt_showCerberusPortrait);
    TriggerStop(lib9770F675_gt_showAdjutantPortrait);
    TriggerStop(lib9770F675_gt_showRazPortrait);
    TransmissionClearAll();
    PortraitDestroy(PortraitLastCreated());
}

void lib9770F675_gf_playTransmissionAdjutantBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showAdjutantBriefingER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAdjutantBriefingER);
}

void lib9770F675_gf_playTransmissionWarfieldBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showWarfieldBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showWarfieldBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionMengskBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showMengskBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMengskBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionMarineBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showMarineBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMengskBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionDugalleBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showDugalleBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDugalleBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionDuranBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showDuranBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDuranBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionStukovBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showStukovBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TriggerStop(lib9770F675_gt_showStukovBriefingPortraitER);
    TransmissionClearAll();
    PortraitSetModelAnim(lib9770F675_gv_talkingPortraitNA, "InfestedStukovPortraitAddition", "Stand", 0, true);
}

void lib9770F675_gf_playTransmissionInfestedKerriganBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showInfestedKerriganBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionZeratulBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showZeratulBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionArtanisBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showArtanisBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionSelendisBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showSelendisBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionZagaraBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showZagaraBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionAbathurBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showAbathurBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionIzshaBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showIzshaBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionStewartBriefingER (int lp_portrait, soundlink lp_sound) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    TriggerExecute(lib9770F675_gt_showStewartBriefingPortraitER, false, false);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortraitER);
}

void lib9770F675_gf_playTransmissionBriefingER (text lp_text, int lp_time, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;
    string lv_portraitActor;
    int lv_portraitD;
    int lv_i;

    // Automatic Variable Declarations
    int auto8563FDF5_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";
    lv_portraitD = c_invalidDialogControlId;

    // Implementation
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
    lv_trigger = (lp_animationMouth);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    if ((lp_model == TransmissionSourceFromModel("VorazunEx2Portrait"))) {
        lv_portraitActor = "VorazunEx2Portrait";
    }

    if ((lp_model == TransmissionSourceFromModel("ArtanisEx2Portrait"))) {
        lv_portraitActor = "ArtanisEx2Portrait";
    }

    if ((lv_trigger == lib9770F675_gt_EndBriefingER)) {
        libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, 2.0, PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/lib_9770F675_4D064EE4", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_4D064EE4", "Text", lp_text);
        libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_4D064EE4"), PlayerGroupAll());
    }
    else {
        auto8563FDF5_val = lp_portrait;
        if (auto8563FDF5_val == lib9770F675_gv_portrait1) {
            lv_portraitD = lib9770F675_gv_briefingPortrait1;
        }
        else if (auto8563FDF5_val == lib9770F675_gv_portrait2) {
            lv_portraitD = lib9770F675_gv_briefingPortrait2;
        }
        else if (auto8563FDF5_val == lib9770F675_gv_portrait3) {
            lv_portraitD = lib9770F675_gv_briefingPortrait3;
        }
        else if (auto8563FDF5_val == lib9770F675_gv_portrait4) {
            lv_portraitD = lib9770F675_gv_briefingPortrait4;
        }
        else {
            lv_portraitD = lib9770F675_gv_briefingPortrait1;
        }
        DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOn");
        PortraitSetTintColor(lp_portrait, Color(100.00, 100.00, 100.00));
        libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, lp_time, PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/lib_9770F675_FA10523D", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_FA10523D", "Text", lp_text);
        libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_FA10523D"), PlayerGroupAll());
        if ((lv_trigger == lib9770F675_gt_NoAnimationMouthER)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), lp_model, lp_portrait, "", "Talk", null, StringToText(""), StringToText(""), 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            Wait((lp_time + 3), c_timeReal);
        }
        else {
            TriggerExecute(lv_trigger, false, false);
            Wait((lp_time + 3), c_timeReal);
            TransmissionClearAll();
            TriggerStop(lv_trigger);
            if ((lv_trigger == lib9770F675_gt_showStukovBriefingPortrait)) {
                PortraitSetModelAnim(lib9770F675_gv_talkingPortraitNA, "AlexiStukovPortrait", "Stand", 0, true);
            }

            if ((lv_trigger == lib9770F675_gt_showStukovBriefingPortraitER)) {
                PortraitSetModelAnim(lib9770F675_gv_talkingPortraitNA, "AlexiStukovPortrait", "Stand", 0, true);
            }

        }
        PortraitSetTintColor(lp_portrait, Color(75.29, 75.29, 75.29));
        DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOff");
    }
}

void lib9770F675_gf_playTransmissionBriefingInterruptER (text lp_text, int lp_time, trigger lp_animationMouth, int lp_portrait, transmissionsource lp_model, int lp_interrupt) {
    // Variable Declarations
    trigger lv_trigger;
    soundlink lv_sound;
    string lv_portraitActor;
    int lv_portraitD;
    int lv_i;

    // Automatic Variable Declarations
    int auto3BE74BCC_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";
    lv_portraitD = c_invalidDialogControlId;

    // Implementation
    auto3BE74BCC_val = lp_portrait;
    if (auto3BE74BCC_val == lib9770F675_gv_portrait1) {
        lv_portraitD = lib9770F675_gv_briefingPortrait1;
    }
    else if (auto3BE74BCC_val == lib9770F675_gv_portrait2) {
        lv_portraitD = lib9770F675_gv_briefingPortrait2;
    }
    else if (auto3BE74BCC_val == lib9770F675_gv_portrait3) {
        lv_portraitD = lib9770F675_gv_briefingPortrait3;
    }
    else if (auto3BE74BCC_val == lib9770F675_gv_portrait4) {
        lv_portraitD = lib9770F675_gv_briefingPortrait4;
    }
    else {
        lv_portraitD = lib9770F675_gv_briefingPortrait1;
    }
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
    lv_trigger = (lp_animationMouth);
    lib9770F675_gv_talkingPortraitNA = lp_portrait;
    DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOn");
    PortraitSetTintColor(lp_portrait, Color(100.00, 100.00, 100.00));
    libNtve_gf_SetDialogItemTextWriteoutDuration(lib9770F675_gv_briefingTextDisplay, 2.0, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_A7EDB711", "Style", StringToText((lib9770F675_gv_briefing_Text_Style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_A7EDB711", "Text", lp_text);
    libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, TextExpressionAssemble("Param/Expression/lib_9770F675_A7EDB711"), PlayerGroupAll());
    if ((lv_trigger == lib9770F675_gt_NoAnimationMouth)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), lp_model, lp_portrait, "", "Talk", null, StringToText(""), StringToText(""), 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        Wait(lp_interrupt, c_timeReal);
    }
    else {
        lib9770F675_gf_playTransmissionSpeakerBriefing(lp_portrait, lv_sound, lv_trigger, lp_interrupt);
    }
    PortraitSetTintColor(lp_portrait, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lv_portraitD, PlayerGroupAll(), "TransOff");
}

void lib9770F675_gf_playTransmissionBriefingEndER () {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gf_playTransmissionBriefingER(StringExternal("Param/Value/lib_9770F675_D927BA22"), 15, lib9770F675_gt_EndBriefingER, c_invalidPortraitId, TransmissionSource());
}

void lib9770F675_gf_playTransmissionSpeakerBriefingER (int lp_portrait, soundlink lp_sound, trigger lp_trigger, fixed lp_interrupt, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    lib9770F675_gv_talkingPortrait = lp_portrait;
    TriggerExecute(lp_trigger, false, false);
    Wait(lp_time, c_timeReal);
    TransmissionClearAll();
    TriggerStop(lp_trigger);
    if ((lp_trigger == lib9770F675_gt_showStukovBriefingPortrait)) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Stand", 0, true);
    }

    if ((lp_trigger == lib9770F675_gt_showStukovBriefingPortraitER)) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Stand", 0, true);
    }

}

void lib9770F675_gf_playTransmissionCommander_TEXT2 (int lp_speaker, unit lp_unit, text lp_text, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Abathur)) {
        TriggerExecute(lib9770F675_gt_showAbathurPortrait_TEXTSCMRER, false, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("EvolutionMasterPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_76D70547"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        Wait(lp_time, c_timeReal);
        TriggerStop(lib9770F675_gt_showAbathurPortrait_TEXTSCMRER);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
        TransmissionClearAll();
    }
    else {
        if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Adjutant)) {
            TriggerExecute(lib9770F675_gt_showAdjutantPortrait_TEXT, false, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_15F28B09"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
            Wait(lp_time, c_timeReal);
            TriggerStop(lib9770F675_gt_showAdjutantPortrait_TEXT);
            PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
            TransmissionClearAll();
        }
        else {
            if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Aldaris)) {
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("SC1PortraitAldaris"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_04BE657A"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                Wait(lp_time, c_timeReal);
                PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                TransmissionClearAll();
            }
            else {
                if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Alzadar)) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("HighTemplarTaldarimPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_18072D14"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                    Wait(lp_time, c_timeReal);
                    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                    TransmissionClearAll();
                }
                else {
                    if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Artanis)) {
                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("ArtanisPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_FDEC863E"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                        Wait(lp_time, c_timeReal);
                        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                        TransmissionClearAll();
                    }
                    else {
                        if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Commander)) {
                            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("Marine_Merc_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_CA5D3FD4"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                            Wait(lp_time, c_timeReal);
                            PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                            TransmissionClearAll();
                        }
                        else {
                            if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Dahl)) {
                                TriggerExecute(lib9770F675_gt_showDahlPortrait_TEXTSCMRER, false, false);
                                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("FemaleCivilian1Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_4502F9DC"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                Wait(lp_time, c_timeReal);
                                TriggerStop(lib9770F675_gt_showDahlPortrait_TEXTSCMRER);
                                PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                TransmissionClearAll();
                            }
                            else {
                                if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Danimoth)) {
                                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("ArbiterMPPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_87BE232A"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                    Wait(lp_time, c_timeReal);
                                    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                    TransmissionClearAll();
                                }
                                else {
                                    if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_DarkTemplar)) {
                                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarkTemplar2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_1DF182C9"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                        Wait(lp_time, c_timeReal);
                                        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                        TransmissionClearAll();
                                    }
                                    else {
                                        if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Stewart)) {
                                            TriggerExecute(lib9770F675_gt_showStewartPortrait_TEXTSCMRER, false, false);
                                            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("InfestedColonistPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_968E79EC"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                            Wait(lp_time, c_timeReal);
                                            TriggerStop(lib9770F675_gt_showStewartPortrait_TEXTSCMRER);
                                            PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                            TransmissionClearAll();
                                        }
                                        else {
                                            if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Zagara)) {
                                                TriggerExecute(lib9770F675_gt_showZagaraPortrait_TEXTSCMRER, false, false);
                                                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("ZagaraPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_D1B28232"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                                Wait(lp_time, c_timeReal);
                                                TriggerStop(lib9770F675_gt_showZagaraPortrait_TEXTSCMRER);
                                                PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                                TransmissionClearAll();
                                            }
                                            else {
                                                if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Izsha)) {
                                                    TriggerExecute(lib9770F675_gt_showIzshaPortrait_TEXTSCMRER, false, false);
                                                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("ZergAdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_3A93CD88"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                                    Wait(lp_time, c_timeReal);
                                                    TriggerStop(lib9770F675_gt_showIzshaPortrait_TEXTSCMRER);
                                                    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                                    TransmissionClearAll();
                                                }
                                                else {
                                                    if ((lp_speaker == lib9770F675_ge_SCMRNonAudioSpeakers_Kerrigan)) {
                                                        TriggerExecute(lib9770F675_gt_showUlrezajPortrait_TEXT3, false, false);
                                                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KerriganPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_3D126872"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                                                        Wait(lp_time, c_timeReal);
                                                        TriggerStop(lib9770F675_gt_showUlrezajPortrait_TEXT3);
                                                        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
                                                        TransmissionClearAll();
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib9770F675_gf_playTransmissionGui_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_F86161A3"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionWarfield_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showWarfieldPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_8F869B03"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showWarfieldPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionSCV_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showSCVPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_A880AFD5"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSCVPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionCivilian_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showCivilianPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_C4F7B022"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showCivilianPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionSchezar_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showSchezarPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_E23AB590"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showSchezarPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionMerc_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showMercPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_26707911"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMercPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionAdjutant_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showAdjutantPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_EE76A37A"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAdjutantPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionDropship_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showDropshipPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_7276D9AC"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDropshipPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionMarine_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showMarinePortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_38E6F671"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showMarinePortrait_TEXT);
}

void lib9770F675_gf_playTransmissionGui_TEXT2 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_A9388397"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionGui_TEXT5 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_89FAD9C5"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionGui_TEXT4 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_41733EB3"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionGhost_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_F4E5F096"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT7 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_D585C069"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionGui_TEXT3 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_E37FB8CF"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT5 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_0A95FA6A"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionGui_TEXT6 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_4C271ABC"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT2 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarkArchonEx2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_74DB00DB"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT15 (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("DarkArchonEx2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_30172F16"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT3 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showUlrezajPortrait_TEXT3, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_4AF041A7"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showUlrezajPortrait_TEXT3);
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT8 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_F9AE9678"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT9 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_84E11C01"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT11 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_887B886F"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT12 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_8E6A50DD"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT10 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_010BEB25"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT13 (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_1B49A240"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionDuran_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    UnitFlashSelection(lp_unit, 1.5);
    TriggerExecute(lib9770F675_gt_showDuranPortrait_TEXT, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_A27D2D40"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDuranPortrait_TEXT);
}

void lib9770F675_gf_playTransmissionStewart_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showStewartPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_FBF7EDD1"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showStewartPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionIzsha_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showIzshaPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_610A389C"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showIzshaPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionAbathur_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showAbathurPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_B5E1D83A"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAbathurPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionZagara_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showZagaraPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_7985242F"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showZagaraPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionDahl_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showDahlPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_F838492C"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showDahlPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionRamsey_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showRamseyPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_B5A06456"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showRamseyPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionZamara_TEXT (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showZamaraPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_AB72F0AD"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showZamaraPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionAlarak_TEXT (text lp_text, fixed lp_time, unit lp_unit) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TriggerExecute(lib9770F675_gt_showAlarakPortrait_TEXTSCMRER, false, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_8FB25ACB"), lp_text, 90.0, c_transmissionDurationAdd, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(lib9770F675_gt_showAlarakPortrait_TEXTSCMRER);
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT14 (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("ZealotAiurPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_BFA16E57"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_playTransmissionUlrezaj_TEXT6 (text lp_text, fixed lp_time) {
    // Variable Declarations
    int lv_var;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("HighTemplarTaldarimPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("UI_TransmissionStart", -1), StringExternal("Param/Value/lib_9770F675_5CFEB525"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(lp_time, c_timeGame);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
}

void lib9770F675_gf_showIntroText (text lp_text, int lp_width) {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gv_showIntroTextWidth = lp_width;
    if ((lib9770F675_gv_showIntroTextWidth > 1600)) {
        lib9770F675_gv_showIntroTextWidth = 1430;
    }

    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenLabel(1, lp_text, "IntroTextFontStyle", lib9770F675_gv_showIntroTextWidth, 1100, c_anchorCenter, 0, 0);
    }
    else {
        libNtve_gf_SetDialogItemText(libNtve_gf_ScreenLabelDialogItem(1), lp_text, PlayerGroupAll());
        DialogControlSetSize(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), lib9770F675_gv_showIntroTextWidth, 1100);
        libNtve_gf_HideScreenImage2(true, 1);
    }
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 1.0, 0.0);
    Wait(1.0, c_timeReal);
    if ((lib9770F675_gv_showIntroTextLabelCreated == false)) {
        libNtve_gf_DisplayScreenButton(2, StringToText(""), 3000, 3000, c_anchorCenter, 0, 0, lib9770F675_gt_KeyPressed);
    }
    else {
        libNtve_gf_HideScreenButton(true, 2);
    }
    DialogSetTransparency(libNtve_gf_ScreenButtonDialog(2), 100.0);
    lib9770F675_gv_showIntroTextLabelCreated = true;
    TriggerEnable(lib9770F675_gt_KeyPressed, true);
    TriggerWaitForTrigger(lib9770F675_gt_KeyPressed, true);
}

void lib9770F675_gf_CutsceneMusic (soundlink lp_sound, fixed lp_volume) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(lp_sound, c_maxPlayers, PlayerGroupAll(), lp_volume, 0.0);
    lib9770F675_gv_cutsceneMusic = SoundLastPlayed();
}

void lib9770F675_gf_Cutscene (trigger lp_cutsceneTrigger, fixed lp_fadeoutTime, bool lp_fadeout, camerainfo lp_cutsceneStartCamera, camerainfo lp_cutsceneEndCamera) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    const int auto04B222A1_ae = 8;
    const int auto04B222A1_ai = 1;
    const int autoDB2624E1_ae = 8;
    const int autoDB2624E1_ai = 1;
    unitgroup autoDD106B5D_g;
    int autoDD106B5D_u;
    unit autoDD106B5D_var;
    const int auto8FB134D6_ae = 8;
    const int auto8FB134D6_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_fadeout == true)) {
        CutsceneFade(false, lp_fadeoutTime, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
    UISetCursorVisible(PlayerGroupAll(), false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetMissionTimePaused(true);
    UnitClearSelection(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    lv_n = 1;
    for ( ; ( (auto04B222A1_ai >= 0 && lv_n <= auto04B222A1_ae) || (auto04B222A1_ai < 0 && lv_n >= auto04B222A1_ae) ) ; lv_n += auto04B222A1_ai ) {
        PlayerScoreValueEnableAll(lv_n, false);
    }
    Wait(0.3, c_timeReal);
    CameraApplyInfo(1, lp_cutsceneStartCamera, 0.0, -1, 10.0, true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    TriggerEnable(lib9770F675_gt_RescueSoundEffect, false);
    TriggerEnable(lib9770F675_gt_Failsafe, true);
    TriggerExecute(lp_cutsceneTrigger, false, true);
    TriggerEnable(lib9770F675_gt_Failsafe, false);
    lv_n = 1;
    for ( ; ( (autoDB2624E1_ai >= 0 && lv_n <= autoDB2624E1_ae) || (autoDB2624E1_ai < 0 && lv_n >= autoDB2624E1_ae) ) ; lv_n += autoDB2624E1_ai ) {
        PlayerScoreValueSetFromInt(lv_n, "UnitsKilledCount", 0);
        PlayerScoreValueSetFromInt(lv_n, "UnitsLostCount", 0);
    }
    autoDD106B5D_g = lib9770F675_gv_cutsceneUnits;
    autoDD106B5D_u = UnitGroupCount(autoDD106B5D_g, c_unitCountAll);
    for (;; autoDD106B5D_u -= 1) {
        autoDD106B5D_var = UnitGroupUnitFromEnd(autoDD106B5D_g, autoDD106B5D_u);
        if (autoDD106B5D_var == null) { break; }
        UnitRemove(autoDD106B5D_var);
    }
    if ((lib9770F675_gv_introSkip == true)) {
        CameraApplyInfo(1, lp_cutsceneEndCamera, 0.0, -1, 10.0, true);
    }

    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    Wait(0.2, c_timeReal);
    CameraSetVerticalFieldOfView(1, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    lv_n = 1;
    for ( ; ( (auto8FB134D6_ai >= 0 && lv_n <= auto8FB134D6_ae) || (auto8FB134D6_ai < 0 && lv_n >= auto8FB134D6_ae) ) ; lv_n += auto8FB134D6_ai ) {
        PlayerScoreValueEnableAll(lv_n, true);
    }
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_OptionsGameSpeed, false, false);
    GameSetMissionTimePaused(false);
    TriggerEnable(lib9770F675_gt_RescueSoundEffect, true);
}

void lib9770F675_gf_CutsceneStart (fixed lp_fadeoutTime, bool lp_fadeout, camerainfo lp_cutsceneStartCamera) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeout == true)) {
        CutsceneFade(false, lp_fadeoutTime, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), true);
    UISetCursorVisible(PlayerGroupAll(), false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetMissionTimePaused(true);
    UnitClearSelection(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    Wait(0.3, c_timeReal);
    CameraApplyInfo(1, lp_cutsceneStartCamera, 0.0, -1, 10.0, true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
}

void lib9770F675_gf_CutsceneEnd () {
    // Automatic Variable Declarations
    // Implementation
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    Wait(0.2, c_timeReal);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_OptionsGameSpeed, false, false);
    GameSetMissionTimePaused(false);
}

void lib9770F675_gf_Unmute () {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
}

void lib9770F675_gf_Mute () {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 40.0, 2.0);
}

void lib9770F675_gf_AIInitialization (int lp_player, int lp_startingminerals, int lp_startinggas, string lp_alwaysRebuildUnit) {
    // Automatic Variable Declarations
    unitgroup auto70B8C319_g;
    int auto70B8C319_u;
    unit auto70B8C319_var;
    unitgroup auto2A3B8087_g;
    int auto2A3B8087_u;
    unit auto2A3B8087_var;
    unitgroup autoE9884CFE_g;
    int autoE9884CFE_u;
    unit autoE9884CFE_var;
    playergroup autoBB18D09B_g;
    int autoBB18D09B_var;

    // Implementation
    AICampaignStart(lp_player);
    AIAttackWaveSetTargetMelee(lp_player);
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, lp_startingminerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, lp_startinggas);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 1, 2, 3), false, lp_player);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 2, 3), true, lp_player);
    AISetDefenseRadii(lp_player, 7.0, 10.0, 12.0);
    auto70B8C319_g = UnitGroup(null, lp_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70B8C319_u = UnitGroupCount(auto70B8C319_g, c_unitCountAll);
    for (;; auto70B8C319_u -= 1) {
        auto70B8C319_var = UnitGroupUnitFromEnd(auto70B8C319_g, auto70B8C319_u);
        if (auto70B8C319_var == null) { break; }
        AISetUnitNotUsableInWaves(auto70B8C319_var, true);
    }
    auto2A3B8087_g = UnitGroup("Overlord", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A3B8087_u = UnitGroupCount(auto2A3B8087_g, c_unitCountAll);
    for (;; auto2A3B8087_u -= 1) {
        auto2A3B8087_var = UnitGroupUnitFromEnd(auto2A3B8087_g, auto2A3B8087_u);
        if (auto2A3B8087_var == null) { break; }
        UnitBehaviorAdd(auto2A3B8087_var, "CritterWanderLeash", auto2A3B8087_var, 1);
    }
    autoE9884CFE_g = UnitGroup(lp_alwaysRebuildUnit, lp_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9884CFE_u = UnitGroupCount(autoE9884CFE_g, c_unitCountAll);
    for (;; autoE9884CFE_u -= 1) {
        autoE9884CFE_var = UnitGroupUnitFromEnd(autoE9884CFE_g, autoE9884CFE_u);
        if (autoE9884CFE_var == null) { break; }
        AISetUnitNotUsableInWaves(autoE9884CFE_var, false);
    }
    AISetSpecificRebuildCount(14, lp_alwaysRebuildUnit, lp_player);
    autoBB18D09B_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoBB18D09B_var = -1;
    while (true) {
        autoBB18D09B_var = PlayerGroupNextPlayer(autoBB18D09B_g, autoBB18D09B_var);
        if (autoBB18D09B_var < 0) { break; }
        RegionAddCircle(lib9770F675_gv_aIBase[autoBB18D09B_var], true, UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDetector - 32))), 0), c_unitCountAlive)), 7.0);
    }
}

void lib9770F675_gf_AIAdvancedWaveTARGET (int lp_wavePlayerOwner, int lp_wavePlayerVictim, point lp_waveGatherPoint, bool lp_useAttackPoint, point lp_waveAttackPoint) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(lp_wavePlayerOwner, lp_waveGatherPoint);
    AIAttackWaveSetTargetPlayer(lp_wavePlayerOwner, PlayerGroupSingle(lp_wavePlayerVictim));
    if ((lp_useAttackPoint == true)) {
        AIAttackWaveSetTargetPoint(lp_wavePlayerOwner, lp_waveAttackPoint);
    }

}

void lib9770F675_gf_AIAdvancedWaveADDUNITS (int lp_easyUnitBaseCount, int lp_mediumUnitBaseCount, int lp_hardUnitBaseCount, int lp_brutalUnitBaseCount, string lp_unitType, bool lp_locked) {
    // Variable Declarations
    int lv_easy_Random;
    int lv_medium_Random;
    int lv_hard_Random;
    int lv_brutal_Random;
    int lv_insane_Random;
    int lv_insaneUnitBaseCount;
    int lv_randomInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_easy_Random = 1;
    lv_medium_Random = 1;
    lv_hard_Random = 1;
    lv_brutal_Random = 1;
    lv_insane_Random = 1;
    lv_insaneUnitBaseCount = 1;
    lv_randomInt = 1;

    // Implementation
    lv_easy_Random = RandomInt(lp_easyUnitBaseCount, (lp_easyUnitBaseCount + 1));
    lv_medium_Random = RandomInt(lp_mediumUnitBaseCount, (lp_mediumUnitBaseCount + 2));
    lv_hard_Random = RandomInt(lp_hardUnitBaseCount, (lp_hardUnitBaseCount + 2));
    lv_brutal_Random = RandomInt(lp_brutalUnitBaseCount, (lp_brutalUnitBaseCount + 3));
    lv_insaneUnitBaseCount = (lp_brutalUnitBaseCount + 2);
    lv_insane_Random = RandomInt(lp_brutalUnitBaseCount, (lp_brutalUnitBaseCount + 5));
    if ((PlayerDifficulty(1) == 5)) {
        if ((lp_locked == true)) {
            AIAttackWaveAddUnits4(lp_easyUnitBaseCount, lp_mediumUnitBaseCount, lp_hardUnitBaseCount, lv_insaneUnitBaseCount, lp_unitType);
        }
        else {
            AIAttackWaveAddUnits4(lv_easy_Random, lv_medium_Random, lv_hard_Random, lv_insane_Random, lp_unitType);
        }
    }
    else {
        if ((lp_locked == true)) {
            AIAttackWaveAddUnits4(lp_easyUnitBaseCount, lp_mediumUnitBaseCount, lp_hardUnitBaseCount, lp_brutalUnitBaseCount, lp_unitType);
        }
        else {
            AIAttackWaveAddUnits4(lv_easy_Random, lv_medium_Random, lv_hard_Random, lv_brutal_Random, lp_unitType);
        }
    }
    if ((lib9770F675_gv_aiwavecount == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (IntToText(lp_easyUnitBaseCount) + (StringExternal("Param/Value/lib_9770F675_7A87A1F4") + (IntToText(lp_mediumUnitBaseCount) + (StringExternal("Param/Value/lib_9770F675_1E0B2E28") + (IntToText(lp_hardUnitBaseCount) + (StringExternal("Param/Value/lib_9770F675_40A3C90E") + (IntToText(lp_brutalUnitBaseCount) + (StringExternal("Param/Value/lib_9770F675_F3DD73AD") + StringExternal("Param/Value/lib_9770F675_56A45F37"))))))))));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (IntToText(lv_easy_Random) + (StringExternal("Param/Value/lib_9770F675_BF1C1535") + (IntToText(lv_medium_Random) + (StringExternal("Param/Value/lib_9770F675_B96756AF") + (IntToText(lv_hard_Random) + (StringExternal("Param/Value/lib_9770F675_B87B62EE") + (IntToText(lv_brutal_Random) + (StringExternal("Param/Value/lib_9770F675_D0507B39") + (IntToText(lv_insane_Random) + (StringExternal("Param/Value/lib_9770F675_53F32040") + StringExternal("Param/Value/lib_9770F675_24A8237E"))))))))))));
        Wait(10.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

}

void lib9770F675_gf_AIAdvancedWaveLAUNCH (int lp_wavePlayerOwner, int lp_easyWaveTimerBase, int lp_mediumWaveTimerBase, int lp_hardWaveTimerBase, int lp_brutalWaveTimerBase) {
    // Variable Declarations
    int lv_easy_Random;
    int lv_medium_Random;
    int lv_hard_Random;
    int lv_brutal_Random;
    int lv_insane_Random;
    int lv_randomInt;

    // Automatic Variable Declarations
    int auto7B4E9454_val;

    // Variable Initialization
    lv_easy_Random = 1;
    lv_medium_Random = 1;
    lv_hard_Random = 1;
    lv_brutal_Random = 1;
    lv_insane_Random = 1;
    lv_randomInt = 1;

    // Implementation
    if ((lib9770F675_gv_aIAdvanceWaveRandomTimerSetting == 2)) {
        lv_easy_Random = RandomInt((lp_easyWaveTimerBase - 10), (lp_easyWaveTimerBase + 30));
        lv_medium_Random = RandomInt((lp_mediumWaveTimerBase - 20), (lp_mediumWaveTimerBase + 20));
        lv_hard_Random = RandomInt((lp_hardWaveTimerBase - 25), (lp_hardWaveTimerBase + 15));
        lv_brutal_Random = RandomInt((lp_brutalWaveTimerBase - 30), (lp_brutalWaveTimerBase + 10));
        lv_insane_Random = RandomInt((lp_brutalWaveTimerBase - 40), (lp_brutalWaveTimerBase + 0));
    }
    else {
        if ((lib9770F675_gv_aIAdvanceWaveRandomTimerSetting == 1)) {
            lv_easy_Random = RandomInt((lp_easyWaveTimerBase - 0), (lp_easyWaveTimerBase + 20));
            lv_medium_Random = RandomInt((lp_mediumWaveTimerBase - 5), (lp_mediumWaveTimerBase + 15));
            lv_hard_Random = RandomInt((lp_hardWaveTimerBase - 10), (lp_hardWaveTimerBase + 10));
            lv_brutal_Random = RandomInt((lp_brutalWaveTimerBase - 15), (lp_brutalWaveTimerBase + 5));
            lv_insane_Random = RandomInt((lp_brutalWaveTimerBase - 20), (lp_brutalWaveTimerBase + 0));
        }
        else {
            lv_easy_Random = lp_easyWaveTimerBase;
            lv_medium_Random = lp_mediumWaveTimerBase;
            lv_hard_Random = lp_hardWaveTimerBase;
            lv_brutal_Random = lp_brutalWaveTimerBase;
            lv_insane_Random = lp_brutalWaveTimerBase;
        }
    }
    auto7B4E9454_val = PlayerDifficulty(lp_wavePlayerOwner);
    if (auto7B4E9454_val == 1) {
        AIAttackWaveSend(lp_wavePlayerOwner, lv_easy_Random, true);
    }
    else if (auto7B4E9454_val == 2) {
        AIAttackWaveSend(lp_wavePlayerOwner, lv_medium_Random, true);
    }
    else if (auto7B4E9454_val == 3) {
        AIAttackWaveSend(lp_wavePlayerOwner, lv_hard_Random, true);
    }
    else if (auto7B4E9454_val == 4) {
        AIAttackWaveSend(lp_wavePlayerOwner, lv_brutal_Random, true);
    }
    else if (auto7B4E9454_val == 5) {
        AIAttackWaveSend(lp_wavePlayerOwner, lv_insane_Random, true);
    }
    else {
    }
}

void lib9770F675_gf_AIAdvancedWaveSPAWN (int lp_spawnOwner, point lp_spawnLocationPoint, point lp_spawnAttackPoint, int lp_easyUnitBaseCount, int lp_mediumUnitBaseCount, int lp_hardUnitBaseCount, int lp_brutalUnitBaseCount, string lp_unitType) {
    // Variable Declarations
    int lv_easy_Random;
    int lv_medium_Random;
    int lv_hard_Random;
    int lv_brutal_Random;
    int lv_insane_Random;
    int lv_randomInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_easy_Random = 1;
    lv_medium_Random = 1;
    lv_hard_Random = 1;
    lv_brutal_Random = 1;
    lv_insane_Random = 1;
    lv_randomInt = 1;

    // Implementation
    lv_easy_Random = RandomInt(lp_easyUnitBaseCount, (lp_easyUnitBaseCount + 1));
    lv_medium_Random = RandomInt(lp_mediumUnitBaseCount, (lp_mediumUnitBaseCount + 2));
    lv_hard_Random = RandomInt(lp_hardUnitBaseCount, (lp_hardUnitBaseCount + 2));
    lv_brutal_Random = RandomInt(lp_brutalUnitBaseCount, (lp_brutalUnitBaseCount + 3));
    lv_insane_Random = RandomInt(lp_brutalUnitBaseCount, (lp_brutalUnitBaseCount + 5));
    if ((PlayerDifficulty(lp_spawnOwner) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(lv_easy_Random, lp_unitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
    }
    else {
        if ((PlayerDifficulty(lp_spawnOwner) == 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_medium_Random, lp_unitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
            AISetGroupSuicide(UnitLastCreatedGroup(), true);
        }
        else {
            if ((PlayerDifficulty(lp_spawnOwner) == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(lv_hard_Random, lp_unitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
                AISetGroupSuicide(UnitLastCreatedGroup(), true);
            }
            else {
                if ((PlayerDifficulty(lp_spawnOwner) == 4)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_brutal_Random, lp_unitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
                    AISetGroupSuicide(UnitLastCreatedGroup(), true);
                }
                else {
                    if ((PlayerDifficulty(lp_spawnOwner) == 5)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(lv_insane_Random, lp_unitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
                        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
                        AISetGroupSuicide(UnitLastCreatedGroup(), true);
                    }

                }
            }
        }
    }
}

void lib9770F675_gf_EnemyProtossWarpIn (unit lp_superWarpGate, string lp_warpedUnit, point lp_warpPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_warpedUnit == "Zealot")) {
        UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
    }
    else {
        if ((lp_warpedUnit == "Dragoon")) {
            UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
        }
        else {
            if ((lp_warpedUnit == "HighTemplar")) {
                UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 3), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
            }
            else {
                if ((lp_warpedUnit == "Archon")) {
                    UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 9), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                }
                else {
                    if ((lp_warpedUnit == "Scout")) {
                        UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                    }
                    else {
                        if ((lp_warpedUnit == "Carrier")) {
                            UnitIssueOrder(lp_superWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), RegionRandomPoint(RegionCircle(lp_warpPoint, 5.0))), c_orderQueueAddToEnd);
                        }

                    }
                }
            }
        }
    }
}

trigger auto_lib9770F675_gf_TextCrawl_Trigger = null;
text auto_lib9770F675_gf_TextCrawl_lp_line1;
text auto_lib9770F675_gf_TextCrawl_lp_line2;
fixed auto_lib9770F675_gf_TextCrawl_lp_line1writeout;
fixed auto_lib9770F675_gf_TextCrawl_lp_line2writeout;

void lib9770F675_gf_TextCrawl (text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_TextCrawl_lp_line1 = lp_line1;
    auto_lib9770F675_gf_TextCrawl_lp_line2 = lp_line2;
    auto_lib9770F675_gf_TextCrawl_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_TextCrawl_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_TextCrawl_Trigger == null) {
        auto_lib9770F675_gf_TextCrawl_Trigger = TriggerCreate("auto_lib9770F675_gf_TextCrawl_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_TextCrawl_Trigger, false, false);
}

bool auto_lib9770F675_gf_TextCrawl_TriggerFunc (bool testConds, bool runActions) {
    text lp_line1 = auto_lib9770F675_gf_TextCrawl_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_TextCrawl_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_TextCrawl_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_TextCrawl_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "MRTransitionText";
    lv_color = Color(74.12, 99.22, 73.33);

    // Implementation
    lv_line1writeout = (0.06 * lp_line1writeout);
    lv_line2writeout = (0.06 * lp_line2writeout);
    DialogCreate(1280, 700, c_anchorLeft, 300, 0, false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    Wait(0.5, c_timeReal);
    TriggerExecute(lib9770F675_gt_TextCrawlSound, false, false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_F50D1C3D", "Style", StringToText((lv_style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_F50D1C3D", "Color", StringToText(libNtve_gf_ConvertColorToString(lv_color)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_F50D1C3D", "Text", lp_line1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 225, TextExpressionAssemble("Param/Expression/lib_9770F675_F50D1C3D"), ColorWithAlpha(0,0,0,0), true, lv_line1writeout);
    lv_line1 = DialogControlLastCreated();
    Wait(lv_line1writeout, c_timeReal);
    TriggerStop(lib9770F675_gt_TextCrawlSound);
    Wait(0.5, c_timeReal);
    TriggerExecute(lib9770F675_gt_TextCrawlSound, false, false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_B2DDB9EE", "Style", StringToText((lv_style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_B2DDB9EE", "Color", StringToText(libNtve_gf_ConvertColorToString(lv_color)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_B2DDB9EE", "Text", lp_line2);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 290, TextExpressionAssemble("Param/Expression/lib_9770F675_B2DDB9EE"), ColorWithAlpha(0,0,0,0), true, lv_line2writeout);
    lv_line2 = DialogControlLastCreated();
    Wait(lv_line2writeout, c_timeReal);
    TriggerEnable(lib9770F675_gt_TextCrawlSound, false);
    TriggerStop(lib9770F675_gt_TextCrawlSound);
    Wait(((lv_line1writeout + lv_line2writeout) * 2.0), c_timeReal);
    DialogControlFadeTransparency(lv_line1, PlayerGroupAll(), 1.0, 100.0);
    DialogControlFadeTransparency(lv_line2, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

trigger auto_lib9770F675_gf_PlanetProfile_Trigger = null;
text auto_lib9770F675_gf_PlanetProfile_lp_planet;
text auto_lib9770F675_gf_PlanetProfile_lp_description;
string auto_lib9770F675_gf_PlanetProfile_lp_planetString;

void lib9770F675_gf_PlanetProfile (text lp_planet, text lp_description, string lp_planetString) {
    auto_lib9770F675_gf_PlanetProfile_lp_planet = lp_planet;
    auto_lib9770F675_gf_PlanetProfile_lp_description = lp_description;
    auto_lib9770F675_gf_PlanetProfile_lp_planetString = lp_planetString;

    if (auto_lib9770F675_gf_PlanetProfile_Trigger == null) {
        auto_lib9770F675_gf_PlanetProfile_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetProfile_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetProfile_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetProfile_TriggerFunc (bool testConds, bool runActions) {
    text lp_planet = auto_lib9770F675_gf_PlanetProfile_lp_planet;
    text lp_description = auto_lib9770F675_gf_PlanetProfile_lp_description;
    string lp_planetString = auto_lib9770F675_gf_PlanetProfile_lp_planetString;

    // Automatic Variable Declarations
    // Implementation
    BankReload(lib9770F675_gv_sCMR);
    BankWait(lib9770F675_gv_sCMR);
    if ((BankKeyExists(lib9770F675_gv_sCMR, "Codex", lp_planetString) == false)) {
        if ((lib9770F675_gv_optionsProfilesPlanet == true)) {
            lib9770F675_gv_intelHeaderPosition += 1;
            if ((TriggerActiveCount(lib9770F675_gt_IntelNotify) == 0)) {
                TriggerExecute(lib9770F675_gt_IntelNotify, false, false);
            }

            Wait(1.0, c_timeReal);
            TextExpressionSetToken("Param/Expression/lib_9770F675_DF42F70C", "Style", StringToText(("HelpGameMechanicsPanelHeader")));
            TextExpressionSetToken("Param/Expression/lib_9770F675_DF42F70C", "Planet", lp_planet);
            TextExpressionSetToken("Param/Expression/lib_9770F675_DF42F70C", "Description", lp_description);
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lib9770F675_gv_sCMRCore.lv_pPlanetaryProfile, libNtve_ge_TipType_NormalTip), TextExpressionAssemble("Param/Expression/lib_9770F675_DF42F70C"), (lib9770F675_gv_sCMRCore.lv_pPlanetaryProfileNew + lp_planet), "Assets\\Textures\\btn-shield-protoss-plasmashields.dds");
            lib9770F675_gv_intelHeaderPosition = 0;
        }

        BankValueSetFromFlag(lib9770F675_gv_sCMR, "Codex", lp_planetString, true);
        Wait(1.0, c_timeReal);
        BankSave(lib9770F675_gv_sCMR);
    }

    return true;
}

trigger auto_lib9770F675_gf_UnitProfile_Trigger = null;
string auto_lib9770F675_gf_UnitProfile_lp_unit;
string auto_lib9770F675_gf_UnitProfile_lp_icon;

void lib9770F675_gf_UnitProfile (string lp_unit, string lp_icon) {
    auto_lib9770F675_gf_UnitProfile_lp_unit = lp_unit;
    auto_lib9770F675_gf_UnitProfile_lp_icon = lp_icon;

    if (auto_lib9770F675_gf_UnitProfile_Trigger == null) {
        auto_lib9770F675_gf_UnitProfile_Trigger = TriggerCreate("auto_lib9770F675_gf_UnitProfile_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_UnitProfile_Trigger, false, false);
}

bool auto_lib9770F675_gf_UnitProfile_TriggerFunc (bool testConds, bool runActions) {
    string lp_unit = auto_lib9770F675_gf_UnitProfile_lp_unit;
    string lp_icon = auto_lib9770F675_gf_UnitProfile_lp_icon;

    // Automatic Variable Declarations
    // Implementation
    BankReload(lib9770F675_gv_sCMR);
    BankWait(lib9770F675_gv_sCMR);
    if ((BankKeyExists(lib9770F675_gv_sCMR, "Codex", lp_unit) == false)) {
        if ((lib9770F675_gv_optionsProfilesUnit == true)) {
            lib9770F675_gv_intelHeaderPosition += 1;
            if ((TriggerActiveCount(lib9770F675_gt_IntelNotify) == 0)) {
                TriggerExecute(lib9770F675_gt_IntelNotify, false, false);
            }

            Wait(1.0, c_timeReal);
            if (((lp_unit == "Dropship") || (lp_unit == "ScienceVessel") || (lp_unit == "Overlord") || (lp_unit == "Queen") || (lp_unit == "QueenClassic") || (lp_unit == "Defiler") || (lp_unit == "DefilerMP") || (lp_unit == "DarkArchon") || (lp_unit == "DarkArchonSCMR") || (lp_unit == "Observer") || (lp_unit == "Shuttle"))) {
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(("Unit/Name/" + lp_unit)), libNtve_ge_TipType_NewUnit), (StringExternal(("Button/Tooltip/" + lp_unit)) + StringExternal("Param/Value/lib_9770F675_A01493FB") + StringExternal("Param/Value/lib_9770F675_F931FF7C")), (lib9770F675_gv_sCMRCore.lv_pUnitProfileNew + StringExternal(("Unit/Name/" + lp_unit))), lp_icon);
            }
            else {
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(("Unit/Name/" + lp_unit)), libNtve_ge_TipType_NewUnit), (StringExternal(("Button/Tooltip/" + lp_unit)) + StringExternal("Param/Value/lib_9770F675_063E3178") + StringExternal(("Weapon/Tip/" + lp_unit))), (lib9770F675_gv_sCMRCore.lv_pUnitProfileNew + StringExternal(("Unit/Name/" + lp_unit))), lp_icon);
            }
            lib9770F675_gv_intelHeaderPosition = 0;
        }

        BankValueSetFromFlag(lib9770F675_gv_sCMR, "Codex", lp_unit, true);
        Wait(1.0, c_timeReal);
        BankSave(lib9770F675_gv_sCMR);
    }

    return true;
}

trigger auto_lib9770F675_gf_CharacterProfile_Trigger = null;
string auto_lib9770F675_gf_CharacterProfile_lp_character;
string auto_lib9770F675_gf_CharacterProfile_lp_icon;

void lib9770F675_gf_CharacterProfile (string lp_character, string lp_icon) {
    auto_lib9770F675_gf_CharacterProfile_lp_character = lp_character;
    auto_lib9770F675_gf_CharacterProfile_lp_icon = lp_icon;

    if (auto_lib9770F675_gf_CharacterProfile_Trigger == null) {
        auto_lib9770F675_gf_CharacterProfile_Trigger = TriggerCreate("auto_lib9770F675_gf_CharacterProfile_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_CharacterProfile_Trigger, false, false);
}

bool auto_lib9770F675_gf_CharacterProfile_TriggerFunc (bool testConds, bool runActions) {
    string lp_character = auto_lib9770F675_gf_CharacterProfile_lp_character;
    string lp_icon = auto_lib9770F675_gf_CharacterProfile_lp_icon;

    // Automatic Variable Declarations
    // Implementation
    BankReload(lib9770F675_gv_sCMR);
    BankWait(lib9770F675_gv_sCMR);
    if ((BankKeyExists(lib9770F675_gv_sCMR, "Codex", lp_character) == false)) {
        if ((lib9770F675_gv_optionsProfilesCharacter == true)) {
            lib9770F675_gv_intelHeaderPosition += 1;
            if ((TriggerActiveCount(lib9770F675_gt_IntelNotify) == 0)) {
                TriggerExecute(lib9770F675_gt_IntelNotify, false, false);
            }

            Wait(1.0, c_timeReal);
            TextExpressionSetToken("Param/Expression/lib_9770F675_B0286073", "Style", StringToText(("HelpGameMechanicsPanelHeader")));
            TextExpressionSetToken("Param/Expression/lib_9770F675_B0286073", "Character", StringExternal(("Unit/Name/" + lp_character)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_B0286073", "Description", StringExternal(("Button/Tooltip/" + lp_character)));
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lib9770F675_gv_sCMRCore.lv_pUnitCharacterNew, libNtve_ge_TipType_NormalTip), TextExpressionAssemble("Param/Expression/lib_9770F675_B0286073"), (lib9770F675_gv_sCMRCore.lv_pUnitCharacterNew + StringExternal(("Unit/Name/" + lp_character))), lp_icon);
            lib9770F675_gv_intelHeaderPosition = 0;
        }

        BankValueSetFromFlag(lib9770F675_gv_sCMR, "Codex", lp_character, true);
        Wait(1.0, c_timeReal);
        BankSave(lib9770F675_gv_sCMR);
    }

    return true;
}

void lib9770F675_gf_Credits (int lp_headers, text lp_header, text lp_credits, text lp_header2, text lp_credits2, text lp_header3, text lp_credits3) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_headers == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (lp_header + StringExternal("Param/Value/lib_9770F675_D73C9999") + lp_credits));
    }
    else {
        if ((lp_headers == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (lp_header + StringExternal("Param/Value/lib_9770F675_E5437FA7") + lp_credits + StringExternal("Param/Value/lib_9770F675_816E74E0") + lp_header2 + StringExternal("Param/Value/lib_9770F675_2522B573") + lp_credits2));
        }
        else {
            if ((lp_headers == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (lp_header + StringExternal("Param/Value/lib_9770F675_14C09DAD") + lp_credits + StringExternal("Param/Value/lib_9770F675_C133638C") + lp_header2 + StringExternal("Param/Value/lib_9770F675_3DE88684") + lp_credits2 + StringExternal("Param/Value/lib_9770F675_5C8308D1") + lp_header3 + StringExternal("Param/Value/lib_9770F675_81EFB2E2") + lp_credits3));
            }

        }
    }
}

void lib9770F675_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        lib9770F675_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        lib9770F675_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void lib9770F675_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((lib9770F675_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(lib9770F675_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(lib9770F675_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        lib9770F675_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(lib9770F675_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(lib9770F675_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(lib9770F675_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_lib9770F675_gf_CinematicFade4_Trigger = null;
bool auto_lib9770F675_gf_CinematicFade4_lp_fadeIn;
fixed auto_lib9770F675_gf_CinematicFade4_lp_duration;
color auto_lib9770F675_gf_CinematicFade4_lp_color;

void lib9770F675_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_lib9770F675_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_lib9770F675_gf_CinematicFade4_lp_duration = lp_duration;
    auto_lib9770F675_gf_CinematicFade4_lp_color = lp_color;

    if (auto_lib9770F675_gf_CinematicFade4_Trigger == null) {
        auto_lib9770F675_gf_CinematicFade4_Trigger = TriggerCreate("auto_lib9770F675_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_CinematicFade4_Trigger, false, false);
}

bool auto_lib9770F675_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_lib9770F675_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_lib9770F675_gf_CinematicFade4_lp_duration;
    color lp_color = auto_lib9770F675_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void lib9770F675_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib9770F675_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(lib9770F675_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib9770F675_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib9770F675_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void lib9770F675_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    // Variable Declarations
    string lv_light;

    // Automatic Variable Declarations
    string autoF1C768FC_val;

    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    if ((lib9770F675_gv_zS_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        lib9770F675_gv_zS_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(lib9770F675_gv_zS_PlanetPortrait, true);
        PortraitSetBackgroundVisible(lib9770F675_gv_zS_PlanetPortrait, false);
        PortraitSetBorderVisible(lib9770F675_gv_zS_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(lib9770F675_gv_zS_PlanetPortrait);
    }
    else {
        PortraitSetModel(lib9770F675_gv_zS_PlanetPortrait, lp_model, true);
    }
    autoF1C768FC_val = lp_model;
    if (autoF1C768FC_val == "EvolutionPlanetZerglingA") {
        lv_light = "EvolutionPlanetZerglingA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetZerglingB") {
        lv_light = "EvolutionPlanetZerglingB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetBanelingA") {
        lv_light = "EvolutionPlanetBanelingA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetBanelingB") {
        lv_light = "EvolutionPlanetBanelingB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetHydraliskA") {
        lv_light = "EvolutionPlanetHydraliskA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetHydraliskB") {
        lv_light = "EvolutionPlanetHydraliskB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetMutaliskA") {
        lv_light = "EvolutionPlanetMutaliskA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetMutaliskB") {
        lv_light = "EvolutionPlanetMutaliskB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetRoachA") {
        lv_light = "EvolutionPlanetRoachA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetRoachB") {
        lv_light = "EvolutionPlanetRoachB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetSwarmHostA") {
        lv_light = "EvolutionPlanetSwarmHostA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetSwarmHostB") {
        lv_light = "EvolutionPlanetSwarmHostB";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetUltraliskA") {
        lv_light = "EvolutionPlanetUltraliskA";
    }
    else if (autoF1C768FC_val == "EvolutionPlanetUltraliskB") {
        lv_light = "EvolutionPlanetUltraliskB";
    }
    else if (autoF1C768FC_val == "SMX1_Korhal1_Cutscene") {
        lv_light = "PlanetViewKorhalEX1";
    }
    else {
    }
    PortraitSetLight(lib9770F675_gv_zS_PlanetPortrait, lv_light);
    GameSetLighting(lv_light, 0.0);
    lib9770F675_gv_zS_PlanetPortraitEvoMissionLight = lp_light;
    PortraitSetPosition(lib9770F675_gv_zS_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(lib9770F675_gv_zS_PlanetPortrait, true);
    PortraitSetOffscreen(lib9770F675_gv_zS_PlanetPortrait, false);
    PortraitSetVisible(lib9770F675_gv_zS_PlanetPortrait, PlayerGroupAll(), true, true);
    lib9770F675_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    lib9770F675_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    lib9770F675_gv_zS_PlanetPortraitPlayerCamera = lp_camera;
    CameraApplyInfo(1, lp_camera, 0.0, -1, 10, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void lib9770F675_gf_ZoomInPlanetPortrait () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(lib9770F675_gv_zS_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(lib9770F675_gv_zS_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    Wait(0.5, c_timeGame);
    if ((lib9770F675_gv_zS_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(lib9770F675_gv_zS_PlanetPortraitEvoMissionLight, 1.0);
    }

    Wait(1.5, c_timeGame);
}

trigger auto_lib9770F675_gf_HidePlanetPortrait_Trigger = null;

void lib9770F675_gf_HidePlanetPortrait () {
    if (auto_lib9770F675_gf_HidePlanetPortrait_Trigger == null) {
        auto_lib9770F675_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_lib9770F675_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_lib9770F675_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    PortraitSetOffscreen(lib9770F675_gv_zS_PlanetPortrait, true);
    PortraitSetVisible(lib9770F675_gv_zS_PlanetPortrait, PlayerGroupAll(), false, false);
    if ((lib9770F675_gv_zS_PlanetPortraitEvoMissionLight != null)) {
        GameSetLighting(lib9770F675_gv_zS_PlanetPortraitEvoMissionLight, 0.0);
    }

    return true;
}

void lib9770F675_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto08783B36_g;
    int auto08783B36_u;
    unitgroup auto5CC2BAF2_g;
    int auto5CC2BAF2_u;

    // Variable Initialization

    // Implementation
    auto08783B36_g = lp_units;
    auto08783B36_u = UnitGroupCount(auto08783B36_g, c_unitCountAll);
    for (;; auto08783B36_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto08783B36_g, auto08783B36_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto5CC2BAF2_g = lp_units;
    auto5CC2BAF2_u = UnitGroupCount(auto5CC2BAF2_g, c_unitCountAll);
    for (;; auto5CC2BAF2_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto5CC2BAF2_g, auto5CC2BAF2_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void lib9770F675_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup auto3F0E0520_g;
    int auto3F0E0520_u;
    unitgroup autoC3F372A9_g;
    int autoC3F372A9_u;

    // Variable Initialization

    // Implementation
    auto3F0E0520_g = lp_units;
    auto3F0E0520_u = UnitGroupCount(auto3F0E0520_g, c_unitCountAll);
    for (;; auto3F0E0520_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto3F0E0520_g, auto3F0E0520_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    autoC3F372A9_g = lp_units;
    autoC3F372A9_u = UnitGroupCount(autoC3F372A9_g, c_unitCountAll);
    for (;; autoC3F372A9_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoC3F372A9_g, autoC3F372A9_u);
        if (lv_indexUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void lib9770F675_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto1B03D16B_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, lib9770F675_gf__LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto1B03D16B_val = lp_race;
    if (auto1B03D16B_val == lib9770F675_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            lib9770F675_gf__TerranDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            lib9770F675_gv__TP_DropPod_Location = lv_dropLocation;
            lib9770F675_gv__TP_DropPod_Units = lv_dropUnits;
            lib9770F675_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(lib9770F675_gt__TerranDropPod, true, false);
        }
    }
    else if (auto1B03D16B_val == lib9770F675_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            lib9770F675_gf__ZergDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            lib9770F675_gv__TP_DropPod_Location = lv_dropLocation;
            lib9770F675_gv__TP_DropPod_Units = lv_dropUnits;
            lib9770F675_gv__TP_DropPod_Player = lp_player;
            TriggerExecute(lib9770F675_gt__ZergDropPod, true, false);
        }
    }
    else {
    }
}

void lib9770F675_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool auto175DCEA8_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    lib9770F675_gv__TP_ZergDropPod_Building = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, lib9770F675_gf__LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    auto175DCEA8_val = lp_waitDontWait;
    if (auto175DCEA8_val == true) {
        lib9770F675_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (auto175DCEA8_val == false) {
        lib9770F675_gf__CreateDropPodForBuildingDontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_Trigger = null;
string auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
point auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
int auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_player;

void lib9770F675_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_buildingType = lp_buildingType;
    auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_landingPoint = lp_landingPoint;
    auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_player = lp_player;

    if (auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_Trigger == null) {
        auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_Trigger = TriggerCreate("auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_Trigger, false, false);
}

bool auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
    point lp_landingPoint = auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
    int lp_player = auto_lib9770F675_gf__CreateDropPodForBuildingDontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void lib9770F675_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup auto194852E7_g;
    int auto194852E7_u;
    unit auto194852E7_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    auto194852E7_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto194852E7_u = UnitGroupCount(auto194852E7_g, c_unitCountAll);
    for (;; auto194852E7_u -= 1) {
        auto194852E7_var = UnitGroupUnitFromEnd(auto194852E7_g, auto194852E7_u);
        if (auto194852E7_var == null) { break; }
        if ((UnitGetType(auto194852E7_var) != "ZergDropPodLarge") && (auto194852E7_var != UnitLastCreated())) {
            if (((UnitGetOwner(auto194852E7_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(auto194852E7_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(auto194852E7_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(auto194852E7_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(auto194852E7_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(lib9770F675_gv__TP_ZergDropPod_Building, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string lib9770F675_gf__LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup lib9770F675_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, lib9770F675_gf__LastDroppedUnitsDataTableName());
}

void lib9770F675_gf_MRRescueSingleUnit (unit lp_unit, int lp_newOwner, int lp_newOwnerColor) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    UnitSetOwner(lp_unit, lp_newOwner, false);
    UnitBehaviorAddPlayer(lp_unit, lv_behavior, 0, 1);
    if ((lp_newOwnerColor == 1)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 255,255,255 195,195,195 1.000000");
    }
    else {
        if ((lp_newOwnerColor == 2)) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 180,20,30 139,37,37 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 3)) {
                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 0,66,255 0,66,255 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 4)) {
                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 28,167,234 17,132,187 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 5)) {
                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 77,0,200 70,45,160 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 6)) {
                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 235,225,41 150,150,30 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 7)) {
                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 254,138,14 254,138,14 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 8)) {
                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 9)) {
                                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 10)) {
                                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 11)) {
                                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 12)) {
                                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 13)) {
                                                        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 14)) {
                                                            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 15)) {
                                                                libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 16)) {
                                                                    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib9770F675_gf_MRRescueRegion (region lp_region, int lp_newOwner, int lp_newOwnerColor, int lp_oldOwner) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    unitgroup autoC1840C7F_g;
    int autoC1840C7F_u;
    unit autoC1840C7F_var;

    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    autoC1840C7F_g = UnitGroup(null, lp_oldOwner, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC1840C7F_u = UnitGroupCount(autoC1840C7F_g, c_unitCountAll);
    for (;; autoC1840C7F_u -= 1) {
        autoC1840C7F_var = UnitGroupUnitFromEnd(autoC1840C7F_g, autoC1840C7F_u);
        if (autoC1840C7F_var == null) { break; }
        UnitSetOwner(autoC1840C7F_var, lp_newOwner, false);
        UnitBehaviorAddPlayer(autoC1840C7F_var, lv_behavior, 0, 1);
        if ((lp_newOwnerColor == 1)) {
            libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 255,255,255 195,195,195 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 2)) {
                libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 180,20,30 139,37,37 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 3)) {
                    libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 0,66,255 0,66,255 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 4)) {
                        libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 28,167,234 17,132,187 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 5)) {
                            libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 77,0,200 70,45,160 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 6)) {
                                libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 235,225,41 150,150,30 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 7)) {
                                    libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 254,138,14 254,138,14 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 8)) {
                                        libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 9)) {
                                            libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 10)) {
                                                libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 11)) {
                                                    libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 12)) {
                                                        libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 13)) {
                                                            libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 14)) {
                                                                libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 15)) {
                                                                    libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                                }
                                                                else {
                                                                    if ((lp_newOwnerColor == 16)) {
                                                                        libNtve_gf_SendActorMessageToUnit(autoC1840C7F_var, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib9770F675_gf_MRRescueAllUnitsFromPlayer (int lp_newOwner, int lp_newOwnerColor, int lp_oldOwner) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    unitgroup autoBD5E8C52_g;
    int autoBD5E8C52_u;
    unit autoBD5E8C52_var;

    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_newOwner) == "Terr")) {
        lv_behavior = "RescuedTerran";
    }
    else {
        if ((PlayerRace(lp_newOwner) == "Zerg")) {
            lv_behavior = "RescuedZerg";
        }
        else {
            if ((PlayerRace(lp_newOwner) == "Prot")) {
                lv_behavior = "RescuedProtoss";
            }

        }
    }
    autoBD5E8C52_g = UnitGroup(null, lp_oldOwner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD5E8C52_u = UnitGroupCount(autoBD5E8C52_g, c_unitCountAll);
    for (;; autoBD5E8C52_u -= 1) {
        autoBD5E8C52_var = UnitGroupUnitFromEnd(autoBD5E8C52_g, autoBD5E8C52_u);
        if (autoBD5E8C52_var == null) { break; }
        UnitSetOwner(autoBD5E8C52_var, lp_newOwner, false);
        UnitBehaviorAddPlayer(autoBD5E8C52_var, lv_behavior, 0, 1);
        if ((lp_newOwnerColor == 1)) {
            libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 255,255,255 195,195,195 1.000000");
        }
        else {
            if ((lp_newOwnerColor == 2)) {
                libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 180,20,30 139,37,37 1.000000");
            }
            else {
                if ((lp_newOwnerColor == 3)) {
                    libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 0,66,255 0,66,255 1.000000");
                }
                else {
                    if ((lp_newOwnerColor == 4)) {
                        libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 28,167,234 17,132,187 1.000000");
                    }
                    else {
                        if ((lp_newOwnerColor == 5)) {
                            libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 77,0,200 70,45,160 1.000000");
                        }
                        else {
                            if ((lp_newOwnerColor == 6)) {
                                libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 235,225,41 150,150,30 1.000000");
                            }
                            else {
                                if ((lp_newOwnerColor == 7)) {
                                    libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 254,138,14 254,138,14 1.000000");
                                }
                                else {
                                    if ((lp_newOwnerColor == 8)) {
                                        libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 22,128,0 22,128,0 1.000000");
                                    }
                                    else {
                                        if ((lp_newOwnerColor == 9)) {
                                            libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 204,166,252 204,166,252 1.000000");
                                        }
                                        else {
                                            if ((lp_newOwnerColor == 10)) {
                                                libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 31,1,201 31,1,201 1.000000");
                                            }
                                            else {
                                                if ((lp_newOwnerColor == 11)) {
                                                    libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 82,84,148 20,54,81 1.000000");
                                                }
                                                else {
                                                    if ((lp_newOwnerColor == 12)) {
                                                        libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 16,98,70 16,98,70 1.000000");
                                                    }
                                                    else {
                                                        if ((lp_newOwnerColor == 13)) {
                                                            libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 78,42,4 78,42,4 1.000000");
                                                        }
                                                        else {
                                                            if ((lp_newOwnerColor == 14)) {
                                                                libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 150,255,145 132,255,79 1.000000");
                                                            }
                                                            else {
                                                                if ((lp_newOwnerColor == 15)) {
                                                                    libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 35,35,35 15,15,15 1.000000");
                                                                }
                                                                else {
                                                                    if ((lp_newOwnerColor == 16)) {
                                                                        libNtve_gf_SendActorMessageToUnit(autoBD5E8C52_var, "SetTeamColor 229,91,176 229,91,176 1.000000");
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void lib9770F675_gf_MRMusicSetup () {
    // Variable Declarations
    string lv_defaultMusicTerranBroodWar;
    string lv_defaultMusicTerranBoth;
    string lv_defaultMusicZergBroodWar;
    string lv_defaultMusicZergBoth;
    string lv_defaultMusicProtossBroodWar;
    string lv_defaultMusicProtossBoth;
    int lv_randomBriefing;
    int lv_randomVictory;
    int lv_randomDefeat;
    int lv_musicChoice;
    bool lv_notBroodWar;

    // Automatic Variable Declarations
    int auto5A0E70FA_val;
    string autoEDA50C6F_val;
    string auto1599681B_val;
    string auto49712F99_val;

    // Variable Initialization
    lv_defaultMusicTerranBroodWar = "MusicTerranEpisode46";
    lv_defaultMusicTerranBoth = "MusicTerranEpisode46Both";
    lv_defaultMusicZergBroodWar = "MusicZergEpisode46";
    lv_defaultMusicZergBoth = "MusicZergEpisode46Both";
    lv_defaultMusicProtossBroodWar = "MusicProtossEpisode46";
    lv_defaultMusicProtossBoth = "MusicProtossEpisode46Both";

    // Implementation
    if ((lib9770F675_gv_iniEpisode > 3)) {
        lv_notBroodWar = true;
    }

    if ((lv_notBroodWar == true)) {
        lv_defaultMusicTerranBroodWar = "MusicTerranEpisode13";
        lv_defaultMusicTerranBoth = "MusicTerranEpisode13Both";
        lv_defaultMusicZergBroodWar = "MusicZergEpisode13";
        lv_defaultMusicZergBoth = "MusicZergEpisode13Both";
        lv_defaultMusicProtossBroodWar = "MusicProtossEpisode13";
        lv_defaultMusicProtossBoth = "MusicProtossEpisode13Both";
    }

    lv_randomBriefing = RandomInt(1, 2);
    lv_randomVictory = RandomInt(1, 2);
    lv_randomDefeat = RandomInt(1, 2);

    auto5A0E70FA_val = lib9770F675_gv_optionsMusic;
    if (auto5A0E70FA_val == 0) {
        autoEDA50C6F_val = PlayerRace(1);
        if (autoEDA50C6F_val == "Terr") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingTerranBW";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryTerranBW";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatTerranBW";
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicTerranBroodWar;
        }
        else if (autoEDA50C6F_val == "Zerg") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingZergBW";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryZergBW";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatZergBW";
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicZergBroodWar;
        }
        else if (autoEDA50C6F_val == "Prot") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingProtossBW";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryProtossBW";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatProtossBW";
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicProtossBroodWar;
        }
        else {
        }
    }
    else if (auto5A0E70FA_val == 1) {
        auto1599681B_val = PlayerRace(1);
        if (auto1599681B_val == "Terr") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingTerranSC2";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryTerranSC2";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatTerranSC2";
            lib9770F675_gv_mRMusic.lv_default = "MusicTerranSC2";
        }
        else if (auto1599681B_val == "Zerg") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingZergSC2";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryZergSC2";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatZergSC2";
            lib9770F675_gv_mRMusic.lv_default = "MusicZergSC2";
        }
        else if (auto1599681B_val == "Prot") {
            lib9770F675_gv_mRMusic.lv_briefing = "BriefingProtossSC2";
            lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryProtossSC2";
            lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatProtossSC2";
            lib9770F675_gv_mRMusic.lv_default = "MusicProtossSC2";
        }
        else {
        }
    }
    else if (auto5A0E70FA_val == 2) {
        auto49712F99_val = PlayerRace(1);
        if (auto49712F99_val == "Terr") {
            if ((lv_randomBriefing == 1)) {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingTerranBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingTerranSC2";
            }
            if ((lv_randomVictory == 1)) {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryTerranBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryTerranSC2";
            }
            if ((lv_randomDefeat == 1)) {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatTerranBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatTerranSC2";
            }
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicTerranBoth;
        }
        else if (auto49712F99_val == "Zerg") {
            if ((lv_randomBriefing == 1)) {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingZergBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingZergSC2";
            }
            if ((lv_randomVictory == 1)) {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryZergBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryZergSC2";
            }
            if ((lv_randomDefeat == 1)) {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatZergBW";
            }
            else {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatZergSC2";
            }
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicZergBoth;
        }
        else if (auto49712F99_val == "Prot") {
            if ((lv_randomBriefing == 1)) {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingProtossSC2";
            }
            else {
                lib9770F675_gv_mRMusic.lv_briefing = "BriefingProtossSC2";
            }
            if ((lv_randomVictory == 1)) {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryProtossSC2";
            }
            else {
                lib9770F675_gv_mRMusic.lv_victoryScreen = "VictoryProtossSC2";
            }
            if ((lv_randomDefeat == 1)) {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatProtossSC2";
            }
            else {
                lib9770F675_gv_mRMusic.lv_defeatScreen = "DefeatProtossSC2";
            }
            lib9770F675_gv_mRMusic.lv_default = lv_defaultMusicProtossBoth;
        }
        else {
        }
    }
    else {
    }

}

void lib9770F675_gf_ScoreScreen (int lp_players) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_playerLabelsOffsetY;
    int lv_n;
    int lv_scoreScreen;
    int lv_scoreBackground;
    string lv_txtstyle;
    int lv_resourcesGatheredMap;
    int lv_resources;
    int lv_resourcesSpentMap;
    fixed[10] lv_mapStatsDeathsUnits;
    int lv_m;
    fixed[10] lv_mapStatsKillsDeaths;
    fixed[10] lv_mapStatsSurvivalRate;

    // Automatic Variable Declarations
    unitgroup autoCBC2DE31_g;
    int autoCBC2DE31_u;
    unit autoCBC2DE31_var;
    const int auto096FAD51_ae = 5;
    const int auto096FAD51_ai = 1;
    const int auto5FCA6D55_ae = 5;
    const int auto5FCA6D55_ai = 1;
    const int auto707D95F2_ae = 8;
    const int auto707D95F2_ai = 1;
    const int autoADE10415_ae = 5;
    const int autoADE10415_ai = 1;
    const int auto214C80EE_ae = 9;
    const int auto214C80EE_ai = 1;
    const int autoB93D98FF_ae = 3;
    const int autoB93D98FF_ai = 1;
    const int autoB6600014_ae = 5;
    const int autoB6600014_ai = 1;
    const int auto34586922_ae = 20;
    const int auto34586922_ai = 2;
    const int auto8CDD3AC5_ae = 78;
    const int auto8CDD3AC5_ai = 3;
    const int auto528451F6_ae = 87;
    const int auto528451F6_ai = 2;
    const int autoE5DEC212_ae = 97;
    const int autoE5DEC212_ai = 1;
    const int auto6F78F3BD_ae = 9;
    const int auto6F78F3BD_ai = 1;
    const int autoD1FA2C40_ae = 5;
    const int autoD1FA2C40_ai = 1;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    if ((lib9770F675_gv_stayingalive == true)) {
        TriggerExecute(lib9770F675_gt_DisableScoreScreen, false, false);
    }
    else {
        TriggerExecute(lib9770F675_gt_ScoreScreenFailSafeVictory, false, false);
        CameraLockInput(1, true);
        autoCBC2DE31_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCBC2DE31_u = UnitGroupCount(autoCBC2DE31_g, c_unitCountAll);
        for (;; autoCBC2DE31_u -= 1) {
            autoCBC2DE31_var = UnitGroupUnitFromEnd(autoCBC2DE31_g, autoCBC2DE31_u);
            if (autoCBC2DE31_var == null) { break; }
            UnitSetState(autoCBC2DE31_var, c_unitStateHighlightable, false);
            UnitSetState(autoCBC2DE31_var, c_unitStateSelectable, false);
            UnitSetState(autoCBC2DE31_var, c_unitStateTargetable, false);
        }
        UnitPauseAll(true);
        UnitClearSelection(1);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        UIAlertClear(1);
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetCursorVisible(PlayerGroupAll(), true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
        SoundStopAllModelSounds();
        TriggerEnable(lib9770F675_gt_Autosave, false);
        lib9770F675_gv_players = lp_players;
        BankLoad("SCMR", 1);
        Wait(0.5, c_timeReal);
        lib9770F675_gv_sCMR = BankLastCreated();
        BankValueSetFromText(lib9770F675_gv_sCMR, "mapdata", "maplast", GameMapName());
        BankValueSetFromString(lib9770F675_gv_sCMR, "mapdata", "mapnext", (lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
        if ((lib9770F675_gv_iniMapProgressNextMap > lib9770F675_gv_iniMapProgressCurrent)) {
            lib9770F675_gv_iniEpisodeMapProgress = (lib9770F675_gv_iniEpisodeMapProgress + 1);
            lv_resourcesGatheredMap = (PlayerGetPropertyInt(1, c_playerPropMineralsCollected) + PlayerGetPropertyInt(1, c_playerPropVespeneCollected) + lib9770F675_gv_startingResources);
            lv_resources = (PlayerGetPropertyInt(1, c_playerPropMinerals) + PlayerGetPropertyInt(1, c_playerPropVespene));
            lv_resourcesSpentMap = (lv_resourcesGatheredMap - lv_resources);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "CampaignProgress", ("Ep" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_iniMapProgressNextMap);
            lib9770F675_gv_stats.lv_units = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Units" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_units[1]);
            lib9770F675_gv_stats.lv_startingUnits = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("StartingUnits" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_startingUnits[1]);
            lib9770F675_gv_stats.lv_kills = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Kills" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_kills[1]);
            lib9770F675_gv_stats.lv_deaths = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Deaths" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_deaths[1]);
            lib9770F675_gv_stats.lv_time = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Time" + IntToString(lib9770F675_gv_iniEpisode))) + FixedToInt(GameGetMissionTime()));
            lib9770F675_gv_stats.lv_resourcesGathered = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("ResourcesGathered" + IntToString(lib9770F675_gv_iniEpisode))) + lv_resourcesGatheredMap);
            lib9770F675_gv_stats.lv_resourcesSpent = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("ResourcesSpent" + IntToString(lib9770F675_gv_iniEpisode))) + lv_resourcesSpentMap);
            Wait(0.2, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("Progress" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_iniEpisodeMapProgress);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("Units" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_units);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("StartingUnits" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_startingUnits);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("Kills" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_kills);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("Deaths" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_deaths);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("Time" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_time);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("ResourcesGathered" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_resourcesGathered);
            BankValueSetFromInt(lib9770F675_gv_sCMR, "stats", ("ResourcesSpent" + IntToString(lib9770F675_gv_iniEpisode)), lib9770F675_gv_stats.lv_resourcesSpent);
        }

        if ((StringLength(lib9770F675_gv_iniNextCinematicLink) > 2)) {
            if ((lib9770F675_gv_optionsCinematics == true)) {
                BankValueSetFromString(lib9770F675_gv_sCMR, "cinematic", "VideoTexture", lib9770F675_gv_iniNextCinematicLink);
                lib9770F675_gv_loadCinematic = true;
            }

            if ((lib9770F675_gv_optionsCutsceneNotes == true)) {
                TextExpressionSetToken("Param/Expression/lib_9770F675_A36F61FF", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_A36F61FF", "Text", lib9770F675_gv_sCMRCore.lv_sCinematic);
                TextExpressionSetToken("Param/Expression/lib_9770F675_A36F61FF", "TextName", lib9770F675_gv_iniNextCinematic);
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorBottomLeft, 75, 50, TextExpressionAssemble("Param/Expression/lib_9770F675_A36F61FF"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
            }

        }

        Wait(0.5, c_timeReal);
        BankSave(lib9770F675_gv_sCMR);
        Wait(1.0, c_timeReal);
        DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
        lv_scoreScreen = DialogLastCreated();
        DialogSetFullscreen(lv_scoreScreen, true);
        libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_victoryImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        lv_scoreBackground = DialogControlLastCreated();
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypePanel, "SCMRScore/ScorescreenPanel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreBorder = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorTop, 0, 40, lib9770F675_gv_sCMRCore.lv_sVictory, ColorWithAlpha(0,0,0,0), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[8][1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TriggerDialogFrameTitle", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_2CB895D2", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_2CB895D2", "Text", lib9770F675_gv_iniNameMap);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, TextExpressionAssemble("Param/Expression/lib_9770F675_2CB895D2"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[1][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_48CE9F1F", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_48CE9F1F", "Text", lib9770F675_gv_sCMRCore.lv_sElapsedTime);
        TextExpressionSetToken("Param/Expression/lib_9770F675_48CE9F1F", "Time", TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, TextExpressionAssemble("Param/Expression/lib_9770F675_48CE9F1F"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[2][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -130, -100, lib9770F675_gv_sCMRCore.lv_sUnitsProduced, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[3][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 60, -100, lib9770F675_gv_sCMRCore.lv_sKilled, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[4][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 240, -100, lib9770F675_gv_sCMRCore.lv_sLost, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[5][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 420, -100, lib9770F675_gv_sCMRCore.lv_sKillsDeaths, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[6][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 600, -100, lib9770F675_gv_sCMRCore.lv_sSurvivalRate, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[7][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_C9365C89", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_C9365C89", "Text", lib9770F675_gv_iniPlayerScoreScreen[1]);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, TextExpressionAssemble("Param/Expression/lib_9770F675_C9365C89"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[1][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_n = 2;
        for ( ; ( (auto096FAD51_ai >= 0 && lv_n <= auto096FAD51_ae) || (auto096FAD51_ai < 0 && lv_n >= auto096FAD51_ae) ) ; lv_n += auto096FAD51_ai ) {
            if ((lp_players >= lv_n)) {
                lv_playerLabelsOffsetY = (80 * lv_n);
                if ((lib9770F675_gv_scoreScreenManual == false)) {
                    TextExpressionSetToken("Param/Expression/lib_9770F675_EF916BCF", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_EF916BCF", "Text", lib9770F675_gv_iniPlayerScoreScreen[lv_n]);
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_EF916BCF"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), (lv_n - 1)), false)), false, 2.0);
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_9770F675_88537CE3", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_88537CE3", "Text", lib9770F675_gv_iniPlayerScoreScreen[lv_n]);
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_88537CE3"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib9770F675_gv_scoreScreenManualPlayer[lv_n], false)), false, 2.0);
                }
                lib9770F675_gv_scoreScreenLabels[lv_n][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }

        }
        lv_playerLabelsOffsetY = 80;
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][1][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][1][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][2][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][2][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][3][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][3][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        if ((lib9770F675_gv_deaths[1] > 0)) {
            lv_mapStatsDeathsUnits[1] = (IntToFixed(lib9770F675_gv_deaths[1]) / IntToFixed(lib9770F675_gv_units[1]));
            if ((lv_mapStatsDeathsUnits[1] > 1)) {
                lv_mapStatsDeathsUnits[1] = 1.0;
            }

            TextExpressionSetToken("Param/Expression/lib_9770F675_4619E7B0", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_4619E7B0", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[1]) / IntToFixed(lib9770F675_gv_deaths[1])), 2));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_4619E7B0"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/lib_9770F675_B487714A", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_B487714A", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[1] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_1CE08B7A")));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_B487714A"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_9770F675_DBCFCDA8", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_DBCFCDA8", "Text", IntToText(lib9770F675_gv_kills[1]));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_DBCFCDA8"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/lib_9770F675_A62CDD27", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_A62CDD27", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_B32385D0")));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_A62CDD27"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
        }
        lv_n = 2;
        for ( ; ( (auto5FCA6D55_ai >= 0 && lv_n <= auto5FCA6D55_ae) || (auto5FCA6D55_ai < 0 && lv_n >= auto5FCA6D55_ae) ) ; lv_n += auto5FCA6D55_ai ) {
            if ((lp_players >= lv_n)) {
                if ((lib9770F675_gv_scoreScreenManual == false)) {
                    lv_playerIndex = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), (lv_n - 1));
                }
                else {
                    lv_playerIndex = lib9770F675_gv_scoreScreenManualPlayer[lv_n];
                }
                lv_playerLabelsOffsetY = (80 * lv_n);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][1][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_A65D0E07", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_A65D0E07", "Text", IntToText(lib9770F675_gv_units[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_A65D0E07"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][1][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][2][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_37AB63F0", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_37AB63F0", "Text", IntToText(lib9770F675_gv_kills[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_37AB63F0"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][2][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][3][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_5EDD6AE7", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_5EDD6AE7", "Text", IntToText(lib9770F675_gv_deaths[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_5EDD6AE7"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][3][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                if ((lib9770F675_gv_deaths[lv_playerIndex] > 0)) {
                    lv_mapStatsDeathsUnits[lv_playerIndex] = (IntToFixed(lib9770F675_gv_deaths[lv_playerIndex]) / IntToFixed(lib9770F675_gv_units[lv_playerIndex]));
                    if ((lv_mapStatsDeathsUnits[lv_playerIndex] > 1)) {
                        lv_mapStatsDeathsUnits[lv_playerIndex] = 1.0;
                    }

                    TextExpressionSetToken("Param/Expression/lib_9770F675_220C05C7", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_220C05C7", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[lv_playerIndex]) / IntToFixed(lib9770F675_gv_deaths[lv_playerIndex])), 2));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_220C05C7"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][4][2] = DialogControlLastCreated();
                    TextExpressionSetToken("Param/Expression/lib_9770F675_F29AD150", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_F29AD150", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[lv_playerIndex] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_CFBC6612")));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_F29AD150"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][5][2] = DialogControlLastCreated();
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_9770F675_4AB7F8EB", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_4AB7F8EB", "Text", IntToText(lib9770F675_gv_kills[lv_playerIndex]));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_4AB7F8EB"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][4][2] = DialogControlLastCreated();
                    TextExpressionSetToken("Param/Expression/lib_9770F675_CCF42FE7", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_CCF42FE7", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_3A9ADD83")));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_CCF42FE7"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][5][2] = DialogControlLastCreated();
                }
            }

        }
        Wait(1.0, c_timeReal);
        TriggerExecute(lib9770F675_gt_VictoryMusic, false, false);
        DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
        lib9770F675_gv_scoreScreenFailSafe = false;
        Wait(1.5, c_timeReal);
        DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Show");
        DialogControlSetVisible(lib9770F675_gv_scoreBorder, PlayerGroupAll(), true);
        Wait(0.87, c_timeReal);
        lv_n = 1;
        for ( ; ( (auto707D95F2_ai >= 0 && lv_n <= auto707D95F2_ae) || (auto707D95F2_ai < 0 && lv_n >= auto707D95F2_ae) ) ; lv_n += auto707D95F2_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), true);
        }
        lv_n = 1;
        for ( ; ( (autoADE10415_ai >= 0 && lv_n <= autoADE10415_ae) || (autoADE10415_ai < 0 && lv_n >= autoADE10415_ae) ) ; lv_n += autoADE10415_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), true);
        }
        lv_n = 1;
        for ( ; ( (auto214C80EE_ai >= 0 && lv_n <= auto214C80EE_ae) || (auto214C80EE_ai < 0 && lv_n >= auto214C80EE_ae) ) ; lv_n += auto214C80EE_ai ) {
            lv_m = 1;
            for ( ; ( (autoB93D98FF_ai >= 0 && lv_m <= autoB93D98FF_ae) || (autoB93D98FF_ai < 0 && lv_m >= autoB93D98FF_ae) ) ; lv_m += autoB93D98FF_ai ) {
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), true);
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
            }
        }
        libNtve_gf_DisplayScreenImage(1, (("Assets/Textures/" + lib9770F675_gv_iniPlayerDecal + ".dds")), c_triggerBlendModeNormal, 150, 125, c_anchorTop, 0, 80);
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_sContinueCampaign, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 374, 100);
        lib9770F675_gv_btnSSContinueCampaign = DialogControlLastCreated();
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bQuit, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 100, 100);
        lib9770F675_gv_btnSSQuit = DialogControlLastCreated();
        SoundPlay(SoundLink("combeep22", 0), PlayerGroupAll(), 100.0, 0.0);
        lv_n = 1;
        for ( ; ( (autoB6600014_ai >= 0 && lv_n <= autoB6600014_ae) || (autoB6600014_ai < 0 && lv_n >= autoB6600014_ae) ) ; lv_n += autoB6600014_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 6;
        for ( ; ( (auto34586922_ai >= 0 && lv_n <= auto34586922_ae) || (auto34586922_ai < 0 && lv_n >= auto34586922_ae) ) ; lv_n += auto34586922_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 21;
        for ( ; ( (auto8CDD3AC5_ai >= 0 && lv_n <= auto8CDD3AC5_ae) || (auto8CDD3AC5_ai < 0 && lv_n >= auto8CDD3AC5_ae) ) ; lv_n += auto8CDD3AC5_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 79;
        for ( ; ( (auto528451F6_ai >= 0 && lv_n <= auto528451F6_ae) || (auto528451F6_ai < 0 && lv_n >= auto528451F6_ae) ) ; lv_n += auto528451F6_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 88;
        for ( ; ( (autoE5DEC212_ai >= 0 && lv_n <= autoE5DEC212_ae) || (autoE5DEC212_ai < 0 && lv_n >= autoE5DEC212_ae) ) ; lv_n += autoE5DEC212_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lib9770F675_gf_ScoreScreenAnim(100);
        Wait(0.001, c_timeGame);
        SoundStop(SoundLastPlayed(), false);
        SoundPlay(SoundLink("combeep23", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.01, c_timeGame);
        lv_n = 1;
        for ( ; ( (auto6F78F3BD_ai >= 0 && lv_n <= auto6F78F3BD_ae) || (auto6F78F3BD_ai < 0 && lv_n >= auto6F78F3BD_ae) ) ; lv_n += auto6F78F3BD_ai ) {
            lv_m = 4;
            for ( ; ( (autoD1FA2C40_ai >= 0 && lv_m <= autoD1FA2C40_ae) || (autoD1FA2C40_ai < 0 && lv_m >= autoD1FA2C40_ae) ) ; lv_m += autoD1FA2C40_ai ) {
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
            }
        }
    }
}

void lib9770F675_gf_ScoreScreenDefeat (int lp_players) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_playerLabelsOffsetY;
    int lv_n;
    int lv_scoreScreen;
    int lv_scoreBackground;
    string lv_txtstyle;
    int lv_resourcesGatheredMap;
    int lv_resources;
    int lv_resourcesSpentMap;
    fixed[10] lv_mapStatsDeathsUnits;
    int lv_m;
    fixed[10] lv_mapStatsKillsDeaths;
    fixed[10] lv_mapStatsSurvivalRate;

    // Automatic Variable Declarations
    unitgroup auto966C77EA_g;
    int auto966C77EA_u;
    unit auto966C77EA_var;
    const int auto1DB008AB_ae = 8;
    const int auto1DB008AB_ai = 1;
    const int autoB195BFF6_ae = 5;
    const int autoB195BFF6_ai = 1;
    const int auto540E944B_ae = 5;
    const int auto540E944B_ai = 1;
    const int autoAA9285D6_ae = 8;
    const int autoAA9285D6_ai = 1;
    const int auto55A22749_ae = 5;
    const int auto55A22749_ai = 1;
    const int auto52E1A3B6_ae = 9;
    const int auto52E1A3B6_ai = 1;
    const int autoE474F251_ae = 3;
    const int autoE474F251_ai = 1;
    const int autoC57426BA_ae = 5;
    const int autoC57426BA_ai = 1;
    const int auto445603B9_ae = 20;
    const int auto445603B9_ai = 2;
    const int auto97471A3A_ae = 78;
    const int auto97471A3A_ai = 3;
    const int autoA85BBEF3_ae = 87;
    const int autoA85BBEF3_ai = 2;
    const int autoA3B096D6_ae = 97;
    const int autoA3B096D6_ai = 1;
    const int auto2C000D67_ae = 9;
    const int auto2C000D67_ai = 1;
    const int autoEB4887AD_ae = 5;
    const int autoEB4887AD_ai = 1;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    if ((lib9770F675_gv_stayingalive == true)) {
        TriggerExecute(lib9770F675_gt_DisableScoreScreen, false, false);
    }
    else {
        TriggerExecute(lib9770F675_gt_ScoreScreenFailSafeDefeat, false, false);
        CameraLockInput(1, true);
        auto966C77EA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto966C77EA_u = UnitGroupCount(auto966C77EA_g, c_unitCountAll);
        for (;; auto966C77EA_u -= 1) {
            auto966C77EA_var = UnitGroupUnitFromEnd(auto966C77EA_g, auto966C77EA_u);
            if (auto966C77EA_var == null) { break; }
            UnitSetState(auto966C77EA_var, c_unitStateHighlightable, false);
            UnitSetState(auto966C77EA_var, c_unitStateSelectable, false);
            UnitSetState(auto966C77EA_var, c_unitStateTargetable, false);
        }
        UnitPauseAll(true);
        UnitClearSelection(1);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        UIAlertClear(1);
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetCursorVisible(PlayerGroupAll(), true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
        SoundStopAllModelSounds();
        TriggerEnable(lib9770F675_gt_Autosave, false);
        lib9770F675_gv_players = lp_players;
        if ((lib9770F675_gv_scoresLocked == false)) {
            lv_n = 1;
            for ( ; ( (auto1DB008AB_ai >= 0 && lv_n <= auto1DB008AB_ae) || (auto1DB008AB_ai < 0 && lv_n >= auto1DB008AB_ae) ) ; lv_n += auto1DB008AB_ai ) {
                lib9770F675_gv_units[lv_n] = (lib9770F675_gv_units[lv_n] + PlayerScoreValueGetAsInt(lv_n, "UnitsTrainedCount"));
                lib9770F675_gv_kills[lv_n] = PlayerScoreValueGetAsInt(lv_n, "UnitsKilledCount");
                lib9770F675_gv_deaths[lv_n] = PlayerScoreValueGetAsInt(lv_n, "UnitsLostCount");
            }
        }

        Wait(0.5, c_timeReal);
        if ((lib9770F675_gv_iniMapProgressNextMap > lib9770F675_gv_iniMapProgressCurrent)) {
            lib9770F675_gv_iniEpisodeMapProgress = (lib9770F675_gv_iniEpisodeMapProgress + 1);
            lv_resourcesGatheredMap = (PlayerGetPropertyInt(1, c_playerPropMineralsCollected) + PlayerGetPropertyInt(1, c_playerPropVespeneCollected) + lib9770F675_gv_startingResources);
            lv_resources = (PlayerGetPropertyInt(1, c_playerPropMinerals) + PlayerGetPropertyInt(1, c_playerPropVespene));
            lv_resourcesSpentMap = (lv_resourcesGatheredMap - lv_resources);
            lib9770F675_gv_stats.lv_units = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Units" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_units[1]);
            lib9770F675_gv_stats.lv_startingUnits = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("StartingUnits" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_startingUnits[1]);
            lib9770F675_gv_stats.lv_kills = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Kills" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_kills[1]);
            lib9770F675_gv_stats.lv_deaths = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Deaths" + IntToString(lib9770F675_gv_iniEpisode))) + lib9770F675_gv_deaths[1]);
            lib9770F675_gv_stats.lv_time = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Time" + IntToString(lib9770F675_gv_iniEpisode))) + FixedToInt(GameGetMissionTime()));
            lib9770F675_gv_stats.lv_resourcesGathered = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("ResourcesGathered" + IntToString(lib9770F675_gv_iniEpisode))) + lv_resourcesGatheredMap);
            lib9770F675_gv_stats.lv_resourcesSpent = (BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("ResourcesSpent" + IntToString(lib9770F675_gv_iniEpisode))) + lv_resourcesSpentMap);
            Wait(0.2, c_timeReal);
        }

        Wait(0.5, c_timeReal);
        Wait(1.0, c_timeReal);
        DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
        lv_scoreScreen = DialogLastCreated();
        DialogSetFullscreen(lv_scoreScreen, true);
        libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_defeatImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        lv_scoreBackground = DialogControlLastCreated();
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypePanel, "SCMRScore/ScorescreenPanel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreBorder = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorTop, 0, 40, lib9770F675_gv_sCMRCore.lv_sDefeat, ColorWithAlpha(0,0,0,0), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[8][1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TriggerDialogFrameTitle", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_414659B1", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_414659B1", "Text", lib9770F675_gv_iniNameMap);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, TextExpressionAssemble("Param/Expression/lib_9770F675_414659B1"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[1][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_86EDBBD0", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_86EDBBD0", "Text", lib9770F675_gv_sCMRCore.lv_sElapsedTime);
        TextExpressionSetToken("Param/Expression/lib_9770F675_86EDBBD0", "Time", TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, TextExpressionAssemble("Param/Expression/lib_9770F675_86EDBBD0"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[2][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -130, -100, lib9770F675_gv_sCMRCore.lv_sUnitsProduced, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[3][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 60, -100, lib9770F675_gv_sCMRCore.lv_sKilled, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[4][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 240, -100, lib9770F675_gv_sCMRCore.lv_sLost, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[5][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 420, -100, lib9770F675_gv_sCMRCore.lv_sKillsDeaths, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[6][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 600, -100, lib9770F675_gv_sCMRCore.lv_sSurvivalRate, Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[7][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_9770F675_8674F7A4", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_8674F7A4", "Text", lib9770F675_gv_iniPlayerScoreScreen[1]);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, TextExpressionAssemble("Param/Expression/lib_9770F675_8674F7A4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
        lib9770F675_gv_scoreScreenLabels[1][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_n = 2;
        for ( ; ( (autoB195BFF6_ai >= 0 && lv_n <= autoB195BFF6_ae) || (autoB195BFF6_ai < 0 && lv_n >= autoB195BFF6_ae) ) ; lv_n += autoB195BFF6_ai ) {
            if ((lp_players >= lv_n)) {
                lv_playerLabelsOffsetY = (80 * lv_n);
                TextExpressionSetToken("Param/Expression/lib_9770F675_65E5EE59", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_65E5EE59", "Text", lib9770F675_gv_iniPlayerScoreScreen[lv_n]);
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_65E5EE59"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), (lv_n - 1)), false)), false, 2.0);
                lib9770F675_gv_scoreScreenLabels[lv_n][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }

        }
        lv_playerLabelsOffsetY = 80;
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][1][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][1][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][2][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][2][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
        lib9770F675_gv_scoreScreenMatrix[1][3][1] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
        lib9770F675_gv_scoreScreenMatrix[1][3][2] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        if ((lib9770F675_gv_deaths[1] > 0)) {
            lv_mapStatsDeathsUnits[1] = (IntToFixed(lib9770F675_gv_deaths[1]) / IntToFixed(lib9770F675_gv_units[1]));
            if ((lv_mapStatsDeathsUnits[1] > 1)) {
                lv_mapStatsDeathsUnits[1] = 1.0;
            }

            TextExpressionSetToken("Param/Expression/lib_9770F675_347BCF57", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_347BCF57", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[1]) / IntToFixed(lib9770F675_gv_deaths[1])), 2));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_347BCF57"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/lib_9770F675_E35B8BFE", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_E35B8BFE", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[1] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_F0F2418E")));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_E35B8BFE"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_9770F675_337669BE", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_337669BE", "Text", IntToText(lib9770F675_gv_kills[1]));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_337669BE"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/lib_9770F675_1C368317", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_1C368317", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_DA817356")));
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_1C368317"), Color(100,100,100), false, 2.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
        }
        lv_n = 2;
        for ( ; ( (auto540E944B_ai >= 0 && lv_n <= auto540E944B_ae) || (auto540E944B_ai < 0 && lv_n >= auto540E944B_ae) ) ; lv_n += auto540E944B_ai ) {
            if ((lp_players >= lv_n)) {
                lv_playerIndex = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), (lv_n - 1));
                lv_playerLabelsOffsetY = (80 * lv_n);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][1][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_33FF3131", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_33FF3131", "Text", IntToText(lib9770F675_gv_units[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_33FF3131"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][1][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][2][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_52F970EF", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_52F970EF", "Text", IntToText(lib9770F675_gv_kills[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_52F970EF"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][2][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
                lib9770F675_gv_scoreScreenMatrix[lv_n][3][1] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_9770F675_E353C2A1", "Style", StringToText((lv_txtstyle)));
                TextExpressionSetToken("Param/Expression/lib_9770F675_E353C2A1", "Text", IntToText(lib9770F675_gv_deaths[lv_playerIndex]));
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_E353C2A1"), Color(100,100,100), false, 2.0);
                lib9770F675_gv_scoreScreenMatrix[lv_n][3][2] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                if ((lib9770F675_gv_deaths[lv_playerIndex] > 0)) {
                    lv_mapStatsDeathsUnits[lv_playerIndex] = (IntToFixed(lib9770F675_gv_deaths[lv_playerIndex]) / IntToFixed(lib9770F675_gv_units[lv_playerIndex]));
                    if ((lv_mapStatsDeathsUnits[lv_playerIndex] > 1)) {
                        lv_mapStatsDeathsUnits[lv_playerIndex] = 1.0;
                    }

                    TextExpressionSetToken("Param/Expression/lib_9770F675_34FA1602", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_34FA1602", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[lv_playerIndex]) / IntToFixed(lib9770F675_gv_deaths[lv_playerIndex])), 2));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_34FA1602"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][4][2] = DialogControlLastCreated();
                    TextExpressionSetToken("Param/Expression/lib_9770F675_62C16DFB", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_62C16DFB", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[lv_playerIndex] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_9ECBB5B9")));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_62C16DFB"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][5][2] = DialogControlLastCreated();
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_9770F675_E8E5FFDD", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_E8E5FFDD", "Text", IntToText(lib9770F675_gv_kills[lv_playerIndex]));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_E8E5FFDD"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][4][2] = DialogControlLastCreated();
                    TextExpressionSetToken("Param/Expression/lib_9770F675_E02E8365", "Style", StringToText((lv_txtstyle)));
                    TextExpressionSetToken("Param/Expression/lib_9770F675_E02E8365", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_73D23EE0")));
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_E02E8365"), Color(100,100,100), false, 2.0);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    lib9770F675_gv_scoreScreenMatrix[lv_playerIndex][5][2] = DialogControlLastCreated();
                }
            }

        }
        Wait(1.0, c_timeReal);
        TriggerExecute(lib9770F675_gt_DefeatMusic, false, false);
        DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
        lib9770F675_gv_scoreScreenFailSafe = false;
        Wait(1.5, c_timeReal);
        DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Show");
        DialogControlSetVisible(lib9770F675_gv_scoreBorder, PlayerGroupAll(), true);
        Wait(0.87, c_timeReal);
        lv_n = 1;
        for ( ; ( (autoAA9285D6_ai >= 0 && lv_n <= autoAA9285D6_ae) || (autoAA9285D6_ai < 0 && lv_n >= autoAA9285D6_ae) ) ; lv_n += autoAA9285D6_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), true);
        }
        lv_n = 1;
        for ( ; ( (auto55A22749_ai >= 0 && lv_n <= auto55A22749_ae) || (auto55A22749_ai < 0 && lv_n >= auto55A22749_ae) ) ; lv_n += auto55A22749_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), true);
        }
        lv_n = 1;
        for ( ; ( (auto52E1A3B6_ai >= 0 && lv_n <= auto52E1A3B6_ae) || (auto52E1A3B6_ai < 0 && lv_n >= auto52E1A3B6_ae) ) ; lv_n += auto52E1A3B6_ai ) {
            lv_m = 1;
            for ( ; ( (autoE474F251_ai >= 0 && lv_m <= autoE474F251_ae) || (autoE474F251_ai < 0 && lv_m >= autoE474F251_ae) ) ; lv_m += autoE474F251_ai ) {
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), true);
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
            }
        }
        libNtve_gf_DisplayScreenImage(1, (("Assets/Textures/" + lib9770F675_gv_iniPlayerDecal + ".dds")), c_triggerBlendModeNormal, 150, 125, c_anchorTop, 0, 80);
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_sRestartMission, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 374, 100);
        lib9770F675_gv_btnSSRestart = DialogControlLastCreated();
        DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bQuit, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 100, 100);
        lib9770F675_gv_btnSSQuit = DialogControlLastCreated();
        SoundPlay(SoundLink("combeep22", 0), PlayerGroupAll(), 100.0, 0.0);
        lv_n = 1;
        for ( ; ( (autoC57426BA_ai >= 0 && lv_n <= autoC57426BA_ae) || (autoC57426BA_ai < 0 && lv_n >= autoC57426BA_ae) ) ; lv_n += autoC57426BA_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 6;
        for ( ; ( (auto445603B9_ai >= 0 && lv_n <= auto445603B9_ae) || (auto445603B9_ai < 0 && lv_n >= auto445603B9_ae) ) ; lv_n += auto445603B9_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 21;
        for ( ; ( (auto97471A3A_ai >= 0 && lv_n <= auto97471A3A_ae) || (auto97471A3A_ai < 0 && lv_n >= auto97471A3A_ae) ) ; lv_n += auto97471A3A_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 79;
        for ( ; ( (autoA85BBEF3_ai >= 0 && lv_n <= autoA85BBEF3_ae) || (autoA85BBEF3_ai < 0 && lv_n >= autoA85BBEF3_ae) ) ; lv_n += autoA85BBEF3_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lv_n = 88;
        for ( ; ( (autoA3B096D6_ai >= 0 && lv_n <= autoA3B096D6_ae) || (autoA3B096D6_ai < 0 && lv_n >= autoA3B096D6_ae) ) ; lv_n += autoA3B096D6_ai ) {
            lib9770F675_gf_ScoreScreenAnim(lv_n);
            Wait(0.001, c_timeGame);
        }
        lib9770F675_gf_ScoreScreenAnim(100);
        Wait(0.001, c_timeGame);
        SoundStop(SoundLastPlayed(), false);
        SoundPlay(SoundLink("combeep23", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.01, c_timeGame);
        lv_n = 1;
        for ( ; ( (auto2C000D67_ai >= 0 && lv_n <= auto2C000D67_ae) || (auto2C000D67_ai < 0 && lv_n >= auto2C000D67_ae) ) ; lv_n += auto2C000D67_ai ) {
            lv_m = 4;
            for ( ; ( (autoEB4887AD_ai >= 0 && lv_m <= autoEB4887AD_ae) || (autoEB4887AD_ai < 0 && lv_m >= autoEB4887AD_ae) ) ; lv_m += autoEB4887AD_ai ) {
                DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
            }
        }
    }
}

void lib9770F675_gf_ScoreScreenAnim (int lp_percent) {
    // Variable Declarations
    string lv_txtstyle;
    int lv_i;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int autoA440DDA4_ae = 5;
    const int autoA440DDA4_ai = 1;

    // Variable Initialization
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][1][1], ((lib9770F675_gv_units[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_9843AE54", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_9843AE54", "Text", IntToText(((lib9770F675_gv_units[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][1][2], TextExpressionAssemble("Param/Expression/lib_9770F675_9843AE54"), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][2][1], ((lib9770F675_gv_kills[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_E243A071", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_E243A071", "Text", IntToText(((lib9770F675_gv_kills[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][2][2], TextExpressionAssemble("Param/Expression/lib_9770F675_E243A071"), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][3][1], ((lib9770F675_gv_deaths[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_3145D4C2", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_3145D4C2", "Text", IntToText(((lib9770F675_gv_deaths[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][3][2], TextExpressionAssemble("Param/Expression/lib_9770F675_3145D4C2"), PlayerGroupAll());
    lv_i = 2;
    for ( ; ( (autoA440DDA4_ai >= 0 && lv_i <= autoA440DDA4_ae) || (autoA440DDA4_ai < 0 && lv_i >= autoA440DDA4_ae) ) ; lv_i += autoA440DDA4_ai ) {
        if ((lib9770F675_gv_players >= lv_i)) {
            if ((lib9770F675_gv_scoreScreenManual == false)) {
                lv_playerIndex = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), (lv_i - 1));
            }
            else {
                lv_playerIndex = lib9770F675_gv_scoreScreenManualPlayer[lv_i];
            }
            libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[lv_i][1][1], ((lib9770F675_gv_units[lv_playerIndex] * lp_percent) / 100), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_ABB29668", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_ABB29668", "Text", IntToText(((lib9770F675_gv_units[lv_playerIndex] * lp_percent) / 100)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[lv_i][1][2], TextExpressionAssemble("Param/Expression/lib_9770F675_ABB29668"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[lv_i][2][1], ((lib9770F675_gv_kills[lv_playerIndex] * lp_percent) / 100), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_4628E1D8", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_4628E1D8", "Text", IntToText(((lib9770F675_gv_kills[lv_playerIndex] * lp_percent) / 100)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[lv_i][2][2], TextExpressionAssemble("Param/Expression/lib_9770F675_4628E1D8"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[lv_i][3][1], ((lib9770F675_gv_deaths[lv_playerIndex] * lp_percent) / 100), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_9770F675_EE68868A", "Style", StringToText((lv_txtstyle)));
            TextExpressionSetToken("Param/Expression/lib_9770F675_EE68868A", "Text", IntToText(((lib9770F675_gv_deaths[lv_playerIndex] * lp_percent) / 100)));
            libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[lv_i][3][2], TextExpressionAssemble("Param/Expression/lib_9770F675_EE68868A"), PlayerGroupAll());
        }

    }
}

void lib9770F675_gf_ScoreScreenLockScores () {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib9770F675_gv_scoresLocked = true;
}

void lib9770F675_gf_Defeat () {
    // Automatic Variable Declarations
    unitgroup autoFD4A2875_g;
    int autoFD4A2875_u;
    unit autoFD4A2875_var;

    // Implementation
    CameraLockInput(1, true);
    GameSetLighting("Defeat", 0.0);
    GameSetSpeedValue(c_gameSpeedSlower);
    UnitPauseAll(true);
    UnitClearSelection(1);
    autoFD4A2875_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFD4A2875_u = UnitGroupCount(autoFD4A2875_g, c_unitCountAll);
    for (;; autoFD4A2875_u -= 1) {
        autoFD4A2875_var = UnitGroupUnitFromEnd(autoFD4A2875_g, autoFD4A2875_u);
        if (autoFD4A2875_var == null) { break; }
        UnitSetState(autoFD4A2875_var, c_unitStateHighlightable, false);
        UnitSetState(autoFD4A2875_var, c_unitStateSelectable, false);
        UnitSetState(autoFD4A2875_var, c_unitStateTargetable, false);
    }
    Wait(2.0, c_timeReal);
    DialogDestroyAll();
    lib9770F675_gf_ScoreScreenDefeat((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, 1)) + 1));
}

void lib9770F675_gf_DefeatOld () {
    // Automatic Variable Declarations
    unitgroup auto5D8B98DE_g;
    int auto5D8B98DE_u;
    unit auto5D8B98DE_var;

    // Implementation
    CameraLockInput(1, true);
    GameSetLighting("Defeat", 0.0);
    GameSetSpeedValue(c_gameSpeedSlower);
    UnitPauseAll(true);
    UnitClearSelection(1);
    auto5D8B98DE_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D8B98DE_u = UnitGroupCount(auto5D8B98DE_g, c_unitCountAll);
    for (;; auto5D8B98DE_u -= 1) {
        auto5D8B98DE_var = UnitGroupUnitFromEnd(auto5D8B98DE_g, auto5D8B98DE_u);
        if (auto5D8B98DE_var == null) { break; }
        UnitSetState(auto5D8B98DE_var, c_unitStateHighlightable, false);
        UnitSetState(auto5D8B98DE_var, c_unitStateSelectable, false);
        UnitSetState(auto5D8B98DE_var, c_unitStateTargetable, false);
    }
    DialogDestroyAll();
    UIClearCustomMenuItemList(PlayerGroupAll());
    Wait(0.2, c_timeReal);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, true);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
    UIShowCustomMenu(PlayerGroupAll(), lib9770F675_gv_sCMRCore.lv_sDefeat);
    lib9770F675_gf_Mute();
}

void lib9770F675_gf_ScoreScreenFailSafe () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_playerLabelsOffsetY;
    int lv_n;
    int lv_scoreScreen;
    int lv_scoreBackground;
    string lv_txtstyle;
    int lv_resourcesGatheredMap;
    int lv_resources;
    int lv_resourcesSpentMap;
    fixed[10] lv_mapStatsDeathsUnits;
    int lv_m;
    fixed[10] lv_mapStatsKillsDeaths;
    fixed[10] lv_mapStatsSurvivalRate;

    // Automatic Variable Declarations
    const int auto6714894A_ae = 8;
    const int auto6714894A_ai = 1;
    const int auto1A19A3B2_ae = 5;
    const int auto1A19A3B2_ai = 1;
    const int auto58D78340_ae = 9;
    const int auto58D78340_ai = 1;
    const int auto396A11BD_ae = 3;
    const int auto396A11BD_ai = 1;
    const int autoE0CC5E06_ae = 5;
    const int autoE0CC5E06_ai = 1;
    const int autoCB0C455C_ae = 20;
    const int autoCB0C455C_ai = 2;
    const int auto5F3C77E2_ae = 78;
    const int auto5F3C77E2_ai = 3;
    const int autoD296CE51_ae = 87;
    const int autoD296CE51_ai = 2;
    const int auto2D05D43E_ae = 97;
    const int auto2D05D43E_ai = 1;
    const int auto8939A25B_ae = 9;
    const int auto8939A25B_ai = 1;
    const int auto60164F13_ae = 5;
    const int auto60164F13_ai = 1;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
    lv_scoreScreen = DialogLastCreated();
    DialogSetFullscreen(lv_scoreScreen, true);
    libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_victoryImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_scoreBackground = DialogControlLastCreated();
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypePanel, "SCMRScore/ScorescreenPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib9770F675_gv_scoreBorder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorTop, 0, 40, lib9770F675_gv_sCMRCore.lv_sVictory, ColorWithAlpha(0,0,0,0), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[8][1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TriggerDialogFrameTitle", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_FA9208B7", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_FA9208B7", "Text", lib9770F675_gv_iniNameMap);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, TextExpressionAssemble("Param/Expression/lib_9770F675_FA9208B7"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[1][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_EF8C5502", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_EF8C5502", "Text", lib9770F675_gv_sCMRCore.lv_sElapsedTime);
    TextExpressionSetToken("Param/Expression/lib_9770F675_EF8C5502", "Time", TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, TextExpressionAssemble("Param/Expression/lib_9770F675_EF8C5502"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[2][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -130, -100, lib9770F675_gv_sCMRCore.lv_sUnitsProduced, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[3][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 60, -100, lib9770F675_gv_sCMRCore.lv_sKilled, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[4][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 240, -100, lib9770F675_gv_sCMRCore.lv_sLost, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[5][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 420, -100, lib9770F675_gv_sCMRCore.lv_sKillsDeaths, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[6][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 600, -100, lib9770F675_gv_sCMRCore.lv_sSurvivalRate, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[7][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_4B4AF4BA", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_4B4AF4BA", "Text", lib9770F675_gv_iniPlayerScoreScreen[1]);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, TextExpressionAssemble("Param/Expression/lib_9770F675_4B4AF4BA"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[1][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_playerLabelsOffsetY = 80;
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][1][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][1][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][2][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][2][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][3][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][3][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((lib9770F675_gv_deaths[1] > 0)) {
        lv_mapStatsDeathsUnits[1] = (IntToFixed(lib9770F675_gv_deaths[1]) / IntToFixed(lib9770F675_gv_units[1]));
        if ((lv_mapStatsDeathsUnits[1] > 1)) {
            lv_mapStatsDeathsUnits[1] = 1.0;
        }

        TextExpressionSetToken("Param/Expression/lib_9770F675_FB17F753", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_FB17F753", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[1]) / IntToFixed(lib9770F675_gv_deaths[1])), 2));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_FB17F753"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/lib_9770F675_01A2E794", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_01A2E794", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[1] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_CF3C247B")));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_01A2E794"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_9770F675_C6A2FED3", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_C6A2FED3", "Text", IntToText(lib9770F675_gv_kills[1]));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_C6A2FED3"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/lib_9770F675_0D889597", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_0D889597", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_87389D5C")));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_0D889597"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
    }
    Wait(1.0, c_timeReal);
    TriggerExecute(lib9770F675_gt_VictoryMusic, false, false);
    DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
    Wait(1.5, c_timeReal);
    DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Show");
    DialogControlSetVisible(lib9770F675_gv_scoreBorder, PlayerGroupAll(), true);
    Wait(0.87, c_timeReal);
    lv_n = 1;
    for ( ; ( (auto6714894A_ai >= 0 && lv_n <= auto6714894A_ae) || (auto6714894A_ai < 0 && lv_n >= auto6714894A_ae) ) ; lv_n += auto6714894A_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), true);
    }
    lv_n = 1;
    for ( ; ( (auto1A19A3B2_ai >= 0 && lv_n <= auto1A19A3B2_ae) || (auto1A19A3B2_ai < 0 && lv_n >= auto1A19A3B2_ae) ) ; lv_n += auto1A19A3B2_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), true);
    }
    lv_n = 1;
    for ( ; ( (auto58D78340_ai >= 0 && lv_n <= auto58D78340_ae) || (auto58D78340_ai < 0 && lv_n >= auto58D78340_ae) ) ; lv_n += auto58D78340_ai ) {
        lv_m = 1;
        for ( ; ( (auto396A11BD_ai >= 0 && lv_m <= auto396A11BD_ae) || (auto396A11BD_ai < 0 && lv_m >= auto396A11BD_ae) ) ; lv_m += auto396A11BD_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), true);
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
        }
    }
    libNtve_gf_DisplayScreenImage(1, (("Assets/Textures/" + lib9770F675_gv_iniPlayerDecal + ".dds")), c_triggerBlendModeNormal, 150, 125, c_anchorTop, 0, 80);
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_sContinueCampaign, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 374, 100);
    lib9770F675_gv_btnSSContinueCampaign = DialogControlLastCreated();
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bQuit, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 100, 100);
    lib9770F675_gv_btnSSQuit = DialogControlLastCreated();
    SoundPlay(SoundLink("combeep22", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_n = 1;
    for ( ; ( (autoE0CC5E06_ai >= 0 && lv_n <= autoE0CC5E06_ae) || (autoE0CC5E06_ai < 0 && lv_n >= autoE0CC5E06_ae) ) ; lv_n += autoE0CC5E06_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 6;
    for ( ; ( (autoCB0C455C_ai >= 0 && lv_n <= autoCB0C455C_ae) || (autoCB0C455C_ai < 0 && lv_n >= autoCB0C455C_ae) ) ; lv_n += autoCB0C455C_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 21;
    for ( ; ( (auto5F3C77E2_ai >= 0 && lv_n <= auto5F3C77E2_ae) || (auto5F3C77E2_ai < 0 && lv_n >= auto5F3C77E2_ae) ) ; lv_n += auto5F3C77E2_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 79;
    for ( ; ( (autoD296CE51_ai >= 0 && lv_n <= autoD296CE51_ae) || (autoD296CE51_ai < 0 && lv_n >= autoD296CE51_ae) ) ; lv_n += autoD296CE51_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 88;
    for ( ; ( (auto2D05D43E_ai >= 0 && lv_n <= auto2D05D43E_ae) || (auto2D05D43E_ai < 0 && lv_n >= auto2D05D43E_ae) ) ; lv_n += auto2D05D43E_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lib9770F675_gf_ScoreScreenFailSafeAnim(100);
    Wait(0.001, c_timeGame);
    SoundStop(SoundLastPlayed(), false);
    SoundPlay(SoundLink("combeep23", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.01, c_timeGame);
    lv_n = 1;
    for ( ; ( (auto8939A25B_ai >= 0 && lv_n <= auto8939A25B_ae) || (auto8939A25B_ai < 0 && lv_n >= auto8939A25B_ae) ) ; lv_n += auto8939A25B_ai ) {
        lv_m = 4;
        for ( ; ( (auto60164F13_ai >= 0 && lv_m <= auto60164F13_ae) || (auto60164F13_ai < 0 && lv_m >= auto60164F13_ae) ) ; lv_m += auto60164F13_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
        }
    }
}

void lib9770F675_gf_ScoreScreenFailSafeDefeat () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_playerLabelsOffsetY;
    int lv_n;
    int lv_scoreScreen;
    int lv_scoreBackground;
    string lv_txtstyle;
    int lv_resourcesGatheredMap;
    int lv_resources;
    int lv_resourcesSpentMap;
    fixed[10] lv_mapStatsDeathsUnits;
    int lv_m;
    fixed[10] lv_mapStatsKillsDeaths;
    fixed[10] lv_mapStatsSurvivalRate;

    // Automatic Variable Declarations
    const int auto7F058251_ae = 8;
    const int auto7F058251_ai = 1;
    const int auto218BA2BC_ae = 5;
    const int auto218BA2BC_ai = 1;
    const int autoAF64F6CD_ae = 9;
    const int autoAF64F6CD_ai = 1;
    const int auto87A5EF45_ae = 3;
    const int auto87A5EF45_ai = 1;
    const int auto7B0F2E5C_ae = 5;
    const int auto7B0F2E5C_ai = 1;
    const int auto64E7ED00_ae = 20;
    const int auto64E7ED00_ai = 2;
    const int auto62590C79_ae = 78;
    const int auto62590C79_ai = 3;
    const int auto767E5E29_ae = 87;
    const int auto767E5E29_ai = 2;
    const int auto9D9C2A3F_ae = 97;
    const int auto9D9C2A3F_ai = 1;
    const int auto981DE294_ae = 9;
    const int auto981DE294_ai = 1;
    const int autoBB41DF14_ae = 5;
    const int autoBB41DF14_ai = 1;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
    lv_scoreScreen = DialogLastCreated();
    DialogSetFullscreen(lv_scoreScreen, true);
    libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_defeatImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_scoreBackground = DialogControlLastCreated();
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypePanel, "SCMRScore/ScorescreenPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib9770F675_gv_scoreBorder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorTop, 0, 40, lib9770F675_gv_sCMRCore.lv_sDefeat, ColorWithAlpha(0,0,0,0), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[8][1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TriggerDialogFrameTitle", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_9D5FC1DF", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_9D5FC1DF", "Text", lib9770F675_gv_iniNameMap);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, TextExpressionAssemble("Param/Expression/lib_9770F675_9D5FC1DF"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[1][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_81558EFC", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_81558EFC", "Text", lib9770F675_gv_sCMRCore.lv_sElapsedTime);
    TextExpressionSetToken("Param/Expression/lib_9770F675_81558EFC", "Time", TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, TextExpressionAssemble("Param/Expression/lib_9770F675_81558EFC"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[2][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -130, -100, lib9770F675_gv_sCMRCore.lv_sUnitsProduced, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[3][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 60, -100, lib9770F675_gv_sCMRCore.lv_sKilled, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[4][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 240, -100, lib9770F675_gv_sCMRCore.lv_sLost, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[5][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 420, -100, lib9770F675_gv_sCMRCore.lv_sKillsDeaths, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[6][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 600, -100, lib9770F675_gv_sCMRCore.lv_sSurvivalRate, Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[7][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_F7CAD1B3", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_F7CAD1B3", "Text", lib9770F675_gv_iniPlayerScoreScreen[1]);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, TextExpressionAssemble("Param/Expression/lib_9770F675_F7CAD1B3"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
    lib9770F675_gv_scoreScreenLabels[1][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_playerLabelsOffsetY = 80;
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][1][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -178, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_units[1], MaxI(lib9770F675_gv_units[2], MaxI(lib9770F675_gv_units[3], MaxI(lib9770F675_gv_units[4], lib9770F675_gv_units[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -100, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][1][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][2][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 2, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_kills[1], MaxI(lib9770F675_gv_kills[2], MaxI(lib9770F675_gv_kills[3], MaxI(lib9770F675_gv_kills[4], lib9770F675_gv_kills[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 80, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][2][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(lv_scoreScreen, c_triggerControlTypeProgressBar);
    lib9770F675_gv_scoreScreenMatrix[1][3][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 182, (lv_playerLabelsOffsetY - 87));
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), MaxI(lib9770F675_gv_deaths[1], MaxI(lib9770F675_gv_deaths[2], MaxI(lib9770F675_gv_deaths[3], MaxI(lib9770F675_gv_deaths[4], lib9770F675_gv_deaths[5])))), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemFillColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 260, (lv_playerLabelsOffsetY - 80), StringToText(""), Color(100,100,100), false, 2.0);
    lib9770F675_gv_scoreScreenMatrix[1][3][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((lib9770F675_gv_deaths[1] > 0)) {
        lv_mapStatsDeathsUnits[1] = (IntToFixed(lib9770F675_gv_deaths[1]) / IntToFixed(lib9770F675_gv_units[1]));
        if ((lv_mapStatsDeathsUnits[1] > 1)) {
            lv_mapStatsDeathsUnits[1] = 1.0;
        }

        TextExpressionSetToken("Param/Expression/lib_9770F675_A11877E2", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_A11877E2", "Text", FixedToText((IntToFixed(lib9770F675_gv_kills[1]) / IntToFixed(lib9770F675_gv_deaths[1])), 2));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_A11877E2"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/lib_9770F675_7BCE7453", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_7BCE7453", "Text", (FixedToText((100.0 - (lv_mapStatsDeathsUnits[1] * 100.0)), 1) + StringExternal("Param/Value/lib_9770F675_9E8F4566")));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_7BCE7453"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_9770F675_6DD02C68", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_6DD02C68", "Text", IntToText(lib9770F675_gv_kills[1]));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 440, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_6DD02C68"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][4][2] = DialogControlLastCreated();
        TextExpressionSetToken("Param/Expression/lib_9770F675_3837CC78", "Style", StringToText((lv_txtstyle)));
        TextExpressionSetToken("Param/Expression/lib_9770F675_3837CC78", "Text", (FixedToText(100.0, 1) + StringExternal("Param/Value/lib_9770F675_107BDB40")));
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 620, (lv_playerLabelsOffsetY - 80), TextExpressionAssemble("Param/Expression/lib_9770F675_3837CC78"), Color(100,100,100), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib9770F675_gv_scoreScreenMatrix[1][5][2] = DialogControlLastCreated();
    }
    Wait(1.0, c_timeReal);
    TriggerExecute(lib9770F675_gt_DefeatMusic, false, false);
    DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
    Wait(1.5, c_timeReal);
    DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Show");
    DialogControlSetVisible(lib9770F675_gv_scoreBorder, PlayerGroupAll(), true);
    Wait(0.87, c_timeReal);
    lv_n = 1;
    for ( ; ( (auto7F058251_ai >= 0 && lv_n <= auto7F058251_ae) || (auto7F058251_ai < 0 && lv_n >= auto7F058251_ae) ) ; lv_n += auto7F058251_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), true);
    }
    lv_n = 1;
    for ( ; ( (auto218BA2BC_ai >= 0 && lv_n <= auto218BA2BC_ae) || (auto218BA2BC_ai < 0 && lv_n >= auto218BA2BC_ae) ) ; lv_n += auto218BA2BC_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), true);
    }
    lv_n = 1;
    for ( ; ( (autoAF64F6CD_ai >= 0 && lv_n <= autoAF64F6CD_ae) || (autoAF64F6CD_ai < 0 && lv_n >= autoAF64F6CD_ae) ) ; lv_n += autoAF64F6CD_ai ) {
        lv_m = 1;
        for ( ; ( (auto87A5EF45_ai >= 0 && lv_m <= auto87A5EF45_ae) || (auto87A5EF45_ai < 0 && lv_m >= auto87A5EF45_ae) ) ; lv_m += auto87A5EF45_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), true);
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
        }
    }
    libNtve_gf_DisplayScreenImage(1, (("Assets/Textures/" + lib9770F675_gv_iniPlayerDecal + ".dds")), c_triggerBlendModeNormal, 150, 125, c_anchorTop, 0, 80);
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_sContinueCampaign, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 374, 100);
    lib9770F675_gv_btnSSRestart = DialogControlLastCreated();
    DialogControlCreateFromTemplate(lv_scoreScreen, c_triggerControlTypeButton, "SCMRBrief/ButtonTemplate");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lib9770F675_gv_sCMRCore.lv_bQuit, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 237, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 100, 100);
    lib9770F675_gv_btnSSQuit = DialogControlLastCreated();
    SoundPlay(SoundLink("combeep22", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_n = 1;
    for ( ; ( (auto7B0F2E5C_ai >= 0 && lv_n <= auto7B0F2E5C_ae) || (auto7B0F2E5C_ai < 0 && lv_n >= auto7B0F2E5C_ae) ) ; lv_n += auto7B0F2E5C_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 6;
    for ( ; ( (auto64E7ED00_ai >= 0 && lv_n <= auto64E7ED00_ae) || (auto64E7ED00_ai < 0 && lv_n >= auto64E7ED00_ae) ) ; lv_n += auto64E7ED00_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 21;
    for ( ; ( (auto62590C79_ai >= 0 && lv_n <= auto62590C79_ae) || (auto62590C79_ai < 0 && lv_n >= auto62590C79_ae) ) ; lv_n += auto62590C79_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 79;
    for ( ; ( (auto767E5E29_ai >= 0 && lv_n <= auto767E5E29_ae) || (auto767E5E29_ai < 0 && lv_n >= auto767E5E29_ae) ) ; lv_n += auto767E5E29_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lv_n = 88;
    for ( ; ( (auto9D9C2A3F_ai >= 0 && lv_n <= auto9D9C2A3F_ae) || (auto9D9C2A3F_ai < 0 && lv_n >= auto9D9C2A3F_ae) ) ; lv_n += auto9D9C2A3F_ai ) {
        lib9770F675_gf_ScoreScreenFailSafeAnim(lv_n);
        Wait(0.001, c_timeGame);
    }
    lib9770F675_gf_ScoreScreenFailSafeAnim(100);
    Wait(0.001, c_timeGame);
    SoundStop(SoundLastPlayed(), false);
    SoundPlay(SoundLink("combeep23", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.01, c_timeGame);
    lv_n = 1;
    for ( ; ( (auto981DE294_ai >= 0 && lv_n <= auto981DE294_ae) || (auto981DE294_ai < 0 && lv_n >= auto981DE294_ae) ) ; lv_n += auto981DE294_ai ) {
        lv_m = 4;
        for ( ; ( (autoBB41DF14_ai >= 0 && lv_m <= autoBB41DF14_ae) || (autoBB41DF14_ai < 0 && lv_m >= autoBB41DF14_ae) ) ; lv_m += autoBB41DF14_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), true);
        }
    }
}

void lib9770F675_gf_ScoreScreenFailSafeAnim (int lp_percent) {
    // Variable Declarations
    string lv_txtstyle;
    int lv_i;
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_txtstyle = "MRScoreScreen";

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][1][1], ((lib9770F675_gv_units[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_D7AFB2EB", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_D7AFB2EB", "Text", IntToText(((lib9770F675_gv_units[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][1][2], TextExpressionAssemble("Param/Expression/lib_9770F675_D7AFB2EB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][2][1], ((lib9770F675_gv_kills[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_85C1665C", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_85C1665C", "Text", IntToText(((lib9770F675_gv_kills[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][2][2], TextExpressionAssemble("Param/Expression/lib_9770F675_85C1665C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib9770F675_gv_scoreScreenMatrix[1][3][1], ((lib9770F675_gv_deaths[1] * lp_percent) / 100), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_9770F675_4D91426A", "Style", StringToText((lv_txtstyle)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_4D91426A", "Text", IntToText(((lib9770F675_gv_deaths[1] * lp_percent) / 100)));
    libNtve_gf_SetDialogItemText(lib9770F675_gv_scoreScreenMatrix[1][3][2], TextExpressionAssemble("Param/Expression/lib_9770F675_4D91426A"), PlayerGroupAll());
}

void lib9770F675_gf_ScoreScreen_Manual3 () {
    // Variable Declarations
    int lv_scoreScreen;
    int lv_scoreBackground;
    text lv_txtstyle;
    int lv_irdiumUpdate;
    int lv_palladiumUpdate;
    int lv_expUpdate;
    int lv_artifactUpdate;
    int lv_biomassUpdate;
    int lv_psiUpdate;
    int lv_playerScoreY;
    int lv_irdiumLevelCurrent_Local;
    int lv_palladiumLevelCurrent_Local;
    int lv_expLevelCurrent_Local;
    int lv_artifactLevelCurrent_Local;
    int lv_bioLevelCurrent_Local;
    int lv_psiLevelCurrent_Local;
    int lv_decal;
    int lv_decalBack;

    // Automatic Variable Declarations
    unitgroup autoBC335BA1_g;
    int autoBC335BA1_u;
    unit autoBC335BA1_var;
    int autoFAB717CE_val;
    playergroup auto17440F70_g;
    int auto17440F70_var;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = StringExternal("Param/Value/lib_9770F675_8D9B68C8");
    lv_playerScoreY = 80;
    lv_decal = c_invalidDialogId;
    lv_decalBack = c_invalidDialogControlId;

    // Implementation
    CameraLockInput(1, true);
    autoBC335BA1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC335BA1_u = UnitGroupCount(autoBC335BA1_g, c_unitCountAll);
    for (;; autoBC335BA1_u -= 1) {
        autoBC335BA1_var = UnitGroupUnitFromEnd(autoBC335BA1_g, autoBC335BA1_u);
        if (autoBC335BA1_var == null) { break; }
        UnitSetState(autoBC335BA1_var, c_unitStateHighlightable, false);
        UnitSetState(autoBC335BA1_var, c_unitStateSelectable, false);
        UnitSetState(autoBC335BA1_var, c_unitStateTargetable, false);
    }
    UnitPauseAll(true);
    UnitClearSelection(1);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIAlertClear(1);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    BankLoad("ENS", 1);
    Wait(0.5, c_timeReal);
    lib9770F675_gv_eNS_SCMR = BankLastCreated();
    Wait(0.1, c_timeReal);
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "maplast", (lib9770F675_gv_iniLastMap + lib9770F675_gv_iniLastMapNr));
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "mapnext", (lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
    Wait(1.0, c_timeReal);
    lib9770F675_gv_achievement_total = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "achievements", "achievement_total");
    Wait(0.2, c_timeReal);
    lv_palladiumLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", ("palladium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)));
    lv_irdiumLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", ("iridium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)));
    lv_expLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", ("exp_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)));
    lv_artifactLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", ("artifact_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)));
    lv_bioLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", ("bio_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)));
    lv_psiLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", ("psi_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)));
    Wait(0.5, c_timeReal);
    autoFAB717CE_val = lib9770F675_gv_iniEpisode_EnslaversRedux;
    if (autoFAB717CE_val == 1) {
        if ((lib9770F675_gv_optionalCommanderGrenade == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderGrenade", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderPlasma", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma4 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderJetPack", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma3 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderRange", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderChrono == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderChrono", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderStim == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderStim", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma11 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderDragoon", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma2 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderRed", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueElite == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "RescueElite", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma7 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "SaveProtoss", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma8 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "LeaveProtoss", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma5 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "SaveScientist", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma6 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "KillScientist", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma9 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "SavePrisoners", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalCommanderPlasma10 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "terran", "KillPrisoners", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotProtossRescued == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "ProtossRescued", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotCerebrateDead == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "CerebrateDead", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_iridiumFound > lv_irdiumLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "terran", ("iridium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_iridiumFound);
            Wait(0.1, c_timeReal);
            lv_irdiumUpdate = (lib9770F675_gv_iridiumFound - lv_irdiumLevelCurrent_Local);
            Wait(0.1, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "terran", "iridiumTotal", (lib9770F675_gv_grenade_find5 + lv_irdiumUpdate));
        }

        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_palladiumFound > lv_palladiumLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "terran", ("palladium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_palladiumFound);
            Wait(0.1, c_timeReal);
            lv_palladiumUpdate = (lib9770F675_gv_palladiumFound - lv_palladiumLevelCurrent_Local);
            Wait(0.1, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "terran", "palladiumTotal", (lib9770F675_gv_grenade_find4 + lv_palladiumUpdate));
        }

    }
    else if (autoFAB717CE_val == 2) {
        if ((lib9770F675_gv_cloakUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "cloakUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_cloakUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "cloakUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_temporalUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "temporalUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_temporalUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "temporalUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_blinkUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "blinkUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_blinkUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "blinkUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_prisonUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "prisonUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_prisonUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "prisonUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_armorUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "armorUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_armorUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "armorUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_shadowUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "shadowUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_shadowUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "shadowUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_furyUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "furyUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_furyUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "furyUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_strikeUpgradelvl == 2)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "strikeUpgradelvl", 2);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_strikeUpgradelvl == 1)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "strikeUpgradelvl", 1);
                Wait(0.1, c_timeReal);
            }

        }
        if ((lib9770F675_gv_optionalRescueCommander3 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalTower", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueCommander5 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalSentry", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueCommander == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "RescueCommander", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueCommander6 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalRay", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueCommander7 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalCol", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRescueCommander4 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalBattery", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "CrystalRecovered", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotSchezarDestroyed == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "SchezarDestroyed", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_expFound > lv_expLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", ("exp_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_expFound);
            Wait(0.1, c_timeReal);
            lv_expUpdate = (lib9770F675_gv_expFound - lv_expLevelCurrent_Local);
            Wait(0.1, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "expTotal", (lib9770F675_gv_expTotal + lv_expUpdate));
        }

        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_artifactFound >= lv_artifactLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", ("artifact_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_artifactFound);
            Wait(0.1, c_timeReal);
            lv_artifactUpdate = (lib9770F675_gv_artifactFound - lv_artifactLevelCurrent_Local);
            Wait(0.1, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "protoss", "artifactTotal", (lib9770F675_gv_artifactTotal + lv_artifactUpdate));
        }

    }
    else if (autoFAB717CE_val == 3) {
        if ((lib9770F675_gv_kerriganSTRLevelCurrent == 5)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr", 5);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_kerriganSTRLevelCurrent == 4)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr", 4);
                Wait(0.1, c_timeReal);
            }
            else {
                if ((lib9770F675_gv_kerriganSTRLevelCurrent == 3)) {
                    BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr", 3);
                    Wait(0.1, c_timeReal);
                }
                else {
                    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 2)) {
                        BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr", 2);
                        Wait(0.1, c_timeReal);
                    }
                    else {
                        if ((lib9770F675_gv_kerriganSTRLevelCurrent == 1)) {
                            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr", 1);
                            Wait(0.1, c_timeReal);
                        }

                    }
                }
            }
        }
        if ((lib9770F675_gv_kerriganDEFLevelCurrent == 5)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef", 5);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_kerriganDEFLevelCurrent == 4)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef", 4);
                Wait(0.1, c_timeReal);
            }
            else {
                if ((lib9770F675_gv_kerriganDEFLevelCurrent == 3)) {
                    BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef", 3);
                    Wait(0.1, c_timeReal);
                }
                else {
                    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 2)) {
                        BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef", 2);
                        Wait(0.1, c_timeReal);
                    }
                    else {
                        if ((lib9770F675_gv_kerriganDEFLevelCurrent == 1)) {
                            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef", 1);
                            Wait(0.1, c_timeReal);
                        }

                    }
                }
            }
        }
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 5)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi", 5);
            Wait(0.1, c_timeReal);
        }
        else {
            if ((lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
                BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi", 4);
                Wait(0.1, c_timeReal);
            }
            else {
                if ((lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
                    BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi", 3);
                    Wait(0.1, c_timeReal);
                }
                else {
                    if ((lib9770F675_gv_kerriganPSILevelCurrent == 2)) {
                        BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi", 2);
                        Wait(0.1, c_timeReal);
                    }
                    else {
                        if ((lib9770F675_gv_kerriganPSILevelCurrent == 1)) {
                            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi", 1);
                            Wait(0.1, c_timeReal);
                        }

                    }
                }
            }
        }
        BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "evolutionLevel", lib9770F675_gv_kerriganEvolutionLevel);
        if ((lib9770F675_gv_optionalStewartBonus == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "StewartBonus", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalRavager == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalRavager", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalInfestedMarine == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalInfestedMarine", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalInfestedBomb == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalInfestedBomb", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalImpaler == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalImpaler", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalBrutalisk == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalBrutalisk", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalBaneling == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalBaneling", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_optionalAberration == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalAberration", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "UlrezajWeakened", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_plotSchezarDestroyed6 == true)) {
            BankValueSetFromFlag(lib9770F675_gv_eNS_SCMR, "plot", "RamseyAttack", true);
            Wait(0.1, c_timeReal);
        }

        if ((lib9770F675_gv_biomassFound >= lv_bioLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", ("bio_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_biomassFound);
            Wait(0.1, c_timeReal);
        }

        BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "biomassTotal", lib9770F675_gv_biomassCurrentLevelTotal);
        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_psiFound >= lv_psiLevelCurrent_Local)) {
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", ("psi_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)), lib9770F675_gv_psiFound);
            Wait(0.1, c_timeReal);
            lv_psiUpdate = (lib9770F675_gv_psiFound - lv_psiLevelCurrent_Local);
            Wait(0.1, c_timeReal);
            BankValueSetFromInt(lib9770F675_gv_eNS_SCMR, "zerg", "psiTotal", (lib9770F675_gv_psiTotal + lv_psiUpdate));
        }

    }
    else {
    }
    Wait(0.5, c_timeReal);
    Wait(1.0, c_timeReal);
    BankSave(lib9770F675_gv_eNS_SCMR);
    DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
    lv_scoreScreen = DialogLastCreated();
    DialogSetFullscreen(lv_scoreScreen, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_9770F675_53F15B67"));
    libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_victoryImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_scoreBackground = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_scoreBackground, PlayerGroupAll(), 0.0, 70.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_VictoryMusic, false, false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, (lv_txtstyle + GameMapName() + StringExternal("Param/Value/lib_9770F675_66B06441")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, (lv_txtstyle + StringExternal("Param/Value/lib_9770F675_27059D96") + TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())) + StringExternal("Param/Value/lib_9770F675_1F9BD9B0")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 255, (StringExternal("Param/Value/lib_9770F675_EB4E3996") + IntToText(lib9770F675_gv_achievement_total) + StringExternal("Param/Value/lib_9770F675_C46C0747")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    if ((lib9770F675_gv_cheat_detected == 1)) {
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_20F0E4BA") + StringExternal("Param/Value/lib_9770F675_904B08DB")) + StringExternal("Param/Value/lib_9770F675_C22EE3A3")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_76868F01"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_5E64D57D") + StringExternal("Param/Value/lib_9770F675_CAEBFFE8")) + StringExternal("Param/Value/lib_9770F675_FB024474")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_723F77AD") + StringExternal("Param/Value/lib_9770F675_0880726A")) + StringExternal("Param/Value/lib_9770F675_94B88915")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
    }
    else {
        if ((lib9770F675_gv_sCMRA1_Brutal == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_1C6B526A") + StringExternal("Param/Value/lib_9770F675_72B3BFAF")) + StringExternal("Param/Value/lib_9770F675_5E728BC4")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_C3FCAEC6"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_sCMRA1_Hard == true)) {
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_A2E6E77E") + StringExternal("Param/Value/lib_9770F675_F8DA68E2")) + StringExternal("Param/Value/lib_9770F675_203E6B1F")), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_28A239E2"), PlayerGroupAll());
            }
            else {
                if ((lib9770F675_gv_sCMRA1_Norm == true)) {
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_606747C3") + StringExternal("Param/Value/lib_9770F675_B6F9F1B4")) + StringExternal("Param/Value/lib_9770F675_14393C89")), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_14601309"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_sCMRA1_Easy == true)) {
                        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_048FA250") + StringExternal("Param/Value/lib_9770F675_719FAFA6")) + StringExternal("Param/Value/lib_9770F675_F8EAB1C7")), ColorWithAlpha(0,0,0,0), false, 2.0);
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_CBDF2CE0"), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_A382C715") + StringExternal("Param/Value/lib_9770F675_82666190")) + StringExternal("Param/Value/lib_9770F675_536CA436")), ColorWithAlpha(0,0,0,0), false, 2.0);
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_FB1D0881"), PlayerGroupAll());
                    }
                }
            }
        }
        if ((lib9770F675_gv_sCMRA2_15 == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_6BBEABD8") + StringExternal("Param/Value/lib_9770F675_5D160C8D")) + StringExternal("Param/Value/lib_9770F675_11779AA5")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_6624CDC4") + StringExternal("Param/Value/lib_9770F675_C7A4A064")) + StringExternal("Param/Value/lib_9770F675_FCF51E20")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        }
        if ((lib9770F675_gv_sCMRA3_20 == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_1D14B5C6") + StringExternal("Param/Value/lib_9770F675_2A5928C5")) + StringExternal("Param/Value/lib_9770F675_3134B322")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, 125, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_494F0802") + StringExternal("Param/Value/lib_9770F675_A002E5BF")) + StringExternal("Param/Value/lib_9770F675_A7FC7362")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
        }
    }
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 100, c_anchorCenter, -110, -100, StringExternal("Param/Value/lib_9770F675_AFB75EB7"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 100, -100, StringExternal("Param/Value/lib_9770F675_BED5D9A0"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 300, -100, StringExternal("Param/Value/lib_9770F675_C2F93FBA"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, (lv_txtstyle + PlayerName(1) + StringExternal("Param/Value/lib_9770F675_EC81B66A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -80, 0, (lv_txtstyle + IntToText(lib9770F675_gv_units[1]) + StringExternal("Param/Value/lib_9770F675_F72F885E")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 120, 0, (lv_txtstyle + IntToText(lib9770F675_gv_kills[1]) + StringExternal("Param/Value/lib_9770F675_F64399B3")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 320, 0, (lv_txtstyle + IntToText(lib9770F675_gv_deaths[1]) + StringExternal("Param/Value/lib_9770F675_B8E0C523")), Color(100,100,100), false, 2.0);
    auto17440F70_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto17440F70_var = -1;
    while (true) {
        auto17440F70_var = PlayerGroupNextPlayer(auto17440F70_g, auto17440F70_var);
        if (auto17440F70_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, lv_playerScoreY, (lv_txtstyle + PlayerName(auto17440F70_var) + StringExternal("Param/Value/lib_9770F675_84618D67")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto17440F70_var, false)), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -80, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_units[auto17440F70_var]) + StringExternal("Param/Value/lib_9770F675_1B58B52A")), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 120, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_kills[auto17440F70_var]) + StringExternal("Param/Value/lib_9770F675_5D3E3623")), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 320, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_deaths[auto17440F70_var]) + StringExternal("Param/Value/lib_9770F675_B110FB5F")), Color(100,100,100), false, 2.0);
        lv_playerScoreY += 80;
    }
    Wait(1.0, c_timeReal);
    DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
    libNtve_gf_DisplayScreenButton(7, StringExternal("Param/Value/lib_9770F675_342D7CCB"), 200, 100, c_anchorBottomRight, 300, 100, lib9770F675_gt_LoadNextMapERONLY);
    libNtve_gf_DisplayScreenButton(8, StringExternal("Param/Value/lib_9770F675_12669EB6"), 200, 100, c_anchorBottomRight, 100, 100, lib9770F675_gt_QuitERONLY);
}

void lib9770F675_gf_ScoreScreen_Manual4 () {
    // Variable Declarations
    int lv_scoreScreen;
    int lv_scoreBackground;
    text lv_txtstyle;
    int lv_irdiumUpdate;
    int lv_palladiumUpdate;
    int lv_expUpdate;
    int lv_artifactUpdate;
    int lv_biomassUpdate;
    int lv_psiUpdate;
    int lv_playerScoreY;
    int lv_irdiumLevelCurrent_Local;
    int lv_palladiumLevelCurrent_Local;
    int lv_expLevelCurrent_Local;
    int lv_artifactLevelCurrent_Local;
    int lv_bioLevelCurrent_Local;
    int lv_psiLevelCurrent_Local;

    // Automatic Variable Declarations
    unitgroup auto04F403BA_g;
    int auto04F403BA_u;
    unit auto04F403BA_var;
    playergroup auto89AD17D4_g;
    int auto89AD17D4_var;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogId;
    lv_scoreBackground = c_invalidDialogControlId;
    lv_txtstyle = StringExternal("Param/Value/lib_9770F675_768F1434");
    lv_playerScoreY = 80;

    // Implementation
    CameraLockInput(1, true);
    auto04F403BA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04F403BA_u = UnitGroupCount(auto04F403BA_g, c_unitCountAll);
    for (;; auto04F403BA_u -= 1) {
        auto04F403BA_var = UnitGroupUnitFromEnd(auto04F403BA_g, auto04F403BA_u);
        if (auto04F403BA_var == null) { break; }
        UnitSetState(auto04F403BA_var, c_unitStateHighlightable, false);
        UnitSetState(auto04F403BA_var, c_unitStateSelectable, false);
        UnitSetState(auto04F403BA_var, c_unitStateTargetable, false);
    }
    UnitPauseAll(true);
    UnitClearSelection(1);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIAlertClear(1);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    BankLoad("ENS", 1);
    Wait(0.5, c_timeReal);
    lib9770F675_gv_eNS_SCMR = BankLastCreated();
    Wait(0.1, c_timeReal);
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "maplast", (lib9770F675_gv_iniLastMap + lib9770F675_gv_iniLastMapNr));
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "mapnext", (lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
    Wait(1.0, c_timeReal);
    lib9770F675_gv_achievement_total = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "achievements", "achievement_total");
    Wait(0.2, c_timeReal);
    lv_palladiumLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", ("palladium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)));
    lv_irdiumLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", ("iridium_" + ("ENS_Terran" + lib9770F675_gv_iniLastMapNr)));
    lv_expLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", ("exp_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)));
    lv_artifactLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", ("artifact_" + ("ENS_Protoss" + lib9770F675_gv_iniLastMapNr)));
    lv_bioLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", ("bio_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)));
    lv_psiLevelCurrent_Local = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", ("psi_" + ("ENS_Zerg" + lib9770F675_gv_iniLastMapNr)));
    Wait(0.5, c_timeReal);
    Wait(1.0, c_timeReal);
    BankSave(lib9770F675_gv_eNS_SCMR);
    DialogCreate(100, 100, c_anchorCenter, 0, 0, false);
    lv_scoreScreen = DialogLastCreated();
    DialogSetFullscreen(lv_scoreScreen, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_9770F675_74153B2B"));
    libNtve_gf_CreateDialogItemImage(lv_scoreScreen, 100, 100, DialogGetAnchor(lv_scoreScreen), 0, 0, StringToText(""), lib9770F675_gv_defeatImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_scoreBackground = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_scoreBackground, PlayerGroupAll(), 0.0, 70.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_DefeatMusic, false, false);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, -250, 255, (lv_txtstyle + GameMapName() + StringExternal("Param/Value/lib_9770F675_88E833C2")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 500, 50, c_anchorTop, -400, 315, (lv_txtstyle + StringExternal("Param/Value/lib_9770F675_767963D2") + TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(GameGetMissionTime())) + StringExternal("Param/Value/lib_9770F675_99CDE0A2")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 255, (StringExternal("Param/Value/lib_9770F675_826C2A98") + IntToText(lib9770F675_gv_achievement_total) + StringExternal("Param/Value/lib_9770F675_0D488013")), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    if ((lib9770F675_gv_cheat_detected == 1)) {
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_3208053D") + StringExternal("Param/Value/lib_9770F675_F7F850CF")) + StringExternal("Param/Value/lib_9770F675_02556AD2")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_63734F53"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_1377AFEE") + StringExternal("Param/Value/lib_9770F675_F163E973")) + StringExternal("Param/Value/lib_9770F675_8DEB7E3A")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_5E049186") + StringExternal("Param/Value/lib_9770F675_8CAD5AEF")) + StringExternal("Param/Value/lib_9770F675_F7013207")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
    }
    else {
        if ((lib9770F675_gv_sCMRA1_Brutal == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_44EB85E1") + StringExternal("Param/Value/lib_9770F675_502FC102")) + StringExternal("Param/Value/lib_9770F675_5B312AC6")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_DDB440F2"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_sCMRA1_Hard == true)) {
                libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_155EB03C") + StringExternal("Param/Value/lib_9770F675_3B241EC7")) + StringExternal("Param/Value/lib_9770F675_C548B3A6")), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_F600E582"), PlayerGroupAll());
            }
            else {
                if ((lib9770F675_gv_sCMRA1_Norm == true)) {
                    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_084FF647") + StringExternal("Param/Value/lib_9770F675_59D04A40")) + StringExternal("Param/Value/lib_9770F675_C3E04060")), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_0F505F87"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_sCMRA1_Easy == true)) {
                        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_C3CD3629") + StringExternal("Param/Value/lib_9770F675_5CC1BCF6")) + StringExternal("Param/Value/lib_9770F675_26BD7531")), ColorWithAlpha(0,0,0,0), false, 2.0);
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_0BAA3A42"), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 315, (lib9770F675_gv_textStyle + (GameMapName() + StringExternal("Param/Value/lib_9770F675_36292889") + StringExternal("Param/Value/lib_9770F675_C0317F3E")) + StringExternal("Param/Value/lib_9770F675_10F68C0C")), ColorWithAlpha(0,0,0,0), false, 2.0);
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_1143974A"), PlayerGroupAll());
                    }
                }
            }
        }
        if ((lib9770F675_gv_sCMRA2_15 == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_E9C9CA12") + StringExternal("Param/Value/lib_9770F675_EF7E269E")) + StringExternal("Param/Value/lib_9770F675_E94F2BF5")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 350, (lib9770F675_gv_textStyle + (lib9770F675_gv_a2Name + StringExternal("Param/Value/lib_9770F675_FB04192D") + StringExternal("Param/Value/lib_9770F675_4FBB9A0E")) + StringExternal("Param/Value/lib_9770F675_B83B9AC3")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a2Descrip, PlayerGroupAll());
        }
        if ((lib9770F675_gv_sCMRA3_20 == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_9D2F301C") + StringExternal("Param/Value/lib_9770F675_3B8E4957")) + StringExternal("Param/Value/lib_9770F675_F5A357D9")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 800, 50, c_anchorTop, 250, 385, (lib9770F675_gv_textStyle + (lib9770F675_gv_a3Name + StringExternal("Param/Value/lib_9770F675_0569A04E") + StringExternal("Param/Value/lib_9770F675_D21E0DBC")) + StringExternal("Param/Value/lib_9770F675_5BBF2B27")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lib9770F675_gv_a3Descrip, PlayerGroupAll());
        }
    }
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 100, c_anchorCenter, -110, -100, StringExternal("Param/Value/lib_9770F675_898B584D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 100, -100, StringExternal("Param/Value/lib_9770F675_8F8452D7"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 300, -100, StringExternal("Param/Value/lib_9770F675_7E64CE47"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, 0, (lv_txtstyle + PlayerName(1) + StringExternal("Param/Value/lib_9770F675_DFA93BC1")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -80, 0, (lv_txtstyle + IntToText(lib9770F675_gv_units[1]) + StringExternal("Param/Value/lib_9770F675_E034B933")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 120, 0, (lv_txtstyle + IntToText(lib9770F675_gv_kills[1]) + StringExternal("Param/Value/lib_9770F675_40EDE31F")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 320, 0, (lv_txtstyle + IntToText(lib9770F675_gv_deaths[1]) + StringExternal("Param/Value/lib_9770F675_1F6DDCD1")), Color(100,100,100), false, 2.0);
    auto89AD17D4_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto89AD17D4_var = -1;
    while (true) {
        auto89AD17D4_var = PlayerGroupNextPlayer(auto89AD17D4_g, auto89AD17D4_var);
        if (auto89AD17D4_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 400, 50, c_anchorCenter, -450, lv_playerScoreY, (lv_txtstyle + PlayerName(auto89AD17D4_var) + StringExternal("Param/Value/lib_9770F675_CE368FD4")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto89AD17D4_var, false)), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, -80, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_units[auto89AD17D4_var]) + StringExternal("Param/Value/lib_9770F675_C7263D02")), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 120, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_kills[auto89AD17D4_var]) + StringExternal("Param/Value/lib_9770F675_B669A419")), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(lv_scoreScreen, 200, 50, c_anchorCenter, 320, lv_playerScoreY, (lv_txtstyle + IntToText(lib9770F675_gv_deaths[auto89AD17D4_var]) + StringExternal("Param/Value/lib_9770F675_61951E4F")), Color(100,100,100), false, 2.0);
        lv_playerScoreY += 80;
    }
    Wait(1.0, c_timeReal);
    DialogSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
    libNtve_gf_DisplayScreenButton(7, StringExternal("Param/Value/lib_9770F675_2CA0A71C"), 200, 100, c_anchorBottomRight, 300, 100, lib9770F675_gt_RestartERONLY);
    libNtve_gf_DisplayScreenButton(8, StringExternal("Param/Value/lib_9770F675_CE813751"), 200, 100, c_anchorBottomRight, 100, 100, lib9770F675_gt_QuitERONLY);
}

void lib9770F675_gf_TurnOffSecretMusicTriggers () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib9770F675_gt_BriefCancelButton26, false);
    TriggerEnable(lib9770F675_gt_BriefCancelButton27, false);
    TriggerEnable(lib9770F675_gt_BriefCancelButton28, false);
    TriggerEnable(lib9770F675_gt_BriefCancelButton29, false);
}

void lib9770F675_gf_TurnOnSecretMusicTriggers () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib9770F675_gt_BriefCancelButton26, true);
    TriggerEnable(lib9770F675_gt_BriefCancelButton27, true);
    TriggerEnable(lib9770F675_gt_BriefCancelButton28, true);
    TriggerEnable(lib9770F675_gt_BriefCancelButton29, true);
}

void lib9770F675_gf_SecretMusicMessageTurnedOn () {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gv_mRMusic.lv_secretMusicOn = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_B85DEBBE"));
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
}

void lib9770F675_gf_SecretMusicMessageTurnedOff () {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gv_mRMusic.lv_secretMusicOn = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicOff", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_DDE0BAE0"));
    Wait(2.5, c_timeReal);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lib9770F675_gv_mRMusic.lv_default, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(1.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
}

void lib9770F675_gf_CreateAchievement (string lp_icon, text lp_title, text lp_description, text lp_points) {
    // Variable Declarations
    int lv_transparency_fadein;
    int lv_transparency_fadeout;
    int lv_achievement_box_move;
    int lv_achievementDialog;

    // Automatic Variable Declarations
    const int auto4993BB0E_n = 25;
    int auto4993BB0E_i;
    const int auto9D804A3A_n = 25;
    int auto9D804A3A_i;

    // Variable Initialization
    lv_transparency_fadein = 100;
    lv_achievement_box_move = 200;
    lv_achievementDialog = c_invalidDialogId;

    // Implementation
    DialogCreate(663, 147, c_anchorCenter, 0, -200, true);
    lv_achievementDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(lv_achievementDialog, 663, 147, c_anchorCenter, 0, 0, StringToText(""), "Assets/Textures/ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lv_achievementDialog, 84, 84, c_anchorLeft, 40, 0, StringToText(""), lp_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 350, 40, c_anchorTopLeft, 144, 38, (StringExternal("Param/Value/lib_9770F675_6D5875BC") + lp_title + StringExternal("Param/Value/lib_9770F675_51219E2D")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 365, 64, c_anchorTopLeft, 144, 64, (StringExternal("Param/Value/lib_9770F675_B0AC2616") + lp_description + StringExternal("Param/Value/lib_9770F675_00DF1E8A")), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 84, 84, c_anchorRight, 38, 23, (StringExternal("Param/Value/lib_9770F675_E4505845") + lp_points + StringExternal("Param/Value/lib_9770F675_4F58F4F8")), Color(100,100,100), false, 2.0);
    DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), true);
    SoundPlay(SoundLink("UI_BNet_Achievement", 0), PlayerGroupAll(), 100.0, 0.0);
    for (auto4993BB0E_i = 1; auto4993BB0E_i <= auto4993BB0E_n; auto4993BB0E_i += 1) {
        DialogSetPosition(lv_achievementDialog, c_anchorCenter, 0, lv_achievement_box_move);
        DialogSetTransparency(DialogLastCreated(), (lv_transparency_fadein - 5));
        lv_transparency_fadein -= 4;
        lv_achievement_box_move -= 4;
        Wait(0.01, c_timeReal);
    }
    Wait(5.0, c_timeReal);
    for (auto9D804A3A_i = 1; auto9D804A3A_i <= auto9D804A3A_n; auto9D804A3A_i += 1) {
        DialogSetPosition(lv_achievementDialog, c_anchorCenter, 0, lv_achievement_box_move);
        DialogSetTransparency(DialogLastCreated(), (lv_transparency_fadeout + 5));
        lv_transparency_fadeout += 4;
        lv_achievement_box_move += 4;
        Wait(0.01, c_timeReal);
    }
    DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), false);
    Wait(1.0, c_timeReal);
}

void lib9770F675_gf_AchievementA1 (string lp_mapName) {
    // Automatic Variable Declarations
    int auto0E8A3FC1_val;

    // Implementation
    if ((lib9770F675_gv_cheat_detected != 1) && ((lib9770F675_gv_sCMRA1_Easy != true) || (lib9770F675_gv_sCMRA1_Norm != true) || (lib9770F675_gv_sCMRA1_Hard != true) || (lib9770F675_gv_sCMRA1_Brutal != true))) {
        BankLoad("ENS", 1);
        Wait(0.5, c_timeReal);
        TriggerExecute(lib9770F675_gt_A1AchievementLoadVisual, true, false);
        auto0E8A3FC1_val = PlayerDifficulty(1);
        if (auto0E8A3FC1_val == 1) {
            if ((lib9770F675_gv_sCMRA1_Easy != true)) {
                lib9770F675_gv_sCMRA1_Easy = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 5));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Easy_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

        }
        else if (auto0E8A3FC1_val == 2) {
            if ((lib9770F675_gv_sCMRA1_Norm != true)) {
                lib9770F675_gv_sCMRA1_Norm = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 10));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Norm_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Easy != true)) {
                lib9770F675_gv_sCMRA1_Easy = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 5));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Easy_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

        }
        else if (auto0E8A3FC1_val == 3) {
            if ((lib9770F675_gv_sCMRA1_Hard != true)) {
                lib9770F675_gv_sCMRA1_Hard = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 15));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Hard_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Norm != true)) {
                lib9770F675_gv_sCMRA1_Norm = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 10));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Norm_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Easy != true)) {
                lib9770F675_gv_sCMRA1_Easy = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 5));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Easy_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

        }
        else if (auto0E8A3FC1_val == 4) {
            if ((lib9770F675_gv_sCMRA1_Brutal != true)) {
                lib9770F675_gv_sCMRA1_Brutal = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 20));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Brutal_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Hard != true)) {
                lib9770F675_gv_sCMRA1_Hard = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 15));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Hard_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Norm != true)) {
                lib9770F675_gv_sCMRA1_Norm = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 10));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Norm_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

            if ((lib9770F675_gv_sCMRA1_Easy != true)) {
                lib9770F675_gv_sCMRA1_Easy = true;
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
                Wait(0.1, c_timeReal);
                BankValueSetFromInt(BankLastCreated(), "achievements", "achievement_total", (lib9770F675_gv_achievement_total + 5));
                BankValueSetFromFlag(BankLastCreated(), "achievements", ("A1_Easy_" + lib9770F675_gv_introTxt4), true);
                Wait(0.1, c_timeReal);
                lib9770F675_gv_achievement_total = BankValueGetAsInt(BankLastCreated(), "achievements", "achievement_total");
            }

        }
        else {
        }
        Wait(0.5, c_timeReal);
        BankSave(BankLastCreated());
    }

}

trigger auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshBanelingAForestPlanetYellowTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetBanelingA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshBanelingBVolcanicPlanetRedTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetBanelingB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshHydraliskARockyPlanetPurpleTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetHydraliskA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshHydraliskBCloudyPlanetBlueTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetHydraliskB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1;
text auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2writeout;

void lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshMutaliskAAsteroidRock_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;
    string lv_planet_model;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetMutaliskA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshMutaliskBCloudyPlanetBlueTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetMutaliskB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshRoachAIcyPlanetBlueTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetRoachA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshRoachBIcyPlanetBlueTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetRoachB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshSwarmHostAVolcanicPlanetRedTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetSwarmHostA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshSwarmHostBCityPlanetGreyTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetSwarmHostB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshZerglingACloudyPlanetBlueTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetZerglingA", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1;
text auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2writeout;

void lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshZerglingBRokcyPlanetOrangeTint_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("EvolutionPlanetZerglingB", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_Trigger = null;
camerainfo auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_zoomCamera;
text auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1;
text auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2writeout;

void lib9770F675_gf_PlanetWooshOtherPlanetTest (camerainfo lp_zoomCamera, text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_zoomCamera = lp_zoomCamera;
    auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_TriggerFunc (bool testConds, bool runActions) {
    camerainfo lp_zoomCamera = auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_zoomCamera;
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshOtherPlanetTest_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lib9770F675_gf_PreparePlanetPortraitZoomIn("PlanetViewAgria", lp_zoomCamera, "Agria");
    lib9770F675_gf_PlanetWooshText(lp_line1, lp_line2, lp_line1writeout, lp_line2writeout);
    Wait(10.0, c_timeReal);
    lib9770F675_gf_ZoomInPlanetPortrait();
    lib9770F675_gf_HidePlanetPortrait();
    return true;
}

trigger auto_lib9770F675_gf_PlanetWooshText_Trigger = null;
text auto_lib9770F675_gf_PlanetWooshText_lp_line1;
text auto_lib9770F675_gf_PlanetWooshText_lp_line2;
fixed auto_lib9770F675_gf_PlanetWooshText_lp_line1writeout;
fixed auto_lib9770F675_gf_PlanetWooshText_lp_line2writeout;

void lib9770F675_gf_PlanetWooshText (text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_lib9770F675_gf_PlanetWooshText_lp_line1 = lp_line1;
    auto_lib9770F675_gf_PlanetWooshText_lp_line2 = lp_line2;
    auto_lib9770F675_gf_PlanetWooshText_lp_line1writeout = lp_line1writeout;
    auto_lib9770F675_gf_PlanetWooshText_lp_line2writeout = lp_line2writeout;

    if (auto_lib9770F675_gf_PlanetWooshText_Trigger == null) {
        auto_lib9770F675_gf_PlanetWooshText_Trigger = TriggerCreate("auto_lib9770F675_gf_PlanetWooshText_TriggerFunc");
    }

    TriggerExecute(auto_lib9770F675_gf_PlanetWooshText_Trigger, false, false);
}

bool auto_lib9770F675_gf_PlanetWooshText_TriggerFunc (bool testConds, bool runActions) {
    text lp_line1 = auto_lib9770F675_gf_PlanetWooshText_lp_line1;
    text lp_line2 = auto_lib9770F675_gf_PlanetWooshText_lp_line2;
    fixed lp_line1writeout = auto_lib9770F675_gf_PlanetWooshText_lp_line1writeout;
    fixed lp_line2writeout = auto_lib9770F675_gf_PlanetWooshText_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;
    string lv_style;
    color lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;
    lv_style = "PlanetPanelPlanetName";
    lv_color = Color(100.00, 50.20, 0.00);

    // Implementation
    lv_line1writeout = (0.06 * lp_line1writeout);
    lv_line2writeout = (0.06 * lp_line2writeout);
    DialogCreate(1280, 700, c_anchorLeft, 50, -250, false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    Wait(0.5, c_timeReal);
    TriggerExecute(lib9770F675_gt_PlanetTextCrawlSound, false, false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_89C30413", "Style", StringToText((lv_style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_89C30413", "Color", StringToText(libNtve_gf_ConvertColorToString(lv_color)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_89C30413", "Text", lp_line1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 225, TextExpressionAssemble("Param/Expression/lib_9770F675_89C30413"), ColorWithAlpha(0,0,0,0), true, lv_line1writeout);
    lv_line1 = DialogControlLastCreated();
    Wait(lv_line1writeout, c_timeReal);
    TriggerStop(lib9770F675_gt_PlanetTextCrawlSound);
    Wait(0.5, c_timeReal);
    TriggerExecute(lib9770F675_gt_PlanetTextCrawlSound, false, false);
    TextExpressionSetToken("Param/Expression/lib_9770F675_4AEA3217", "Style", StringToText((lv_style)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_4AEA3217", "Color", StringToText(libNtve_gf_ConvertColorToString(lv_color)));
    TextExpressionSetToken("Param/Expression/lib_9770F675_4AEA3217", "Text", lp_line2);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 290, TextExpressionAssemble("Param/Expression/lib_9770F675_4AEA3217"), ColorWithAlpha(0,0,0,0), true, lv_line2writeout);
    lv_line2 = DialogControlLastCreated();
    Wait(lv_line2writeout, c_timeReal);
    TriggerEnable(lib9770F675_gt_PlanetTextCrawlSound, false);
    TriggerStop(lib9770F675_gt_PlanetTextCrawlSound);
    Wait(((lv_line1writeout + lv_line2writeout) * 2.0), c_timeReal);
    DialogControlFadeTransparency(lv_line1, PlayerGroupAll(), 1.0, 100.0);
    DialogControlFadeTransparency(lv_line2, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

void lib9770F675_gf_ObjectivePalladiumUpdate () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_8B41389F"), 20, UnitGetPosition(lib9770F675_gv_commanderER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(8.63, 56.08, 0.78));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    if ((lib9770F675_gv_palladiumDiscovered == 1)) {
        lib9770F675_gv_palladiumFound += 1;
        lib9770F675_gv_palladiumRemaining -= 1;
        lib9770F675_gv_grenade_find9 += 1;
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply2, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Palladium, (StringExternal("Param/Value/lib_9770F675_87DB6BAE") + IntToText(lib9770F675_gv_palladiumRemaining) + StringExternal("Param/Value/lib_9770F675_F653D001")));
    }
    else {
        lib9770F675_gv_palladiumDiscovered = 1;
        lib9770F675_gv_palladiumFound += 1;
        lib9770F675_gv_palladiumRemaining -= 1;
        lib9770F675_gv_grenade_find9 += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9770F675_670EECF7"));
        SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveCreate(StringExternal("Param/Value/lib_9770F675_F5BA1E4D"), StringToText(""), c_objectiveStateActive, false);
        lib9770F675_gv_objective_Palladium = ObjectiveLastCreated();
        DataTableSetObjective(true, "b_palladium", ObjectiveLastCreated());
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply2, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Palladium, (StringExternal("Param/Value/lib_9770F675_A1062540") + IntToText(lib9770F675_gv_palladiumRemaining) + StringExternal("Param/Value/lib_9770F675_4782210D")));
        SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
    }
    if ((lib9770F675_gv_palladiumFound == lib9770F675_gv_palladiumNeeded)) {
        TriggerExecute(lib9770F675_gt_ObjectivePalladiumComplete, true, false);
    }

    if ((lib9770F675_gv_grenade_find9 == 5)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel1", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_4BFEBD78") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_036E63B2") + StringExternal("Param/Value/lib_9770F675_D46A3713"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 == 10)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel2", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_ADA6F2F8") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_4CCA428C") + StringExternal("Param/Value/lib_9770F675_838F630B"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 == 15)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel3", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_524295BB") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_BE68D8B0") + StringExternal("Param/Value/lib_9770F675_EA5DAF78"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 == 20)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel4", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_DABC6E06") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_75B99BB6") + StringExternal("Param/Value/lib_9770F675_6B7B3017"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 == 25)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel5", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_F7F47FCF") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_C504D694") + StringExternal("Param/Value/lib_9770F675_29D35106"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 == 30)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel6", 1);
        UnitAbilityEnable(lib9770F675_gv_commanderER, "VoodooShield", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "VoodooShield", true);
        TriggerEnable(lib9770F675_gt_Grenade_Pickup11, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_DB81E177") + ((IntToText(lib9770F675_gv_grenade_find9) + ((StringExternal("Param/Value/lib_9770F675_1A473F9D") + StringExternal("Param/Value/lib_9770F675_3F7C0AE4"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 >= 3) && (lib9770F675_gv_grenade_find8 >= 3) && (lib9770F675_gv_flashUpgrade != true)) {
        lib9770F675_gv_flashUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 9), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_63853C2F"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 9), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 9), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 8) && (lib9770F675_gv_grenade_find8 >= 10) && (lib9770F675_gv_optionalCommanderGrenade == true) && (lib9770F675_gv_pulseUpgrade != true)) {
        lib9770F675_gv_pulseUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 10), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_5D281302"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 10), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 10), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 15) && (lib9770F675_gv_grenade_find8 >= 14) && (lib9770F675_gv_optionalCommanderPlasma == true) && (lib9770F675_gv_hellfireUpgrade != true)) {
        lib9770F675_gv_hellfireUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 11), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_F34945D1"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 11), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 11), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 21) && (lib9770F675_gv_grenade_find8 >= 22) && (lib9770F675_gv_lazarusUpgrade != true)) {
        lib9770F675_gv_lazarusUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 12), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_D39CFA52"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 12), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 12), false);
    }

}

void lib9770F675_gf_ObjectiveIridiumUpdate () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_3726E6AB"), 20, UnitGetPosition(lib9770F675_gv_commanderER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(8.63, 56.08, 0.78));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    if ((lib9770F675_gv_iridiumDiscovered == 1)) {
        lib9770F675_gv_iridiumFound += 1;
        lib9770F675_gv_iridiumRemaining -= 1;
        lib9770F675_gv_grenade_find8 += 1;
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply2, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Iridium, (StringExternal("Param/Value/lib_9770F675_E839AF98") + IntToText(lib9770F675_gv_iridiumRemaining) + StringExternal("Param/Value/lib_9770F675_FBFE3E29")));
    }
    else {
        lib9770F675_gv_iridiumDiscovered = 1;
        lib9770F675_gv_iridiumFound += 1;
        lib9770F675_gv_iridiumRemaining -= 1;
        lib9770F675_gv_grenade_find8 += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9770F675_83B384D2"));
        SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveCreate(StringExternal("Param/Value/lib_9770F675_E3BCF2DF"), StringToText(""), c_objectiveStateActive, false);
        lib9770F675_gv_objective_Iridium = ObjectiveLastCreated();
        DataTableSetObjective(true, "b_iridium", ObjectiveLastCreated());
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply2, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Iridium, (StringExternal("Param/Value/lib_9770F675_738859B3") + IntToText(lib9770F675_gv_iridiumRemaining) + StringExternal("Param/Value/lib_9770F675_0B4E526D")));
        SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
    }
    if ((lib9770F675_gv_iridiumFound == lib9770F675_gv_iridiumNeeded)) {
        TriggerExecute(lib9770F675_gt_ObjectiveIridiumComplete, true, false);
    }

    if ((lib9770F675_gv_grenade_find8 == 5)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel1", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_4B1C39CE") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_805C2EDB") + StringExternal("Param/Value/lib_9770F675_884463EC"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find8 == 10)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel2", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_C9670236") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_58C838AE") + StringExternal("Param/Value/lib_9770F675_B16056A9"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find8 == 15)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel3", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_1E817A9A") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_274FF7D0") + StringExternal("Param/Value/lib_9770F675_6C6F4817"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find8 == 20)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel4", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_DCA1D79F") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_8617DF28") + StringExternal("Param/Value/lib_9770F675_992B13DA"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find8 == 25)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel5", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_155B258D") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_332AD414") + StringExternal("Param/Value/lib_9770F675_C45998CB"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find8 == 30)) {
        SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
        PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_commanderER);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel6", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "TychusStun", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_942558A9") + ((IntToText(lib9770F675_gv_grenade_find8) + ((StringExternal("Param/Value/lib_9770F675_F8FF5530") + StringExternal("Param/Value/lib_9770F675_80F1625A"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

    if ((lib9770F675_gv_grenade_find9 >= 3) && (lib9770F675_gv_grenade_find8 >= 3) && (lib9770F675_gv_flashUpgrade != true)) {
        lib9770F675_gv_flashUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 9), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_FF6A6700"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 9), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 9), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 8) && (lib9770F675_gv_grenade_find8 >= 10) && (lib9770F675_gv_optionalCommanderGrenade == true) && (lib9770F675_gv_pulseUpgrade != true)) {
        lib9770F675_gv_pulseUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 10), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_F6A2A0BD"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 10), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 10), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 15) && (lib9770F675_gv_grenade_find8 >= 14) && (lib9770F675_gv_optionalCommanderPlasma == true) && (lib9770F675_gv_hellfireUpgrade != true)) {
        lib9770F675_gv_hellfireUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 11), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_635BA502"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 11), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 11), false);
    }

    if ((lib9770F675_gv_grenade_find9 >= 21) && (lib9770F675_gv_grenade_find8 >= 22) && (lib9770F675_gv_lazarusUpgrade != true)) {
        lib9770F675_gv_lazarusUpgrade = true;
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 12), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_083FBB13"));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 12), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("EngineeringBayResearch", 12), false);
    }

}

void lib9770F675_gf_Zeratul_Level_UPSCMR (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_zeratulER);
    if ((lib9770F675_gv_expCurrentLevelTotal >= 50) && (lib9770F675_gv_zeratulLevelCurrent == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_82C9A964") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_5D3E5CDD") + StringExternal("Param/Value/lib_9770F675_65D53C39"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAGravitonBomb", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAGravitonBomb", 0), false);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 125) && (lib9770F675_gv_zeratulLevelCurrent == 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_A633B805") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_4A69C24A") + StringExternal("Param/Value/lib_9770F675_25D174A4"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulBlink", 0), true);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VoidDarkTemplarDeepShadowBlink", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulBlink", 0), false);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VoidDarkTemplarDeepShadowBlink", 0), false);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 225) && (lib9770F675_gv_zeratulLevelCurrent == 4)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_BA0AA294") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_69060686") + StringExternal("Param/Value/lib_9770F675_4D9E5397"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulStun", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ZeratulStun", 0), false);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 350) && (lib9770F675_gv_zeratulLevelCurrent == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_8AA9934A") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_70DCEE17") + StringExternal("Param/Value/lib_9770F675_D3252D94"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("DarkTemplarChampionDeepShadows", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("DarkTemplarChampionDeepShadows", 0), false);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 550) && (lib9770F675_gv_zeratulLevelCurrent == 6)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_B7DAA85F") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_00B05E7E") + StringExternal("Param/Value/lib_9770F675_163CA39A"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Domination", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Domination", 0), false);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 750) && (lib9770F675_gv_zeratulLevelCurrent == 7)) {
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_D43CEE89") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_44BAEF83") + StringExternal("Param/Value/lib_9770F675_FE2D4B97"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrologueVoidArmor", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrologueVoidArmor", 0), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_198EE0CB") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_60C38B0C") + StringExternal("Param/Value/lib_9770F675_0EFA0937"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MohandarShadowClone", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("MohandarShadowClone", 0), false);
        }
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1000) && (lib9770F675_gv_zeratulLevelCurrent == 8)) {
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_53B16A5E") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_AE8F75B2") + StringExternal("Param/Value/lib_9770F675_419E8137"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAInspiration", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAInspiration", 0), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_00EE4F13") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_3976C066") + StringExternal("Param/Value/lib_9770F675_F255560D"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAInspiration", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("SOAInspiration", 0), false);
        }
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1250) && (lib9770F675_gv_zeratulLevelCurrent == 9)) {
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_52C23C67") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_24DE3FE4") + StringExternal("Param/Value/lib_9770F675_D5ECD085"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ShadowBlade", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("ShadowBlade", 0), false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_792CC7B9") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_FBBCE429") + StringExternal("Param/Value/lib_9770F675_5B40336D"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VorazunShadowFury", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("VorazunShadowFury", 0), false);
        }
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1500) && (lib9770F675_gv_zeratulLevelCurrent == 10)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_4D5150A6") + ((IntToText(lib9770F675_gv_zeratulLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_3DB82659") + StringExternal("Param/Value/lib_9770F675_8E587AE1"))))))));
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }

}

void lib9770F675_gf_ObjectiveArtifactUpdateSCMR () {
    // Variable Declarations
    int lv_button_x;
    int lv_button_y;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_button_x = 225;
    lv_button_y = 75;

    // Implementation
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_EFADF938"), 30, UnitGetPosition(lib9770F675_gv_zeratulER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(80.00, 79.61, 22.35));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    if ((lib9770F675_gv_artifactDiscovered == 1)) {
        lib9770F675_gv_artifactFound += 1;
        lib9770F675_gv_artifactRemaining -= 1;
        lib9770F675_gv_artifactCurrentLevelTotal += 1;
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply3, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Artifact, (StringExternal("Param/Value/lib_9770F675_ACCE25EB") + IntToText(lib9770F675_gv_artifactRemaining) + StringExternal("Param/Value/lib_9770F675_96C25CE6")));
    }
    else {
        lib9770F675_gv_artifactDiscovered = 1;
        lib9770F675_gv_artifactFound += 1;
        lib9770F675_gv_artifactRemaining -= 1;
        lib9770F675_gv_artifactCurrentLevelTotal += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9770F675_85198CE2"));
        SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveCreate(StringExternal("Param/Value/lib_9770F675_0D3CAE2B"), StringToText(""), c_objectiveStateActive, false);
        lib9770F675_gv_objective_Artifact = ObjectiveLastCreated();
        DataTableSetObjective(true, "b_artifact", ObjectiveLastCreated());
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply3, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Artifact, (StringExternal("Param/Value/lib_9770F675_0F281EEB") + IntToText(lib9770F675_gv_artifactRemaining) + StringExternal("Param/Value/lib_9770F675_B8A34CD6")));
        SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
    }
    if ((lib9770F675_gv_artifactFound == lib9770F675_gv_artifactNeeded)) {
        TriggerExecute(lib9770F675_gt_ObjectiveArtifactCompleteSCMR, true, false);
    }

    if (((lib9770F675_gv_artifactCurrentLevelTotal == 3) || (lib9770F675_gv_artifactCurrentLevelTotal == 6) || (lib9770F675_gv_artifactCurrentLevelTotal == 9) || (lib9770F675_gv_artifactCurrentLevelTotal == 12) || (lib9770F675_gv_artifactCurrentLevelTotal == 15) || (lib9770F675_gv_artifactCurrentLevelTotal == 18) || (lib9770F675_gv_artifactCurrentLevelTotal == 21) || (lib9770F675_gv_artifactCurrentLevelTotal == 24) || (lib9770F675_gv_artifactCurrentLevelTotal == 27) || (lib9770F675_gv_artifactCurrentLevelTotal == 30))) {
        UnitPauseAll(true);
        UISetCursorVisible(PlayerGroupAll(), true);
        DialogCreate(900, 400, c_anchorCenter, 0, 0, true);
        lib9770F675_gv_zeratulUpgradeDialog = DialogLastCreated();
        DialogSetTitle(lib9770F675_gv_zeratulUpgradeDialog, StringExternal("Param/Value/lib_9770F675_5121B0FC"));
        libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 130, 261, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_campaign_protosssymbol.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 728, 369, c_anchorBottom, 50, 0, StringToText(""), "Assets\\Textures\\ui_void_spearofadun_section_underline.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, -250, -85, StringToText(""), "Assets\\Textures\\btn-ability-protoss-permanentlycloaked-darktemplar-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        if ((lib9770F675_gv_cloakUpgradelvl == 2)) {
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_13B35C44"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_D05D6B71"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_cloakUpgradelvl == 1)) {
                libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_962BEC4C"), "");
                lib9770F675_gv_cloakUpgrade2 = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_B277C3A9"), PlayerGroupAll());
            }
            else {
                if ((lib9770F675_gv_cloakUpgradelvl == 0)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_F1EA10CB"), "");
                    lib9770F675_gv_cloakUpgrade = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_67D2760E"), PlayerGroupAll());
                }

            }
        }
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 0, -85, StringToText(""), "Assets\\Textures\\btn-ability-spearofadun-temporalfield.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        if ((lib9770F675_gv_temporalUpgradelvl == 2)) {
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_EF0091FA"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_78F82201"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_temporalUpgradelvl == 1)) {
                if ((lib9770F675_gv_zeratulLevelCurrent < 2)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_5E6E5907"), "");
                    lib9770F675_gv_temporalUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_35918DB4"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_C8DC1CD2"), "");
                    lib9770F675_gv_temporalUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_B6BD82E2"), PlayerGroupAll());
                }
            }
            else {
                if ((lib9770F675_gv_temporalUpgradelvl == 0)) {
                    if ((lib9770F675_gv_zeratulLevelCurrent < 2)) {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_3DA3D54C"), "");
                        lib9770F675_gv_temporalUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_1C30D730"), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_27C9F3B9"), "");
                        lib9770F675_gv_temporalUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_A792C42F"), PlayerGroupAll());
                    }
                }

            }
        }
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 250, -85, StringToText(""), "Assets\\Textures\\btn-ability-protoss-stealth-blink.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        if ((lib9770F675_gv_blinkUpgradelvl == 2)) {
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_8B2E9729"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_7793C245"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_blinkUpgradelvl == 1)) {
                if ((lib9770F675_gv_zeratulLevelCurrent < 3)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_4851D52A"), "");
                    lib9770F675_gv_blinkUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_2DE96B2C"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_A7C2167F"), "");
                    lib9770F675_gv_blinkUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_CF72AC67"), PlayerGroupAll());
                }
            }
            else {
                if ((lib9770F675_gv_blinkUpgradelvl == 0)) {
                    if ((lib9770F675_gv_zeratulLevelCurrent < 3)) {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_BE48CB4D"), "");
                        lib9770F675_gv_blinkUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_28C9F201"), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, -20, StringToText(""), StringExternal("Param/Value/lib_9770F675_E64A9159"), "");
                        lib9770F675_gv_blinkUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_9B00E5FC"), PlayerGroupAll());
                    }
                }

            }
        }
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, -250, 75, StringToText(""), "Assets\\Textures\\btn-ability-protoss-voidstasis.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        if ((lib9770F675_gv_prisonUpgradelvl == 2)) {
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_E7EDD9C0"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_60673BF2"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_prisonUpgradelvl == 1)) {
                if ((lib9770F675_gv_zeratulLevelCurrent < 4)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_A1AD61A2"), "");
                    lib9770F675_gv_prisonUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_F16DEF47"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_80206F23"), "");
                    lib9770F675_gv_prisonUpgrade2 = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_3A53583B"), PlayerGroupAll());
                }
            }
            else {
                if ((lib9770F675_gv_prisonUpgradelvl == 0)) {
                    if ((lib9770F675_gv_zeratulLevelCurrent < 4)) {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_D09FB1CB"), "");
                        lib9770F675_gv_prisonUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_E1D3EC75"), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, -250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_1B9393CE"), "");
                        lib9770F675_gv_prisonUpgrade = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_38F7FA48"), PlayerGroupAll());
                    }
                }

            }
        }
        if ((lib9770F675_gv_plotCrystalRecovered == false) && (lib9770F675_gv_plotSchezarDestroyed == false)) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 0, 75, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_3064E70F"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_75101C02"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 0, 75, StringToText(""), "Assets\\Textures\\btn-ability-protoss-voidarmor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                if ((lib9770F675_gv_armorUpgradelvl == 1)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_1B50C15D"), "");
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_66680848"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_armorUpgradelvl == 0)) {
                        if ((lib9770F675_gv_zeratulLevelCurrent < 7)) {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_64E16E20"), "");
                            lib9770F675_gv_armorUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_2074CB5D"), PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_ED2600C5"), "");
                            lib9770F675_gv_armorUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_DA6CA8AE"), PlayerGroupAll());
                        }
                    }

                }
            }
            else {
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 0, 75, StringToText(""), "Assets\\Textures\\btn-upgrade-afaidofthedark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                if ((lib9770F675_gv_shadowUpgradelvl == 1)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_5D0AE194"), "");
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_0D6355C6"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_shadowUpgradelvl == 0)) {
                        if ((lib9770F675_gv_zeratulLevelCurrent < 7)) {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_FAFC4FD1"), "");
                            lib9770F675_gv_shadowUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_B9BDCE47"), PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 0, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_CB5104C0"), "");
                            lib9770F675_gv_shadowUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_398D016D"), PlayerGroupAll());
                        }
                    }

                }
            }
        }
        if ((lib9770F675_gv_plotCrystalRecovered == false) && (lib9770F675_gv_plotSchezarDestroyed == false)) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 250, 75, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_6062D439"), "");
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_B1DD8439"), PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 250, 75, StringToText(""), "Assets\\Textures\\btn-ability-protoss-shadowblade.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                if ((lib9770F675_gv_strikeUpgradelvl == 1)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_3C19E76A"), "");
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_958E7958"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_strikeUpgradelvl == 0)) {
                        if ((lib9770F675_gv_zeratulLevelCurrent < 9)) {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_53B968F6"), "");
                            lib9770F675_gv_strikeUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_00EB60DD"), PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_07CEA4FF"), "");
                            lib9770F675_gv_strikeUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_CDA27794"), PlayerGroupAll());
                        }
                    }

                }
            }
            else {
                libNtve_gf_CreateDialogItemImage(lib9770F675_gv_zeratulUpgradeDialog, 76, 76, c_anchorCenter, 250, 75, StringToText(""), "Assets\\Textures\\btn-ability-protoss-shadowfury.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                if ((lib9770F675_gv_furyUpgradelvl == 1)) {
                    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_B738F72B"), "");
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_C7A3D7BA"), PlayerGroupAll());
                }
                else {
                    if ((lib9770F675_gv_furyUpgradelvl == 0)) {
                        if ((lib9770F675_gv_zeratulLevelCurrent < 9)) {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_4F9F16D2"), "");
                            lib9770F675_gv_furyUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_482C6B69"), PlayerGroupAll());
                        }
                        else {
                            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_zeratulUpgradeDialog, lv_button_x, 75, c_anchorCenter, 250, 140, StringToText(""), StringExternal("Param/Value/lib_9770F675_CFBA32CA"), "");
                            lib9770F675_gv_furyUpgrade = DialogControlLastCreated();
                            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_9770F675_DEC20C9B"), PlayerGroupAll());
                        }
                    }

                }
            }
        }
        DialogSetVisible(lib9770F675_gv_zeratulUpgradeDialog, PlayerGroupAll(), true);
    }

}

void lib9770F675_gf_ObjectivePsiUpdateSCMR () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_4A9AE2B3"), 22, UnitGetPosition(lib9770F675_gv_kerriganER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    if ((lib9770F675_gv_psiDiscovered == 1)) {
        lib9770F675_gv_psiFound += 1;
        lib9770F675_gv_psiRemaining -= 1;
        lib9770F675_gv_psiCurrentLevelTotal += 1;
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Psi, (StringExternal("Param/Value/lib_9770F675_9FE63E00") + IntToText(lib9770F675_gv_psiRemaining) + StringExternal("Param/Value/lib_9770F675_54B002C8")));
    }
    else {
        lib9770F675_gv_psiDiscovered = 1;
        lib9770F675_gv_psiFound += 1;
        lib9770F675_gv_psiRemaining -= 1;
        lib9770F675_gv_psiCurrentLevelTotal += 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9770F675_4804BCAD"));
        SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveCreate(StringExternal("Param/Value/lib_9770F675_0DBA6006"), StringToText(""), c_objectiveStateActive, false);
        lib9770F675_gv_objective_Psi = ObjectiveLastCreated();
        DataTableSetObjective(true, "b_artifact", ObjectiveLastCreated());
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply, true, false);
        ObjectiveSetName(lib9770F675_gv_objective_Psi, (StringExternal("Param/Value/lib_9770F675_6FC89A71") + IntToText(lib9770F675_gv_psiRemaining) + StringExternal("Param/Value/lib_9770F675_C608D3C3")));
        SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
    }
    if ((lib9770F675_gv_psiFound == lib9770F675_gv_psiNeeded)) {
        TriggerExecute(lib9770F675_gt_ObjectivePsiComplete, true, false);
    }

}

void lib9770F675_gf_ObjectiveBiomassUpdateSCMR () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("TUISecret", 0), PlayerGroupAll(), 100.0, 0.0);
    if ((lib9770F675_gv_biomassCurrentLevelTotal <= (lib9770F675_gv_biomassCap + 21))) {
        lib9770F675_gv_biomassCurrentLevelTotal += 20;
        lib9770F675_gv_biomassFound += 20;
        Wait(0.01, c_timeGame);
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply, false, false);
        TextTagCreate(StringExternal("Param/Value/lib_9770F675_F4DF1E71"), 22, UnitGetPosition(lib9770F675_gv_kerriganER), 0.4, true, true, PlayerGroupAll());
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
        Wait(4.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }
    else {
        TextTagCreate(StringExternal("Param/Value/lib_9770F675_33FB162E"), 22, UnitGetPosition(EventUnitRangeUnit()), 0.4, true, true, PlayerGroupAll());
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
        Wait(4.0, c_timeGame);
        TextTagDestroy(TextTagLastCreated());
    }
}

void lib9770F675_gf_Kerrigan_Level_UP_STR (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_kerriganER);
    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_2FF4ED24") + ((IntToText(lib9770F675_gv_kerriganSTRLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_E91A0C07") + StringExternal("Param/Value/lib_9770F675_F3D8CEA4"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), false);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_6BFF1944") + ((IntToText(lib9770F675_gv_kerriganSTRLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_A5037387") + StringExternal("Param/Value/lib_9770F675_90CA6E62"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), false);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_02685E32") + ((IntToText(lib9770F675_gv_kerriganSTRLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_1F79BA72") + StringExternal("Param/Value/lib_9770F675_15DB28E0"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), false);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 4)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_22D954C3") + ((IntToText(lib9770F675_gv_kerriganSTRLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_D4E6DEEC") + StringExternal("Param/Value/lib_9770F675_6F554902"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), false);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_B8633709") + ((IntToText(lib9770F675_gv_kerriganSTRLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_E5BE2661") + StringExternal("Param/Value/lib_9770F675_A3BD20AB"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalSlash", 0), false);
    }

}

void lib9770F675_gf_Kerrigan_Level_UP_DEF (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_kerriganER);
    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_F05F1B5C") + ((IntToText(lib9770F675_gv_kerriganDEFLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_83F82534") + StringExternal("Param/Value/lib_9770F675_9E6EC34E"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), false);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_C082B550") + ((IntToText(lib9770F675_gv_kerriganDEFLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_83B207F9") + StringExternal("Param/Value/lib_9770F675_FB608C71"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), false);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_2520E955") + ((IntToText(lib9770F675_gv_kerriganDEFLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_17BAE0F7") + StringExternal("Param/Value/lib_9770F675_DE0736B3"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), false);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 4)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_B2474229") + ((IntToText(lib9770F675_gv_kerriganDEFLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_98A6C5E8") + StringExternal("Param/Value/lib_9770F675_DDF14438"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), false);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_F48BEE4A") + ((IntToText(lib9770F675_gv_kerriganDEFLevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_936ABAE1") + StringExternal("Param/Value/lib_9770F675_09531F4A"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PrimalHeal", 0), false);
    }

}

void lib9770F675_gf_Kerrigan_Level_UP_PSI (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_kerriganER);
    if ((lib9770F675_gv_kerriganPSILevelCurrent == 2)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_6B075F7E") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_384F92AB") + StringExternal("Param/Value/lib_9770F675_576AC3B0"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Implosion", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Implosion", 0), false);
    }

    if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_C4040419") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_862990AC") + StringExternal("Param/Value/lib_9770F675_7C595A63"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PsionicLift", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("PsionicLift", 0), false);
        }

    }
    else {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_79A9450A") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_A3FE2052") + StringExternal("Param/Value/lib_9770F675_B70DBF58"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("WildMutation", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("WildMutation", 0), false);
        }

    }
    if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_B93F8865") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_7A2A4D30") + StringExternal("Param/Value/lib_9770F675_A1BBB720"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("K5Leviathan", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("K5Leviathan", 0), false);
        }

    }
    else {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_FA0DC474") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_F10A64D8") + StringExternal("Param/Value/lib_9770F675_A78550FC"))))))));
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("K5DropPods", 0), true);
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(15.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("K5DropPods", 0), false);
        }

    }
    if ((lib9770F675_gv_kerriganPSILevelCurrent == 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, ((StringExternal("Param/Value/lib_9770F675_07696DD7") + ((IntToText(lib9770F675_gv_kerriganPSILevelCurrent) + ((StringExternal("Param/Value/lib_9770F675_002FB795") + StringExternal("Param/Value/lib_9770F675_DF3C3176"))))))));
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Apocalypse", 0), true);
        SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(15.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Apocalypse", 0), false);
    }

}

void lib9770F675_gf_Pickup_CheckSCMRRuninBank () {
    // Variable Declarations
    unitgroup lv_all_pal;
    unitgroup lv_all_irid;
    unitgroup lv_all_art;
    unitgroup lv_all_psi;

    // Automatic Variable Declarations
    unitgroup auto9EA06467_g;
    int auto9EA06467_u;
    unit auto9EA06467_var;
    unitgroup auto8E2F09BC_g;
    int auto8E2F09BC_u;
    unit auto8E2F09BC_var;
    unitgroup autoE69A60DB_g;
    int autoE69A60DB_u;
    unit autoE69A60DB_var;
    unitgroup auto4D37B53B_g;
    int auto4D37B53B_u;
    unit auto4D37B53B_var;
    unitgroup auto2C671D82_g;
    int auto2C671D82_u;
    unit auto2C671D82_var;
    unitgroup auto774C1611_g;
    int auto774C1611_u;
    unit auto774C1611_var;
    unitgroup auto3588D9C0_g;
    int auto3588D9C0_u;
    unit auto3588D9C0_var;
    unitgroup autoC0909519_g;
    int autoC0909519_u;
    unit autoC0909519_var;
    unitgroup autoE661521A_g;
    int autoE661521A_u;
    unit autoE661521A_var;
    unitgroup auto5F5C0318_g;
    int auto5F5C0318_u;
    unit auto5F5C0318_var;

    // Variable Initialization
    lv_all_pal = UnitGroupEmpty();
    lv_all_irid = UnitGroupEmpty();
    lv_all_art = UnitGroupEmpty();
    lv_all_psi = UnitGroupEmpty();

    // Implementation
    lib9770F675_gv_palladiumFound = 0;
    lib9770F675_gv_iridiumFound = 0;
    auto9EA06467_g = UnitGroup("PickupPlasmaRounds", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9EA06467_u = UnitGroupCount(auto9EA06467_g, c_unitCountAll);
    for (;; auto9EA06467_u -= 1) {
        auto9EA06467_var = UnitGroupUnitFromEnd(auto9EA06467_g, auto9EA06467_u);
        if (auto9EA06467_var == null) { break; }
        lib9770F675_gv_palladiumNeeded += 1;
        lib9770F675_gv_palladiumRemaining += 1;
        UnitGroupAdd(lv_all_pal, auto9EA06467_var);
    }
    auto8E2F09BC_g = UnitGroup("NaturalMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E2F09BC_u = UnitGroupCount(auto8E2F09BC_g, c_unitCountAll);
    for (;; auto8E2F09BC_u -= 1) {
        auto8E2F09BC_var = UnitGroupUnitFromEnd(auto8E2F09BC_g, auto8E2F09BC_u);
        if (auto8E2F09BC_var == null) { break; }
        lib9770F675_gv_palladiumNeeded += 1;
        lib9770F675_gv_palladiumRemaining += 1;
        UnitGroupAdd(lv_all_pal, auto8E2F09BC_var);
    }
    autoE69A60DB_g = UnitGroup("PickupEngineCharge", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE69A60DB_u = UnitGroupCount(autoE69A60DB_g, c_unitCountAll);
    for (;; autoE69A60DB_u -= 1) {
        autoE69A60DB_var = UnitGroupUnitFromEnd(autoE69A60DB_g, autoE69A60DB_u);
        if (autoE69A60DB_var == null) { break; }
        lib9770F675_gv_iridiumNeeded += 1;
        lib9770F675_gv_iridiumRemaining += 1;
        UnitGroupAdd(lv_all_irid, autoE69A60DB_var);
    }
    auto4D37B53B_g = UnitGroup("NaturalGas25", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4D37B53B_u = UnitGroupCount(auto4D37B53B_g, c_unitCountAll);
    for (;; auto4D37B53B_u -= 1) {
        auto4D37B53B_var = UnitGroupUnitFromEnd(auto4D37B53B_g, auto4D37B53B_u);
        if (auto4D37B53B_var == null) { break; }
        lib9770F675_gv_iridiumNeeded += 1;
        lib9770F675_gv_iridiumRemaining += 1;
        UnitGroupAdd(lv_all_irid, auto4D37B53B_var);
    }
    auto2C671D82_g = UnitGroup("ProtossArtifact", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C671D82_u = UnitGroupCount(auto2C671D82_g, c_unitCountAll);
    for (;; auto2C671D82_u -= 1) {
        auto2C671D82_var = UnitGroupUnitFromEnd(auto2C671D82_g, auto2C671D82_u);
        if (auto2C671D82_var == null) { break; }
        lib9770F675_gv_artifactNeeded += 1;
        lib9770F675_gv_artifactRemaining += 1;
        UnitGroupAdd(lv_all_art, auto2C671D82_var);
    }
    auto774C1611_g = UnitGroup("XelNagaDevice", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto774C1611_u = UnitGroupCount(auto774C1611_g, c_unitCountAll);
    for (;; auto774C1611_u -= 1) {
        auto774C1611_var = UnitGroupUnitFromEnd(auto774C1611_g, auto774C1611_u);
        if (auto774C1611_var == null) { break; }
        lib9770F675_gv_artifactNeeded += 1;
        lib9770F675_gv_artifactRemaining += 1;
        UnitGroupAdd(lv_all_art, auto774C1611_var);
    }
    auto3588D9C0_g = UnitGroup("ProtossRelic", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3588D9C0_u = UnitGroupCount(auto3588D9C0_g, c_unitCountAll);
    for (;; auto3588D9C0_u -= 1) {
        auto3588D9C0_var = UnitGroupUnitFromEnd(auto3588D9C0_g, auto3588D9C0_u);
        if (auto3588D9C0_var == null) { break; }
        lib9770F675_gv_psiNeeded += 1;
        lib9770F675_gv_psiRemaining += 1;
        UnitGroupAdd(lv_all_psi, auto3588D9C0_var);
    }
    autoC0909519_g = UnitGroup("RawSolarite", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC0909519_u = UnitGroupCount(autoC0909519_g, c_unitCountAll);
    for (;; autoC0909519_u -= 1) {
        autoC0909519_var = UnitGroupUnitFromEnd(autoC0909519_g, autoC0909519_u);
        if (autoC0909519_var == null) { break; }
        lib9770F675_gv_psiNeeded += 1;
        lib9770F675_gv_psiRemaining += 1;
        UnitGroupAdd(lv_all_psi, autoC0909519_var);
    }
    autoE661521A_g = UnitGroup("PickupChronoRiftChargeSwarm", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE661521A_u = UnitGroupCount(autoE661521A_g, c_unitCountAll);
    for (;; autoE661521A_u -= 1) {
        autoE661521A_var = UnitGroupUnitFromEnd(autoE661521A_g, autoE661521A_u);
        if (autoE661521A_var == null) { break; }
        lib9770F675_gv_psiNeeded += 1;
        lib9770F675_gv_psiRemaining += 1;
        UnitGroupAdd(lv_all_psi, autoE661521A_var);
    }
    auto5F5C0318_g = UnitGroup("ZakoomCrystalFragment", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F5C0318_u = UnitGroupCount(auto5F5C0318_g, c_unitCountAll);
    for (;; auto5F5C0318_u -= 1) {
        auto5F5C0318_var = UnitGroupUnitFromEnd(auto5F5C0318_g, auto5F5C0318_u);
        if (auto5F5C0318_var == null) { break; }
        lib9770F675_gv_psiNeeded += 1;
        lib9770F675_gv_psiRemaining += 1;
        UnitGroupAdd(lv_all_psi, auto5F5C0318_var);
    }
}

void lib9770F675_gf_SpawnNydusWormZerglings (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    lib9770F675_gv_nydusSpawnRegion = lp_region;
    TriggerExecute(lib9770F675_gt_NydusSpawningTriggerZerglings, true, false);
}

void lib9770F675_gf_TutorialTraining (abilcmd lp_ability) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    UISetButtonHighlighted(PlayerGroupActive(), lp_ability, true);
    Wait(10.0, c_timeGame);
    UISetButtonHighlighted(PlayerGroupActive(), lp_ability, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CinematicINI
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicINI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_videoTexture = (lib9770F675_gv_iniNextCinematicLink);
    lib9770F675_gv_video = (("Video\\video_" + lib9770F675_gv_iniNextCinematicLink + ".ogv"));
    if ((lib9770F675_gv_videoTexture == "starintr")) {
        lib9770F675_gv_videoduration = 139;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "terran1")) {
        lib9770F675_gv_videoduration = 78;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "terran2")) {
        lib9770F675_gv_videoduration = 35;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if (((lib9770F675_gv_videoTexture == "terran3") || (lib9770F675_gv_videoTexture == "terran3S"))) {
        lib9770F675_gv_videoduration = 52;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "terran4")) {
        lib9770F675_gv_videoduration = 146;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "zerg1")) {
        lib9770F675_gv_videoduration = 49;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "zerg2")) {
        lib9770F675_gv_videoduration = 245;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "zerg3")) {
        lib9770F675_gv_videoduration = 34;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "zerg4")) {
        lib9770F675_gv_videoduration = 90;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "protoss1")) {
        lib9770F675_gv_videoduration = 53;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "protoss2")) {
        lib9770F675_gv_videoduration = 135;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "protoss3")) {
        lib9770F675_gv_videoduration = 31;
        lib9770F675_gv_preVideoTxt = true;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "protoss4")) {
        lib9770F675_gv_videoduration = 112;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "starxintr")) {
        lib9770F675_gv_videoduration = 228;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "xprotoss")) {
        lib9770F675_gv_videoduration = 203;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "xterran")) {
        lib9770F675_gv_videoduration = 145;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib9770F675_gv_videoTexture == "xzerg")) {
        lib9770F675_gv_videoduration = 172;
        lib9770F675_gv_preVideoTxt = false;
        return true;
    }

    if ((lib0DE1D9D6_gv_videoTexture == "cinematic_thedream")) {
        lib0DE1D9D6_gv_video = "Assets\\Textures\\cinematic_thedream.ogv";
        lib0DE1D9D6_gv_videoduration = 154;
        lib0DE1D9D6_gv_preVideoTxt = false;
        lib0DE1D9D6_gv_preVideo = StringExternal("Param/Value/lib_9770F675_6952DD85");
        return true;
    }

    if ((lib0DE1D9D6_gv_videoTexture == "cinematic_oldrivals")) {
        lib0DE1D9D6_gv_video = "Assets\\Textures\\cinematic_oldrivals.ogv";
        lib0DE1D9D6_gv_videoduration = 255;
        lib0DE1D9D6_gv_preVideoTxt = false;
        lib0DE1D9D6_gv_preVideo = StringExternal("Param/Value/lib_9770F675_4613FEEF");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicINI_Init () {
    lib9770F675_gt_CinematicINI = TriggerCreate("lib9770F675_gt_CinematicINI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicPlay
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(lib9770F675_gt_CinematicINI, true, true);
    Wait(1.0, c_timeGame);
    lib9770F675_gv_pause = false;
    PreloadMovie(lib9770F675_gv_video, false);
    libNtve_gf_PreloadSoundObject("TVMovieTemplate", false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetLighting("Cinema", 0.0);
    CameraSave(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CameraLockInput(1, true);
    VisRevealArea(1, RegionEntireMap(), 2.0, false);
    TerrainShowRegion(RegionEntireMap(), false);
    EnvironmentShow(c_environmentAll, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 0.0);
    if ((lib9770F675_gv_portrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorCenter, 500, 500, "VideoPlayer2", "", "", false, false);
        PortraitSetRenderType(PortraitLastCreated(), c_portraitRenderTypeHDR);
        PortraitSetFullscreen(PortraitLastCreated(), true);
        PortraitSetBorderVisible(PortraitLastCreated(), false);
        PortraitSetBackgroundVisible(PortraitLastCreated(), false);
        lib9770F675_gv_portrait = PortraitLastCreated();
        PortraitWaitForLoad(PortraitLastCreated());
    }

    if ((lib9770F675_gv_preVideoTxt == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (StringExternal("Param/Value/lib_9770F675_A8726B54") + lib9770F675_gv_preVideo + StringExternal("Param/Value/lib_9770F675_A839B095")));
        SoundPlay(SoundLink("UI_TransmissionText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
        Wait(4.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, StringToText(""));
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
    else {
        Wait(1.5, c_timeReal);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, lib9770F675_gt_CinematicStop, true, false);
    PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), true, false);
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), "SoundSetVolume Linear 1.000000@0.000000");
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), (("TextureSelectById " + (lib9770F675_gv_videoTexture))));
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TimerStart(lib9770F675_gv_timerduration, lib9770F675_gv_videoduration, false, c_timeReal);
    TriggerEnable(lib9770F675_gt_CinematicPause, true);
    CutsceneFade(true, 3.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    libNtve_gf_WaitForTimer(lib9770F675_gv_timerduration, 0.0, false);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_CinematicStop, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicPlay_Init () {
    lib9770F675_gt_CinematicPlay = TriggerCreate("lib9770F675_gt_CinematicPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicPause
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicPause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetDuration(lib9770F675_gv_timerduration) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_pause == true)) {
        CinematicOverlay(false, 0.1, "Assets\\Textures\\ui_hint_pausemovie.dds", 0.0, false);
        SoundPause(lib9770F675_gv_videoLocalSound, false);
        ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoSetPaused("video", c_textureSlotComponentDefault, false));
        TimerPause(lib9770F675_gv_timerduration, false);
        lib9770F675_gv_pause = false;
        lib9770F675_gv_pause = false;
    }
    else {
        CinematicOverlay(true, 0.1, "Assets\\Textures\\ui_hint_pausemovie.dds", 0.0, false);
        SoundPause(lib9770F675_gv_videoLocalSound, true);
        ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoSetPaused("video", c_textureSlotComponentDefault, true));
        TimerPause(lib9770F675_gv_timerduration, true);
        lib9770F675_gv_pause = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicPause_Init () {
    lib9770F675_gt_CinematicPause = TriggerCreate("lib9770F675_gt_CinematicPause_Func");
    TriggerEnable(lib9770F675_gt_CinematicPause, false);
    TriggerAddEventKeyPressed(lib9770F675_gt_CinematicPause, c_playerAny, c_keySpace, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicStop
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib9770F675_gt_CinematicPause, false);
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoStop("video", c_textureSlotComponentDefault));
    SoundStop(lib9770F675_gv_videoLocalSound, false);
    lib9770F675_gv_videoLocalSoundLink = SoundLink("EditorDefaultSound", -1);
    PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), false, false);
    TerrainShowRegion(RegionEntireMap(), true);
    EnvironmentShow(c_environmentAll, true);
    if ((lib9770F675_gv_cinematicEndUnmuteAmbient == true)) {
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    }

    if ((lib9770F675_gv_cinematicEndUnmuteMusic == true)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    }

    GameSetSpeedLocked(false);
    CameraRestore(1, 1.0, -1, 10.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicStop_Init () {
    lib9770F675_gt_CinematicStop = TriggerCreate("lib9770F675_gt_CinematicStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicINI(NewGettysburg)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicININewGettysburg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_videoTexture = "cinematic_thedream";
    lib9770F675_gv_video = (("Assets\\Textures\\" + "cinematic_thedream" + ".ogv"));
    lib9770F675_gv_videoLocalSoundLink = SoundLink(("cinematic_thedream"), c_soundIndexAny);
    lib9770F675_gv_videoduration = 161;
    lib9770F675_gv_preVideoTxt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicININewGettysburg_Init () {
    lib9770F675_gt_CinematicININewGettysburg = TriggerCreate("lib9770F675_gt_CinematicININewGettysburg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicINI(Zeratul_ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicINIZeratul_ER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_videoTexture = "cinematic_oldrivals";
    lib9770F675_gv_video = (("Assets\\Textures\\" + "cinematic_oldrivals" + ".ogv"));
    lib9770F675_gv_videoLocalSoundLink = SoundLink(("cinematic_oldrivals"), c_soundIndexAny);
    lib9770F675_gv_videoduration = 255;
    lib9770F675_gv_preVideoTxt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicINIZeratul_ER_Init () {
    lib9770F675_gt_CinematicINIZeratul_ER = TriggerCreate("lib9770F675_gt_CinematicINIZeratul_ER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicINI(BWIntro)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicINIBWIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_videoTexture = "starxintr";
    lib9770F675_gv_video = (("Video\\video_" + "starxintr" + ".ogv"));
    lib9770F675_gv_videoLocalSoundLink = SoundLink(("video_starxintr"), c_soundIndexAny);
    lib9770F675_gv_videoduration = 227;
    lib9770F675_gv_preVideoTxt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicINIBWIntro_Init () {
    lib9770F675_gt_CinematicINIBWIntro = TriggerCreate("lib9770F675_gt_CinematicINIBWIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicPlay(NewGettysburg)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicPlayNewGettysburg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(lib9770F675_gt_CinematicININewGettysburg, true, true);
    Wait(1.0, c_timeGame);
    lib9770F675_gv_pause = false;
    PreloadMovie(lib9770F675_gv_video, false);
    libNtve_gf_PreloadSoundObject("TVMovieTemplate", false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetLighting("Cinema", 0.0);
    CameraSave(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CameraLockInput(1, true);
    VisRevealArea(1, RegionEntireMap(), 2.0, false);
    TerrainShowRegion(RegionEntireMap(), false);
    EnvironmentShow(c_environmentAll, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 0.0);
    if ((lib9770F675_gv_portrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorCenter, 500, 500, "VideoPlayer2", "", "", false, false);
        PortraitSetRenderType(PortraitLastCreated(), c_portraitRenderTypeHDR);
        PortraitSetFullscreen(PortraitLastCreated(), true);
        PortraitSetBorderVisible(PortraitLastCreated(), false);
        PortraitSetBackgroundVisible(PortraitLastCreated(), false);
        lib9770F675_gv_portrait = PortraitLastCreated();
        PortraitWaitForLoad(PortraitLastCreated());
    }

    if ((lib9770F675_gv_preVideoTxt == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (StringExternal("Param/Value/lib_9770F675_0B7CC68A") + lib9770F675_gv_preVideo + StringExternal("Param/Value/lib_9770F675_F61140B0")));
        SoundPlay(SoundLink("UI_TransmissionText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
        Wait(4.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, StringToText(""));
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
    else {
        Wait(1.5, c_timeReal);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, lib9770F675_gt_CinematicStop, true, false);
    PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), true, false);
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), "SoundSetVolume Linear 1.000000@0.000000");
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), (("TextureSelectById " + (lib9770F675_gv_videoTexture))));
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 24, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TimerStart(lib9770F675_gv_timerduration, lib9770F675_gv_videoduration, false, c_timeReal);
    TriggerEnable(lib9770F675_gt_CinematicPause, true);
    CutsceneFade(true, 3.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    libNtve_gf_WaitForTimer(lib9770F675_gv_timerduration, 0.0, false);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_CinematicStop, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicPlayNewGettysburg_Init () {
    lib9770F675_gt_CinematicPlayNewGettysburg = TriggerCreate("lib9770F675_gt_CinematicPlayNewGettysburg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicPlay(Zeratul_ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicPlayZeratul_ER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(lib9770F675_gt_CinematicINIZeratul_ER, true, true);
    Wait(1.0, c_timeGame);
    lib9770F675_gv_pause = false;
    PreloadMovie(lib9770F675_gv_video, false);
    libNtve_gf_PreloadSoundObject("TVMovieTemplate", false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetLighting("Cinema", 0.0);
    CameraSave(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CameraLockInput(1, true);
    VisRevealArea(1, RegionEntireMap(), 2.0, false);
    TerrainShowRegion(RegionEntireMap(), false);
    EnvironmentShow(c_environmentAll, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 0.0);
    if ((lib9770F675_gv_portrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorCenter, 500, 500, "VideoPlayer2", "", "", false, false);
        PortraitSetRenderType(PortraitLastCreated(), c_portraitRenderTypeHDR);
        PortraitSetFullscreen(PortraitLastCreated(), true);
        PortraitSetBorderVisible(PortraitLastCreated(), false);
        PortraitSetBackgroundVisible(PortraitLastCreated(), false);
        lib9770F675_gv_portrait = PortraitLastCreated();
        PortraitWaitForLoad(PortraitLastCreated());
    }

    if ((lib9770F675_gv_preVideoTxt == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (StringExternal("Param/Value/lib_9770F675_D61CD2E2") + lib9770F675_gv_preVideo + StringExternal("Param/Value/lib_9770F675_7B96B7F3")));
        SoundPlay(SoundLink("UI_TransmissionText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
        Wait(4.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, StringToText(""));
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
    else {
        Wait(1.5, c_timeReal);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, lib9770F675_gt_CinematicStop, true, false);
    PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), true, false);
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), "SoundSetVolume Linear 1.000000@0.000000");
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), (("TextureSelectById " + (lib9770F675_gv_videoTexture))));
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 24, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TimerStart(lib9770F675_gv_timerduration, lib9770F675_gv_videoduration, false, c_timeReal);
    TriggerEnable(lib9770F675_gt_CinematicPause, true);
    CutsceneFade(true, 3.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    libNtve_gf_WaitForTimer(lib9770F675_gv_timerduration, 0.0, false);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_CinematicStop, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicPlayZeratul_ER_Init () {
    lib9770F675_gt_CinematicPlayZeratul_ER = TriggerCreate("lib9770F675_gt_CinematicPlayZeratul_ER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CinematicPlay(BWIntro)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicPlayBWIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    TriggerExecute(lib9770F675_gt_CinematicINIBWIntro, true, true);
    Wait(1.0, c_timeGame);
    lib9770F675_gv_pause = false;
    PreloadMovie(lib9770F675_gv_video, false);
    libNtve_gf_PreloadSoundObject("TVMovieTemplate", false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetLighting("Cinema", 0.0);
    CameraSave(1);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CameraLockInput(1, true);
    VisRevealArea(1, RegionEntireMap(), 2.0, false);
    TerrainShowRegion(RegionEntireMap(), false);
    EnvironmentShow(c_environmentAll, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 0.0);
    if ((lib9770F675_gv_portrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorCenter, 500, 500, "VideoPlayer2", "", "", false, false);
        PortraitSetRenderType(PortraitLastCreated(), c_portraitRenderTypeHDR);
        PortraitSetFullscreen(PortraitLastCreated(), true);
        PortraitSetBorderVisible(PortraitLastCreated(), false);
        PortraitSetBackgroundVisible(PortraitLastCreated(), false);
        lib9770F675_gv_portrait = PortraitLastCreated();
        PortraitWaitForLoad(PortraitLastCreated());
    }

    if ((lib9770F675_gv_preVideoTxt == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, (StringExternal("Param/Value/lib_9770F675_DD9003FF") + lib9770F675_gv_preVideo + StringExternal("Param/Value/lib_9770F675_0FD9B25A")));
        SoundPlay(SoundLink("UI_TransmissionText", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeReal);
        SoundStop(SoundLastPlayed(), false);
        Wait(4.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaCinematic, StringToText(""));
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    }
    else {
        Wait(1.5, c_timeReal);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, lib9770F675_gt_CinematicStop, true, false);
    PortraitSetVisible(lib9770F675_gv_portrait, PlayerGroupActive(), true, false);
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), "SoundSetVolume Linear 1.000000@0.000000");
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), (("TextureSelectById " + (lib9770F675_gv_videoTexture))));
    ActorSend(ActorFromPortrait(lib9770F675_gv_portrait), MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    TimerStart(lib9770F675_gv_timerduration, lib9770F675_gv_videoduration, false, c_timeReal);
    TriggerEnable(lib9770F675_gt_CinematicPause, true);
    CutsceneFade(true, 3.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    libNtve_gf_WaitForTimer(lib9770F675_gv_timerduration, 0.0, false);
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    TriggerExecute(lib9770F675_gt_CinematicStop, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicPlayBWIntro_Init () {
    lib9770F675_gt_CinematicPlayBWIntro = TriggerCreate("lib9770F675_gt_CinematicPlayBWIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeyPressed - Interstitials
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KeyPressedInterstitials_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, 2);
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 0.2, 100.0);
    Wait(0.2, c_timeReal);
    libNtve_gf_HideScreenImage2(false, 1);
    Wait(0.1, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KeyPressedInterstitials_Init () {
    lib9770F675_gt_KeyPressedInterstitials = TriggerCreate("lib9770F675_gt_KeyPressedInterstitials_Func");
    TriggerEnable(lib9770F675_gt_KeyPressedInterstitials, false);
    TriggerAddEventKeyPressed(lib9770F675_gt_KeyPressedInterstitials, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseClicked - Interstitials
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_MouseClickedInterstitials_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib9770F675_gt_KeyPressedInterstitials, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_MouseClickedInterstitials_Init () {
    lib9770F675_gt_MouseClickedInterstitials = TriggerCreate("lib9770F675_gt_MouseClickedInterstitials_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeyPressed - Interstitials_Image
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KeyPressedInterstitials_Image_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, 2);
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_HideScreenImage2(false, 1);
    Wait(0.1, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KeyPressedInterstitials_Image_Init () {
    lib9770F675_gt_KeyPressedInterstitials_Image = TriggerCreate("lib9770F675_gt_KeyPressedInterstitials_Image_Func");
    TriggerEnable(lib9770F675_gt_KeyPressedInterstitials_Image, false);
    TriggerAddEventKeyPressed(lib9770F675_gt_KeyPressedInterstitials_Image, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ini - Episode
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_iniEpisode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAF4E04DF_val;
    int auto887FF966_val;
    int autoDB781152_val;
    int auto708D6EC9_val;
    int autoAA18B94C_val;
    int auto58B29C48_val;
    int autoD226F4DD_val;
    int auto0F38D37D_val;
    int autoA7CF5308_val;
    int autoD04934E0_val;
    int auto728C22AB_val;
    int auto228B5D6E_val;
    int autoFF46C583_val;
    int auto3BF3ADE2_val;
    int autoB9AB529C_val;
    int autoE59701FC_val;
    int autoA17CD72A_val;
    int auto1C6E0864_val;
    int auto48F04BCC_val;
    int autoE979AF3A_val;
    int autoFD2D88A5_val;
    int auto17637132_val;
    int auto864C78B7_val;
    int auto1F4A63B1_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_iniEpisode == 1)) {
        autoAF4E04DF_val = lib9770F675_gv_optionsMusic;
        if (autoAF4E04DF_val == 1) {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
        }
        else if (autoAF4E04DF_val == 2) {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC21", -1);
            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
        }
        else if (autoAF4E04DF_val == 3) {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth1", -1);
            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
        }
        else {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
        }
        lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
        lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/1. Rebel Yell/Terran";
        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_043E4CB2");
        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][3] = 3;
        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][6] = 2;
        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][7] = 2;
        return true;
    }
    else {
        if ((lib9770F675_gv_iniEpisode == 2)) {
            auto887FF966_val = lib9770F675_gv_optionsMusic;
            if (auto887FF966_val == 1) {
                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
            }
            else if (auto887FF966_val == 2) {
                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC21", -1);
                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
            }
            else if (auto887FF966_val == 3) {
                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth1", -1);
                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
            }
            else {
                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
            }
            lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
            lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/2. Overmind/Zerg";
            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_D54D4ABD");
            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_zerg.dds";
            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_zerg.dds";
            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_zerg.dds";
            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_zerg.dds";
            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_zerg.dds";
            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_zerg_1.dds";
            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_zerg_1.dds";
            lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][1] = 3;
            lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][9] = 2;
            lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][10] = 2;
            return true;
        }
        else {
            if ((lib9770F675_gv_iniEpisode == 3)) {
                autoDB781152_val = lib9770F675_gv_optionsMusic;
                if (autoDB781152_val == 1) {
                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                }
                else if (autoDB781152_val == 2) {
                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC21", -1);
                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                }
                else if (autoDB781152_val == 3) {
                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth1", -1);
                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                }
                else {
                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                }
                lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/3. The Fall/Protoss";
                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_9C44A87E");
                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_battlenet_glue_sliderfill.dds";
                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_battlenet_glue_scrollbar_normaloverpressedover.dds";
                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_battlenet_glue_scrollbar_normalpressed_bnet.dds";
                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normaloverpressedover.dds";
                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normalpressed.dds";
                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normaloverpressedover_1.dds";
                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normalpressed_1.dds";
                lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][1] = 3;
                lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][3] = 2;
                lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][7] = 2;
                lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][8] = 2;
                lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][10] = 2;
                return true;
            }
            else {
                if ((lib9770F675_gv_iniEpisode == 4)) {
                    auto708D6EC9_val = lib9770F675_gv_optionsMusic;
                    if (auto708D6EC9_val == 1) {
                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                    }
                    else if (auto708D6EC9_val == 2) {
                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC22", -1);
                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                    }
                    else if (auto708D6EC9_val == 3) {
                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth12", -1);
                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                    }
                    else {
                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                    }
                    lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                    lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                    lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/4. The Stand/ProtossX";
                    lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_B7162544");
                    lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                    lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_battlenet_glue_sliderfill.dds";
                    lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_battlenet_glue_scrollbar_normaloverpressedover.dds";
                    lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_battlenet_glue_scrollbar_normalpressed_bnet.dds";
                    lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normaloverpressedover.dds";
                    lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normalpressed.dds";
                    lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normaloverpressedover_1.dds";
                    lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_battlenet_glue_sliderhandle_normalpressed_1.dds";
                    lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][1] = 3;
                    lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][6] = 3;
                    lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][3] = 2;
                    return true;
                }
                else {
                    if ((lib9770F675_gv_iniEpisode == 5)) {
                        autoAA18B94C_val = lib9770F675_gv_optionsMusic;
                        if (autoAA18B94C_val == 1) {
                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                        }
                        else if (autoAA18B94C_val == 2) {
                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                        }
                        else if (autoAA18B94C_val == 3) {
                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                        }
                        else {
                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                        }
                        lib9770F675_gv_iniPlayerUED[1] = true;
                        lib9770F675_gv_backgroundImage = "Images\\Terran\\BriefingAnimations\\backgnd.DDS";
                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                        lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/5. The Iron Fist/TerranX";
                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_1CD4B820");
                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][1] = 3;
                        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][2] = 2;
                        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][6] = 2;
                        lib9770F675_gv_iniMapWeatherEffectsTreshold[lib9770F675_gv_iniEpisode][7] = 2;
                        return true;
                    }
                    else {
                        if ((lib9770F675_gv_iniEpisode == 6)) {
                            auto58B29C48_val = lib9770F675_gv_optionsMusic;
                            if (auto58B29C48_val == 1) {
                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                            }
                            else if (auto58B29C48_val == 2) {
                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                            }
                            else if (auto58B29C48_val == 3) {
                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                            }
                            else {
                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                            }
                            lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                            lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/6. Queen of Blades/ZergX";
                            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_4DFFF7EA");
                            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_zerg.dds";
                            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_zerg.dds";
                            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_zerg.dds";
                            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_zerg.dds";
                            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_zerg.dds";
                            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_zerg_1.dds";
                            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_zerg_1.dds";
                            return true;
                        }
                        else {
                            if ((lib9770F675_gv_iniEpisode == 0)) {
                                auto1F4A63B1_val = lib9770F675_gv_optionsMusic;
                                if (auto1F4A63B1_val == 1) {
                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                }
                                else if (auto1F4A63B1_val == 2) {
                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC21", -1);
                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                }
                                else if (auto1F4A63B1_val == 3) {
                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth1", -1);
                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                }
                                else {
                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                }
                                lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                lib9770F675_gv_defeatImage = "Images\\SCR-Background3-DefeatTerran.dds";
                                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/0. Loomings/Terran";
                                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_0E737DEE");
                                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                return true;
                            }
                            else {
                                if ((lib9770F675_gv_iniEpisode == 7)) {
                                    if ((lib9770F675_gv_iniEpisode_StukovSeries == 1)) {
                                        autoD226F4DD_val = lib9770F675_gv_optionsMusic;
                                        if (autoD226F4DD_val == 1) {
                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                        }
                                        else if (autoD226F4DD_val == 2) {
                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                        }
                                        else if (autoD226F4DD_val == 3) {
                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                        }
                                        else {
                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                        }
                                        lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                        lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/7. Stukov Series/Stukov";
                                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_AD1907A6");
                                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                        return true;
                                    }
                                    else {
                                        if ((lib9770F675_gv_iniEpisode_StukovSeries == 2)) {
                                            auto0F38D37D_val = lib9770F675_gv_optionsMusic;
                                            if (auto0F38D37D_val == 1) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                            }
                                            else if (auto0F38D37D_val == 2) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                            }
                                            else if (auto0F38D37D_val == 3) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                            }
                                            else {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                            }
                                            lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                            lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/7. Stukov Series/Stukov";
                                            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_16B6FF9C");
                                            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                            return true;
                                        }
                                        else {
                                            if ((lib9770F675_gv_iniEpisode_StukovSeries == 3)) {
                                                autoA7CF5308_val = lib9770F675_gv_optionsMusic;
                                                if (autoA7CF5308_val == 1) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                }
                                                else if (autoA7CF5308_val == 2) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                }
                                                else if (autoA7CF5308_val == 3) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                }
                                                else {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                }
                                                lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/7. Stukov Series/Stukov";
                                                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_50BC4029");
                                                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                return true;
                                            }
                                            else {
                                                if ((lib9770F675_gv_iniEpisode_StukovSeries == 4)) {
                                                    autoD04934E0_val = lib9770F675_gv_optionsMusic;
                                                    if (autoD04934E0_val == 1) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                    }
                                                    else if (autoD04934E0_val == 2) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                                    }
                                                    else if (autoD04934E0_val == 3) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                                    }
                                                    else {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                    }
                                                    lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                                    lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                                    lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                                    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/7. Stukov Series/Stukov";
                                                    lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_85E1BC37");
                                                    lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                                    lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                    lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                    return true;
                                                }
                                                else {
                                                    if ((lib9770F675_gv_iniEpisode_StukovSeries == 5)) {
                                                        auto728C22AB_val = lib9770F675_gv_optionsMusic;
                                                        if (auto728C22AB_val == 1) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                        }
                                                        else if (auto728C22AB_val == 2) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                        }
                                                        else if (auto728C22AB_val == 3) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                        }
                                                        else {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                        }
                                                        lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                        lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/7. Stukov Series/Stukov";
                                                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_C5F858C1");
                                                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                        return true;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((lib9770F675_gv_iniEpisode == 8)) {
                                        if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 1)) {
                                            auto228B5D6E_val = lib9770F675_gv_optionsMusic;
                                            if (auto228B5D6E_val == 1) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                            }
                                            else if (auto228B5D6E_val == 2) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                            }
                                            else if (auto228B5D6E_val == 3) {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                            }
                                            else {
                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                            }
                                            lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                            lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode I/ENS_Terran";
                                            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_3C338059");
                                            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                            return true;
                                        }
                                        else {
                                            if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 2)) {
                                                autoFF46C583_val = lib9770F675_gv_optionsMusic;
                                                if (autoFF46C583_val == 1) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                }
                                                else if (autoFF46C583_val == 2) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC22", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                                                }
                                                else if (autoFF46C583_val == 3) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth12", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                                                }
                                                else {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                }
                                                lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                                                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                                                lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                                                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode II/ENS_Protoss";
                                                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_1B2D12DB");
                                                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                                                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                return true;
                                            }
                                            else {
                                                if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) {
                                                    auto3BF3ADE2_val = lib9770F675_gv_optionsMusic;
                                                    if (auto3BF3ADE2_val == 1) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                    }
                                                    else if (auto3BF3ADE2_val == 2) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                    }
                                                    else if (auto3BF3ADE2_val == 3) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                    }
                                                    else {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                    }
                                                    lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                    lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                    lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode III/ENS_Zerg";
                                                    lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_B3E8CF08");
                                                    lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                    lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                    lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                    return true;
                                                }
                                                else {
                                                    if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 4)) {
                                                        autoB9AB529C_val = lib9770F675_gv_optionsMusic;
                                                        if (autoB9AB529C_val == 1) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                        }
                                                        else if (autoB9AB529C_val == 2) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC21", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                                        }
                                                        else if (autoB9AB529C_val == 3) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth1", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                                        }
                                                        else {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                        }
                                                        lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                                        lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode IV/ENS_Epilogue";
                                                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_B0D0D8E9");
                                                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                        return true;
                                                    }
                                                    else {
                                                        if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 5)) {
                                                            autoE59701FC_val = lib9770F675_gv_optionsMusic;
                                                            if (autoE59701FC_val == 1) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                            }
                                                            else if (autoE59701FC_val == 2) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                            }
                                                            else if (autoE59701FC_val == 3) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                            }
                                                            else {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                            }
                                                            lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                            lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode IV/ENS_Epilogue";
                                                            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_E7BB56D8");
                                                            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                            return true;
                                                        }
                                                        else {
                                                            if ((lib9770F675_gv_iniEpisode_EnslaversRedux == 6)) {
                                                                autoA17CD72A_val = lib9770F675_gv_optionsMusic;
                                                                if (autoA17CD72A_val == 1) {
                                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                                }
                                                                else if (autoA17CD72A_val == 2) {
                                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC22", -1);
                                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                                                                }
                                                                else if (autoA17CD72A_val == 3) {
                                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth12", -1);
                                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                                                                }
                                                                else {
                                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                                }
                                                                lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                                                                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                                                                lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                                                                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Episode IV/ENS_Epilogue";
                                                                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_24413A71");
                                                                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                                                                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                                return true;
                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if ((lib9770F675_gv_iniEpisode == 9)) {
                                            if ((lib9770F675_gv_iniEpisode_InsurrectionRedux == 1)) {
                                                autoFD2D88A5_val = lib9770F675_gv_optionsMusic;
                                                if (autoFD2D88A5_val == 1) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                }
                                                else if (autoFD2D88A5_val == 2) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                                }
                                                else if (autoFD2D88A5_val == 3) {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                                }
                                                else {
                                                    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                    lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                    lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                    lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                }
                                                lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                                lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                                lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                                lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Terran";
                                                lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_E1493A41");
                                                lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                                lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                return true;
                                            }
                                            else {
                                                if ((lib9770F675_gv_iniEpisode_InsurrectionRedux == 2)) {
                                                    auto17637132_val = lib9770F675_gv_optionsMusic;
                                                    if (auto17637132_val == 1) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                    }
                                                    else if (auto17637132_val == 2) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC22", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                                                    }
                                                    else if (auto17637132_val == 3) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth12", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                                                    }
                                                    else {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                    }
                                                    lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                                                    lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                                                    lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                                                    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Protoss";
                                                    lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_3ADA5AD4");
                                                    lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                                                    lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                    lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                    return true;
                                                }
                                                else {
                                                    if ((lib9770F675_gv_iniEpisode_InsurrectionRedux == 3)) {
                                                        auto864C78B7_val = lib9770F675_gv_optionsMusic;
                                                        if (auto864C78B7_val == 1) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                        }
                                                        else if (auto864C78B7_val == 2) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                        }
                                                        else if (auto864C78B7_val == 3) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                        }
                                                        else {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                        }
                                                        lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                        lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Zerg";
                                                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_7E54B718");
                                                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                        return true;
                                                    }

                                                }
                                            }
                                        }
                                        else {
                                            if ((lib9770F675_gv_iniEpisode == 10)) {
                                                if ((lib9770F675_gv_iniEpisode_RetributionRedux == 1)) {
                                                    auto1C6E0864_val = lib9770F675_gv_optionsMusic;
                                                    if (auto1C6E0864_val == 1) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                    }
                                                    else if (auto1C6E0864_val == 2) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTSC212", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictorySC2", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatSC2", -1);
                                                    }
                                                    else if (auto1C6E0864_val == 3) {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicTBoth12", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictoryBoth", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeatBoth", -1);
                                                    }
                                                    else {
                                                        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                        lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusic", -1);
                                                        lib9770F675_gv_victoryMusicLink = SoundLink("BWTvictory", -1);
                                                        lib9770F675_gv_defeatMusicLink = SoundLink("BWTdefeat", -1);
                                                    }
                                                    lib9770F675_gv_backgroundImage = "Images/Terran/BriefingAnimations/backgnd.DDS";
                                                    lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode1.dds";
                                                    lib9770F675_gv_defeatImage = "Images\\Launcher\\Loomings.dds";
                                                    lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Terran";
                                                    lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_F4CD4433");
                                                    lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_T;
                                                    lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                    lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                    lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                    return true;
                                                }
                                                else {
                                                    if ((lib9770F675_gv_iniEpisode_RetributionRedux == 2)) {
                                                        auto48F04BCC_val = lib9770F675_gv_optionsMusic;
                                                        if (auto48F04BCC_val == 1) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                        }
                                                        else if (auto48F04BCC_val == 2) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPSC22", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictorySC2", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatSC2", -1);
                                                        }
                                                        else if (auto48F04BCC_val == 3) {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicPBoth12", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictoryBoth", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeatBoth", -1);
                                                        }
                                                        else {
                                                            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                            lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicP", -1);
                                                            lib9770F675_gv_victoryMusicLink = SoundLink("BWPvictory", -1);
                                                            lib9770F675_gv_defeatMusicLink = SoundLink("BWPdefeat", -1);
                                                        }
                                                        lib9770F675_gv_backgroundImage = "Images/Protoss/BriefingAnimations/backgnd.DDS";
                                                        lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode4.dds";
                                                        lib9770F675_gv_defeatImage = "Images\\Launcher\\Episode3.dds";
                                                        lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Protoss";
                                                        lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_6972C7A4");
                                                        lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_P;
                                                        lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                        lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                        lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                        return true;
                                                    }
                                                    else {
                                                        if ((lib9770F675_gv_iniEpisode_RetributionRedux == 3)) {
                                                            autoE979AF3A_val = lib9770F675_gv_optionsMusic;
                                                            if (autoE979AF3A_val == 1) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                            }
                                                            else if (autoE979AF3A_val == 2) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZSC212", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictorySC2", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatSC2", -1);
                                                            }
                                                            else if (autoE979AF3A_val == 3) {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZBoth2", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictoryBoth", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeatBoth", -1);
                                                            }
                                                            else {
                                                                SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny);
                                                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                                                lib9770F675_gv_iniBriefMusic = SoundLink("BriefMusicZ", -1);
                                                                lib9770F675_gv_victoryMusicLink = SoundLink("BWZvictory", -1);
                                                                lib9770F675_gv_defeatMusicLink = SoundLink("BWZdefeat", -1);
                                                            }
                                                            lib9770F675_gv_backgroundImage = "Images/Zerg/BriefingAnimations/backgnd.DDS";
                                                            lib9770F675_gv_victoryImage = "Images\\Launcher\\Episode2.dds";
                                                            lib9770F675_gv_defeatImage = "Images\\SCR-Background18-DefeatZerg.dds";
                                                            lib9770F675_gv_iniNextMap = "Starcraft Mass Recall/Extras/8. Enslavers Redux/Zerg";
                                                            lib9770F675_gv_iniStartButtonStyle = StringExternal("Param/Value/lib_9770F675_8FC67877");
                                                            lib9770F675_gv_briefing_Text_Color = lib9770F675_gv_briefing_Text_Color_Z;
                                                            lib9770F675_gv_scrollTexture[0][0] = "Assets\\Textures\\ui_glue_sliderfill_terran.dds";
                                                            lib9770F675_gv_scrollTexture[1][1] = "Assets\\Textures\\ui_glue_scrollbar_normaloverpressedover_terran.dds";
                                                            lib9770F675_gv_scrollTexture[1][2] = "Assets\\Textures\\ui_glue_scrollbar_normalpressed_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][1] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][2] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran.dds";
                                                            lib9770F675_gv_scrollTexture[2][3] = "Assets\\Textures\\ui_glue_sliderhandle_normaloverpressedover_terran_1.dds";
                                                            lib9770F675_gv_scrollTexture[2][4] = "Assets\\Textures\\ui_glue_sliderhandle_normalpressed_terran_1.dds";
                                                            return true;
                                                        }

                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    PreloadLayout("UI\\Layout\\SCMRBrief.SC2Layout", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_iniEpisode_Init () {
    lib9770F675_gt_iniEpisode = TriggerCreate("lib9770F675_gt_iniEpisode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReturnToLauncherButton
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ReturnToLauncherButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("Starcraft Mass Recall\\SCMR Campaign Launcher.SC2Map");
    Wait(0.5, c_timeReal);
    GameOver(1, c_gameOverTie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ReturnToLauncherButton_Init () {
    lib9770F675_gt_ReturnToLauncherButton = TriggerCreate("lib9770F675_gt_ReturnToLauncherButton_Func");
    TriggerAddEventAbortMission(lib9770F675_gt_ReturnToLauncherButton, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReturnGameButton
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ReturnGameButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogAbortButton, lib9770F675_gv_sCMRCore.lv_bAbort);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ReturnGameButton_Init () {
    lib9770F675_gt_ReturnGameButton = TriggerCreate("lib9770F675_gt_ReturnGameButton_Func");
    TriggerAddEventTimeElapsed(lib9770F675_gt_ReturnGameButton, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Player Name On Mouseover
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SetPlayerNameOnMouseover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetInfoText(EventUnitCreatedUnit(), StringToText(""), lib9770F675_gv_iniPlayerName[UnitGetOwner(EventUnitCreatedUnit())], StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SetPlayerNameOnMouseover_Init () {
    lib9770F675_gt_SetPlayerNameOnMouseover = TriggerCreate("lib9770F675_gt_SetPlayerNameOnMouseover_Func");
    TriggerAddEventUnitCreated(lib9770F675_gt_SetPlayerNameOnMouseover, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Music
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefingMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(lib9770F675_gv_iniBriefMusic, PlayerGroupAll(), 50.0, 0.0);
        lib9770F675_gv_briefmusic = SoundLastPlayed();
        Wait(1.0, c_timeGame);
        SoundWait(lib9770F675_gv_briefmusic, 1.0, c_soundOffsetEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefingMusic_Init () {
    lib9770F675_gt_BriefingMusic = TriggerCreate("lib9770F675_gt_BriefingMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Stop
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefingStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupAll(), c_soundCategoryDialogue);
    TriggerStop(lib9770F675_gv_iniTriggerBriefing);
    TriggerStop(lib9770F675_gt_NoAnimationMouth);
    TriggerStop(lib9770F675_gt_showRaynorBriefingPortrait);
    TriggerStop(lib9770F675_gt_showRaynorMarineBriefingPortrait);
    TriggerStop(lib9770F675_gt_showCollinsBriefingPortrait);
    TriggerStop(lib9770F675_gt_showCerberusBriefingPortrait);
    TriggerStop(lib9770F675_gt_showAdjutantBriefing);
    TriggerStop(lib9770F675_gt_showConfederateAdjutantBriefing);
    TriggerStop(lib9770F675_gt_showDukeBriefing);
    TriggerStop(lib9770F675_gt_showDugalleBriefingPortrait);
    TriggerStop(lib9770F675_gt_showDuranBriefingPortrait);
    TriggerStop(lib9770F675_gt_showStukovBriefingPortrait);
    TriggerStop(lib9770F675_gt_showSarahBriefingPortrait);
    TriggerStop(lib9770F675_gt_showMengskBriefingPortrait);
    TriggerStop(lib9770F675_gt_showInfestedKerriganBriefingPortrait);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefingStop_Init () {
    lib9770F675_gt_BriefingStop = TriggerCreate("lib9770F675_gt_BriefingStop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Start Button
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Mapstart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnStart))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(lib9770F675_gt_BriefAnimationButtonHover);
    TriggerStop(lib9770F675_gt_BriefAnimationButtonunHover);
    TriggerEnable(lib9770F675_gt_BriefAnimationButtonHover, false);
    TriggerEnable(lib9770F675_gt_BriefAnimationButtonunHover, false);
    TriggerExecute(lib9770F675_gt_BriefAnimationButtonunHoverStart, false, true);
    TriggerStop(lib9770F675_gt_BriefAnimation);
    TriggerStop(lib9770F675_gt_BriefAnimationButton);
    TriggerEnable(lib9770F675_gt_BriefScrollOn, false);
    TriggerEnable(lib9770F675_gt_BriefScrollOff, false);
    TriggerEnable(lib9770F675_gt_BriefScrollUpDown, false);
    TriggerStop(lib9770F675_gt_BriefingMusic);
    TransmissionClearAll();
    libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, StringToText(""), PlayerGroupAll());
    TriggerExecute(lib9770F675_gt_BriefingStop, false, false);
    SoundStopAllTriggerSounds(false);
    DialogDestroy(lib9770F675_gv_briefingScrolling);
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingTemplate, PlayerGroupAll(), "Hide");
    libNtve_gf_SetDialogItemTintColor(lib9770F675_gv_btnStart, Color(0,0,0), PlayerGroupAll());
    Wait(0.795, c_timeReal);
    PortraitDestroy(lib9770F675_gv_portrait1);
    PortraitDestroy(lib9770F675_gv_portrait2);
    PortraitDestroy(lib9770F675_gv_portrait3);
    PortraitDestroy(lib9770F675_gv_portrait4);
    DialogDestroyAll();
    CameraLockInput(1, false);
    TriggerExecute(lib9770F675_gt_BriefCancelButton22, false, false);
    TriggerExecute(lib9770F675_gv_iniTriggerStart, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Mapstart_Init () {
    lib9770F675_gt_Mapstart = TriggerCreate("lib9770F675_gt_Mapstart_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_Mapstart, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MUTE EVERYTHING!
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton21_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton21_Init () {
    lib9770F675_gt_BriefCancelButton21 = TriggerCreate("lib9770F675_gt_BriefCancelButton21_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UNMUTE EVERYTHING!
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton22_Init () {
    lib9770F675_gt_BriefCancelButton22 = TriggerCreate("lib9770F675_gt_BriefCancelButton22_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Replay Button
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ReplayButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnReplay))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib9770F675_gt_BriefingStop, false, true);
    TransmissionClearAll();
    libNtve_gf_SetDialogItemText(lib9770F675_gv_briefingTextDisplay, StringToText(""), PlayerGroupAll());
    PortraitSetTintColor(lib9770F675_gv_portrait1, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingPortrait1, PlayerGroupAll(), "TransOff");
    PortraitSetTintColor(lib9770F675_gv_portrait2, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingPortrait2, PlayerGroupAll(), "TransOff");
    PortraitSetTintColor(lib9770F675_gv_portrait3, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingPortrait3, PlayerGroupAll(), "TransOff");
    PortraitSetTintColor(lib9770F675_gv_portrait4, Color(75.29, 75.29, 75.29));
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingPortrait4, PlayerGroupAll(), "TransOff");
    PortraitSetModel(lib9770F675_gv_portrait1, "StaticPortrait", true);
    PortraitSetRenderType(lib9770F675_gv_portrait1, c_portraitRenderTypeLDR);
    PortraitSetModel(lib9770F675_gv_portrait2, "StaticPortrait", true);
    PortraitSetRenderType(lib9770F675_gv_portrait2, c_portraitRenderTypeLDR);
    PortraitSetModel(lib9770F675_gv_portrait3, "StaticPortrait", true);
    PortraitSetRenderType(lib9770F675_gv_portrait3, c_portraitRenderTypeLDR);
    PortraitSetModel(lib9770F675_gv_portrait4, "StaticPortrait", true);
    PortraitSetRenderType(lib9770F675_gv_portrait4, c_portraitRenderTypeLDR);
    TriggerExecute(lib9770F675_gv_iniTriggerBriefing, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ReplayButton_Init () {
    lib9770F675_gt_ReplayButton = TriggerCreate("lib9770F675_gt_ReplayButton_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_ReplayButton, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Cancel Button
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("Starcraft Mass Recall/SCMR Campaign Launcher");
    DialogDestroy(lib9770F675_gv_briefingScrolling);
    DialogControlSendAnimationEvent(lib9770F675_gv_briefingTemplate, PlayerGroupAll(), "Hide");
    Wait(0.795, c_timeReal);
    GameOver(1, c_gameOverTie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton_Init () {
    lib9770F675_gt_BriefCancelButton = TriggerCreate("lib9770F675_gt_BriefCancelButton_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_BriefCancelButton, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Difficulty Selection
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefDifficultySelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto8BA92648_ae = 9;
    const int auto8BA92648_ai = 1;
    const int autoCDCEBC27_ae = 9;
    const int autoCDCEBC27_ai = 1;
    const int autoF4B8BFBD_ae = 9;
    const int autoF4B8BFBD_ai = 1;
    const int autoD47A3E50_ae = 9;
    const int autoD47A3E50_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_difficultySelection))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(lib9770F675_gv_difficultySelection, 1) == 1)) {
        lv_i = 1;
        for ( ; ( (auto8BA92648_ai >= 0 && lv_i <= auto8BA92648_ae) || (auto8BA92648_ai < 0 && lv_i >= auto8BA92648_ae) ) ; lv_i += auto8BA92648_ai ) {
            PlayerSetDifficulty(lv_i, 1);
        }
    }

    if ((DialogControlGetSelectedItem(lib9770F675_gv_difficultySelection, 1) == 2)) {
        lv_i = 1;
        for ( ; ( (autoCDCEBC27_ai >= 0 && lv_i <= autoCDCEBC27_ae) || (autoCDCEBC27_ai < 0 && lv_i >= autoCDCEBC27_ae) ) ; lv_i += autoCDCEBC27_ai ) {
            PlayerSetDifficulty(lv_i, 2);
        }
    }

    if ((DialogControlGetSelectedItem(lib9770F675_gv_difficultySelection, 1) == 3)) {
        lv_i = 1;
        for ( ; ( (autoF4B8BFBD_ai >= 0 && lv_i <= autoF4B8BFBD_ae) || (autoF4B8BFBD_ai < 0 && lv_i >= autoF4B8BFBD_ae) ) ; lv_i += autoF4B8BFBD_ai ) {
            PlayerSetDifficulty(lv_i, 3);
        }
    }

    if ((DialogControlGetSelectedItem(lib9770F675_gv_difficultySelection, 1) == 4)) {
        lv_i = 1;
        for ( ; ( (autoD47A3E50_ai >= 0 && lv_i <= autoD47A3E50_ae) || (autoD47A3E50_ai < 0 && lv_i >= autoD47A3E50_ae) ) ; lv_i += autoD47A3E50_ai ) {
            PlayerSetDifficulty(lv_i, 4);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefDifficultySelection_Init () {
    lib9770F675_gt_BriefDifficultySelection = TriggerCreate("lib9770F675_gt_BriefDifficultySelection_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_BriefDifficultySelection, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Animation
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_sImageName;
    int lv_iHelperInt;
    int lv_iTotalImages;

    // Automatic Variable Declarations
    int auto0BE3BAE0_ae;
    const int auto0BE3BAE0_ai = 1;

    // Variable Initialization
    lv_sImageName = "";
    lv_iHelperInt = 1;
    lv_iTotalImages = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib9770F675_gv_iniEpisode == 0) || (lib9770F675_gv_iniEpisode == 1) || (lib9770F675_gv_iniEpisode == 5) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 2)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 4)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 1)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 4)))) {
        lv_iTotalImages = 41;
        lv_sImageName = "Images\\Terran\\BriefingAnimations\\proloop\\";
    }
    else if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
        lv_iTotalImages = 114;
        lv_sImageName = "Images\\Zerg\\BriefingAnimations\\drip\\";
    }
    else if (((lib9770F675_gv_iniEpisode == 3) || (lib9770F675_gv_iniEpisode == 4) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 2)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 6)))) {
        lv_iTotalImages = 24;
        lv_sImageName = "Images\\Protoss\\BriefingAnimations\\ring\\";
    }
    while (true) {
        auto0BE3BAE0_ae = lv_iTotalImages;
        lv_iHelperInt = 1;
        for ( ; ( (auto0BE3BAE0_ai >= 0 && lv_iHelperInt <= auto0BE3BAE0_ae) || (auto0BE3BAE0_ai < 0 && lv_iHelperInt >= auto0BE3BAE0_ae) ) ; lv_iHelperInt += auto0BE3BAE0_ai ) {
            libNtve_gf_SetDialogItemImage(lib9770F675_gv_briefingAnimation, (((lv_sImageName + IntToString(lv_iHelperInt)) + ".dds")), PlayerGroupAll());
            Wait(0.05, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefAnimation_Init () {
    lib9770F675_gt_BriefAnimation = TriggerCreate("lib9770F675_gt_BriefAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Animation Button
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefAnimationButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iHelperInt;
    string lv_sImageName;
    string lv_sImageName2;
    int lv_iTotalImages;

    // Automatic Variable Declarations
    int autoDA57CBA6_ae;
    const int autoDA57CBA6_ai = 1;

    // Variable Initialization
    lv_iHelperInt = 1;
    lv_sImageName = "start";
    lv_sImageName2 = "start";
    lv_iTotalImages = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib9770F675_gv_iniEpisode == 0) || (lib9770F675_gv_iniEpisode == 1) || (lib9770F675_gv_iniEpisode == 5) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 2)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 4)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 1)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 4)))) {
        lv_iTotalImages = 100;
        lv_sImageName = "Images\\Terran\\BriefingAnimations\\start\\";
    }
    else if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
        lv_iTotalImages = 38;
        lv_sImageName = "Images\\Zerg\\BriefingAnimations\\start\\";
        lv_sImageName2 = "Images\\Zerg\\BriefingAnimations\\starton\\";
    }
    else if (((lib9770F675_gv_iniEpisode == 3) || (lib9770F675_gv_iniEpisode == 4) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 2)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 6)))) {
        lv_iTotalImages = 32;
        lv_sImageName = "Images\\Protoss\\BriefingAnimations\\glow\\";
    }
    while (true) {
        autoDA57CBA6_ae = lv_iTotalImages;
        lv_iHelperInt = 1;
        for ( ; ( (autoDA57CBA6_ai >= 0 && lv_iHelperInt <= autoDA57CBA6_ae) || (autoDA57CBA6_ai < 0 && lv_iHelperInt >= autoDA57CBA6_ae) ) ; lv_iHelperInt += autoDA57CBA6_ai ) {
            libNtve_gf_SetDialogItemImage(lib9770F675_gv_briefingAnimationButton, (((lv_sImageName + IntToString(lv_iHelperInt)) + ".dds")), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib9770F675_gv_briefingAnimationButton2, (((lv_sImageName2 + IntToString(lv_iHelperInt)) + ".dds")), PlayerGroupAll());
            Wait(0.05, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefAnimationButton_Init () {
    lib9770F675_gt_BriefAnimationButton = TriggerCreate("lib9770F675_gt_BriefAnimationButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Animation Button unHover Start
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefAnimationButtonunHoverStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton2, PlayerGroupAll(), 0.0, 100.0);
    }
    else {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.0, 75.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefAnimationButtonunHoverStart_Init () {
    lib9770F675_gt_BriefAnimationButtonunHoverStart = TriggerCreate("lib9770F675_gt_BriefAnimationButtonunHoverStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Animation Button Hover
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefAnimationButtonHover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnStart))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton2, PlayerGroupAll(), 0.2, 0.0);
    }
    else {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.2, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefAnimationButtonHover_Init () {
    lib9770F675_gt_BriefAnimationButtonHover = TriggerCreate("lib9770F675_gt_BriefAnimationButtonHover_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_BriefAnimationButtonHover, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Animation Button unHover
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefAnimationButtonunHover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnStart))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib9770F675_gv_iniEpisode == 2) || (lib9770F675_gv_iniEpisode == 6) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 1)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 3)) || ((lib9770F675_gv_iniEpisode == 7) && (lib9770F675_gv_iniEpisode_StukovSeries == 5)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 3)) || ((lib9770F675_gv_iniEpisode == 8) && (lib9770F675_gv_iniEpisode_EnslaversRedux == 5)))) {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton2, PlayerGroupAll(), 0.2, 100.0);
    }
    else {
        DialogControlFadeTransparency(lib9770F675_gv_briefingAnimationButton, PlayerGroupAll(), 0.2, 75.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefAnimationButtonunHover_Init () {
    lib9770F675_gt_BriefAnimationButtonunHover = TriggerCreate("lib9770F675_gt_BriefAnimationButtonunHover_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_BriefAnimationButtonunHover, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - End All
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefEndAll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_optionsStatic == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefEndAll_Init () {
    lib9770F675_gt_BriefEndAll = TriggerCreate("lib9770F675_gt_BriefEndAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Static All
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefStaticAll_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_oufkqsullawlwdhl;
    string[10] lv_yrybmpvltposhxaa;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oufkqsullawlwdhl = 1;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_yrybmpvltposhxaa[init_i] = "Images/portrait_distort/dist_alpha1.tga";
    }
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_optionsStatic == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefStaticAll_Init () {
    lib9770F675_gt_BriefStaticAll = TriggerCreate("lib9770F675_gt_BriefStaticAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER1
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(lib9770F675_gt_DISTORT_ANIM);
    TriggerStop(lib9770F675_gt_DISTORT_ANIM2);
    libNtve_gf_SetDialogItemImage(lib9770F675_gv_p3_dist, "portrait_distort\\dist_alpha1.tga", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER1_Init () {
    lib9770F675_gt_TESTING_TRIGGER1 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER1_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER1, c_playerAny, "stat", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER2
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(lib9770F675_gt_DISTORT_ANIM);
    TriggerStop(lib9770F675_gt_DISTORT_ANIM2);
    libNtve_gf_SetDialogItemImage(lib9770F675_gv_p3_dist, "Assets\\Textures\\blank.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER2_Init () {
    lib9770F675_gt_TESTING_TRIGGER2 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER2_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER2, c_playerAny, "none", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER3
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(lib9770F675_gt_DISTORT_ANIM);
    TriggerStop(lib9770F675_gt_DISTORT_ANIM2);
    TriggerExecute(lib9770F675_gt_DISTORT_ANIM2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER3_Init () {
    lib9770F675_gt_TESTING_TRIGGER3 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER3_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER3, c_playerAny, "seq", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER4
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(lib9770F675_gt_DISTORT_ANIM);
    TriggerStop(lib9770F675_gt_DISTORT_ANIM2);
    TriggerExecute(lib9770F675_gt_DISTORT_ANIM, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER4_Init () {
    lib9770F675_gt_TESTING_TRIGGER4 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER4_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER4, c_playerAny, "rand", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER5
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAlpha, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER5_Init () {
    lib9770F675_gt_TESTING_TRIGGER5 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER5_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER5, c_playerAny, "alpha", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER6
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemBlendMode(lib9770F675_gv_p3_dist, c_triggerBlendModeNormal, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER6_Init () {
    lib9770F675_gt_TESTING_TRIGGER6 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER6_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER6, c_playerAny, "norm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER7
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(lib9770F675_gv_portrait5, PlayerGroupAll(), 0.0, StringToFixed(StringSub(EventChatMessage(false), 5, 8)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER7_Init () {
    lib9770F675_gt_TESTING_TRIGGER7 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER7_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER7, c_playerAny, "trans", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER8
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemBlendMode(lib9770F675_gv_p3_dist, c_triggerBlendModeDarken, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER8_Init () {
    lib9770F675_gt_TESTING_TRIGGER8 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER8_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER8, c_playerAny, "dark", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER9
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemBlendMode(lib9770F675_gv_p3_dist, c_triggerBlendModeLighten, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER9_Init () {
    lib9770F675_gt_TESTING_TRIGGER9 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER9_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER9, c_playerAny, "light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TESTING_TRIGGER10
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TESTING_TRIGGER10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemBlendMode(lib9770F675_gv_p3_dist, c_triggerBlendModeSubtract, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TESTING_TRIGGER10_Init () {
    lib9770F675_gt_TESTING_TRIGGER10 = TriggerCreate("lib9770F675_gt_TESTING_TRIGGER10_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TESTING_TRIGGER10, c_playerAny, "sub", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DISTORT_ANIM
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DISTORT_ANIM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_i = RandomInt(1, 9);
        libNtve_gf_SetDialogItemImage(lib9770F675_gv_p3_dist, ((("portrait_distort\\dist_alpha" + IntToString(lv_i)) + ".tga")), PlayerGroupAll());
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DISTORT_ANIM_Init () {
    lib9770F675_gt_DISTORT_ANIM = TriggerCreate("lib9770F675_gt_DISTORT_ANIM_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DISTORT_ANIM 2
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DISTORT_ANIM2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto313E9EEB_ae = 9;
    const int auto313E9EEB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_i = 1;
        for ( ; ( (auto313E9EEB_ai >= 0 && lv_i <= auto313E9EEB_ae) || (auto313E9EEB_ai < 0 && lv_i >= auto313E9EEB_ae) ) ; lv_i += auto313E9EEB_ai ) {
            libNtve_gf_SetDialogItemImage(lib9770F675_gv_p3_dist, ((("portrait_distort\\dist_alpha" + IntToString(lv_i)) + ".tga")), PlayerGroupAll());
            Wait(0.1, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DISTORT_ANIM2_Init () {
    lib9770F675_gt_DISTORT_ANIM2 = TriggerCreate("lib9770F675_gt_DISTORT_ANIM2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Scroll On
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefScrollOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_briefingScrollingItem[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetDialogItemImage(lib9770F675_gv_briefingScrollingItem[1], lib9770F675_gv_scrollTexture[1][1], PlayerGroupAll());
    TriggerEnable(lib9770F675_gt_BriefScrollMouseCoordStart, true);
    TriggerEnable(lib9770F675_gt_BriefScrollOff, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefScrollOn_Init () {
    lib9770F675_gt_BriefScrollOn = TriggerCreate("lib9770F675_gt_BriefScrollOn_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_BriefScrollOn, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Scroll Off
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefScrollOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventMouseClickedButton() == c_mouseButtonNone) || (EventMouseWheelSpin() != 0.0) || (EventDialogControl() == lib9770F675_gv_briefingScrollingItem[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib9770F675_gt_BriefScrollMouseMoving, false);
    libNtve_gf_SetDialogItemImage(lib9770F675_gv_briefingScrollingItem[1], lib9770F675_gv_scrollTexture[1][2], PlayerGroupAll());
    TriggerEnable(lib9770F675_gt_BriefScrollOn, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefScrollOff_Init () {
    lib9770F675_gt_BriefScrollOff = TriggerCreate("lib9770F675_gt_BriefScrollOff_Func");
    TriggerEnable(lib9770F675_gt_BriefScrollOff, false);
    TriggerAddEventDialogControl(lib9770F675_gt_BriefScrollOff, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventMouseWheel(lib9770F675_gt_BriefScrollOff, c_playerAny);
    TriggerAddEventMouseClicked(lib9770F675_gt_BriefScrollOff, c_playerAny, c_mouseButtonNone, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Scroll Mouse CoordStart
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefScrollMouseCoordStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib9770F675_gt_BriefScrollMouseCoordStart, false);
    lib9770F675_gv_briefScrollMouseYClicked = (EventMouseMovedPosYUI()-lib9770F675_gv_briefScrollYOffset);
    TriggerEnable(lib9770F675_gt_BriefScrollMouseMoving, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefScrollMouseCoordStart_Init () {
    lib9770F675_gt_BriefScrollMouseCoordStart = TriggerCreate("lib9770F675_gt_BriefScrollMouseCoordStart_Func");
    TriggerEnable(lib9770F675_gt_BriefScrollMouseCoordStart, false);
    TriggerAddEventMouseMoved(lib9770F675_gt_BriefScrollMouseCoordStart, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Scroll Mouse Moving
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefScrollMouseMoving_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_mouseYMoving = (EventMouseMovedPosYUI()-lib9770F675_gv_briefScrollMouseYClicked);
    if ((lib9770F675_gv_mouseYMoving >= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]) && (lib9770F675_gv_mouseYMoving <= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max])) {
        lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_mouseYMoving);
    }
    else {
        if ((lib9770F675_gv_mouseYMoving < lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min])) {
            lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min]);
        }
        else {
            if ((lib9770F675_gv_mouseYMoving > lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max])) {
                lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefScrollMouseMoving_Init () {
    lib9770F675_gt_BriefScrollMouseMoving = TriggerCreate("lib9770F675_gt_BriefScrollMouseMoving_Func");
    TriggerEnable(lib9770F675_gt_BriefScrollMouseMoving, false);
    TriggerAddEventMouseMoved(lib9770F675_gt_BriefScrollMouseMoving, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brief - Scroll Up Down
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefScrollUpDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventKeyPressed() == c_keyUp) || (EventKeyPressed() == c_keyDown) || (EventKeyPressed() == c_keyPageUp) || (EventKeyPressed() == c_keyPageDown) || (EventMouseWheelSpin() != 0.0) || (EventDialogControl() == lib9770F675_gv_briefingScrollingItem[3]) || (EventDialogControl() == lib9770F675_gv_briefingScrollingItem[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventKeyPressed() == c_keyUp) || (EventKeyPressed() == c_keyPageUp) || (EventMouseWheelSpin() >= 1) || (EventDialogControl() == lib9770F675_gv_briefingScrollingItem[4]))) {
        if ((lib9770F675_gv_briefScrollYOffset >= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min])) {
            lib9770F675_gv_briefScrollYOffset = (lib9770F675_gv_briefScrollYOffset-20);
        }
        else {
            lib9770F675_gv_briefScrollYOffset = lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Min];
        }
    }
    else {
        if ((lib9770F675_gv_briefScrollYOffset <= lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max])) {
            lib9770F675_gv_briefScrollYOffset = (lib9770F675_gv_briefScrollYOffset+20);
        }
        else {
            lib9770F675_gv_briefScrollYOffset = lib9770F675_gv_briefScrollYMinMax[lib9770F675_ge_BriefScrollMinMax_Max];
        }
    }
    lib9770F675_gf_BriefScrollSliderMoving(lib9770F675_gv_briefScrollYOffset);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefScrollUpDown_Init () {
    lib9770F675_gt_BriefScrollUpDown = TriggerCreate("lib9770F675_gt_BriefScrollUpDown_Func");
    TriggerEnable(lib9770F675_gt_BriefScrollUpDown, false);
    TriggerAddEventDialogControl(lib9770F675_gt_BriefScrollUpDown, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventMouseWheel(lib9770F675_gt_BriefScrollUpDown, 1);
    TriggerAddEventKeyPressed(lib9770F675_gt_BriefScrollUpDown, c_playerAny, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib9770F675_gt_BriefScrollUpDown, c_playerAny, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib9770F675_gt_BriefScrollUpDown, c_playerAny, c_keyPageUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib9770F675_gt_BriefScrollUpDown, c_playerAny, c_keyPageDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndBriefing
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_EndBriefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_EndBriefing_Init () {
    lib9770F675_gt_EndBriefing = TriggerCreate("lib9770F675_gt_EndBriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NoAnimationMouth
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_NoAnimationMouth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorCommanderPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    TriggerStop(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_NoAnimationMouth_Init () {
    lib9770F675_gt_NoAnimationMouth = TriggerCreate("lib9770F675_gt_NoAnimationMouth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRaynorBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRaynorBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMORaynor", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1RaynorPortraitCommander"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorCommanderPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRaynorBriefingPortrait_Init () {
    lib9770F675_gt_showRaynorBriefingPortrait = TriggerCreate("lib9770F675_gt_showRaynorBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRaynorMarineBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRaynorMarineBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMORaynor", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1RaynorPortraitMarine"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk2", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(7.5, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorMarinePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk2", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(7.5, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRaynorMarineBriefingPortrait_Init () {
    lib9770F675_gt_showRaynorMarineBriefingPortrait = TriggerCreate("lib9770F675_gt_showRaynorMarineBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCollinsBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCollinsBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DominionOfficer1Portrait"), lib9770F675_gv_talkingPortrait, SoundLink("OfficerTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCollinsBriefingPortrait_Init () {
    lib9770F675_gt_showCollinsBriefingPortrait = TriggerCreate("lib9770F675_gt_showCollinsBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCerberusBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCerberusBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DiamondbackPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DiamondbackTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCerberusBriefingPortrait_Init () {
    lib9770F675_gt_showCerberusBriefingPortrait = TriggerCreate("lib9770F675_gt_showCerberusBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAdjutantBriefing
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAdjutantBriefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "UEDSkins", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("UEDAdjutantPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.2, c_timeReal);
        }
    }
    else {
        if ((TechTreeUpgradeCount(1, "BWMOAdjutant", c_techCountCompleteOnly) == 1)) {
            while (true) {
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1AdjutantPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
                Wait(4.2, c_timeReal);
            }
        }
        else {
            while (true) {
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant000122", 0), 0.0, c_transmissionDurationAdd, false);
                Wait(4.2, c_timeReal);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAdjutantBriefing_Init () {
    lib9770F675_gt_showAdjutantBriefing = TriggerCreate("lib9770F675_gt_showAdjutantBriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showConfederateAdjutantBriefing
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showConfederateAdjutantBriefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lib9770F675_gv_talkingPortrait, SoundLink("ConfederateAdjutantSound", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(9.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showConfederateAdjutantBriefing_Init () {
    lib9770F675_gt_showConfederateAdjutantBriefing = TriggerCreate("lib9770F675_gt_showConfederateAdjutantBriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDukeBriefing
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDukeBriefing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DukePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SiegeTankTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDukeBriefing_Init () {
    lib9770F675_gt_showDukeBriefing = TriggerCreate("lib9770F675_gt_showDukeBriefing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDugalleBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDugalleBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DuGallePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DugalleTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDugalleBriefingPortrait_Init () {
    lib9770F675_gt_showDugalleBriefingPortrait = TriggerCreate("lib9770F675_gt_showDugalleBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDuranBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDuranBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("OrlanPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDuranBriefingPortrait_Init () {
    lib9770F675_gt_showDuranBriefingPortrait = TriggerCreate("lib9770F675_gt_showDuranBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedDuranBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedDuranBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("InfestedDuranPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedDuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedDuranBriefingPortrait_Init () {
    lib9770F675_gt_showInfestedDuranBriefingPortrait = TriggerCreate("lib9770F675_gt_showInfestedDuranBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showXelnagaDuranBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showXelnagaDuranBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("XelNagaDuranPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showXelnagaDuranBriefingPortrait_Init () {
    lib9770F675_gt_showXelnagaDuranBriefingPortrait = TriggerCreate("lib9770F675_gt_showXelnagaDuranBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showStukovBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showStukovBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Talk", 0, true);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showStukovBriefingPortrait_Init () {
    lib9770F675_gt_showStukovBriefingPortrait = TriggerCreate("lib9770F675_gt_showStukovBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSarahBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSarahBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOKerrigan", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1SarahKerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SarahHumanTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SarahPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SarahHumanTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSarahBriefingPortrait_Init () {
    lib9770F675_gt_showSarahBriefingPortrait = TriggerCreate("lib9770F675_gt_showSarahBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMengskBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMengskBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOMengsk", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1MengskPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ArcturusPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMengskBriefingPortrait_Init () {
    lib9770F675_gt_showMengskBriefingPortrait = TriggerCreate("lib9770F675_gt_showMengskBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedKerriganBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedKerriganBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOInfestedKerrigan", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1InfestedKerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk_Retro", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedKerriganBriefingPortrait_Init () {
    lib9770F675_gt_showInfestedKerriganBriefingPortrait = TriggerCreate("lib9770F675_gt_showInfestedKerriganBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRazBriefingPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRazBriefingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "RaszagalPortrait", "Talk", 0, true);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRazBriefingPortrait_Init () {
    lib9770F675_gt_showRazBriefingPortrait = TriggerCreate("lib9770F675_gt_showRazBriefingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showConfederateAdjutantPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showConfederateAdjutantPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lib9770F675_gv_talkingPortrait, SoundLink("ConfederateAdjutantSound", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(9.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showConfederateAdjutantPortrait_Init () {
    lib9770F675_gt_showConfederateAdjutantPortrait = TriggerCreate("lib9770F675_gt_showConfederateAdjutantPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRaynorPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRaynorPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMORaynor", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1RaynorPortraitCommander"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorCommanderPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRaynorPortrait_Init () {
    lib9770F675_gt_showRaynorPortrait = TriggerCreate("lib9770F675_gt_showRaynorPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRaynorMarinePortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRaynorMarinePortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMORaynor", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1RaynorPortraitMarine"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk2", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorMarinePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("RaynorTalk2", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRaynorMarinePortrait_Init () {
    lib9770F675_gt_showRaynorMarinePortrait = TriggerCreate("lib9770F675_gt_showRaynorMarinePortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCollinsPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCollinsPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DominionOfficer1Portrait"), lib9770F675_gv_talkingPortrait, SoundLink("OfficerTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCollinsPortrait_Init () {
    lib9770F675_gt_showCollinsPortrait = TriggerCreate("lib9770F675_gt_showCollinsPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCerberusPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCerberusPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DiamondbackPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DiamondbackTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCerberusPortrait_Init () {
    lib9770F675_gt_showCerberusPortrait = TriggerCreate("lib9770F675_gt_showCerberusPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAdjutantPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAdjutantPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_iniEpisode == 5) && (TechTreeUpgradeCount(1, "UEDSkins", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("UEDAdjutantPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.2, c_timeReal);
        }
    }
    else {
        if ((TechTreeUpgradeCount(1, "BWMOAdjutant", c_techCountCompleteOnly) == 1)) {
            while (true) {
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1AdjutantPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
                Wait(4.2, c_timeReal);
            }
        }
        else {
            while (true) {
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), lib9770F675_gv_talkingPortrait, SoundLink("TTychus03BriefingAdjutant000122", 0), 0.0, c_transmissionDurationAdd, false);
                Wait(4.2, c_timeReal);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAdjutantPortrait_Init () {
    lib9770F675_gt_showAdjutantPortrait = TriggerCreate("lib9770F675_gt_showAdjutantPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showBattlecruiserPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showBattlecruiserPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOBattlecruiser", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1BattlecruiserPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("BattlecruiserTalk_SC1", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BattlecruiserPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DukeTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(5.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showBattlecruiserPortrait_Init () {
    lib9770F675_gt_showBattlecruiserPortrait = TriggerCreate("lib9770F675_gt_showBattlecruiserPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSCVPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSCVPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOSCV", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1PortraitSCV"), lib9770F675_gv_talkingPortrait, SoundLink("SCVTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(7.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SCVPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SCVTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(7.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSCVPortrait_Init () {
    lib9770F675_gt_showSCVPortrait = TriggerCreate("lib9770F675_gt_showSCVPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDukePortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDukePortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DukePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SiegeTankTalk", 0), 5.2, c_transmissionDurationSet, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDukePortrait_Init () {
    lib9770F675_gt_showDukePortrait = TriggerCreate("lib9770F675_gt_showDukePortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMarinePortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMarinePortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_models.lv_marine == true)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("SC1MarinePortrait"), lib9770F675_gv_talkingPortrait, "", "Talk", null, null, null, 60.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MarinePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MarineTalk", 0), 3.2, c_transmissionDurationSet, false);
            Wait(3.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMarinePortrait_Init () {
    lib9770F675_gt_showMarinePortrait = TriggerCreate("lib9770F675_gt_showMarinePortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMarineUEDPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMarineUEDPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_optionsUEDModels == true)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("BlackOpsMarinePortrait"), lib9770F675_gv_talkingPortrait, "", "Talk", null, null, null, 60.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else {
        if ((lib9770F675_gv_models.lv_marine == true)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("SC1MarinePortrait"), lib9770F675_gv_talkingPortrait, "", "Talk", null, null, null, 60.0, c_transmissionDurationSet, false, c_maxPlayers, false);
        }
        else {
            while (true) {
                libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MarinePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MarineTalk", 0), 0.0, c_transmissionDurationAdd, false);
                Wait(3.0, c_timeReal);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMarineUEDPortrait_Init () {
    lib9770F675_gt_showMarineUEDPortrait = TriggerCreate("lib9770F675_gt_showMarineUEDPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDugallePortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDugallePortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DuGallePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DugalleTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDugallePortrait_Init () {
    lib9770F675_gt_showDugallePortrait = TriggerCreate("lib9770F675_gt_showDugallePortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDuranPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDuranPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("OrlanPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDuranPortrait_Init () {
    lib9770F675_gt_showDuranPortrait = TriggerCreate("lib9770F675_gt_showDuranPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedDuranPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedDuranPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("InfestedDuranPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedDuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedDuranPortrait_Init () {
    lib9770F675_gt_showInfestedDuranPortrait = TriggerCreate("lib9770F675_gt_showInfestedDuranPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showXelnagaDuranPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showXelnagaDuranPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("XelNagaDuranPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showXelnagaDuranPortrait_Init () {
    lib9770F675_gt_showXelnagaDuranPortrait = TriggerCreate("lib9770F675_gt_showXelnagaDuranPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showStukovPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showStukovPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "AlexiStukovPortrait", "Talk", c_animFlagPlayForever, true);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showStukovPortrait_Init () {
    lib9770F675_gt_showStukovPortrait = TriggerCreate("lib9770F675_gt_showStukovPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSarahPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSarahPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOKerrigan", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1SarahKerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SarahHumanTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SarahPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SarahHumanTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSarahPortrait_Init () {
    lib9770F675_gt_showSarahPortrait = TriggerCreate("lib9770F675_gt_showSarahPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMengskPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMengskPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOMengsk", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1MengskPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ArcturusPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMengskPortrait_Init () {
    lib9770F675_gt_showMengskPortrait = TriggerCreate("lib9770F675_gt_showMengskPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedKerriganPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedKerriganPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOInfestedKerrigan", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1InfestedKerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(3.5, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(3.5, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedKerriganPortrait_Init () {
    lib9770F675_gt_showInfestedKerriganPortrait = TriggerCreate("lib9770F675_gt_showInfestedKerriganPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCivilianPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCivilianPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("Scientist1Portrait"), lib9770F675_gv_talkingPortrait, SoundLink("CivilianTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(1.6, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCivilianPortrait_Init () {
    lib9770F675_gt_showCivilianPortrait = TriggerCreate("lib9770F675_gt_showCivilianPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMedicPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMedicPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MedicPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("MedicTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMedicPortrait_Init () {
    lib9770F675_gt_showMedicPortrait = TriggerCreate("lib9770F675_gt_showMedicPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showVulturePortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showVulturePortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("VulturePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("VultureTalk", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showVulturePortrait_Init () {
    lib9770F675_gt_showVulturePortrait = TriggerCreate("lib9770F675_gt_showVulturePortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDropshipPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDropshipPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BansheePortrait"), lib9770F675_gv_talkingPortrait, SoundLink("DropshipTalk", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDropshipPortrait_Init () {
    lib9770F675_gt_showDropshipPortrait = TriggerCreate("lib9770F675_gt_showDropshipPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSiegeTankPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSiegeTankPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOSiegeTank", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1SiegeTankPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SiegeTankTalkSC1", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SiegeTankPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("SiegeTankTalk", -1), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSiegeTankPortrait_Init () {
    lib9770F675_gt_showSiegeTankPortrait = TriggerCreate("lib9770F675_gt_showSiegeTankPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRazPortrait
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRazPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortrait, "RaszagalPortrait", "Talk", c_animFlagPlayForever, true);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRazPortrait_Init () {
    lib9770F675_gt_showRazPortrait = TriggerCreate("lib9770F675_gt_showRazPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndBriefing-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_EndBriefingER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_EndBriefingER_Init () {
    lib9770F675_gt_EndBriefingER = TriggerCreate("lib9770F675_gt_EndBriefingER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NoAnimationMouth-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_NoAnimationMouthER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_NoAnimationMouthER_Init () {
    lib9770F675_gt_NoAnimationMouthER = TriggerCreate("lib9770F675_gt_NoAnimationMouthER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAdjutantBriefing-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAdjutantBriefingER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOAdjutant", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1AdjutantNon3DPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.2, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("TTychus03BriefingAdjutant00012", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.2, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAdjutantBriefingER_Init () {
    lib9770F675_gt_showAdjutantBriefingER = TriggerCreate("lib9770F675_gt_showAdjutantBriefingER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMengskBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMengskBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOMengsk", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1MengskPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ArcturusPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(9.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMengskBriefingPortraitER_Init () {
    lib9770F675_gt_showMengskBriefingPortraitER = TriggerCreate("lib9770F675_gt_showMengskBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMarineBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMarineBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MarinePortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MarineTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMarineBriefingPortraitER_Init () {
    lib9770F675_gt_showMarineBriefingPortraitER = TriggerCreate("lib9770F675_gt_showMarineBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDugalleBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDugalleBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DuGallePortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("DugalleTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDugalleBriefingPortraitER_Init () {
    lib9770F675_gt_showDugalleBriefingPortraitER = TriggerCreate("lib9770F675_gt_showDugalleBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDuranBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDuranBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("OrlanPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDuranBriefingPortraitER_Init () {
    lib9770F675_gt_showDuranBriefingPortraitER = TriggerCreate("lib9770F675_gt_showDuranBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedKerriganBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedKerriganBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "BWMOInfestedKerrigan", c_techCountCompleteOnly) == 1)) {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SC1InfestedKerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk_Retro", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    else {
        while (true) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), lib9770F675_gv_talkingPortrait, SoundLink("InfestedKerriganTalk", 0), 0.0, c_transmissionDurationAdd, false);
            Wait(4.0, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedKerriganBriefingPortraitER_Init () {
    lib9770F675_gt_showInfestedKerriganBriefingPortraitER = TriggerCreate("lib9770F675_gt_showInfestedKerriganBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showZeratulBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showZeratulBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZeratulPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(7.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showZeratulBriefingPortraitER_Init () {
    lib9770F675_gt_showZeratulBriefingPortraitER = TriggerCreate("lib9770F675_gt_showZeratulBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showArtanisBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showArtanisBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ArtanisPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(7.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showArtanisBriefingPortraitER_Init () {
    lib9770F675_gt_showArtanisBriefingPortraitER = TriggerCreate("lib9770F675_gt_showArtanisBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showStukovBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showStukovBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PortraitSetModelAnim(lib9770F675_gv_talkingPortraitNA, "AlexiStukovPortrait", "Talk", 0, true);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showStukovBriefingPortraitER_Init () {
    lib9770F675_gt_showStukovBriefingPortraitER = TriggerCreate("lib9770F675_gt_showStukovBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRaynorBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRaynorBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RaynorMarinePortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("RaynorTalk2", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(7.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRaynorBriefingPortraitER_Init () {
    lib9770F675_gt_showRaynorBriefingPortraitER = TriggerCreate("lib9770F675_gt_showRaynorBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSelendisBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSelendisBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SelendisPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("MengskTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(7.9, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSelendisBriefingPortraitER_Init () {
    lib9770F675_gt_showSelendisBriefingPortraitER = TriggerCreate("lib9770F675_gt_showSelendisBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showWarfieldBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showWarfieldBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("WarfieldPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("WarfieldTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showWarfieldBriefingPortraitER_Init () {
    lib9770F675_gt_showWarfieldBriefingPortraitER = TriggerCreate("lib9770F675_gt_showWarfieldBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showZagaraBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showZagaraBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZagaraPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("ZagaraTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showZagaraBriefingPortraitER_Init () {
    lib9770F675_gt_showZagaraBriefingPortraitER = TriggerCreate("lib9770F675_gt_showZagaraBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAbathurBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAbathurBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("EvolutionMasterPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("AbathurTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAbathurBriefingPortraitER_Init () {
    lib9770F675_gt_showAbathurBriefingPortraitER = TriggerCreate("lib9770F675_gt_showAbathurBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showIzshaBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showIzshaBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZergAdjutantPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("IzshaTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showIzshaBriefingPortraitER_Init () {
    lib9770F675_gt_showIzshaBriefingPortraitER = TriggerCreate("lib9770F675_gt_showIzshaBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showStewartBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showStewartBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("InfestedColonistPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("StewartTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showStewartBriefingPortraitER_Init () {
    lib9770F675_gt_showStewartBriefingPortraitER = TriggerCreate("lib9770F675_gt_showStewartBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showInfestedStukovBriefingPortrait-ER
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showInfestedStukovBriefingPortraitER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("InfestedStukovPortrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("InfestedStukovTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showInfestedStukovBriefingPortraitER_Init () {
    lib9770F675_gt_showInfestedStukovBriefingPortraitER = TriggerCreate("lib9770F675_gt_showInfestedStukovBriefingPortraitER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showCaptainBuzanBriefingPortrait-SS
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCaptainBuzanBriefingPortraitSS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("Battlecruiser_Junker_Portrait"), lib9770F675_gv_talkingPortraitNA, SoundLink("BattlecruiserTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCaptainBuzanBriefingPortraitSS_Init () {
    lib9770F675_gt_showCaptainBuzanBriefingPortraitSS = TriggerCreate("lib9770F675_gt_showCaptainBuzanBriefingPortraitSS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAbathurPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAbathurPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("EvolutionMasterPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("AbathurTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(9.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAbathurPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showAbathurPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showAbathurPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAdjutantPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAdjutantPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("TTychus03BriefingAdjutant00012", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAdjutantPortrait_TEXT_Init () {
    lib9770F675_gt_showAdjutantPortrait_TEXT = TriggerCreate("lib9770F675_gt_showAdjutantPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDropshipPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDropshipPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("BansheePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DropshipTalk", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDropshipPortrait_TEXT_Init () {
    lib9770F675_gt_showDropshipPortrait_TEXT = TriggerCreate("lib9770F675_gt_showDropshipPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMarinePortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMarinePortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("MarineTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMarinePortrait_TEXT_Init () {
    lib9770F675_gt_showMarinePortrait_TEXT = TriggerCreate("lib9770F675_gt_showMarinePortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showWarfieldPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showWarfieldPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("WarfieldPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("WarfieldTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showWarfieldPortrait_TEXT_Init () {
    lib9770F675_gt_showWarfieldPortrait_TEXT = TriggerCreate("lib9770F675_gt_showWarfieldPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSCVPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSCVPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SCVPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("SCVTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(7.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSCVPortrait_TEXT_Init () {
    lib9770F675_gt_showSCVPortrait_TEXT = TriggerCreate("lib9770F675_gt_showSCVPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showScientistPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showCivilianPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("Scientist1Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("CivilianTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showCivilianPortrait_TEXT_Init () {
    lib9770F675_gt_showCivilianPortrait_TEXT = TriggerCreate("lib9770F675_gt_showCivilianPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showSchezarPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showSchezarPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("GoliathMercenaryPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("Goliath_What_NP", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(3.3, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showSchezarPortrait_TEXT_Init () {
    lib9770F675_gt_showSchezarPortrait_TEXT = TriggerCreate("lib9770F675_gt_showSchezarPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showMercTankPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showMercPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("SiegeTankMercenaryPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("SiegeTankTalk", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showMercPortrait_TEXT_Init () {
    lib9770F675_gt_showMercPortrait_TEXT = TriggerCreate("lib9770F675_gt_showMercPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDuranPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDuranPortrait_TEXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("OrlanPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DuranTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDuranPortrait_TEXT_Init () {
    lib9770F675_gt_showDuranPortrait_TEXT = TriggerCreate("lib9770F675_gt_showDuranPortrait_TEXT_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showKerriganPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showUlrezajPortrait_TEXT3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("KerriganPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("InfestedKerriganTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showUlrezajPortrait_TEXT3_Init () {
    lib9770F675_gt_showUlrezajPortrait_TEXT3 = TriggerCreate("lib9770F675_gt_showUlrezajPortrait_TEXT3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showStewartPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showStewartPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("InfestedColonistPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DugalleTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showStewartPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showStewartPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showStewartPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showIzshaPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showIzshaPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZergAdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("IzshaTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showIzshaPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showIzshaPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showIzshaPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showZagaraPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showZagaraPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("ZagaraPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("ZagaraTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showZagaraPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showZagaraPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showZagaraPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showDahlPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showDahlPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("FemaleCivilian1Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DahlTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(2.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showDahlPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showDahlPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showDahlPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showRamseyPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showRamseyPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("MaleCivilian5Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("RamseyTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(2.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showRamseyPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showRamseyPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showRamseyPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showZamaraPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showZamaraPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RohanaEx2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("ZamaraTalk", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showZamaraPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showZamaraPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showZamaraPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: showAlarakPortrait_TEXT (SCMR-ER)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_showAlarakPortrait_TEXTSCMRER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("AlarakEx2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("pConvo_TaldarimHero_TaldarimHero_014", 0), 0.0, c_transmissionDurationAdd, false);
        Wait(6.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_showAlarakPortrait_TEXTSCMRER_Init () {
    lib9770F675_gt_showAlarakPortrait_TEXTSCMRER = TriggerCreate("lib9770F675_gt_showAlarakPortrait_TEXTSCMRER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeyPressed
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideScreenButton(false, 2);
    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlFadeTransparency(libNtve_gf_ScreenLabelDialogItem(1), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_HideScreenImage2(false, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KeyPressed_Init () {
    lib9770F675_gt_KeyPressed = TriggerCreate("lib9770F675_gt_KeyPressed_Func");
    TriggerEnable(lib9770F675_gt_KeyPressed, false);
    TriggerAddEventKeyPressed(lib9770F675_gt_KeyPressed, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Bank
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_LoadBank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("SCMR", 1);
    Wait(0.2, c_timeReal);
    BankWait(BankLastCreated());
    lib9770F675_gv_sCMR = BankLastCreated();
    lib9770F675_gv_iniEpisodeMapProgress = BankValueGetAsInt(lib9770F675_gv_sCMR, "stats", ("Progress" + IntToString(lib9770F675_gv_iniEpisode)));
    lib9770F675_gv_optionsGameSpeed = BankValueGetAsInt(lib9770F675_gv_sCMR, "options", "gamespeed");
    lib9770F675_gv_optionsWeather = BankValueGetAsFlag(BankLastCreated(), "options", "Weather");
    lib9770F675_gv_optionsDifficulty = BankValueGetAsInt(lib9770F675_gv_sCMR, "options", "difficulty");
    lib9770F675_gv_optionsConsole = BankValueGetAsInt(lib9770F675_gv_sCMR, "options", "console");
    lib9770F675_gv_optionsMusic = BankValueGetAsInt(lib9770F675_gv_sCMR, "options", "music");
    lib9770F675_gv_optionsBWtech = BankValueGetAsFlag(BankLastCreated(), "options", "BWtech");
    lib9770F675_gv_optionsCinematics = BankValueGetAsFlag(BankLastCreated(), "options", "Cinematics");
    lib9770F675_gv_optionsHeroAbilities = BankValueGetAsFlag(BankLastCreated(), "options", "HeroAbilities");
    lib9770F675_gv_optionsHeroAlert = BankValueGetAsFlag(BankLastCreated(), "options", "HeroAlert");
    lib9770F675_gv_optionsHeroNamePlates = BankValueGetAsFlag(BankLastCreated(), "options", "HeroStatusBar");
    lib9770F675_gv_optionsHideKillsWhenZero = BankValueGetAsFlag(BankLastCreated(), "options", "HideKillsWhenZero");
    lib9770F675_gv_optionsTPS = BankValueGetAsFlag(BankLastCreated(), "options", "TPSmode");
    lib9770F675_gv_optionsMicroMapCameraZoom = BankValueGetAsFlag(BankLastCreated(), "options", "InstallationCamZoom");
    lib9770F675_gv_optionsInterstitialsNew = BankValueGetAsInt(lib9770F675_gv_sCMR, "options", "InterstitialsNew");
    lib9770F675_gv_optionsStatic = BankValueGetAsFlag(BankLastCreated(), "options", "Static");
    lib9770F675_gv_optionsExtraMusic = BankValueGetAsFlag(BankLastCreated(), "options", "ExtraMusic");
    lib9770F675_gv_optionsExtraDialogue = BankValueGetAsFlag(BankLastCreated(), "options", "ExtraDialogue");
    lib9770F675_gv_optionsExtraHero = BankValueGetAsFlag(BankLastCreated(), "options", "ExtraHero");
    lib9770F675_gv_optionsExtraHeroBanter = BankValueGetAsFlag(BankLastCreated(), "options", "ExtraHeroBanter");
    lib9770F675_gv_optionsPsiEmitters = BankValueGetAsFlag(BankLastCreated(), "options", "PsiEmitters");
    lib9770F675_gv_optionsSOKModels = BankValueGetAsFlag(BankLastCreated(), "options", "SOKModels");
    lib9770F675_gv_optionsUEDModels = BankValueGetAsFlag(BankLastCreated(), "options", "UEDModels");
    lib9770F675_gv_optionsOvermindModels = BankValueGetAsFlag(BankLastCreated(), "options", "OvermindModels");
    lib9770F675_gv_optionsCerebrateModels = BankValueGetAsFlag(BankLastCreated(), "options", "CerebrateModels");
    lib9770F675_gv_optionsKhalaiModels = BankValueGetAsFlag(BankLastCreated(), "options", "KhalaiModels");
    lib9770F675_gv_optionsNerazimModels = BankValueGetAsFlag(BankLastCreated(), "options", "NerazimModels");
    lib9770F675_gv_optionsEffectsStructures = BankValueGetAsFlag(BankLastCreated(), "options", "EffectsStructures");
    lib9770F675_gv_optionsEffectsNukes = BankValueGetAsFlag(BankLastCreated(), "options", "EffectsNukes");
    lib9770F675_gv_optionsEffectsFires = BankValueGetAsFlag(BankLastCreated(), "options", "EffectsFires");
    lib9770F675_gv_optionsAudioAbilities = BankValueGetAsFlag(BankLastCreated(), "options", "AudioAbilities");
    lib9770F675_gv_optionsAudioBuildings = BankValueGetAsFlag(BankLastCreated(), "options", "AudioBuildings");
    lib9770F675_gv_optionsAudioWeapons = BankValueGetAsFlag(BankLastCreated(), "options", "AudioWeapons");
    lib9770F675_gv_introCinematicWatched = BankValueGetAsFlag(BankLastCreated(), "options", "introCinematicWatched");
    lib9770F675_gv_optionsBriefObjectives = false;
    lib9770F675_gv_optionsCutsceneNotes = false;
    lib9770F675_gv_optionsEffectsWeather = 0;
    lib9770F675_gv_optionsIcons = BankValueGetAsFlag(BankLastCreated(), "options", "CommandIcons");
    lib9770F675_gv_optionsStaticAnimation = BankValueGetAsFlag(BankLastCreated(), "options", "StaticAnimation");
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_optionsInterstitialsNew == 1)) {
        lib9770F675_gv_optionsInterstitials = true;
    }
    else {
        lib9770F675_gv_optionsInterstitials = false;
    }
    lib9770F675_gv_optionsAutosave = BankValueGetAsFlag(BankLastCreated(), "options", "Autosave");
    lib9770F675_gv_optionsProfilesPlanet = BankValueGetAsFlag(BankLastCreated(), "options", "ProfilesPlanet");
    lib9770F675_gv_optionsProfilesUnit = BankValueGetAsFlag(BankLastCreated(), "options", "ProfilesUnit");
    lib9770F675_gv_optionsProfilesCharacter = BankValueGetAsFlag(BankLastCreated(), "options", "ProfilesCharacter");
    lib9770F675_gv_iniMapProgressCurrent = BankValueGetAsInt(BankLastCreated(), "CampaignProgress", ("Ep" + IntToString(lib9770F675_gv_iniEpisode)));
    lib9770F675_gv_sounds.lv_adjutant = BankValueGetAsFlag(BankLastCreated(), "sounds", "Adjutant");
    lib9770F675_gv_sounds.lv_raynor = BankValueGetAsFlag(BankLastCreated(), "sounds", "Raynor");
    lib9770F675_gv_sounds.lv_sCV = BankValueGetAsFlag(BankLastCreated(), "sounds", "SCV");
    lib9770F675_gv_sounds.lv_marine = BankValueGetAsFlag(BankLastCreated(), "sounds", "Marine");
    lib9770F675_gv_sounds.lv_firebat = BankValueGetAsFlag(BankLastCreated(), "sounds", "Firebat");
    lib9770F675_gv_sounds.lv_medic = BankValueGetAsFlag(BankLastCreated(), "sounds", "Medic");
    lib9770F675_gv_sounds.lv_ghost = BankValueGetAsFlag(BankLastCreated(), "sounds", "Ghost");
    lib9770F675_gv_sounds.lv_vulture = BankValueGetAsFlag(BankLastCreated(), "sounds", "Vulture");
    lib9770F675_gv_sounds.lv_siegeTank = BankValueGetAsFlag(BankLastCreated(), "sounds", "SiegeTank");
    lib9770F675_gv_sounds.lv_goliath = BankValueGetAsFlag(BankLastCreated(), "sounds", "Goliath");
    lib9770F675_gv_sounds.lv_wraith = BankValueGetAsFlag(BankLastCreated(), "sounds", "Wraith");
    lib9770F675_gv_sounds.lv_dropship = BankValueGetAsFlag(BankLastCreated(), "sounds", "Dropship");
    lib9770F675_gv_sounds.lv_scienceVessel = BankValueGetAsFlag(BankLastCreated(), "sounds", "ScienceVessel");
    lib9770F675_gv_sounds.lv_battlecruiser = BankValueGetAsFlag(BankLastCreated(), "sounds", "Battlecruiser");
    lib9770F675_gv_sounds.lv_valkyrie = BankValueGetAsFlag(BankLastCreated(), "sounds", "Valkyrie");
    lib9770F675_gv_sounds.lv_cerebrate = BankValueGetAsFlag(BankLastCreated(), "sounds", "Cerebrate");
    lib9770F675_gv_sounds.lv_larva = BankValueGetAsFlag(BankLastCreated(), "sounds", "Larva");
    lib9770F675_gv_sounds.lv_drone = BankValueGetAsFlag(BankLastCreated(), "sounds", "Drone");
    lib9770F675_gv_sounds.lv_overlord = BankValueGetAsFlag(BankLastCreated(), "sounds", "Overlord");
    lib9770F675_gv_sounds.lv_zergling = BankValueGetAsFlag(BankLastCreated(), "sounds", "Zergling");
    lib9770F675_gv_sounds.lv_hydralisk = BankValueGetAsFlag(BankLastCreated(), "sounds", "Hydralisk");
    lib9770F675_gv_sounds.lv_lurker = BankValueGetAsFlag(BankLastCreated(), "sounds", "Lurker");
    lib9770F675_gv_sounds.lv_infestedTerran = BankValueGetAsFlag(BankLastCreated(), "sounds", "InfestedTerran");
    lib9770F675_gv_sounds.lv_defiler = BankValueGetAsFlag(BankLastCreated(), "sounds", "Defiler");
    lib9770F675_gv_sounds.lv_ultralisk = BankValueGetAsFlag(BankLastCreated(), "sounds", "Ultralisk");
    lib9770F675_gv_sounds.lv_scourge = BankValueGetAsFlag(BankLastCreated(), "sounds", "Scourge");
    lib9770F675_gv_sounds.lv_queen = BankValueGetAsFlag(BankLastCreated(), "sounds", "Queen");
    lib9770F675_gv_sounds.lv_mutalisk = BankValueGetAsFlag(BankLastCreated(), "sounds", "Mutalisk");
    lib9770F675_gv_sounds.lv_guardian = BankValueGetAsFlag(BankLastCreated(), "sounds", "Guardian");
    lib9770F675_gv_sounds.lv_devourer = BankValueGetAsFlag(BankLastCreated(), "sounds", "Devourer");
    lib9770F675_gv_sounds.lv_advisor = BankValueGetAsFlag(BankLastCreated(), "sounds", "Advisor");
    lib9770F675_gv_sounds.lv_probe = BankValueGetAsFlag(BankLastCreated(), "sounds", "Probe");
    lib9770F675_gv_sounds.lv_zealot = BankValueGetAsFlag(BankLastCreated(), "sounds", "Zealot");
    lib9770F675_gv_sounds.lv_dragoon = BankValueGetAsFlag(BankLastCreated(), "sounds", "Dragoon");
    lib9770F675_gv_sounds.lv_highTemplar = BankValueGetAsFlag(BankLastCreated(), "sounds", "HighTemplar");
    lib9770F675_gv_sounds.lv_darkTemplar = BankValueGetAsFlag(BankLastCreated(), "sounds", "DarkTemplar");
    lib9770F675_gv_sounds.lv_archon = BankValueGetAsFlag(BankLastCreated(), "sounds", "Archon");
    lib9770F675_gv_sounds.lv_darkArchon = BankValueGetAsFlag(BankLastCreated(), "sounds", "DarkArchon");
    lib9770F675_gv_sounds.lv_shuttle = BankValueGetAsFlag(BankLastCreated(), "sounds", "Shuttle");
    lib9770F675_gv_sounds.lv_reaver = BankValueGetAsFlag(BankLastCreated(), "sounds", "Reaver");
    lib9770F675_gv_sounds.lv_observer = BankValueGetAsFlag(BankLastCreated(), "sounds", "Observer");
    lib9770F675_gv_sounds.lv_scout = BankValueGetAsFlag(BankLastCreated(), "sounds", "Scout");
    lib9770F675_gv_sounds.lv_carrier = BankValueGetAsFlag(BankLastCreated(), "sounds", "Carrier");
    lib9770F675_gv_sounds.lv_arbiter = BankValueGetAsFlag(BankLastCreated(), "sounds", "Arbiter");
    lib9770F675_gv_sounds.lv_corsair = BankValueGetAsFlag(BankLastCreated(), "sounds", "Corsair");
    Wait(0.2, c_timeReal);
    lib9770F675_gv_models.lv_adjutant = BankValueGetAsFlag(BankLastCreated(), "models", "Adjutant");
    lib9770F675_gv_models.lv_mengsk = BankValueGetAsFlag(BankLastCreated(), "models", "Mengsk");
    lib9770F675_gv_models.lv_raynor = BankValueGetAsFlag(BankLastCreated(), "models", "Raynor");
    lib9770F675_gv_models.lv_kerrigan = BankValueGetAsFlag(BankLastCreated(), "models", "Kerrigan");
    lib9770F675_gv_models.lv_sCV = BankValueGetAsFlag(BankLastCreated(), "models", "SCV");
    lib9770F675_gv_models.lv_marine = BankValueGetAsFlag(BankLastCreated(), "models", "Marine");
    lib9770F675_gv_models.lv_firebat = BankValueGetAsFlag(BankLastCreated(), "models", "Firebat");
    lib9770F675_gv_models.lv_medic = BankValueGetAsFlag(BankLastCreated(), "models", "Medic");
    lib9770F675_gv_models.lv_ghost = BankValueGetAsFlag(BankLastCreated(), "models", "Ghost");
    lib9770F675_gv_models.lv_vulture = BankValueGetAsFlag(BankLastCreated(), "models", "Vulture");
    lib9770F675_gv_models.lv_siegeTank = BankValueGetAsFlag(BankLastCreated(), "models", "SiegeTank");
    lib9770F675_gv_models.lv_goliath = BankValueGetAsFlag(BankLastCreated(), "models", "Goliath");
    lib9770F675_gv_models.lv_wraith = BankValueGetAsFlag(BankLastCreated(), "models", "Wraith");
    lib9770F675_gv_models.lv_scienceVessel = BankValueGetAsFlag(BankLastCreated(), "models", "ScienceVessel");
    lib9770F675_gv_models.lv_battlecruiser = BankValueGetAsFlag(BankLastCreated(), "models", "Battlecruiser");
    lib9770F675_gv_models.lv_commandCenter = BankValueGetAsFlag(BankLastCreated(), "models", "CommandCenter");
    lib9770F675_gv_models.lv_supplyDepot = BankValueGetAsFlag(BankLastCreated(), "models", "SupplyDepot");
    lib9770F675_gv_models.lv_bunker = BankValueGetAsFlag(BankLastCreated(), "models", "Bunker");
    lib9770F675_gv_models.lv_otherBuildingsT = BankValueGetAsFlag(BankLastCreated(), "models", "OtherBuildingsT");
    lib9770F675_gv_models.lv_overmind = BankValueGetAsFlag(BankLastCreated(), "models", "Overmind");
    lib9770F675_gv_models.lv_cerebrate = BankValueGetAsFlag(BankLastCreated(), "models", "Cerebrate");
    lib9770F675_gv_models.lv_infestedKerrigan = BankValueGetAsFlag(BankLastCreated(), "models", "InfestedKerrigan");
    lib9770F675_gv_models.lv_drone = BankValueGetAsFlag(BankLastCreated(), "models", "Drone");
    lib9770F675_gv_models.lv_overlord = BankValueGetAsFlag(BankLastCreated(), "models", "Overlord");
    lib9770F675_gv_models.lv_zergling = BankValueGetAsFlag(BankLastCreated(), "models", "Zergling");
    lib9770F675_gv_models.lv_hydralisk = BankValueGetAsFlag(BankLastCreated(), "models", "Hydralisk");
    lib9770F675_gv_models.lv_lurker = BankValueGetAsFlag(BankLastCreated(), "models", "Lurker");
    lib9770F675_gv_models.lv_defiler = BankValueGetAsFlag(BankLastCreated(), "models", "Defiler");
    lib9770F675_gv_models.lv_infestedTerran = BankValueGetAsFlag(BankLastCreated(), "models", "InfestedTerran");
    lib9770F675_gv_models.lv_ultralisk = BankValueGetAsFlag(BankLastCreated(), "models", "Ultralisk");
    lib9770F675_gv_models.lv_queen = BankValueGetAsFlag(BankLastCreated(), "models", "Queen");
    lib9770F675_gv_models.lv_mutalisk = BankValueGetAsFlag(BankLastCreated(), "models", "Mutalisk");
    lib9770F675_gv_models.lv_guardian = BankValueGetAsFlag(BankLastCreated(), "models", "Guardian");
    lib9770F675_gv_models.lv_devourer = BankValueGetAsFlag(BankLastCreated(), "models", "Devourer");
    lib9770F675_gv_models.lv_hatchery = BankValueGetAsFlag(BankLastCreated(), "models", "Hatchery");
    lib9770F675_gv_models.lv_sporeColony = BankValueGetAsFlag(BankLastCreated(), "models", "SporeColony");
    lib9770F675_gv_models.lv_otherBuildingsZ = BankValueGetAsFlag(BankLastCreated(), "models", "OtherBuildingsZ");
    lib9770F675_gv_models.lv_artanis = BankValueGetAsFlag(BankLastCreated(), "models", "Artanis");
    lib9770F675_gv_models.lv_zeratul = BankValueGetAsFlag(BankLastCreated(), "models", "Zeratul");
    lib9770F675_gv_models.lv_probe = BankValueGetAsFlag(BankLastCreated(), "models", "Probe");
    lib9770F675_gv_models.lv_zealot = BankValueGetAsFlag(BankLastCreated(), "models", "Zealot");
    lib9770F675_gv_models.lv_dragoon = BankValueGetAsFlag(BankLastCreated(), "models", "Dragoon");
    lib9770F675_gv_models.lv_highTemplar = BankValueGetAsFlag(BankLastCreated(), "models", "HighTemplar");
    lib9770F675_gv_models.lv_darkTemplar = BankValueGetAsFlag(BankLastCreated(), "models", "DarkTemplar");
    lib9770F675_gv_models.lv_archon = BankValueGetAsFlag(BankLastCreated(), "models", "Archon");
    lib9770F675_gv_models.lv_darkArchon = BankValueGetAsFlag(BankLastCreated(), "models", "DarkArchon");
    lib9770F675_gv_models.lv_reaver = BankValueGetAsFlag(BankLastCreated(), "models", "Reaver");
    lib9770F675_gv_models.lv_observer = BankValueGetAsFlag(BankLastCreated(), "models", "Observer");
    lib9770F675_gv_models.lv_scout = BankValueGetAsFlag(BankLastCreated(), "models", "Scout");
    lib9770F675_gv_models.lv_corsair = BankValueGetAsFlag(BankLastCreated(), "models", "Corsair");
    lib9770F675_gv_models.lv_carrier = BankValueGetAsFlag(BankLastCreated(), "models", "Carrier");
    lib9770F675_gv_models.lv_arbiter = BankValueGetAsFlag(BankLastCreated(), "models", "Arbiter");
    lib9770F675_gv_models.lv_nexus = BankValueGetAsFlag(BankLastCreated(), "models", "Nexus");
    lib9770F675_gv_models.lv_shieldBattery = BankValueGetAsFlag(BankLastCreated(), "models", "ShieldBattery");
    lib9770F675_gv_models.lv_otherBuildingsP = BankValueGetAsFlag(BankLastCreated(), "models", "OtherBuildingsP");
    Wait(0.2, c_timeReal);
    if ((lib9770F675_gv_iniEpisode == 8)) {
        TriggerExecute(lib9770F675_gt_LoadBank_ENS, true, false);
    }

    Wait(0.2, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_LoadBank_Init () {
    lib9770F675_gt_LoadBank = TriggerCreate("lib9770F675_gt_LoadBank_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Options - Game Speed
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_OptionsGameSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_optionsGameSpeed == 5)) {
        GameSetSpeedValue(c_gameSpeedFaster);
        return true;
    }

    if ((lib9770F675_gv_optionsGameSpeed == 4)) {
        GameSetSpeedValue(c_gameSpeedFast);
        return true;
    }

    if ((lib9770F675_gv_optionsGameSpeed == 3)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        return true;
    }

    if ((lib9770F675_gv_optionsGameSpeed == 2)) {
        GameSetSpeedValue(c_gameSpeedSlow);
        return true;
    }

    if ((lib9770F675_gv_optionsGameSpeed == 1)) {
        GameSetSpeedValue(c_gameSpeedSlower);
    }
    else {
        GameSetSpeedValue(c_gameSpeedFaster);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_OptionsGameSpeed_Init () {
    lib9770F675_gt_OptionsGameSpeed = TriggerCreate("lib9770F675_gt_OptionsGameSpeed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Skip
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_IntroSkip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_introSkip = true;
    lib9770F675_gf_SkipTransmission();
    SoundStop(lib9770F675_gv_cutsceneMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_IntroSkip_Init () {
    lib9770F675_gt_IntroSkip = TriggerCreate("lib9770F675_gt_IntroSkip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Failsafe
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Failsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(lib9770F675_gt_showAdjutantPortrait);
    TriggerStop(lib9770F675_gt_showBattlecruiserPortrait);
    TriggerStop(lib9770F675_gt_showCerberusPortrait);
    TriggerStop(lib9770F675_gt_showCivilianPortrait);
    TriggerStop(lib9770F675_gt_showCollinsPortrait);
    TriggerStop(lib9770F675_gt_showConfederateAdjutantPortrait);
    TriggerStop(lib9770F675_gt_showDropshipPortrait);
    TriggerStop(lib9770F675_gt_showDugallePortrait);
    TriggerStop(lib9770F675_gt_showDukePortrait);
    TriggerStop(lib9770F675_gt_showDuranPortrait);
    TriggerStop(lib9770F675_gt_showInfestedKerriganPortrait);
    TriggerStop(lib9770F675_gt_showMarinePortrait);
    TriggerStop(lib9770F675_gt_showMarineUEDPortrait);
    TriggerStop(lib9770F675_gt_showMedicPortrait);
    TriggerStop(lib9770F675_gt_showMengskPortrait);
    TriggerStop(lib9770F675_gt_showRaynorMarinePortrait);
    TriggerStop(lib9770F675_gt_showRaynorPortrait);
    TriggerStop(lib9770F675_gt_showSarahPortrait);
    TriggerStop(lib9770F675_gt_showSCVPortrait);
    TriggerStop(lib9770F675_gt_showSiegeTankPortrait);
    TriggerStop(lib9770F675_gt_showStukovPortrait);
    TriggerStop(lib9770F675_gt_showVulturePortrait);
    TriggerStop(lib9770F675_gt_showAbathurPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showAdjutantPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showAlarakPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showDahlPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showDropshipPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showDuranPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showIzshaPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showUlrezajPortrait_TEXT3);
    TriggerStop(lib9770F675_gt_showMarinePortrait_TEXT);
    TriggerStop(lib9770F675_gt_showMercPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showRamseyPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showSchezarPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showCivilianPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showSCVPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showStewartPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showWarfieldPortrait_TEXT);
    TriggerStop(lib9770F675_gt_showZagaraPortrait_TEXTSCMRER);
    TriggerStop(lib9770F675_gt_showZamaraPortrait_TEXTSCMRER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Failsafe_Init () {
    lib9770F675_gt_Failsafe = TriggerCreate("lib9770F675_gt_Failsafe_Func");
    TriggerAddEventTriggerSkipped(lib9770F675_gt_Failsafe, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Wave Sent
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIAttackWaveSent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;

    // Automatic Variable Declarations
    unitgroup auto1A8D3C3D_g;
    int auto1A8D3C3D_u;
    unit auto1A8D3C3D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_aIPlayer = UnitGetOwner(UnitGroupRandomUnit(AIWaveGetUnits(EventPlayerWave()), c_unitCountAlive));
    Wait(0.1, c_timeReal);
    UnitGroupAddUnitGroup(lib9770F675_gv_aICurrentAttackWave[lv_aIPlayer], AIWaveGetUnits(EventPlayerWave()));
    lib9770F675_gv_aIAttackWaveLifeTotal[lv_aIPlayer] = 0.0;
    Wait(0.5, c_timeReal);
    auto1A8D3C3D_g = UnitGroupFilter(null, lv_aIPlayer, lib9770F675_gv_aICurrentAttackWave[lv_aIPlayer], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A8D3C3D_u = UnitGroupCount(auto1A8D3C3D_g, c_unitCountAll);
    for (;; auto1A8D3C3D_u -= 1) {
        auto1A8D3C3D_var = UnitGroupUnitFromEnd(auto1A8D3C3D_g, auto1A8D3C3D_u);
        if (auto1A8D3C3D_var == null) { break; }
        lib9770F675_gv_aIAttackWaveLifeTotal[lv_aIPlayer] += UnitGetPropertyFixed(auto1A8D3C3D_var, c_unitPropLife, c_unitPropNormal);
    }
    TriggerEnable(lib9770F675_gt_AIRetreat, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIAttackWaveSent_Init () {
    lib9770F675_gt_AIAttackWaveSent = TriggerCreate("lib9770F675_gt_AIAttackWaveSent_Func");
    TriggerAddEventPlayerAIWave(lib9770F675_gt_AIAttackWaveSent, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Retreat
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[9] lv_aIAttackWaveLifeCurrent;
    fixed lv_playersNearbyForce;
    bool lv_retreat;

    // Automatic Variable Declarations
    unitgroup auto87724622_g;
    int auto87724622_u;
    unit auto87724622_var;
    unitgroup auto23BA09FF_g;
    int auto23BA09FF_u;
    unit auto23BA09FF_var;
    unitgroup auto19A86B82_g;
    int auto19A86B82_u;
    unit auto19A86B82_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], EventUnit()) == true))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) != "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_retreat = false;
    lv_aIAttackWaveLifeCurrent[EventPlayer()] = 0.0;
    lv_playersNearbyForce = 0.0;
    Wait(0.1, c_timeReal);
    auto87724622_g = UnitGroup(null, 1, RegionCircle(UnitGetPosition(EventUnit()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87724622_u = UnitGroupCount(auto87724622_g, c_unitCountAll);
    for (;; auto87724622_u -= 1) {
        auto87724622_var = UnitGroupUnitFromEnd(auto87724622_g, auto87724622_u);
        if (auto87724622_var == null) { break; }
        lv_playersNearbyForce += UnitGetPropertyFixed(auto87724622_var, c_unitPropLife, c_unitPropCurrent);
    }
    auto23BA09FF_g = lib9770F675_gv_aICurrentAttackWave[EventPlayer()];
    auto23BA09FF_u = UnitGroupCount(auto23BA09FF_g, c_unitCountAll);
    for (;; auto23BA09FF_u -= 1) {
        auto23BA09FF_var = UnitGroupUnitFromEnd(auto23BA09FF_g, auto23BA09FF_u);
        if (auto23BA09FF_var == null) { break; }
        lv_aIAttackWaveLifeCurrent[EventPlayer()] += UnitGetPropertyFixed(auto23BA09FF_var, c_unitPropLife, c_unitPropCurrent);
    }
    Wait(0.1, c_timeReal);
    if ((lv_aIAttackWaveLifeCurrent[EventPlayer()] < (lib9770F675_gv_aIAttackWaveLifeTotal[EventPlayer()] / 3.0)) && (lv_aIAttackWaveLifeCurrent[EventPlayer()] < (lv_playersNearbyForce * 0.8))) {
        lv_retreat = true;
        AIAttackWaveCancel(AIUnitGetWave(EventUnit()));
        AISetGroupScriptControlled(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], true);
        UnitGroupIssueOrder(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], OrderTargetingRelativePoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupRandomUnit(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], c_unitCountAlive)))), 6.0))), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
        auto19A86B82_g = lib9770F675_gv_aICurrentAttackWave[EventPlayer()];
        auto19A86B82_u = UnitGroupCount(auto19A86B82_g, c_unitCountAll);
        for (;; auto19A86B82_u -= 1) {
            auto19A86B82_var = UnitGroupUnitFromEnd(auto19A86B82_g, auto19A86B82_u);
            if (auto19A86B82_var == null) { break; }
            AICastFlee(auto19A86B82_var, EventUnitDamageSourceUnit(), 15, null);
        }
        Wait(0.1, c_timeReal);
        UnitGroupIssueOrder(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], OrderTargetingRelativePoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupRandomUnit(lib9770F675_gv_aICurrentAttackWave[EventPlayer()], c_unitCountAlive)))), 6.0))), c_orderQueueReplace);
        UnitGroupAddUnitGroup(lib9770F675_gv_aISurvivors[EventPlayer()], lib9770F675_gv_aICurrentAttackWave[EventPlayer()]);
        AIAttackWaveUseGroup(EventPlayer(), lib9770F675_gv_aISurvivors[EventPlayer()]);
        UnitGroupClear(lib9770F675_gv_aICurrentAttackWave[EventPlayer()]);
    }

    Wait(3.0, c_timeGame);
    if ((lv_retreat == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIRetreat_Init () {
    lib9770F675_gt_AIRetreat = TriggerCreate("lib9770F675_gt_AIRetreat_Func");
    TriggerAddEventUnitDamaged(lib9770F675_gt_AIRetreat, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Resources
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAA9C68C3_g;
    int autoAA9C68C3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA9C68C3_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoAA9C68C3_var = -1;
    while (true) {
        autoAA9C68C3_var = PlayerGroupNextPlayer(autoAA9C68C3_g, autoAA9C68C3_var);
        if (autoAA9C68C3_var < 0) { break; }
        if ((PlayerGetPropertyInt(autoAA9C68C3_var, c_playerPropMinerals) < 1500)) {
            PlayerModifyPropertyInt(autoAA9C68C3_var, c_playerPropMinerals, c_playerPropOperAdd, 1500);
        }

        if ((PlayerGetPropertyInt(autoAA9C68C3_var, c_playerPropVespene) < 1500)) {
            PlayerModifyPropertyInt(autoAA9C68C3_var, c_playerPropVespene, c_playerPropOperAdd, 1000);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIResources_Init () {
    lib9770F675_gt_AIResources = TriggerCreate("lib9770F675_gt_AIResources_Func");
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIResources, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - TURN EVERYTHING ON!
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITURNEVERYTHINGON_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib9770F675_gt_AITerranComsat, true);
    TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
    TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
    TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, true);
    TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, true);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, true);
    TriggerEnable(lib9770F675_gt_AITerranRebuildNukes, true);
    TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, true);
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, true);
    TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, true);
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, true);
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, true);
    TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, true);
    TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, true);
    TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, true);
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, true);
    TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
    TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, true);
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, true);
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, true);
    TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITURNEVERYTHINGON_Init () {
    lib9770F675_gt_AITURNEVERYTHINGON = TriggerCreate("lib9770F675_gt_AITURNEVERYTHINGON_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - TURN EVERYTHING OFF!
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITURNEVERYTHINGOFF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib9770F675_gt_AITerranComsat, false);
    TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, false);
    TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, false);
    TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, false);
    TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, false);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, false);
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, false);
    TriggerEnable(lib9770F675_gt_AITerranRebuildNukes, false);
    TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, false);
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, false);
    TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, false);
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, false);
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, false);
    TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, false);
    TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, false);
    TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, false);
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, false);
    TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, false);
    TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, false);
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, false);
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, false);
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, false);
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, false);
    TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITURNEVERYTHINGOFF_Init () {
    lib9770F675_gt_AITURNEVERYTHINGOFF = TriggerCreate("lib9770F675_gt_AITURNEVERYTHINGOFF_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Unlimited Food (LEAVE ON!)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIUnlimitedFoodLEAVEON_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_supplier;
    int lv_foodLeft;

    // Automatic Variable Declarations
    unitgroup auto25A1AAF4_g;
    int auto25A1AAF4_u;
    unit auto25A1AAF4_var;
    unitgroup auto33F4F91A_g;
    int auto33F4F91A_u;
    unit auto33F4F91A_var;
    unitgroup autoFE844782_g;
    int autoFE844782_u;
    unit autoFE844782_var;
    unitgroup autoF52BEFA0_g;
    int autoF52BEFA0_u;
    unit autoF52BEFA0_var;

    // Variable Initialization
    lv_supplier = UnitGroupEmpty();
    lv_foodLeft = 24;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "Overlord") || (UnitGetType(EventUnit()) == "Pylon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerRace(EventPlayer()) == "Terr")) {
        auto25A1AAF4_g = UnitGroup("SupplyDepot", EventPlayer(), null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto25A1AAF4_u = UnitGroupCount(auto25A1AAF4_g, c_unitCountAll);
        for (;; auto25A1AAF4_u -= 1) {
            auto25A1AAF4_var = UnitGroupUnitFromEnd(auto25A1AAF4_g, auto25A1AAF4_u);
            if (auto25A1AAF4_var == null) { break; }
            UnitGroupAdd(lv_supplier, auto25A1AAF4_var);
        }
    }
    else {
        if ((PlayerRace(EventPlayer()) == "Zerg")) {
            auto33F4F91A_g = UnitGroup("Overlord", EventPlayer(), null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto33F4F91A_u = UnitGroupCount(auto33F4F91A_g, c_unitCountAll);
            for (;; auto33F4F91A_u -= 1) {
                auto33F4F91A_var = UnitGroupUnitFromEnd(auto33F4F91A_g, auto33F4F91A_u);
                if (auto33F4F91A_var == null) { break; }
                UnitGroupAdd(lv_supplier, auto33F4F91A_var);
            }
        }
        else {
            if ((PlayerRace(EventPlayer()) == "Prot")) {
                autoFE844782_g = UnitGroup("Pylon", EventPlayer(), null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoFE844782_u = UnitGroupCount(autoFE844782_g, c_unitCountAll);
                for (;; autoFE844782_u -= 1) {
                    autoFE844782_var = UnitGroupUnitFromEnd(autoFE844782_g, autoFE844782_u);
                    if (autoFE844782_var == null) { break; }
                    UnitGroupAdd(lv_supplier, autoFE844782_var);
                }
            }

        }
    }
    Wait(1.0, c_timeReal);
    if ((UnitGroupCount(lv_supplier, c_unitCountAlive) < 4)) {
        lv_foodLeft = (UnitGroupCount(lv_supplier, c_unitCountAlive) * 8);
        autoF52BEFA0_g = UnitGroup("InvisiblePylon", EventPlayer(), null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoF52BEFA0_u = UnitGroupCount(autoF52BEFA0_g, c_unitCountAll);
        for (;; autoF52BEFA0_u -= 1) {
            autoF52BEFA0_var = UnitGroupUnitFromEnd(autoF52BEFA0_g, autoF52BEFA0_u);
            if (autoF52BEFA0_var == null) { break; }
            UnitRemove(autoF52BEFA0_var);
        }
        Wait(1.0, c_timeReal);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_foodLeft);
        lib9770F675_gv_unlimited_food = false;
    }
    else {
        if ((lib9770F675_gv_unlimited_food == false)) {
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
            lib9770F675_gv_unlimited_food = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIUnlimitedFoodLEAVEON_Init () {
    lib9770F675_gt_AIUnlimitedFoodLEAVEON = TriggerCreate("lib9770F675_gt_AIUnlimitedFoodLEAVEON_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_AIUnlimitedFoodLEAVEON, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default AI Upgrades and Abilities
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Briefing2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto70BD5BF5_g;
    int auto70BD5BF5_var;
    int auto1CE397E8_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib9770F675_gt_GeneralMicro, false, false);
    auto70BD5BF5_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto70BD5BF5_var = -1;
    while (true) {
        auto70BD5BF5_var = PlayerGroupNextPlayer(auto70BD5BF5_g, auto70BD5BF5_var);
        if (auto70BD5BF5_var < 0) { break; }
        auto1CE397E8_val = PlayerDifficulty(auto70BD5BF5_var);
        if (auto1CE397E8_val == 1) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SiegeTech", 1);
            TriggerEnable(lib9770F675_gt_AITerranComsat, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MindControl", 1);
            TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1CE397E8_val == 2) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserEnableSpecializations", 1);
            TriggerEnable(lib9770F675_gt_AITerranComsat, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolvePlague", 1);
            TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MindControl", 1);
            TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1CE397E8_val == 3) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel1", 1);
            TriggerEnable(lib9770F675_gt_AITerranComsat, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel1", 1);
            TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel1", 1);
            TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1CE397E8_val == 4) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel2", 1);
            TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib9770F675_gt_AITerranComsat, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, true);
            TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Antennae", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel2", 1);
            TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel2", 1);
            TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else if (auto1CE397E8_val == 5) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "U238Shells", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranInfantryWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranShipArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "TerranVehicleArmorsLevel3", 1);
            TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, true);
            TriggerEnable(lib9770F675_gt_AITerranComsat, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, true);
            TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, true);
            TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, true);
            TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, true);
            TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveLurkerAspect", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Antennae", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "overlordtransport", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMeleeWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergMissileWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ZergFlyerWeaponsLevel3", 1);
            TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, true);
            TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, true);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossAirArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto70BD5BF5_var, "ProtossShieldsLevel3", 1);
            TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, true);
            TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Briefing2_Init () {
    lib9770F675_gt_Briefing2 = TriggerCreate("lib9770F675_gt_Briefing2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI General Micro
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_GeneralMicro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9F4E8D23_g;
    int auto9F4E8D23_var;
    int auto1565AD1D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F4E8D23_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto9F4E8D23_var = -1;
    while (true) {
        auto9F4E8D23_var = PlayerGroupNextPlayer(auto9F4E8D23_g, auto9F4E8D23_var);
        if (auto9F4E8D23_var < 0) { break; }
        auto1565AD1D_val = PlayerDifficulty(auto9F4E8D23_var);
        if (auto1565AD1D_val == 1) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
        }
        else if (auto1565AD1D_val == 2) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
        }
        else if (auto1565AD1D_val == 3) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
        }
        else if (auto1565AD1D_val == 4) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAllowKiting, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAdvancedRetreatLogic, true);
        }
        else if (auto1565AD1D_val == 5) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAllowKiting, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAdvancedRetreatLogic, true);
        }
        else {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_GeneralMicro_Init () {
    lib9770F675_gt_GeneralMicro = TriggerCreate("lib9770F675_gt_GeneralMicro_Func");
    TriggerEnable(lib9770F675_gt_GeneralMicro, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat Add to Group
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsatAddtoGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib9770F675_gv_aITerranComSat, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsatAddtoGroup_Init () {
    lib9770F675_gt_AITerranComsatAddtoGroup = TriggerCreate("lib9770F675_gt_AITerranComsatAddtoGroup_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, false);
    TriggerAddEventUnitCreated(lib9770F675_gt_AITerranComsatAddtoGroup, null, "ScannerSweep", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) == "Terr"))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), EventPlayer()) == false))) {
            return false;
        }

        if (!((true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.2, 1.0), c_timeGame);
    libNtve_gf_AICast(UnitGroupRandomUnit(UnitGroupFilterPlayer(lib9770F675_gv_aITerranComSat, EventPlayer(), 1), c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())));
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsat_Init () {
    lib9770F675_gt_AITerranComsat = TriggerCreate("lib9770F675_gt_AITerranComsat_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsat, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranComsat, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat - Force Scan Lurkers/DarkTemplar
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "LurkerBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "DarkTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitGroupRandomUnit(lib9770F675_gv_aITerranComSat, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Init () {
    lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar = TriggerCreate("lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Optical Flare Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMedicOpticalFlareResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMedicOpticalFlareResponse_Init () {
    lib9770F675_gt_AITerranMedicOpticalFlareResponse = TriggerCreate("lib9770F675_gt_AITerranMedicOpticalFlareResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranMedicOpticalFlareResponse, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Restore Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMedicRestoreDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;
    unitgroup lv_medicGroup;

    // Automatic Variable Declarations
    playergroup auto66C22FD9_g;
    int auto66C22FD9_var;
    unitgroup auto3C76524F_g;
    int auto3C76524F_u;
    unit auto3C76524F_var;

    // Variable Initialization
    lv_medicGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 1))) {
            return false;
        }

        if (!(((EventUnitAbility() == AbilityCommand("Irradiate", 0)) || (EventUnitAbility() == AbilityCommand("Lockdown", 0)) || (EventUnitAbility() == AbilityCommand("OpticalFlare", 0)) || (EventUnitAbility() == AbilityCommand("Parasite", 0)) || (EventUnitAbility() == AbilityCommand("Ensnare", 0)) || (EventUnitAbility() == AbilityCommand("Plague", 0)) || (EventUnitAbility() == AbilityCommand("Maelstrom", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto66C22FD9_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto66C22FD9_var = -1;
    while (true) {
        auto66C22FD9_var = PlayerGroupNextPlayer(auto66C22FD9_g, auto66C22FD9_var);
        if (auto66C22FD9_var < 0) { break; }
        auto3C76524F_g = UnitGroup("Medic", auto66C22FD9_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C76524F_u = UnitGroupCount(auto3C76524F_g, c_unitCountAll);
        for (;; auto3C76524F_u -= 1) {
            auto3C76524F_var = UnitGroupUnitFromEnd(auto3C76524F_g, auto3C76524F_u);
            if (auto3C76524F_var == null) { break; }
            UnitGroupAdd(lv_medicGroup, auto3C76524F_var);
        }
    }
    Wait(RandomFixed(1.5, 3.0), c_timeGame);
    UnitIssueOrder(UnitGroupClosestToPoint(lv_medicGroup, UnitGetPosition(EventUnitTargetUnit())), OrderTargetingUnit(AbilityCommand("Restoration", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMedicRestoreDefense_Init () {
    lib9770F675_gt_AITerranMedicRestoreDefense = TriggerCreate("lib9770F675_gt_AITerranMedicRestoreDefense_Func");
    TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_AITerranMedicRestoreDefense, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Marine/Firebat - Stim Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMarineFirebatStimResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto12156BF7_g;
    int auto12156BF7_u;
    unit auto12156BF7_var;
    unitgroup autoC04C743A_g;
    int autoC04C743A_u;
    unit autoC04C743A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "Firebat")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    auto12156BF7_g = UnitGroup("Marine", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12156BF7_u = UnitGroupCount(auto12156BF7_g, c_unitCountAll);
    for (;; auto12156BF7_u -= 1) {
        auto12156BF7_var = UnitGroupUnitFromEnd(auto12156BF7_g, auto12156BF7_u);
        if (auto12156BF7_var == null) { break; }
        UnitIssueOrder(auto12156BF7_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    autoC04C743A_g = UnitGroup("Firebat", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC04C743A_u = UnitGroupCount(autoC04C743A_g, c_unitCountAll);
    for (;; autoC04C743A_u -= 1) {
        autoC04C743A_var = UnitGroupUnitFromEnd(autoC04C743A_g, autoC04C743A_u);
        if (autoC04C743A_var == null) { break; }
        UnitIssueOrder(autoC04C743A_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    Wait(20.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMarineFirebatStimResponse_Init () {
    lib9770F675_gt_AITerranMarineFirebatStimResponse = TriggerCreate("lib9770F675_gt_AITerranMarineFirebatStimResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, false);
    TriggerAddEventUnitStartedAttack2(lib9770F675_gt_AITerranMarineFirebatStimResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Defensive Matrix Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "SiegeTank") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "Goliath")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), OrderTargetingUnit(AbilityCommand("DefensiveMatrix2", 0), EventUnit()), c_orderQueueReplace);
        Wait(30.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(5.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Init () {
    lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense = TriggerCreate("lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate/EMP Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scienceVessel;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto33FA3DB6_g;
    int auto33FA3DB6_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto33FA3DB6_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto33FA3DB6_var = -1;
    while (true) {
        auto33FA3DB6_var = PlayerGroupNextPlayer(auto33FA3DB6_g, auto33FA3DB6_var);
        if (auto33FA3DB6_var < 0) { break; }
        lv_scienceVessel = UnitGroupRandomUnit(UnitGroup("ScienceVessel", auto33FA3DB6_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("SCV", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Zealot", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel)))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_scienceVessel)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Init () {
    lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass = TriggerCreate("lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, libNtve_gf_DifficultyValueInt(200, 180, 160, 140), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Irradiate", 0), EventUnitTarget()), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Init () {
    lib9770F675_gt_AITerranScienceVesselIrradiateResponse = TriggerCreate("lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - EMP Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselEMPResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeGetProperty(UnitGetType(EventUnitTarget()), c_unitPropEnergyPercent) >= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselEMPResponse_Init () {
    lib9770F675_gt_AITerranScienceVesselEMPResponse = TriggerCreate("lib9770F675_gt_AITerranScienceVesselEMPResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselEMPResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Launch Nuke
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranLaunchNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ghost;

    // Automatic Variable Declarations
    playergroup auto8DE3CB7A_g;
    int auto8DE3CB7A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DE3CB7A_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto8DE3CB7A_var = -1;
    while (true) {
        auto8DE3CB7A_var = PlayerGroupNextPlayer(auto8DE3CB7A_g, auto8DE3CB7A_var);
        if (auto8DE3CB7A_var < 0) { break; }
        lv_ghost = UnitGroupRandomUnit(UnitGroup("Ghost", auto8DE3CB7A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_ghost, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_ghost, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_ghost), UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranLaunchNuke_Init () {
    lib9770F675_gt_AITerranLaunchNuke = TriggerCreate("lib9770F675_gt_AITerranLaunchNuke_Func");
    TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranLaunchNuke, libNtve_gf_DifficultyValueInt(380, 360, 340, 320), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Rebuild Nukes
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranRebuildNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto48521756_g;
    int auto48521756_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(25.0, c_timeGame);
    auto48521756_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto48521756_var = -1;
    while (true) {
        auto48521756_var = PlayerGroupNextPlayer(auto48521756_g, auto48521756_var);
        if (auto48521756_var < 0) { break; }
        UnitGroupIssueOrder(UnitGroup("BarracksReactor", auto48521756_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("ArmSiloWithNuke", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranRebuildNukes_Init () {
    lib9770F675_gt_AITerranRebuildNukes = TriggerCreate("lib9770F675_gt_AITerranRebuildNukes_Func");
    TriggerEnable(lib9770F675_gt_AITerranRebuildNukes, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_AITerranRebuildNukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranGhostCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranGhostCloakResponse_Init () {
    lib9770F675_gt_AITerranGhostCloakResponse = TriggerCreate("lib9770F675_gt_AITerranGhostCloakResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranGhostCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Lockdown Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranGhostLockdownResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeMechanical) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Lockdown", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranGhostLockdownResponse_Init () {
    lib9770F675_gt_AITerranGhostLockdownResponse = TriggerCreate("lib9770F675_gt_AITerranGhostLockdownResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranGhostLockdownResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Wraith - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranWraithCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Wraith"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "SporeCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranWraithCloakResponse_Init () {
    lib9770F675_gt_AITerranWraithCloakResponse = TriggerCreate("lib9770F675_gt_AITerranWraithCloakResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranWraithCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Battlecruiser"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "DevourerMP") || (UnitGetType(EventUnitTarget()) == "Battlecruiser") || (UnitGetType(EventUnitTarget()) == "Carrier") || (UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "ImmortalAiur") || (UnitGetType(EventUnitTarget()) == "VoidRay") || (UnitGetType(EventUnitTarget()) == "Corruptor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Yamato", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Init () {
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse = TriggerCreate("lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_battlecruiser;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoDB1B17B3_g;
    int autoDB1B17B3_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB1B17B3_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoDB1B17B3_var = -1;
    while (true) {
        autoDB1B17B3_var = PlayerGroupNextPlayer(autoDB1B17B3_g, autoDB1B17B3_var);
        if (autoDB1B17B3_var < 0) { break; }
        lv_battlecruiser = UnitGroupRandomUnit(UnitGroup("Battlecruiser", autoDB1B17B3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("MissileTurret", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("SunkenColony", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("PhotonCannon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Bunker", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Pylon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    UnitIssueOrder(lv_battlecruiser, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_battlecruiser)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Init () {
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass = TriggerCreate("lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Func");
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, libNtve_gf_DifficultyValueInt(320, 300, 280, 260), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Defensive Matrix Remove Behavior (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "DefensiveMatrix") == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "DefensiveMatrix", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Init () {
    lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive = TriggerCreate("lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Func");
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AT Terran Raynor Mine Requirement - Disable (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("RaynorSpiderMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 2) || (UnitGroupCount(UnitGroup("RaynorSpiderMineBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 0);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Init () {
    lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive = TriggerCreate("lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive, null, AbilityCommand("UseSpiderMinesTarget2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AT Terran Raynor Mine Requirement - Renable (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "RaynorSpiderMine") || (UnitGetType(EventUnit()) == "RaynorSpiderMineBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("RaynorSpiderMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 2) || (UnitGroupCount(UnitGroup("RaynorSpiderMineBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "BWRaynorMinesDISABLE", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Init () {
    lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive = TriggerCreate("lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Broodlings/Ensare Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "QueenClassic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Stalker"))) {
        libNtve_gf_AICast(EventUnit(), OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), EventUnitTarget()));
    }
    else {
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Ensnare", 0), UnitGetPosition(EventUnitTarget())));
        Wait(15.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Init () {
    lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse = TriggerCreate("lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Func");
    TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Parasite/Broodlings Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_queen;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto236E942B_g;
    int auto236E942B_var;
    unitgroup auto6E77C80F_g;
    int auto6E77C80F_u;
    unit auto6E77C80F_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto236E942B_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto236E942B_var = -1;
    while (true) {
        auto236E942B_var = PlayerGroupNextPlayer(auto236E942B_g, auto236E942B_var);
        if (auto236E942B_var < 0) { break; }
        lv_queen = UnitGroupRandomUnit(UnitGroup("QueenClassic", auto236E942B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        auto6E77C80F_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto6E77C80F_u = UnitGroupCount(auto6E77C80F_g, c_unitCountAll);
        for (;; auto6E77C80F_u -= 1) {
            auto6E77C80F_var = UnitGroupUnitFromEnd(auto6E77C80F_g, auto6E77C80F_u);
            if (auto6E77C80F_var == null) { break; }
            UnitGroupAdd(lv_playerUnits, auto6E77C80F_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Parasite", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_queen)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Init () {
    lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass = TriggerCreate("lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Func");
    TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Dark Swarm Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(UnitGroup("DefilerMP", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_defiler = UnitGroupClosestToPoint(UnitGroup("DefilerMP", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("DarkSwarm", 0), UnitGetPosition(EventUnitTarget())));
        Wait(40.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Init () {
    lib9770F675_gt_AIZergDefilerDarkSwarmDefense = TriggerCreate("lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerPlagueResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DefilerMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 150.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(EventUnitTarget())));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerPlagueResponse_Init () {
    lib9770F675_gt_AIZergDefilerPlagueResponse = TriggerCreate("lib9770F675_gt_AIZergDefilerPlagueResponse_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergDefilerPlagueResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Harass Structures
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;
    unitgroup lv_playerStructures;

    // Automatic Variable Declarations
    playergroup autoDF7CE07D_g;
    int autoDF7CE07D_var;
    unitgroup autoB5AB63D5_g;
    int autoB5AB63D5_u;
    unit autoB5AB63D5_var;

    // Variable Initialization
    lv_playerStructures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF7CE07D_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoDF7CE07D_var = -1;
    while (true) {
        autoDF7CE07D_var = PlayerGroupNextPlayer(autoDF7CE07D_g, autoDF7CE07D_var);
        if (autoDF7CE07D_var < 0) { break; }
        lv_defiler = UnitGroupRandomUnit(UnitGroup("DefilerMP", autoDF7CE07D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        autoB5AB63D5_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoB5AB63D5_u = UnitGroupCount(autoB5AB63D5_g, c_unitCountAll);
        for (;; autoB5AB63D5_u -= 1) {
            autoB5AB63D5_var = UnitGroupUnitFromEnd(autoB5AB63D5_g, autoB5AB63D5_u);
            if (autoB5AB63D5_var == null) { break; }
            UnitGroupAdd(lv_playerStructures, autoB5AB63D5_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerStructures, 1, 0), UnitGetPosition(lv_defiler)))), c_orderQueueReplace);
    }

    UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_defiler)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Init () {
    lib9770F675_gt_AIZergDefilerPlagueHarassStructures = TriggerCreate("lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, libNtve_gf_DifficultyValueInt(420, 360, 320, 280), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Fungal Growth
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergInfestorFungalGrowth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Infestor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("FungalGrowth", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergInfestorFungalGrowth_Init () {
    lib9770F675_gt_AIZergInfestorFungalGrowth = TriggerCreate("lib9770F675_gt_AIZergInfestorFungalGrowth_Func");
    TriggerEnable(lib9770F675_gt_AIZergInfestorFungalGrowth, false);
    TriggerAddEventUnitAttacked(lib9770F675_gt_AIZergInfestorFungalGrowth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Infested Terrans
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DarkSwarm3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_infestor;

    // Automatic Variable Declarations
    unitgroup autoDA9E779E_g;
    int autoDA9E779E_u;
    unit autoDA9E779E_var;

    // Variable Initialization
    lv_infestor = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_infestor, UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoDA9E779E_g = lv_infestor;
    autoDA9E779E_u = UnitGroupCount(autoDA9E779E_g, c_unitCountAll);
    for (;; autoDA9E779E_u -= 1) {
        autoDA9E779E_var = UnitGroupUnitFromEnd(autoDA9E779E_g, autoDA9E779E_u);
        if (autoDA9E779E_var == null) { break; }
        if (((UnitGetOwner(autoDA9E779E_var) == 1) || (UnitGetPropertyFixed(autoDA9E779E_var, c_unitPropEnergy, c_unitPropCurrent) < 100.0))) {
            UnitGroupRemove(lv_infestor, autoDA9E779E_var);
        }

    }
    if ((UnitGroupCount(lv_infestor, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_AICast(UnitGroupRandomUnit(lv_infestor, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), UnitGetPosition(EventUnit())));
        Wait(2.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DarkSwarm3_Init () {
    lib9770F675_gt_DarkSwarm3 = TriggerCreate("lib9770F675_gt_DarkSwarm3_Func");
    TriggerEnable(lib9770F675_gt_DarkSwarm3, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_DarkSwarm3, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Corruptor - Corruption
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergCorruptorCorruption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Corruptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Corruption", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergCorruptorCorruption_Init () {
    lib9770F675_gt_AIZergCorruptorCorruption = TriggerCreate("lib9770F675_gt_AIZergCorruptorCorruption_Func");
    TriggerEnable(lib9770F675_gt_AIZergCorruptorCorruption, false);
    TriggerAddEventUnitAttacked(lib9770F675_gt_AIZergCorruptorCorruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control/Maelstrom Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkArchon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLife, c_unitPropNormal) >= 130.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("MindControl2", 0), EventUnitTarget()), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Maelstrom", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToFront);
    }
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init () {
    lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse = TriggerCreate("lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_darkArchon;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoBC7F0587_g;
    int autoBC7F0587_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC7F0587_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoBC7F0587_var = -1;
    while (true) {
        autoBC7F0587_var = PlayerGroupNextPlayer(autoBC7F0587_g, autoBC7F0587_var);
        if (autoBC7F0587_var < 0) { break; }
        lv_darkArchon = UnitGroupRandomUnit(UnitGroup("DarkArchon", autoBC7F0587_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(2.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("SiegeTankSieged", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Ultralisk", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Archon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
        else {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Battlecruiser", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("GuardianMP", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Carrier", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
    }
    UnitIssueOrder(lv_darkArchon, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_darkArchon)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Init () {
    lib9770F675_gt_AIProtossDarkArchonMindControlHarass = TriggerCreate("lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, libNtve_gf_DifficultyValueInt(220, 200, 180, 160), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Mind Control Tech (Always leave active!)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string[5] lv_upgrade;
    int lv_cycle;

    // Automatic Variable Declarations
    string autoEC29024E_val;
    const int autoBB6154CB_ae = 4;
    const int autoBB6154CB_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_upgrade[init_i] = "NeosteelFrame";
    }

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitTargetUnit(), 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "MindControl", 1);
    autoEC29024E_val = UnitGetType(EventUnitTargetUnit());
    if (autoEC29024E_val == "Marine") {
        lv_upgrade[1] = "U238Shells";
        lv_upgrade[2] = "Stimpack";
    }
    else if (autoEC29024E_val == "Firebat") {
        lv_upgrade[1] = "Stimpack";
    }
    else if (autoEC29024E_val == "Medic") {
        lv_upgrade[1] = "Restoration";
        lv_upgrade[2] = "OpticalFlare";
        lv_upgrade[3] = "MedicCaduceusReactor";
    }
    else if (autoEC29024E_val == "Ghost") {
        lv_upgrade[1] = "PersonalCloaking";
        lv_upgrade[2] = "Lockdown";
        lv_upgrade[3] = "OcularImplants2";
        lv_upgrade[4] = "GhostMoebiusReactor";
    }
    else if (autoEC29024E_val == "Vulture") {
        lv_upgrade[1] = "IonThrusters";
        lv_upgrade[2] = "ResearchSpiderMines";
    }
    else if (autoEC29024E_val == "SiegeTank") {
        lv_upgrade[1] = "SiegeTech";
    }
    else if (autoEC29024E_val == "SiegeTankSieged") {
        lv_upgrade[1] = "SiegeTech";
    }
    else if (autoEC29024E_val == "Goliath") {
        lv_upgrade[1] = "AresClassWeaponsSystem";
    }
    else if (autoEC29024E_val == "Wraith") {
        lv_upgrade[1] = "WraithCloak";
        lv_upgrade[2] = "WraithApolloReactor";
    }
    else if (autoEC29024E_val == "ScienceVessel") {
        lv_upgrade[1] = "ResearchEMPShockwave";
        lv_upgrade[2] = "ResearchIrradiate";
        lv_upgrade[3] = "ScienceVesselTitanReactor";
    }
    else if (autoEC29024E_val == "Battlecruiser") {
        lv_upgrade[1] = "BattlecruiserEnableSpecializations";
        lv_upgrade[2] = "BattlecruiserBehemothReactor";
    }
    else if (autoEC29024E_val == "Drone") {
        lv_upgrade[1] = "Burrow";
    }
    else if (autoEC29024E_val == "DroneBurrowed") {
        lv_upgrade[1] = "Burrow";
    }
    else if (autoEC29024E_val == "Zergling") {
        lv_upgrade[1] = "zerglingmovementspeed";
        lv_upgrade[2] = "zerglingattackspeed";
        lv_upgrade[3] = "Burrow";
    }
    else if (autoEC29024E_val == "ZerglingBurrowed") {
        lv_upgrade[1] = "zerglingmovementspeed";
        lv_upgrade[2] = "zerglingattackspeed";
        lv_upgrade[3] = "Burrow";
    }
    else if (autoEC29024E_val == "Overlord") {
        lv_upgrade[1] = "overlordtransport";
        lv_upgrade[2] = "Antennae";
        lv_upgrade[3] = "overlordspeed";
    }
    else if (autoEC29024E_val == "Hydralisk") {
        lv_upgrade[1] = "hydraliskspeed";
        lv_upgrade[2] = "hydraliskspeed2";
        lv_upgrade[3] = "EvolveLurkerAspect";
        lv_upgrade[4] = "Burrow";
    }
    else if (autoEC29024E_val == "HydraliskBurrowed") {
        lv_upgrade[1] = "hydraliskspeed";
        lv_upgrade[2] = "hydraliskspeed2";
        lv_upgrade[3] = "EvolveLurkerAspect";
        lv_upgrade[4] = "Burrow";
    }
    else if (autoEC29024E_val == "Lurker") {
        lv_upgrade[1] = "EvolveLurkerAspect";
    }
    else if (autoEC29024E_val == "LurkerBurrowed") {
        lv_upgrade[1] = "EvolveLurkerAspect";
    }
    else if (autoEC29024E_val == "Queen") {
        lv_upgrade[1] = "EvolveSpawnBroodling";
        lv_upgrade[2] = "EvolveEnsnare";
        lv_upgrade[3] = "InfestorEnergyUpgrade";
    }
    else if (autoEC29024E_val == "Infestor") {
        lv_upgrade[1] = "EvolvePlague";
        lv_upgrade[2] = "EvolveConsume";
        lv_upgrade[3] = "ResearchMetasynapticNode";
        lv_upgrade[4] = "Burrow";
    }
    else if (autoEC29024E_val == "InfestorBurrowed") {
        lv_upgrade[1] = "EvolvePlague";
        lv_upgrade[2] = "EvolveConsume";
        lv_upgrade[3] = "ResearchMetasynapticNode";
        lv_upgrade[4] = "Burrow";
    }
    else if (autoEC29024E_val == "Ultralisk") {
        lv_upgrade[1] = "AnabolicSynthesis";
        lv_upgrade[2] = "ChitinousPlating";
    }
    else if (autoEC29024E_val == "EthanStewart") {
        lv_upgrade[1] = "Burrow";
    }
    else if (autoEC29024E_val == "InfestedCivilianBurrowed") {
        lv_upgrade[1] = "Burrow";
    }
    else if (autoEC29024E_val == "Zealot") {
        lv_upgrade[1] = "Charge";
    }
    else if (autoEC29024E_val == "Stalker") {
        lv_upgrade[1] = "SingularityCharge";
    }
    else if (autoEC29024E_val == "HighTemplar") {
        lv_upgrade[1] = "PsiStormTech";
        lv_upgrade[2] = "haltech";
        lv_upgrade[3] = "HighTemplarKhaydarinAmulet";
    }
    else if (autoEC29024E_val == "DarkArchonSCMR") {
        lv_upgrade[1] = "Maelstrom";
        lv_upgrade[2] = "ArgusTalisman";
    }
    else if (autoEC29024E_val == "WarpPrism") {
        lv_upgrade[1] = "GraviticDrive";
    }
    else if (autoEC29024E_val == "Reaver") {
        lv_upgrade[1] = "ScarabDamage";
        lv_upgrade[2] = "IncreasedReaverCapacity";
    }
    else if (autoEC29024E_val == "Observer") {
        lv_upgrade[1] = "ObserverGraviticBooster";
        lv_upgrade[2] = "SensorArray";
    }
    else if (autoEC29024E_val == "Scout") {
        lv_upgrade[1] = "ApialSensors";
        lv_upgrade[2] = "GraviticThrusters";
    }
    else if (autoEC29024E_val == "Phoenix") {
        lv_upgrade[1] = "ResearchDisruptionWeb";
        lv_upgrade[2] = "ArgusJewel";
    }
    else if (autoEC29024E_val == "Carrier") {
        lv_upgrade[1] = "InterceptorLimit6";
    }
    else if (autoEC29024E_val == "VoidRay") {
        lv_upgrade[1] = "ResearchRecall";
        lv_upgrade[2] = "ResearchStasis";
        lv_upgrade[3] = "KhaydarinCore";
    }
    else {
    }
    lv_cycle = 1;
    for ( ; ( (autoBB6154CB_ai >= 0 && lv_cycle <= autoBB6154CB_ae) || (autoBB6154CB_ai < 0 && lv_cycle >= autoBB6154CB_ae) ) ; lv_cycle += autoBB6154CB_ai ) {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnitTargetUnit()), lv_upgrade[lv_cycle], c_techCountCompleteOnly) >= 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), lv_upgrade[lv_cycle], 1);
        }

    }
    UnitSetOwner(EventUnitTargetUnit(), UnitGetOwner(EventUnit()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive_Init () {
    lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive = TriggerCreate("lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive, null, AbilityCommand("MindControl2", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Corsair - Disruption Web Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corsair;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CorsairMP"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "Marine") || (UnitGetType(EventUnitTarget()) == "Ghost") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Hydralisk") || (UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Archon") || (UnitGetType(EventUnitTarget()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DisruptionWeb", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Init () {
    lib9770F675_gt_AIProtossCorsairDisruptionWebResponse = TriggerCreate("lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Init () {
    lib9770F675_gt_AIProtossHighTemplarPsiStormResponse = TriggerCreate("lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_highTemplar;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoC8B1DAFE_g;
    int autoC8B1DAFE_var;
    unitgroup autoDCB42C4B_g;
    int autoDCB42C4B_u;
    unit autoDCB42C4B_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoC8B1DAFE_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoC8B1DAFE_var = -1;
    while (true) {
        autoC8B1DAFE_var = PlayerGroupNextPlayer(autoC8B1DAFE_g, autoC8B1DAFE_var);
        if (autoC8B1DAFE_var < 0) { break; }
        lv_highTemplar = UnitGroupRandomUnit(UnitGroup("HighTemplar", autoC8B1DAFE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    autoDCB42C4B_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoDCB42C4B_u = UnitGroupCount(autoDCB42C4B_g, c_unitCountAll);
    for (;; autoDCB42C4B_u -= 1) {
        autoDCB42C4B_var = UnitGroupUnitFromEnd(autoDCB42C4B_g, autoDCB42C4B_u);
        if (autoDCB42C4B_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, autoDCB42C4B_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_highTemplar)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_highTemplar)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Init () {
    lib9770F675_gt_AIProtossHighTemplarPsiStormHarass = TriggerCreate("lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Reaver - Scarab Build
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossReaverScarabBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3078513A_g;
    int auto3078513A_var;
    unitgroup auto9F6A78E4_g;
    int auto9F6A78E4_u;
    unit auto9F6A78E4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3078513A_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto3078513A_var = -1;
    while (true) {
        auto3078513A_var = PlayerGroupNextPlayer(auto3078513A_g, auto3078513A_var);
        if (auto3078513A_var < 0) { break; }
        auto9F6A78E4_g = UnitGroup("Reaver", auto3078513A_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9F6A78E4_u = UnitGroupCount(auto9F6A78E4_g, c_unitCountAll);
        for (;; auto9F6A78E4_u -= 1) {
            auto9F6A78E4_var = UnitGroupUnitFromEnd(auto9F6A78E4_g, auto9F6A78E4_u);
            if (auto9F6A78E4_var == null) { break; }
            libNtve_gf_AICast(auto9F6A78E4_var, Order(AbilityCommand("ReaverHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossReaverScarabBuild_Init () {
    lib9770F675_gt_AIProtossReaverScarabBuild = TriggerCreate("lib9770F675_gt_AIProtossReaverScarabBuild_Func");
    TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossReaverScarabBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Carrier- Interceptor Build
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossCarrierInterceptorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto83FF15F6_g;
    int auto83FF15F6_var;
    unitgroup auto51800DB1_g;
    int auto51800DB1_u;
    unit auto51800DB1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto83FF15F6_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto83FF15F6_var = -1;
    while (true) {
        auto83FF15F6_var = PlayerGroupNextPlayer(auto83FF15F6_g, auto83FF15F6_var);
        if (auto83FF15F6_var < 0) { break; }
        auto51800DB1_g = UnitGroup("Carrier", auto83FF15F6_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto51800DB1_u = UnitGroupCount(auto51800DB1_g, c_unitCountAll);
        for (;; auto51800DB1_u -= 1) {
            auto51800DB1_var = UnitGroupUnitFromEnd(auto51800DB1_g, auto51800DB1_u);
            if (auto51800DB1_var == null) { break; }
            libNtve_gf_AICast(auto51800DB1_var, Order(AbilityCommand("CarrierHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossCarrierInterceptorBuild_Init () {
    lib9770F675_gt_AIProtossCarrierInterceptorBuild = TriggerCreate("lib9770F675_gt_AIProtossCarrierInterceptorBuild_Func");
    TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossCarrierInterceptorBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Timed Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ArbiterMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 150.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(libNtve_gf_DifficultyValueInt(400, 360, 320, 280), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Init () {
    lib9770F675_gt_AIProtossArbiterStasisTimedResponse = TriggerCreate("lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterStasisHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto019CCEDE_g;
    int auto019CCEDE_var;
    unitgroup auto829D8C67_g;
    int auto829D8C67_u;
    unit auto829D8C67_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto019CCEDE_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto019CCEDE_var = -1;
    while (true) {
        auto019CCEDE_var = PlayerGroupNextPlayer(auto019CCEDE_g, auto019CCEDE_var);
        if (auto019CCEDE_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", auto019CCEDE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    auto829D8C67_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto829D8C67_u = UnitGroupCount(auto829D8C67_g, c_unitCountAll);
    for (;; auto829D8C67_u -= 1) {
        auto829D8C67_var = UnitGroupUnitFromEnd(auto829D8C67_g, auto829D8C67_u);
        if (auto829D8C67_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, auto829D8C67_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_arbiter)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterStasisHarass_Init () {
    lib9770F675_gt_AIProtossArbiterStasisHarass = TriggerCreate("lib9770F675_gt_AIProtossArbiterStasisHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossArbiterStasisHarass, libNtve_gf_DifficultyValueInt(400, 380, 360, 340), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Recall Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterRecallDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;

    // Automatic Variable Declarations
    playergroup autoC2D74F8E_g;
    int autoC2D74F8E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Carrier") || (UnitGetType(EventUnit()) == "Reaver") || (UnitGetType(EventUnit()) == "Archon")))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC2D74F8E_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoC2D74F8E_var = -1;
    while (true) {
        autoC2D74F8E_var = PlayerGroupNextPlayer(autoC2D74F8E_g, autoC2D74F8E_var);
        if (autoC2D74F8E_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", autoC2D74F8E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterRecallDefense_Init () {
    lib9770F675_gt_AIProtossArbiterRecallDefense = TriggerCreate("lib9770F675_gt_AIProtossArbiterRecallDefense_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossArbiterRecallDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Stalker - Blink
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossStalkerBlink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 3.0))), c_orderQueueReplace);
    }

    Wait(7.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossStalkerBlink_Init () {
    lib9770F675_gt_AIProtossStalkerBlink = TriggerCreate("lib9770F675_gt_AIProtossStalkerBlink_Func");
    TriggerEnable(lib9770F675_gt_AIProtossStalkerBlink, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AIProtossStalkerBlink, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Sentry - Force Field
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PsiStorm8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Monitor") || (UnitGetType(EventUnit()) == "Sentry")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    if ((UnitGetType(EventUnit()) == "Sentry")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceField", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Monitor")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceFieldMonitor", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    Wait(8.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PsiStorm8_Init () {
    lib9770F675_gt_PsiStorm8 = TriggerCreate("lib9770F675_gt_PsiStorm8_Func");
    TriggerEnable(lib9770F675_gt_PsiStorm8, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_PsiStorm8, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Autosave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSaveCreate(GameMapName(), GameMapDescription(), ("Assets\\Textures\\UI_logo_SCMR.dds"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Autosave_Init () {
    lib9770F675_gt_Autosave = TriggerCreate("lib9770F675_gt_Autosave_Func");
    TriggerEnable(lib9770F675_gt_Autosave, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_Autosave, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Sound Effect
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_RescueSoundEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitOwnerNew() == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerRace(1) == "Terr")) {
        SoundPlayForPlayer(SoundLink("UI_Rescue", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        if ((PlayerRace(1) == "Zerg")) {
            SoundPlayForPlayer(SoundLink("UI_Rescue", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((PlayerRace(1) == "Prot")) {
                SoundPlayForPlayer(SoundLink("UI_Rescue", 1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }

        }
    }
    UnitFlashSelection(EventUnit(), 1.0);
    Wait(2.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_RescueSoundEffect_Init () {
    lib9770F675_gt_RescueSoundEffect = TriggerCreate("lib9770F675_gt_RescueSoundEffect_Func");
    TriggerEnable(lib9770F675_gt_RescueSoundEffect, false);
    TriggerAddEventUnitChangeOwner(lib9770F675_gt_RescueSoundEffect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TextCrawlSound
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TextCrawlSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("TextCrawlType", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.03, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TextCrawlSound_Init () {
    lib9770F675_gt_TextCrawlSound = TriggerCreate("lib9770F675_gt_TextCrawlSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Damage Warning
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_HeroDamageWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertUnit("Trigger", 1, (UnitGetName(EventUnit()) + lib9770F675_gv_sCMRCore.lv_mHeroTakingDamage), "Assets\\Textures\\ui_nova_armyupgrades_itemstatusicon_inuse.dds", EventUnit());
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("HeroAlert", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (UnitGetName(EventUnit()) + lib9770F675_gv_sCMRCore.lv_mHeroTakingDamage));
    Wait(0.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(0.2, c_timeReal);
    SoundPlayForPlayer(SoundLink("HeroAlert", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (UnitGetName(EventUnit()) + lib9770F675_gv_sCMRCore.lv_mHeroTakingDamage));
    Wait(0.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(0.2, c_timeReal);
    SoundPlayForPlayer(SoundLink("HeroAlert", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (UnitGetName(EventUnit()) + lib9770F675_gv_sCMRCore.lv_mHeroTakingDamage));
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_HeroDamageWarning_Init () {
    lib9770F675_gt_HeroDamageWarning = TriggerCreate("lib9770F675_gt_HeroDamageWarning_Func");
    TriggerEnable(lib9770F675_gt_HeroDamageWarning, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_HeroDamageWarning, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intel Notify
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_IntelNotify_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeReal);
    DialogCreate(275, 150, c_anchorBottomRight, 25, (440 + (lib9770F675_gv_intelHeaderPosition * 60)), false);
    lib9770F675_gv_inteHeader = DialogLastCreated();
    if ((PlayerRace(1) == "Terr")) {
        SoundPlay(SoundLink("IntelTerran", 0), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 125, c_anchorLeft, 25, 0, lib9770F675_gv_sCMRCore.lv_pNEWINTELAVAILABLE, ColorWithAlpha(0,0,0,0), true, 1.0);
    }
    else {
        if ((PlayerRace(1) == "Zerg")) {
            SoundPlay(SoundLink("IntelTerran", 1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 125, c_anchorLeft, 25, 0, lib9770F675_gv_sCMRCore.lv_pNEURALLINKACTIVATED, ColorWithAlpha(0,0,0,0), true, 1.0);
        }
        else {
            if ((PlayerRace(1) == "Prot")) {
                SoundPlay(SoundLink("IntelTerran", 2), PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 125, c_anchorLeft, 25, 0, lib9770F675_gv_sCMRCore.lv_pINFORMATIONARCHIVED, ColorWithAlpha(0,0,0,0), true, 1.0);
            }

        }
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    TriggerEnable(lib9770F675_gt_IntelHeaderRemove, true);
    Wait(5.0, c_timeReal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_IntelNotify_Init () {
    lib9770F675_gt_IntelNotify = TriggerCreate("lib9770F675_gt_IntelNotify_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IntelHeaderRemove
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_IntelHeaderRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogDestroy(lib9770F675_gv_inteHeader);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_IntelHeaderRemove_Init () {
    lib9770F675_gt_IntelHeaderRemove = TriggerCreate("lib9770F675_gt_IntelHeaderRemove_Func");
    TriggerEnable(lib9770F675_gt_IntelHeaderRemove, false);
    TriggerAddEventDialogControl(lib9770F675_gt_IntelHeaderRemove, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Count Hide When Zero
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KillCountHideWhenZero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitShowKillDisplay(EventUnitCreatedUnit(), c_killDisplayNever);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KillCountHideWhenZero_Init () {
    lib9770F675_gt_KillCountHideWhenZero = TriggerCreate("lib9770F675_gt_KillCountHideWhenZero_Func");
    TriggerEnable(lib9770F675_gt_KillCountHideWhenZero, false);
    TriggerAddEventUnitCreated(lib9770F675_gt_KillCountHideWhenZero, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Count Show
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KillCountShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitShowKillDisplay(libNtve_gf_KillingUnit(), c_killDisplayDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KillCountShow_Init () {
    lib9770F675_gt_KillCountShow = TriggerCreate("lib9770F675_gt_KillCountShow_Func");
    TriggerEnable(lib9770F675_gt_KillCountShow, false);
    TriggerAddEventUnitDied(lib9770F675_gt_KillCountShow, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Anim Bandaid Fix
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DropAnimBandaidFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Neutral) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitCargo()), 0.15, UnitGetFacing(EventUnitCargo()))), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DropAnimBandaidFix_Init () {
    lib9770F675_gt_DropAnimBandaidFix = TriggerCreate("lib9770F675_gt_DropAnimBandaidFix_Func");
    TriggerAddEventUnitCargo(lib9770F675_gt_DropAnimBandaidFix, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nukes
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Nukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    libNtve_gf_CreateActorAtPoint("NukeCracks", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Nukes_Init () {
    lib9770F675_gt_Nukes = TriggerCreate("lib9770F675_gt_Nukes_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_Nukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Structures
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DestroyedStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("BuildingCracks", UnitGetPosition(EventUnit()));
            if ((RandomInt(1, 10) >= 8)) {
                libNtve_gf_CreateActorAtPoint("BuildingDebris", UnitGetPosition(EventUnit()));
            }

        }
        else {
            libNtve_gf_CreateActorAtPoint("BuildingCracksSmall", UnitGetPosition(EventUnit()));
        }
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("ZergStructureRemains", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -3.800000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {187,187,255 0.800000}");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DestroyedStructures_Init () {
    lib9770F675_gt_DestroyedStructures = TriggerCreate("lib9770F675_gt_DestroyedStructures_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_DestroyedStructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Vehicles
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DestroyedVehicles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor1;
    actor lv_actor2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeUser1) == false))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnit(), c_planeGround) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 10) >= 8)) {
        if ((PlayerRace(EventPlayer()) == "Terr")) {
            libNtve_gf_CreateActorAtPoint("Fire", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.500000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
        }
        else {
            libNtve_gf_CreateActorAtPoint("GenericProtossFire_Medium", UnitGetPosition(EventUnit()));
            lv_actor1 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,0.500000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -0.400000");
            libNtve_gf_CreateActorAtPoint("FireProtoss", UnitGetPosition(EventUnit()));
            lv_actor2 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "AddRoll -10.000000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(lv_actor1, "Destroy");
            ActorSend(lv_actor2, "Destroy");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DestroyedVehicles_Init () {
    lib9770F675_gt_DestroyedVehicles = TriggerCreate("lib9770F675_gt_DestroyedVehicles_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_DestroyedVehicles, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Implosion (ER Version)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ImplosionERVersion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.3, c_timeReal);
    if (((UnitGetType(EventUnitTargetUnit()) == "Battlecruiser") || (UnitGetType(EventUnitTargetUnit()) == "Carrier") || (UnitGetType(EventUnitTargetUnit()) == "Colossus"))) {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Large", EventUnitTargetUnit());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Medium", EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ImplosionERVersion_Init () {
    lib9770F675_gt_ImplosionERVersion = TriggerCreate("lib9770F675_gt_ImplosionERVersion_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_ImplosionERVersion, null, AbilityCommand("Implosion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Implosion (Damage Version) (Required)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ImplosionDamageVersionRequired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Kerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.3, c_timeReal);
    if (((UnitGetType(EventUnitTargetUnit()) == "Battlecruiser") || (UnitGetType(EventUnitTargetUnit()) == "Carrier"))) {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Large", EventUnitTargetUnit());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "FX_DOM_Explosion_Medium", EventUnitTargetUnit());
    }
    Wait(0.1, c_timeReal);
    UnitBehaviorRemove(EventUnitTargetUnit(), "ImplosionTempBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ImplosionDamageVersionRequired_Init () {
    lib9770F675_gt_ImplosionDamageVersionRequired = TriggerCreate("lib9770F675_gt_ImplosionDamageVersionRequired_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_ImplosionDamageVersionRequired, null, AbilityCommand("Implosion2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purification Beam Expire (Required)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PurificationBeamExpireRequired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_gant_location;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Gantrithor"))) {
            return false;
        }

        if (!((lib9770F675_gv_beam_on == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gant_location = UnitGetPosition(EventUnit());
    lib9770F675_gv_beam_on = true;
    while (!(((EventUnitAbilityStage() == c_unitAbilStageCancel) || (EventUnitAbilityStage() == c_unitAbilStageComplete) || (UnitGetPosition(EventUnit()) != lv_gant_location) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 5.0)))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(EventUnit(), "PurificationBeamSelfDamage", 1);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("KerriganEpilogue03QuantumRay", 1)), c_orderQueueReplace);
    libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_9770F675_3A4178B3"), SoundLink("UI_GenericError", 0));
    lv_gant_location = null;
    lib9770F675_gv_beam_on = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PurificationBeamExpireRequired_Init () {
    lib9770F675_gt_PurificationBeamExpireRequired = TriggerCreate("lib9770F675_gt_PurificationBeamExpireRequired_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_PurificationBeamExpireRequired, null, AbilityCommand("KerriganEpilogue03QuantumRay", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt__ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf__ZergDropPod(lib9770F675_gv__TP_DropPod_Location, lib9770F675_gv__TP_DropPod_Units, lib9770F675_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt__ZergDropPod_Init () {
    lib9770F675_gt__ZergDropPod = TriggerCreate("lib9770F675_gt__ZergDropPod_Func");
    TriggerEnable(lib9770F675_gt__ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt__TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf__TerranDropPod(lib9770F675_gv__TP_DropPod_Location, lib9770F675_gv__TP_DropPod_Units, lib9770F675_gv__TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt__TerranDropPod_Init () {
    lib9770F675_gt__TerranDropPod = TriggerCreate("lib9770F675_gt__TerranDropPod_Func");
    TriggerEnable(lib9770F675_gt__TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Score Screen
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DisableScoreScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CameraLockInput(1, false);
    UnitPauseAll(false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIAlertClear(1);
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    Wait(1.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DisableScoreScreen_Init () {
    lib9770F675_gt_DisableScoreScreen = TriggerCreate("lib9770F675_gt_DisableScoreScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Units
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_InitialUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNumber;
    unitgroup lv_unitCounter;
    unit lv_anyUnit;

    // Automatic Variable Declarations
    const int auto254F9328_ae = 9;
    const int auto254F9328_ai = 1;
    unitgroup auto6F60A2FD_g;
    int auto6F60A2FD_u;
    unit auto6F60A2FD_var;
    const int auto8CF3DCA1_ae = 9;
    const int auto8CF3DCA1_ai = 1;
    unitgroup auto3CAB13A5_g;
    int auto3CAB13A5_u;
    unit auto3CAB13A5_var;
    unitgroup auto584FEBAF_g;
    int auto584FEBAF_u;
    unit auto584FEBAF_var;
    unitgroup auto7ABE9B6F_g;
    int auto7ABE9B6F_u;

    // Variable Initialization
    lv_unitCounter = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) == 0)) {
        lv_playerNumber = 1;
        for ( ; ( (auto254F9328_ai >= 0 && lv_playerNumber <= auto254F9328_ae) || (auto254F9328_ai < 0 && lv_playerNumber >= auto254F9328_ae) ) ; lv_playerNumber += auto254F9328_ai ) {
            auto6F60A2FD_g = UnitGroup(null, lv_playerNumber, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto6F60A2FD_u = UnitGroupCount(auto6F60A2FD_g, c_unitCountAll);
            for (;; auto6F60A2FD_u -= 1) {
                auto6F60A2FD_var = UnitGroupUnitFromEnd(auto6F60A2FD_g, auto6F60A2FD_u);
                if (auto6F60A2FD_var == null) { break; }
                UnitSetInfoText(auto6F60A2FD_var, StringToText(""), lib9770F675_gv_iniPlayerName[lv_playerNumber], StringToText(""));
                if ((lib9770F675_gv_optionsHideKillsWhenZero == true)) {
                    UnitShowKillDisplay(auto6F60A2FD_var, c_killDisplayNever);
                }

            }
        }
        UnitGroupClear(lv_unitCounter);
        lv_playerNumber = 1;
        for ( ; ( (auto8CF3DCA1_ai >= 0 && lv_playerNumber <= auto8CF3DCA1_ae) || (auto8CF3DCA1_ai < 0 && lv_playerNumber >= auto8CF3DCA1_ae) ) ; lv_playerNumber += auto8CF3DCA1_ai ) {
            auto3CAB13A5_g = UnitGroup(null, lv_playerNumber, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3CAB13A5_u = UnitGroupCount(auto3CAB13A5_g, c_unitCountAll);
            for (;; auto3CAB13A5_u -= 1) {
                auto3CAB13A5_var = UnitGroupUnitFromEnd(auto3CAB13A5_g, auto3CAB13A5_u);
                if (auto3CAB13A5_var == null) { break; }
                UnitGroupAdd(lv_unitCounter, auto3CAB13A5_var);
                UnitSetInfoText(auto3CAB13A5_var, StringToText(""), lib9770F675_gv_iniPlayerName[lv_playerNumber], StringToText(""));
            }
            Wait(0.1, c_timeGame);
            auto584FEBAF_g = UnitGroupFilter("Larva", c_playerAny, lv_unitCounter, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto584FEBAF_u = UnitGroupCount(auto584FEBAF_g, c_unitCountAll);
            for (;; auto584FEBAF_u -= 1) {
                auto584FEBAF_var = UnitGroupUnitFromEnd(auto584FEBAF_g, auto584FEBAF_u);
                if (auto584FEBAF_var == null) { break; }
                UnitGroupRemove(lv_unitCounter, auto584FEBAF_var);
            }
            Wait(0.1, c_timeGame);
            auto7ABE9B6F_g = lv_unitCounter;
            auto7ABE9B6F_u = UnitGroupCount(auto7ABE9B6F_g, c_unitCountAll);
            for (;; auto7ABE9B6F_u -= 1) {
                lv_anyUnit = UnitGroupUnitFromEnd(auto7ABE9B6F_g, auto7ABE9B6F_u);
                if (lv_anyUnit == null) { break; }
                lib9770F675_gv_units[lv_playerNumber] = (lib9770F675_gv_units[lv_playerNumber] + 1);
                lib9770F675_gv_startingUnits[lv_playerNumber] = (lib9770F675_gv_startingUnits[lv_playerNumber] + 1);
            }
            UnitGroupClear(lv_unitCounter);
        }
    }

    TriggerEnable(lib9770F675_gt_Units, true);
    TriggerExecute(lib9770F675_gt_StartingResources, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_InitialUnits_Init () {
    lib9770F675_gt_InitialUnits = TriggerCreate("lib9770F675_gt_InitialUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Resources
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_StartingResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    lib9770F675_gv_startingResources = (PlayerGetPropertyInt(1, c_playerPropMinerals) + PlayerGetPropertyInt(1, c_playerPropVespene));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_StartingResources_Init () {
    lib9770F675_gt_StartingResources = TriggerCreate("lib9770F675_gt_StartingResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kills/Deaths
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KillsDeaths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "WeaponReaverScarab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Egg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BroodLordCocoon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OverlordCocoon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LurkerEgg"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit())) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && ((UnitGetOwner(libNtve_gf_KillingUnit()) >= 1) && (UnitGetOwner(libNtve_gf_KillingUnit()) <= 9))) {
        lib9770F675_gv_kills[UnitGetOwner(libNtve_gf_KillingUnit())] = (lib9770F675_gv_kills[UnitGetOwner(libNtve_gf_KillingUnit())] + 1);
    }

    if (((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 9))) {
        if ((UnitGetType(EventUnit()) == "Mutalisk") && (UnitGetType(EventUnit()) == "Hydralisk") && (!(((UnitGetOwner(libNtve_gf_KillingUnit()) >= 2) && (UnitGetOwner(libNtve_gf_KillingUnit()) <= 9))))) {
        }
        else {
            lib9770F675_gv_deaths[UnitGetOwner(EventUnit())] = (lib9770F675_gv_deaths[UnitGetOwner(EventUnit())] + 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KillsDeaths_Init () {
    lib9770F675_gt_KillsDeaths = TriggerCreate("lib9770F675_gt_KillsDeaths_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_KillsDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitCreatedUnit()) >= 1) && (UnitGetOwner(EventUnitCreatedUnit()) <= 9)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Egg"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_units[UnitGetOwner(EventUnit())] = (lib9770F675_gv_units[UnitGetOwner(EventUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Units_Init () {
    lib9770F675_gt_Units = TriggerCreate("lib9770F675_gt_Units_Func");
    TriggerEnable(lib9770F675_gt_Units, false);
    TriggerAddEventUnitCreated(lib9770F675_gt_Units, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(lib9770F675_gv_victoryMusicLink, PlayerGroupAll(), 75.0, 0.0);
    Wait(2.0, c_timeReal);
    lib9770F675_gv_victoryMusic = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.6, c_soundOffsetEnd);
    TriggerExecute(TriggerGetCurrent(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_VictoryMusic_Init () {
    lib9770F675_gt_VictoryMusic = TriggerCreate("lib9770F675_gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Music
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DefeatMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(lib9770F675_gv_defeatMusicLink, PlayerGroupAll(), 75.0, 0.0);
    Wait(2.0, c_timeReal);
    lib9770F675_gv_defeatMusic = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.6, c_soundOffsetEnd);
    TriggerExecute(TriggerGetCurrent(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DefeatMusic_Init () {
    lib9770F675_gt_DefeatMusic = TriggerCreate("lib9770F675_gt_DefeatMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Next Map
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_LoadNextMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    const int auto304447BD_ae = 8;
    const int auto304447BD_ai = 1;
    const int autoBF980264_ae = 5;
    const int autoBF980264_ai = 1;
    const int auto6F1A9C8C_ae = 9;
    const int auto6F1A9C8C_ai = 1;
    const int autoD45742F4_ae = 5;
    const int autoD45742F4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnSSContinueCampaign))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_n = 1;
    for ( ; ( (auto304447BD_ai >= 0 && lv_n <= auto304447BD_ae) || (auto304447BD_ai < 0 && lv_n >= auto304447BD_ae) ) ; lv_n += auto304447BD_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (autoBF980264_ai >= 0 && lv_n <= autoBF980264_ae) || (autoBF980264_ai < 0 && lv_n >= autoBF980264_ae) ) ; lv_n += autoBF980264_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (auto6F1A9C8C_ai >= 0 && lv_n <= auto6F1A9C8C_ae) || (auto6F1A9C8C_ai < 0 && lv_n >= auto6F1A9C8C_ae) ) ; lv_n += auto6F1A9C8C_ai ) {
        lv_m = 1;
        for ( ; ( (autoD45742F4_ai >= 0 && lv_m <= autoD45742F4_ae) || (autoD45742F4_ai < 0 && lv_m >= autoD45742F4_ae) ) ; lv_m += autoD45742F4_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), false);
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), false);
        }
    }
    libNtve_gf_HideScreenImage(false, 1);
    DialogControlSetVisible(lib9770F675_gv_btnSSQuit, PlayerGroupAll(), false);
    DialogControlSetVisible(lib9770F675_gv_btnSSContinueCampaign, PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Hide");
    UISetNextLoadingScreen(null, lib9770F675_gv_iniNextLoadScreenTitle, StringToText(""), lib9770F675_gv_iniNextLoadScreenTextBody, StringToText(""), true);
    GameSetNextMap((lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
    Wait(2.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), false);
    DialogDestroyAll();
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    if ((lib9770F675_gv_loadCinematic == true)) {
        lib9770F675_gf_Cinematic();
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_LoadNextMap_Init () {
    lib9770F675_gt_LoadNextMap = TriggerCreate("lib9770F675_gt_LoadNextMap_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_LoadNextMap, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    const int autoF890AAA6_ae = 8;
    const int autoF890AAA6_ai = 1;
    const int autoED8856DC_ae = 5;
    const int autoED8856DC_ai = 1;
    const int autoC4D15EB2_ae = 9;
    const int autoC4D15EB2_ai = 1;
    const int auto478FF171_ae = 5;
    const int auto478FF171_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnSSRestart))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_n = 1;
    for ( ; ( (autoF890AAA6_ai >= 0 && lv_n <= autoF890AAA6_ae) || (autoF890AAA6_ai < 0 && lv_n >= autoF890AAA6_ae) ) ; lv_n += autoF890AAA6_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (autoED8856DC_ai >= 0 && lv_n <= autoED8856DC_ae) || (autoED8856DC_ai < 0 && lv_n >= autoED8856DC_ae) ) ; lv_n += autoED8856DC_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (autoC4D15EB2_ai >= 0 && lv_n <= autoC4D15EB2_ae) || (autoC4D15EB2_ai < 0 && lv_n >= autoC4D15EB2_ae) ) ; lv_n += autoC4D15EB2_ai ) {
        lv_m = 1;
        for ( ; ( (auto478FF171_ai >= 0 && lv_m <= auto478FF171_ae) || (auto478FF171_ai < 0 && lv_m >= auto478FF171_ae) ) ; lv_m += auto478FF171_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), false);
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), false);
        }
    }
    libNtve_gf_HideScreenImage(false, 1);
    DialogControlSetVisible(lib9770F675_gv_btnSSRestart, PlayerGroupAll(), false);
    DialogControlSetVisible(lib9770F675_gv_btnSSQuit, PlayerGroupAll(), false);
    DialogControlSetVisible(lib9770F675_gv_btnSSContinueCampaign, PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Hide");
    Wait(2.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), false);
    DialogDestroyAll();
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    RestartGame(PlayerGroupAll());
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Restart_Init () {
    lib9770F675_gt_Restart = TriggerCreate("lib9770F675_gt_Restart_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_Restart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Quit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    const int autoE0AFA355_ae = 8;
    const int autoE0AFA355_ai = 1;
    const int auto98F6704E_ae = 5;
    const int auto98F6704E_ai = 1;
    const int auto1EC1BEB9_ae = 9;
    const int auto1EC1BEB9_ai = 1;
    const int auto3AEF3629_ae = 5;
    const int auto3AEF3629_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib9770F675_gv_btnSSQuit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_n = 1;
    for ( ; ( (autoE0AFA355_ai >= 0 && lv_n <= autoE0AFA355_ae) || (autoE0AFA355_ai < 0 && lv_n >= autoE0AFA355_ae) ) ; lv_n += autoE0AFA355_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][1], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (auto98F6704E_ai >= 0 && lv_n <= auto98F6704E_ae) || (auto98F6704E_ai < 0 && lv_n >= auto98F6704E_ae) ) ; lv_n += auto98F6704E_ai ) {
        DialogControlSetVisible(lib9770F675_gv_scoreScreenLabels[lv_n][2], PlayerGroupAll(), false);
    }
    lv_n = 1;
    for ( ; ( (auto1EC1BEB9_ai >= 0 && lv_n <= auto1EC1BEB9_ae) || (auto1EC1BEB9_ai < 0 && lv_n >= auto1EC1BEB9_ae) ) ; lv_n += auto1EC1BEB9_ai ) {
        lv_m = 1;
        for ( ; ( (auto3AEF3629_ai >= 0 && lv_m <= auto3AEF3629_ae) || (auto3AEF3629_ai < 0 && lv_m >= auto3AEF3629_ae) ) ; lv_m += auto3AEF3629_ai ) {
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][1], PlayerGroupAll(), false);
            DialogControlSetVisible(lib9770F675_gv_scoreScreenMatrix[lv_n][lv_m][2], PlayerGroupAll(), false);
        }
    }
    libNtve_gf_HideScreenImage(false, 1);
    DialogControlSetVisible(lib9770F675_gv_btnSSRestart, PlayerGroupAll(), false);
    DialogControlSetVisible(lib9770F675_gv_btnSSQuit, PlayerGroupAll(), false);
    DialogControlSetVisible(lib9770F675_gv_btnSSContinueCampaign, PlayerGroupAll(), false);
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    DialogControlSendAnimationEvent(lib9770F675_gv_scoreBorder, PlayerGroupAll(), "Hide");
    GameSetNextMap("Starcraft Mass Recall/SCMR Campaign Launcher");
    Wait(2.0, c_timeReal);
    DialogDestroyAll();
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Quit_Init () {
    lib9770F675_gt_Quit = TriggerCreate("lib9770F675_gt_Quit_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_Quit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreScreenFailSafeVictory
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ScoreScreenFailSafeVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeReal);
    if ((lib9770F675_gv_scoreScreenFailSafe == true)) {
        lib9770F675_gf_ScoreScreenFailSafe();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ScoreScreenFailSafeVictory_Init () {
    lib9770F675_gt_ScoreScreenFailSafeVictory = TriggerCreate("lib9770F675_gt_ScoreScreenFailSafeVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreScreenFailSafeDefeat
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ScoreScreenFailSafeDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeReal);
    if ((lib9770F675_gv_scoreScreenFailSafe == true)) {
        lib9770F675_gf_ScoreScreenFailSafeDefeat();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ScoreScreenFailSafeDefeat_Init () {
    lib9770F675_gt_ScoreScreenFailSafeDefeat = TriggerCreate("lib9770F675_gt_ScoreScreenFailSafeDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Next Map (ER ONLY)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_LoadNextMapERONLY_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap((lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
    DialogDestroyAll();
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    UISetCursorVisible(PlayerGroupAll(), false);
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    Wait(1.0, c_timeReal);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_LoadNextMapERONLY_Init () {
    lib9770F675_gt_LoadNextMapERONLY = TriggerCreate("lib9770F675_gt_LoadNextMapERONLY_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart (ER ONLY)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_RestartERONLY_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroyAll();
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    UISetCursorVisible(PlayerGroupAll(), false);
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    Wait(1.0, c_timeReal);
    RestartGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_RestartERONLY_Init () {
    lib9770F675_gt_RestartERONLY = TriggerCreate("lib9770F675_gt_RestartERONLY_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit (ER ONLY)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_QuitERONLY_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_m;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("Starcraft Mass Recall/SCMR Campaign Launcher");
    DialogDestroyAll();
    libNtve_gf_HideScreenButton(false, 7);
    libNtve_gf_HideScreenButton(false, 8);
    SoundStop(lib9770F675_gv_victoryMusic, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    Wait(1.0, c_timeReal);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_QuitERONLY_Init () {
    lib9770F675_gt_QuitERONLY = TriggerCreate("lib9770F675_gt_QuitERONLY_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEAT DETECTION
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CHEATDETECTION_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_cheat_detected = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CHEATDETECTION_Init () {
    lib9770F675_gt_CHEATDETECTION = TriggerCreate("lib9770F675_gt_CHEATDETECTION_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "black sheep wall", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "breathe deep", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "whats mine is mine", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "food for thought", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "game over man", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "medieval man", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "modify the phase variance", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "noglues", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "operation cwal", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "ophelia", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "power overwhelming", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "show me the money", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "something for nothing", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "staying alive", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "the gathering", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "war aint what it used to be", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "there is no cow level", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "what is dead may never die", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "for the horde", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "if he be worthy", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "throw down with the best of them", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "hello beastie", true);
    TriggerAddEventChatMessage(lib9770F675_gt_CHEATDETECTION, 1, "feed me", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Sheep Wall - Reveal Map
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BlackSheepWallRevealMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_revealMap == false)) {
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
        lib9770F675_gv_revealMap = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_revealMap == true)) {
            VisEnable(c_visTypeMask, true);
            VisEnable(c_visTypeFog, true);
            lib9770F675_gv_revealMap = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BlackSheepWallRevealMap_Init () {
    lib9770F675_gt_BlackSheepWallRevealMap = TriggerCreate("lib9770F675_gt_BlackSheepWallRevealMap_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BlackSheepWallRevealMap, 1, "black sheep wall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breathe Deep - 500 Gas
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BreatheDeep500Gas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, 500);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BreatheDeep500Gas_Init () {
    lib9770F675_gt_BreatheDeep500Gas = TriggerCreate("lib9770F675_gt_BreatheDeep500Gas_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BreatheDeep500Gas, 1, "breathe deep", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whats Mine is Mine - 500 Minerals
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_WhatsMineisMine500Minerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, 500);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_WhatsMineisMine500Minerals_Init () {
    lib9770F675_gt_WhatsMineisMine500Minerals = TriggerCreate("lib9770F675_gt_WhatsMineisMine500Minerals_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_WhatsMineisMine500Minerals, 1, "whats mine is mine", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food for Thought - No Supply Limit
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_FoodforThoughtNoSupplyLimit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_foodforthought == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        lib9770F675_gv_foodforthought = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_foodforthought == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            lib9770F675_gv_foodforthought_supplies = PlayerGetPropertyInt(1, c_playerPropSuppliesMade);
            Wait(0.1, c_timeReal);
            PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, lib9770F675_gv_foodforthought_supplies);
            lib9770F675_gv_foodforthought = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_FoodforThoughtNoSupplyLimit_Init () {
    lib9770F675_gt_FoodforThoughtNoSupplyLimit = TriggerCreate("lib9770F675_gt_FoodforThoughtNoSupplyLimit_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_FoodforThoughtNoSupplyLimit, 1, "food for thought", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Man - Defeat
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_GameOverManDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf_Defeat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_GameOverManDefeat_Init () {
    lib9770F675_gt_GameOverManDefeat = TriggerCreate("lib9770F675_gt_GameOverManDefeat_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_GameOverManDefeat, 1, "game over man", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medieval Man - Enable All Abilities
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_MedievalManEnableAllAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_toggle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_medievalMan == false)) {
        lv_toggle = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    }
    else {
        if ((lib9770F675_gv_medievalMan == true)) {
            lv_toggle = 0;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchStasis", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchRecall", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KhaydarinCore", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BattlecruiserBehemothReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BattlecruiserEnableSpecializations", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Burrow", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InterceptorLimit6", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ArgusJewel", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchDisruptionWeb", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ArgusTalisman", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Maelstrom", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MindControl", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveConsume", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchMetasynapticNode", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolvePlague", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SingularityCharge", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Lockdown", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GhostMoebiusReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OcularImplants2", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PersonalCloaking", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "AresClassWeaponsSystem", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "haltech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HighTemplarKhaydarinAmulet", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PsiStormTech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveLurkerAspect", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed2", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "U238Shells", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Stimpack", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MedicCaduceusReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OpticalFlare", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Restoration", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ObserverGraviticBooster", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SensorArray", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Antennae", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordtransport", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveEnsnare", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestorEnergyUpgrade", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveSpawnBroodling", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IncreasedReaverCapacity", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ScarabDamage", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchEMPShockwave", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchIrradiate", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ScienceVesselTitanReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ApialSensors", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GraviticThrusters", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GraviticDrive", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SiegeTech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "AnabolicSynthesis", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ChitinousPlating", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IonThrusters", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchSpiderMines", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "WraithApolloReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "WraithCloak", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Charge", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingattackspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingmovementspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ObverseIncubation", lv_toggle);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_MedievalManEnableAllAbilities_Init () {
    lib9770F675_gt_MedievalManEnableAllAbilities = TriggerCreate("lib9770F675_gt_MedievalManEnableAllAbilities_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_MedievalManEnableAllAbilities, 1, "medieval man", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify the Phase Variance - Disable all Building Requirements
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_phase_active == false)) {
        lib9770F675_gv_phase_active = true;
        TechTreeRequirementsEnable(1, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_phase_active == true)) {
            lib9770F675_gv_phase_active = false;
            TechTreeRequirementsEnable(1, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Init () {
    lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements = TriggerCreate("lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements, 1, "modify the phase variance", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Glues - No Psionics
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_NoGluesNoPsionics_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    const int autoFECFD253_ae = 9;
    const int autoFECFD253_ai = 1;
    const int autoB901744A_ae = 9;
    const int autoB901744A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_glues_active == false)) {
        lib9770F675_gv_glues_active = true;
        lv_n = 2;
        for ( ; ( (autoB901744A_ai >= 0 && lv_n <= autoB901744A_ae) || (autoB901744A_ai < 0 && lv_n >= autoB901744A_ae) ) ; lv_n += autoB901744A_ai ) {
            TechTreeAbilityAllow(lv_n, AbilityCommand("PsiStorm", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Hallucination", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DisruptionWeb", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("MassRecall", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("StasisField", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Plague", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DarkSwarm", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Ensnare", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Parasite", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("SpawnBroodling", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Irradiate", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("EMP", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DefensiveMatrix2", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Lockdown", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("GhostCloak", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("MengskWraithCloak", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Yamato", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("OpticalFlare", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Restoration", 0), false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_glues_active == true)) {
            lib9770F675_gv_glues_active = false;
            lv_n = 2;
            for ( ; ( (autoFECFD253_ai >= 0 && lv_n <= autoFECFD253_ae) || (autoFECFD253_ai < 0 && lv_n >= autoFECFD253_ae) ) ; lv_n += autoFECFD253_ai ) {
                TechTreeAbilityAllow(lv_n, AbilityCommand("PsiStorm", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Hallucination", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DisruptionWeb", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("MassRecall", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("StasisField", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Plague", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DarkSwarm", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Ensnare", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Parasite", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("SpawnBroodling", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Irradiate", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("EMP", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DefensiveMatrix2", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Lockdown", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("GhostCloak", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("MengskWraithCloak", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Yamato", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("OpticalFlare", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Restoration", 0), true);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_NoGluesNoPsionics_Init () {
    lib9770F675_gt_NoGluesNoPsionics = TriggerCreate("lib9770F675_gt_NoGluesNoPsionics_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_NoGluesNoPsionics, 1, "noglues", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Operation CWAL - Faster Building Production
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_OperationCWALFasterBuildingProduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2F302C6C_g;
    int auto2F302C6C_var;
    playergroup autoD69F0617_g;
    int autoD69F0617_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_operationCWAL == false)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALTerran", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALZerg", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALProtoss", 1);
        auto2F302C6C_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
        auto2F302C6C_var = -1;
        while (true) {
            auto2F302C6C_var = PlayerGroupNextPlayer(auto2F302C6C_g, auto2F302C6C_var);
            if (auto2F302C6C_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto2F302C6C_var, "CheatOperationCWALTerran", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto2F302C6C_var, "CheatOperationCWALZerg", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto2F302C6C_var, "CheatOperationCWALProtoss", 1);
        }
        lib9770F675_gv_operationCWAL = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_operationCWAL == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALTerran", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALZerg", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALProtoss", 0);
            autoD69F0617_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
            autoD69F0617_var = -1;
            while (true) {
                autoD69F0617_var = PlayerGroupNextPlayer(autoD69F0617_g, autoD69F0617_var);
                if (autoD69F0617_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(autoD69F0617_var, "CheatOperationCWALTerran", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(autoD69F0617_var, "CheatOperationCWALZerg", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(autoD69F0617_var, "CheatOperationCWALProtoss", 0);
            }
            lib9770F675_gv_operationCWAL = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_OperationCWALFasterBuildingProduction_Init () {
    lib9770F675_gt_OperationCWALFasterBuildingProduction = TriggerCreate("lib9770F675_gt_OperationCWALFasterBuildingProduction_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_OperationCWALFasterBuildingProduction, 1, "operation cwal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ophelia - Enable Level Skip
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_OpheliaEnableLevelSkip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gv_ophelia = true;
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_OpheliaEnableLevelSkip_Init () {
    lib9770F675_gt_OpheliaEnableLevelSkip = TriggerCreate("lib9770F675_gt_OpheliaEnableLevelSkip_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_OpheliaEnableLevelSkip, 1, "ophelia", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ophelia (race# [# = Mission Number]) - Level Skip
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_OpheliaraceMissionNumberLevelSkip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_nextmap;

    // Automatic Variable Declarations
    const int auto46F0832F_ae = 9;
    const int auto46F0832F_ai = 1;
    const int auto52A5D98F_ae = 8;
    const int auto52A5D98F_ai = 1;

    // Variable Initialization
    lv_i = 1;
    lv_nextmap = 1;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_ophelia == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto46F0832F_ai >= 0 && lv_i <= auto46F0832F_ae) || (auto46F0832F_ai < 0 && lv_i >= auto46F0832F_ae) ) ; lv_i += auto46F0832F_ai ) {
        if ((EventChatMessage(false) == ("terran" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("1. Rebel Yell/" + ("Terran" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        else {
            GameSetNextMap(("Starcraft Mass Recall/" + ("1. Rebel Yell/" + ("Terran" + "10"))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        if ((EventChatMessage(false) == ("zerg" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("2. Overmind/" + ("Zerg" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        else {
            GameSetNextMap(("Starcraft Mass Recall/" + ("2. Overmind/" + ("Zerg" + "10"))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        if ((EventChatMessage(false) == ("protoss" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("3. The Fall/" + ("Protoss" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        else {
            GameSetNextMap(("Starcraft Mass Recall/" + ("3. The Fall/" + ("Protoss" + "10"))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        if ((EventChatMessage(false) == ("xzerg" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + ("ZergX" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
        else {
            GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + ("ZergX" + "10"))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }
    }
    lv_i = 1;
    for ( ; ( (auto52A5D98F_ai >= 0 && lv_i <= auto52A5D98F_ae) || (auto52A5D98F_ai < 0 && lv_i >= auto52A5D98F_ae) ) ; lv_i += auto52A5D98F_ai ) {
        if ((EventChatMessage(false) == ("xprotoss" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("4. The Stand/" + ("ProtossX" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }

        if ((EventChatMessage(false) == ("xterran" + IntToString(lv_i)))) {
            GameSetNextMap(("Starcraft Mass Recall/" + ("5. The Iron Fist/" + ("TerranX" + ("0" + IntToString(lv_i))))));
            break;
            GameOver(1, c_gameOverVictory, false, false);
        }

    }
    if ((EventChatMessage(false) == "xzerg4a")) {
        lib9770F675_gv_zergx4a_cc = 0;
        GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

        GameOver(1, c_gameOverVictory, false, false);
    }
    else {
        if ((EventChatMessage(false) == "xzerg4b")) {
            lib9770F675_gv_zergx4a_cc = 1;
            GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

            GameOver(1, c_gameOverVictory, false, false);
        }
        else {
            if ((EventChatMessage(false) == "xzerg4c")) {
                lib9770F675_gv_zergx4a_cc = 2;
                GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

                GameOver(1, c_gameOverVictory, false, false);
            }
            else {
                if ((EventChatMessage(false) == "xzerg4d")) {
                    lib9770F675_gv_zergx4a_cc = 3;
                    GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

                    GameOver(1, c_gameOverVictory, false, false);
                }
                else {
                    if ((EventChatMessage(false) == "xzerg4e")) {
                        lib9770F675_gv_zergx4a_cc = 4;
                        GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

                        GameOver(1, c_gameOverVictory, false, false);
                    }
                    else {
                        if ((EventChatMessage(false) == "xzerg4f")) {
                            lib9770F675_gv_zergx4a_cc = 5;
                            GameSetNextMap(("Starcraft Mass Recall/" + ("6. Queen of Blades/" + "ZergX04")));

                            GameOver(1, c_gameOverVictory, false, false);
                        }

                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_OpheliaraceMissionNumberLevelSkip_Init () {
    lib9770F675_gt_OpheliaraceMissionNumberLevelSkip = TriggerCreate("lib9770F675_gt_OpheliaraceMissionNumberLevelSkip_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_OpheliaraceMissionNumberLevelSkip, 1, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PowerOverwhelmingGodMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    unitgroup auto3E4CA707_g;
    int auto3E4CA707_u;
    unit auto3E4CA707_var;
    unitgroup autoCF38BE6C_g;
    int autoCF38BE6C_u;
    unit autoCF38BE6C_var;
    const int auto55897DAB_ae = 8;
    const int auto55897DAB_ai = 1;
    unitgroup auto1BCCE66A_g;
    int auto1BCCE66A_u;
    unit auto1BCCE66A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_godMode == false)) {
        lib9770F675_gv_godMode = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive, true);
        TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive2, true);
        autoCF38BE6C_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCF38BE6C_u = UnitGroupCount(autoCF38BE6C_g, c_unitCountAll);
        for (;; autoCF38BE6C_u -= 1) {
            autoCF38BE6C_var = UnitGroupUnitFromEnd(autoCF38BE6C_g, autoCF38BE6C_u);
            if (autoCF38BE6C_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(autoCF38BE6C_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(autoCF38BE6C_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        }
        lv_n = 2;
        for ( ; ( (auto55897DAB_ai >= 0 && lv_n <= auto55897DAB_ae) || (auto55897DAB_ai < 0 && lv_n >= auto55897DAB_ae) ) ; lv_n += auto55897DAB_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), lv_n) == true)) {
                auto1BCCE66A_g = UnitGroup(null, lv_n, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto1BCCE66A_u = UnitGroupCount(auto1BCCE66A_g, c_unitCountAll);
                for (;; auto1BCCE66A_u -= 1) {
                    auto1BCCE66A_var = UnitGroupUnitFromEnd(auto1BCCE66A_g, auto1BCCE66A_u);
                    if (auto1BCCE66A_var == null) { break; }
                    libNtve_gf_ChangeUnitDamage(auto1BCCE66A_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                    libNtve_gf_ChangeUnitDamage(auto1BCCE66A_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
                }
            }

        }
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_godMode == true)) {
            lib9770F675_gv_godMode = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive, false);
            TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive2, false);
            auto3E4CA707_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3E4CA707_u = UnitGroupCount(auto3E4CA707_g, c_unitCountAll);
            for (;; auto3E4CA707_u -= 1) {
                auto3E4CA707_var = UnitGroupUnitFromEnd(auto3E4CA707_g, auto3E4CA707_u);
                if (auto3E4CA707_var == null) { break; }
                libNtve_gf_ChangeUnitDamage(auto3E4CA707_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                libNtve_gf_ChangeUnitDamage(auto3E4CA707_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
            }
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PowerOverwhelmingGodMode_Init () {
    lib9770F675_gt_PowerOverwhelmingGodMode = TriggerCreate("lib9770F675_gt_PowerOverwhelmingGodMode_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_PowerOverwhelmingGodMode, 1, "power overwhelming", true);
    TriggerAddEventChatMessage(lib9770F675_gt_PowerOverwhelmingGodMode, 1, "omega123", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode Give
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PowerOverwhelmingGodModeGive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), UnitGetOwner(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(EventUnitProgressUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(EventUnitProgressUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PowerOverwhelmingGodModeGive_Init () {
    lib9770F675_gt_PowerOverwhelmingGodModeGive = TriggerCreate("lib9770F675_gt_PowerOverwhelmingGodModeGive_Func");
    TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive, false);
    TriggerAddEventUnitTrainProgress(lib9770F675_gt_PowerOverwhelmingGodModeGive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode Give 2
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PowerOverwhelmingGodModeGive2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitOwnerNew() == 1) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), EventUnitOwnerNew()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PowerOverwhelmingGodModeGive2_Init () {
    lib9770F675_gt_PowerOverwhelmingGodModeGive2 = TriggerCreate("lib9770F675_gt_PowerOverwhelmingGodModeGive2_Func");
    TriggerEnable(lib9770F675_gt_PowerOverwhelmingGodModeGive2, false);
    TriggerAddEventUnitChangeOwner(lib9770F675_gt_PowerOverwhelmingGodModeGive2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Me the Money - 10000 Minerals & Gas
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ShowMetheMoney10000MineralsGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, 10000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, 10000);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ShowMetheMoney10000MineralsGas_Init () {
    lib9770F675_gt_ShowMetheMoney10000MineralsGas = TriggerCreate("lib9770F675_gt_ShowMetheMoney10000MineralsGas_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_ShowMetheMoney10000MineralsGas, 1, "show me the money", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ShowMetheMoney10000MineralsGas, 1, "omega321", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SomethingForNothingFreeUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel1", 1);
    TriggerEnable(lib9770F675_gt_SomethingForNothingFreeUpgrades2, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SomethingForNothingFreeUpgrades_Init () {
    lib9770F675_gt_SomethingForNothingFreeUpgrades = TriggerCreate("lib9770F675_gt_SomethingForNothingFreeUpgrades_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_SomethingForNothingFreeUpgrades, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades 2
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SomethingForNothingFreeUpgrades2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel2", 1);
    TriggerEnable(lib9770F675_gt_SomethingForNothingFreeUpgrades3, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SomethingForNothingFreeUpgrades2_Init () {
    lib9770F675_gt_SomethingForNothingFreeUpgrades2 = TriggerCreate("lib9770F675_gt_SomethingForNothingFreeUpgrades2_Func");
    TriggerEnable(lib9770F675_gt_SomethingForNothingFreeUpgrades2, false);
    TriggerAddEventChatMessage(lib9770F675_gt_SomethingForNothingFreeUpgrades2, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades 3
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SomethingForNothingFreeUpgrades3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel3", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SomethingForNothingFreeUpgrades3_Init () {
    lib9770F675_gt_SomethingForNothingFreeUpgrades3 = TriggerCreate("lib9770F675_gt_SomethingForNothingFreeUpgrades3_Func");
    TriggerEnable(lib9770F675_gt_SomethingForNothingFreeUpgrades3, false);
    TriggerAddEventChatMessage(lib9770F675_gt_SomethingForNothingFreeUpgrades3, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Staying Alive - Disable ScoreScreen
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_StayingAliveDisableScoreScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_stayingalive == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        lib9770F675_gv_stayingalive = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_stayingalive == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            lib9770F675_gv_stayingalive = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_StayingAliveDisableScoreScreen_Init () {
    lib9770F675_gt_StayingAliveDisableScoreScreen = TriggerCreate("lib9770F675_gt_StayingAliveDisableScoreScreen_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_StayingAliveDisableScoreScreen, 1, "staying alive", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Gathering - Abilities Don't Consume Energy
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_thegathering == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        lib9770F675_gv_thegathering = true;
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MassRecall,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPRecall,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,StasisField,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPStasisField,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Yamato,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,HyperionYamatoSpecial,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeYamato,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeMissilePods,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MissilePods,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ScannerSweep,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DisruptionWeb,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,CorsairMPDisruptionWeb,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonConfusion,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Feedback,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Maelstrom,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonMindControl,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MindControl2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Plague,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Behavior,GhostCloak,Modification.VitalRegenArray[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Snipe,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Hallucination,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,PsiStorm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,PsionicLift,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Effect,heal,DrainVitalCostFactor", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,OpticalFlare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Restoration,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPEnsnare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPSpawnBroodlings,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenClassicParasite,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Parasite,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,SpawnBroodling,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,EMP,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Irradiate,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Effect,NanoRepair,DrainVitalCostFactor", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DevastatingShot,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,WraithCloak,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Behavior,WraithCloak,Modification.VitalRegenArray[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,OmegaStorm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Implosion,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Tychus03OmegaStorm,Cost[0].Vital[Energy]", 1, 0.0);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_thegathering == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            lib9770F675_gv_thegathering = false;
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeYamato,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeMissilePods,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,CorsairMPDisruptionWeb,Cost[0].Vital[Energy]", 1, 125.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPEnsnare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPSpawnBroodlings,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MassRecall,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPRecall,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,StasisField,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPStasisField,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Yamato,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MissilePods,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ScannerSweep,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DisruptionWeb,Cost[0].Vital[Energy]", 1, 125.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonConfusion,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Feedback,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Maelstrom,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonMindControl,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MindControl2,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Plague,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 0.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown,Cost[0].Vital[Energy]", 1, 0.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Behavior,GhostCloak,Modification.VitalRegenArray[Energy]", 1, -1.4765);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Snipe,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Hallucination,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,PsiStorm,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,PsionicLift,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Effect,heal,DrainVitalCostFactor", 1, 0.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,OpticalFlare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Restoration,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Parasite,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,SpawnBroodling,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak2,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown2,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix2,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,EMP,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Irradiate,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Effect,NanoRepair,DrainVitalCostFactor", 1, 0.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DevastatingShot,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,WraithCloak,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Behavior,WraithCloak,Modification.VitalRegenArray[Energy]", 1, -1.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,OmegaStorm,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Implosion,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare2,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Tychus03OmegaStorm,Cost[0].Vital[Energy]", 1, 75.0);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy_Init () {
    lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy = TriggerCreate("lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy, 1, "the gathering", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: War Aint What It Used to be - Disable FOW
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_waraintwhatitusedtobe == false)) {
        VisEnable(c_visTypeFog, false);
        lib9770F675_gv_waraintwhatitusedtobe = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_waraintwhatitusedtobe == true)) {
            VisEnable(c_visTypeFog, true);
            lib9770F675_gv_waraintwhatitusedtobe = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW_Init () {
    lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW = TriggerCreate("lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW, 1, "war aint what it used to be", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: What is Dead May Never Die - Heroes Cant Die
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_remixmusic;

    // Automatic Variable Declarations
    unitgroup autoA4E5961D_g;
    int autoA4E5961D_u;
    unit autoA4E5961D_var;
    unitgroup autoE52441C8_g;
    int autoE52441C8_u;
    unit autoE52441C8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_whatisdeadmayneverdie == false)) {
        lib9770F675_gv_whatisdeadmayneverdie = true;
        autoE52441C8_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE52441C8_u = UnitGroupCount(autoE52441C8_g, c_unitCountAll);
        for (;; autoE52441C8_u -= 1) {
            autoE52441C8_var = UnitGroupUnitFromEnd(autoE52441C8_g, autoE52441C8_u);
            if (autoE52441C8_var == null) { break; }
            UnitBehaviorAdd(autoE52441C8_var, "GenericDontDie", autoE52441C8_var, 1);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib9770F675_gv_whatisdeadmayneverdie == true)) {
            autoA4E5961D_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA4E5961D_u = UnitGroupCount(autoA4E5961D_g, c_unitCountAll);
            for (;; autoA4E5961D_u -= 1) {
                autoA4E5961D_var = UnitGroupUnitFromEnd(autoA4E5961D_g, autoA4E5961D_u);
                if (autoA4E5961D_var == null) { break; }
                UnitBehaviorRemove(autoA4E5961D_var, "GenericDontDie", 1);
            }
            lib9770F675_gv_whatisdeadmayneverdie = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton10_Init () {
    lib9770F675_gt_BriefCancelButton10 = TriggerCreate("lib9770F675_gt_BriefCancelButton10_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton10, 1, "what is dead may never die", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: For the Horde - Summon 4 Tauren Marines (All)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    unitgroup lv_all_units;
    point lv_current_camera;
    point lv_spawn_point;

    // Automatic Variable Declarations
    const int auto83934FC5_ae = 4;
    const int auto83934FC5_ai = 1;

    // Variable Initialization
    lv_all_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((AIKnownUnitCount(1, 1, "TaurenSpaceMarine") <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    UnitGroupAddUnitGroup(lv_all_units, UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    Wait(0.1, c_timeReal);
    lv_current_camera = CameraGetTarget(1);
    Wait(0.1, c_timeReal);
    lv_spawn_point = UnitGetPosition(UnitGroupClosestToPoint(lv_all_units, lv_current_camera));
    MinimapPing(PlayerGroupAll(), lv_spawn_point, 2.0, Color(100.00, 0.00, 0.00));
    lv_n = 1;
    for ( ; ( (auto83934FC5_ai >= 0 && lv_n <= auto83934FC5_ae) || (auto83934FC5_ai < 0 && lv_n >= auto83934FC5_ae) ) ; lv_n += auto83934FC5_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TaurenOuthouse", 0, 1, RegionRandomPoint(RegionCircle(lv_spawn_point, 2.0)));
        PlayerCreateEffectUnit(1, "MercAirDropApplyBehavior", UnitLastCreated());
        Wait(0.1, c_timeReal);
        UnitCargoCreate(UnitLastCreated(), "TaurenSpaceMarine", 1);
        Wait(2.0, c_timeReal);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("TaurenOuthouseTransport", 1)), c_orderQueueReplace);
        Wait(2.0, c_timeReal);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("TaurenOuthouseLiftoff", 0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("TaurenSpaceMarine_Pissed", 3), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton11_Init () {
    lib9770F675_gt_BriefCancelButton11 = TriggerCreate("lib9770F675_gt_BriefCancelButton11_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton11, 1, "for the horde", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: If He Be Worthy - Summon Odin (Terran)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_current_camera;
    point lv_spawn_point;
    unitgroup lv_all_units;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Terr"))) {
            return false;
        }

        if (!((AIKnownUnitCount(1, 1, "Odin") <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    UnitGroupAddUnitGroup(lv_all_units, UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    Wait(0.1, c_timeReal);
    lv_current_camera = CameraGetTarget(1);
    Wait(0.1, c_timeReal);
    lv_spawn_point = UnitGetPosition(UnitGroupClosestToPoint(lv_all_units, lv_current_camera));
    MinimapPing(PlayerGroupAll(), lv_spawn_point, 2.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Odin", 0, 1, RegionRandomPoint(RegionCircle(lv_spawn_point, 2.0)));
    PlayerCreateEffectUnit(1, "MercAirDropApplyBehavior", UnitLastCreated());
    Wait(0.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("Thor_Pissed", 10), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton14_Init () {
    lib9770F675_gt_BriefCancelButton14 = TriggerCreate("lib9770F675_gt_BriefCancelButton14_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton14, 1, "if he be worthy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Throw Down With the Best Of Them - Summon Talandar (Protoss)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_all_units;
    point lv_current_camera;
    point lv_spawn_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Prot"))) {
            return false;
        }

        if (!((AIKnownUnitCount(1, 1, "FenixChampion") <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    UnitGroupAddUnitGroup(lv_all_units, UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    Wait(0.1, c_timeReal);
    lv_current_camera = CameraGetTarget(1);
    Wait(0.1, c_timeReal);
    lv_spawn_point = UnitGetPosition(UnitGroupClosestToPoint(lv_all_units, lv_current_camera));
    MinimapPing(PlayerGroupAll(), lv_spawn_point, 2.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixChampion", 0, 1, RegionRandomPoint(RegionCircle(lv_spawn_point, 2.0)));
    PlayerCreateEffectUnit(1, "MercAirDropApplyBehavior", UnitLastCreated());
    Wait(0.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("Fenix_Calldown", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton12_Init () {
    lib9770F675_gt_BriefCancelButton12 = TriggerCreate("lib9770F675_gt_BriefCancelButton12_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton12, 1, "throw down with the best of them", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hello Beastie - Summon Leviathan (Zerg)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_all_units;
    point lv_current_camera;
    point lv_spawn_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Zerg"))) {
            return false;
        }

        if (!((AIKnownUnitCount(1, 1, "HotSLeviathan") <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    UnitGroupAddUnitGroup(lv_all_units, UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    Wait(0.1, c_timeReal);
    lv_current_camera = CameraGetTarget(1);
    Wait(0.1, c_timeReal);
    lv_spawn_point = UnitGetPosition(UnitGroupClosestToPoint(lv_all_units, lv_current_camera));
    MinimapPing(PlayerGroupAll(), lv_spawn_point, 2.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSLeviathan", 0, 1, RegionRandomPoint(RegionCircle(lv_spawn_point, 2.0)));
    PlayerCreateEffectUnit(1, "MercAirDropApplyBehavior", UnitLastCreated());
    Wait(0.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("Leviathan_Roar", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton13_Init () {
    lib9770F675_gt_BriefCancelButton13 = TriggerCreate("lib9770F675_gt_BriefCancelButton13_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton13, 1, "hello beastie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Music Change
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/lib_9770F675_BA4EE7EA") + StringToText(EventChatMessage(false))));
    if ((EventChatMessage(false) == "tmusic1")) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Tsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        if ((EventChatMessage(false) == "tmusic2")) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }
        else {
            if ((EventChatMessage(false) == "tmusic3")) {
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            }
            else {
                if ((EventChatMessage(false) == "zmusic1")) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Zsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }
                else {
                    if ((EventChatMessage(false) == "zmusic2")) {
                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                    }
                    else {
                        if ((EventChatMessage(false) == "zmusic3")) {
                            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                        }
                        else {
                            if ((EventChatMessage(false) == "pmusic1")) {
                                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Psoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                            }
                            else {
                                if ((EventChatMessage(false) == "pmusic2")) {
                                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackSC2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                }
                                else {
                                    if ((EventChatMessage(false) == "pmusic3")) {
                                        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PsoundtrackBoth", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton16_Init () {
    lib9770F675_gt_BriefCancelButton16 = TriggerCreate("lib9770F675_gt_BriefCancelButton16_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "tmusic1", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "tmusic2", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "tmusic3", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "zmusic1", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "zmusic2", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "zmusic3", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "pmusic1", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "pmusic2", true);
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton16, 1, "pmusic3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feed Me - Unlimited Food
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib9770F675_gv_feedme == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatDisabled);
        lib9770F675_gv_feedme = false;
        PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        Wait(0.1, c_timeReal);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, PlayerGetPropertyInt(1, c_playerPropSuppliesMade));
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
        lib9770F675_gv_feedme = true;
        PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton18_Init () {
    lib9770F675_gt_BriefCancelButton18 = TriggerCreate("lib9770F675_gt_BriefCancelButton18_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton18, 1, "feed me", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tune Up - Terran Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton23_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Terr"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib9770F675_gv_tuneup == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_B0D7AEFA"));
        PlayerSetConsoleSkin(1, "ConsoleTerran_Classic");
        lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib9770F675_gv_tuneup == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_FB990E82"));
            PlayerSetConsoleSkin(1, "ConsoleTerran_Horner");
            lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib9770F675_gv_tuneup == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_B3E0FFB7"));
                PlayerSetConsoleSkin(1, "ConsoleTerran_Swann");
                lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib9770F675_gv_tuneup == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_C4B76441"));
                    PlayerSetConsoleSkin(1, "ConsoleTerran_CovertOps");
                    lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib9770F675_gv_tuneup == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_E0A5516D"));
                        PlayerSetConsoleSkin(1, "ConsoleTerran_XelNaga");
                        lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib9770F675_gv_tuneup == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_70E447BA"));
                            PlayerSetConsoleSkin(1, "ConsoleTerran_ArcadePurple");
                            lib9770F675_gv_tuneup = (lib9770F675_gv_tuneup + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib9770F675_gv_tuneup == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_8A087D09"));
                                PlayerSetConsoleSkin(1, "ConsoleTerran_Default");
                                lib9770F675_gv_tuneup = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton23_Init () {
    lib9770F675_gt_BriefCancelButton23 = TriggerCreate("lib9770F675_gt_BriefCancelButton23_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton23, 1, "tune up", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evolve - Zerg Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton24_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib9770F675_gv_evolve == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_4035ECB4"));
        PlayerSetConsoleSkin(1, "ConsoleZerg_Classic");
        lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib9770F675_gv_evolve == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_C8A5D1C5"));
            PlayerSetConsoleSkin(1, "ConsoleZerg_Abathur");
            lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib9770F675_gv_evolve == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_10DCF1E7"));
                PlayerSetConsoleSkin(1, "ConsoleZerg_Dehaka");
                lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib9770F675_gv_evolve == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_404E69AD"));
                    PlayerSetConsoleSkin(1, "ConsoleZerg_Mecha");
                    lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib9770F675_gv_evolve == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_F5828E03"));
                        PlayerSetConsoleSkin(1, "ConsoleZerg_XelNaga");
                        lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib9770F675_gv_evolve == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_112099E9"));
                            PlayerSetConsoleSkin(1, "ConsoleZerg_ArcadePurple");
                            lib9770F675_gv_evolve = (lib9770F675_gv_evolve + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib9770F675_gv_evolve == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_6D0714BF"));
                                PlayerSetConsoleSkin(1, "ConsoleZerg_Default");
                                lib9770F675_gv_evolve = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton24_Init () {
    lib9770F675_gt_BriefCancelButton24 = TriggerCreate("lib9770F675_gt_BriefCancelButton24_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton24, 1, "evolve", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forge - Protoss Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib9770F675_gv_forge == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_B0B97FB5"));
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
        lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib9770F675_gv_forge == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_BD62EF5A"));
            PlayerSetConsoleSkin(1, "ConsoleProtoss_Fenix");
            lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib9770F675_gv_forge == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_7A370EB9"));
                PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
                lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib9770F675_gv_forge == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_FBF3D1FB"));
                    PlayerSetConsoleSkin(1, "ConsoleProtoss_Forged");
                    lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib9770F675_gv_forge == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_ED6C7F05"));
                        PlayerSetConsoleSkin(1, "ConsoleProtoss_XelNaga");
                        lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib9770F675_gv_forge == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_27E20FAA"));
                            PlayerSetConsoleSkin(1, "ConsoleProtoss_ArcadePurple");
                            lib9770F675_gv_forge = (lib9770F675_gv_forge + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib9770F675_gv_forge == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_4973DDE2"));
                                PlayerSetConsoleSkin(1, "ConsoleProtoss_Default");
                                lib9770F675_gv_forge = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton25_Init () {
    lib9770F675_gt_BriefCancelButton25 = TriggerCreate("lib9770F675_gt_BriefCancelButton25_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton25, 1, "forge", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit to Menu
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("Starcraft Mass Recall/SCMR Campaign Launcher");
    Wait(0.5, c_timeReal);
    GameOver(1, c_gameOverTie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton2_Init () {
    lib9770F675_gt_BriefCancelButton2 = TriggerCreate("lib9770F675_gt_BriefCancelButton2_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton2, 1, "quit", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cinematic Test
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_CinematicTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroyAll();
    UISetWorldVisible(PlayerGroupAll(), false);
    lib9770F675_gv_iniNextCinematicLink = StringSub(EventChatMessage(false), 5, 15);
    lib9770F675_gf_Cinematic();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_CinematicTest_Init () {
    lib9770F675_gt_CinematicTest = TriggerCreate("lib9770F675_gt_CinematicTest_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_CinematicTest, 1, "cin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Info
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, GameMapName());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_9770F675_F8D5E810") + DifficultyName(PlayerDifficulty(2))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_9770F675_E276B8AB") + libNtve_gf_ConvertBooleanToText(lib9770F675_gv_iniRetroAddon)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton3_Init () {
    lib9770F675_gt_BriefCancelButton3 = TriggerCreate("lib9770F675_gt_BriefCancelButton3_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton3, 1, "mapinfo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI wave life
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    const int autoA0F7DBAD_ae = 8;
    const int autoA0F7DBAD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_n = 1;
    for ( ; ( (autoA0F7DBAD_ai >= 0 && lv_n <= autoA0F7DBAD_ae) || (autoA0F7DBAD_ai < 0 && lv_n >= autoA0F7DBAD_ae) ) ; lv_n += autoA0F7DBAD_ai ) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(lib9770F675_gv_aIAttackWaveLifeTotal[lv_n], c_fixedPrecisionAny));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton4_Init () {
    lib9770F675_gt_BriefCancelButton4 = TriggerCreate("lib9770F675_gt_BriefCancelButton4_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton4, 1, "aiwave", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Wave Counts
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib9770F675_gv_aiwavecount == true)) {
        lib9770F675_gv_aiwavecount = false;
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        lib9770F675_gv_aiwavecount = true;
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton19_Init () {
    lib9770F675_gt_BriefCancelButton19 = TriggerCreate("lib9770F675_gt_BriefCancelButton19_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton19, 1, "aiwavecount", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI survivors
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    const int auto1390E93C_ae = 8;
    const int auto1390E93C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_n = 1;
    for ( ; ( (auto1390E93C_ai >= 0 && lv_n <= auto1390E93C_ae) || (auto1390E93C_ai < 0 && lv_n >= auto1390E93C_ae) ) ; lv_n += auto1390E93C_ai ) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(lib9770F675_gv_aISurvivors[lv_n], c_unitCountAlive)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton5_Init () {
    lib9770F675_gt_BriefCancelButton5 = TriggerCreate("lib9770F675_gt_BriefCancelButton5_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton5, 1, "aisurvivors", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Food
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton17_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    playergroup autoFD214692_g;
    int autoFD214692_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD214692_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoFD214692_var = -1;
    while (true) {
        autoFD214692_var = PlayerGroupNextPlayer(autoFD214692_g, autoFD214692_var);
        if (autoFD214692_var < 0) { break; }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (IntToText(PlayerGetPropertyInt(autoFD214692_var, c_playerPropSuppliesMade)) + (StringExternal("Param/Value/lib_9770F675_DAA481A4") + (IntToText(PlayerGetPropertyInt(autoFD214692_var, c_playerPropSuppliesUsed)) + (StringExternal("Param/Value/lib_9770F675_214137BD") + (IntToText(PlayerGetPropertyInt(autoFD214692_var, c_playerPropSuppliesLimit)) + (StringExternal("Param/Value/lib_9770F675_2C0505C8") + StringExternal("Param/Value/lib_9770F675_CB196EA3"))))))));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (IntToText(PlayerGetPropertyInt(autoFD214692_var, c_playerPropMinerals)) + (StringExternal("Param/Value/lib_9770F675_1A7E7792") + (IntToText(PlayerGetPropertyInt(autoFD214692_var, c_playerPropVespene)) + (StringExternal("Param/Value/lib_9770F675_6947B7A2") + StringExternal("Param/Value/lib_9770F675_7052C763"))))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton17_Init () {
    lib9770F675_gt_BriefCancelButton17 = TriggerCreate("lib9770F675_gt_BriefCancelButton17_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton17, 1, "aifood", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Time Display
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (FixedToText(GameGetMissionTime(), c_fixedPrecisionAny) + (StringExternal("Param/Value/lib_9770F675_E00BFBEE") + (FixedToText(AIGetTime(), c_fixedPrecisionAny) + (StringExternal("Param/Value/lib_9770F675_13283E84") + StringExternal("Param/Value/lib_9770F675_1B1DEB2F"))))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton20_Init () {
    lib9770F675_gt_BriefCancelButton20 = TriggerCreate("lib9770F675_gt_BriefCancelButton20_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton20, 1, "time", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Bank Options
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (IntToText(lib9770F675_gv_optionsMusic) + (StringExternal("Param/Value/lib_9770F675_5CC82BA7") + (IntToText(lib9770F675_gv_optionsDifficulty) + (StringExternal("Param/Value/lib_9770F675_2C349650") + (IntToText(lib9770F675_gv_optionsGameSpeed) + (StringExternal("Param/Value/lib_9770F675_06938048") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsAudioAbilities) + (StringExternal("Param/Value/lib_9770F675_894E6339") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsAudioBuildings) + (StringExternal("Param/Value/lib_9770F675_47DA885D") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsAudioWeapons) + (StringExternal("Param/Value/lib_9770F675_86AFF15F") + StringExternal("Param/Value/lib_9770F675_BF727E83"))))))))))))));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsBWtech) + (StringExternal("Param/Value/lib_9770F675_B0391635") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsCinematics) + (StringExternal("Param/Value/lib_9770F675_E2C3C4E7") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsEffectsNukes) + (StringExternal("Param/Value/lib_9770F675_B2DDE7F6") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsEffectsStructures) + (StringExternal("Param/Value/lib_9770F675_B23742C2") + (IntToText(lib9770F675_gv_optionsEffectsWeather) + (StringExternal("Param/Value/lib_9770F675_D65F6691") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsHeroAbilities) + (StringExternal("Param/Value/lib_9770F675_4D28FD1A") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsHeroAlert) + StringExternal("Param/Value/lib_9770F675_BD2C457E")))))))))))))));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsCerebrateModels) + (StringExternal("Param/Value/lib_9770F675_90565485") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsUEDModels) + (StringExternal("Param/Value/lib_9770F675_762C8AD5") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsOvermindModels) + (StringExternal("Param/Value/lib_9770F675_C0C467B6") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsCerebrateModels) + (StringExternal("Param/Value/lib_9770F675_77100B55") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsKhalaiModels) + (StringExternal("Param/Value/lib_9770F675_F620178A") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionsNerazimModels) + (StringExternal("Param/Value/lib_9770F675_06F9041B") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_insane_Difficulty) + StringExternal("Param/Value/lib_9770F675_9ED8C3FB")))))))))))))));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton15_Init () {
    lib9770F675_gt_BriefCancelButton15 = TriggerCreate("lib9770F675_gt_BriefCancelButton15_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton15, 1, "options", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Faction Swap - Units
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ModelFactionSwapUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    if ((EventChatMessage(false) == "sok")) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "UEDSkins", 0);
        Wait(0.1, c_timeGame);
        lib9770F675_gf_FactionModelTerran(1, true, false, false);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SOKSkins", 1);
    }
    else {
        if ((EventChatMessage(false) == "ued")) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "SOKSkins", 0);
            Wait(0.1, c_timeGame);
            lib9770F675_gf_FactionModelTerran(1, false, true, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "UEDSkins", 1);
        }
        else {
            if ((EventChatMessage(false) == "overmind")) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "CerebrateSkins", 0);
                Wait(0.1, c_timeGame);
                lib9770F675_gf_FactionModelZerg(1, true, false, false);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "OvermindSkins", 1);
            }
            else {
                if ((EventChatMessage(false) == "cerebrate")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "OvermindSkins", 0);
                    Wait(0.1, c_timeGame);
                    lib9770F675_gf_FactionModelZerg(1, false, true, false);
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "CerebrateSkins", 1);
                }
                else {
                    if ((EventChatMessage(false) == "khalai")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimSkins", 0);
                        Wait(0.1, c_timeGame);
                        lib9770F675_gf_FactionModelProtoss(1, true, false, false);
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KhalaiSkins", 1);
                    }
                    else {
                        if ((EventChatMessage(false) == "nerazim")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "KhalaiSkins", 0);
                            Wait(0.1, c_timeGame);
                            lib9770F675_gf_FactionModelProtoss(1, false, true, false);
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimSkins", 1);
                        }
                        else {
                            if ((EventChatMessage(false) == "retro")) {
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "UEDSkins", 0);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "SOKSkins", 0);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "CerebrateSkins", 0);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "OvermindSkins", 0);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimSkins", 0);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "KhalaiSkins", 0);
                                Wait(0.1, c_timeGame);
                                lib9770F675_gf_FactionModelTerran(1, false, false, true);
                                lib9770F675_gf_FactionModelZerg(1, false, false, true);
                                lib9770F675_gf_FactionModelProtoss(1, false, false, true);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAdjutant", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMengsk", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORaynor", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOKerrigan", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSCV", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMarine", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFirebat", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMedic", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGhost", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOVulture", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSiegeTank", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGoliath", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOWraith", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODropship", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScienceVessel", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBattlecruiser", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCommandCenter", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsT", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORefinery", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSupplyDepot", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBarracks", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOEngineeringBay", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBunker", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAcademy", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMissileTurret", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFactory", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOStarport", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArmory", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOvermind", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCerebrate", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOInfestedKerrigan", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODrone", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOverlord", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZergling", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHydralisk", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOLurker", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODefiler", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOInfestedTerran", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOUltralisk", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOQueen", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScourge", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMutalisk", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGuardian", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODevourer", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHatchery", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsZ", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOExtractor", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSunkenColony", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSporeColony", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOUltraliskCavern", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSpire", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMONydusCanal", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOEvolutionChamber", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArtanis", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZeratul", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOProbe", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZealot", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODragoon", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHighTemplar", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODarkTemplar", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArchon", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODarkArchon", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOShuttle", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOReaver", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOObserver", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScout", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCorsair", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCarrier", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArbiter", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMONexus", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsP", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAssimilator", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOPylon", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGateway", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOForge", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCyberneticsCore", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOShieldBattery", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOPhotonCannon", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCitadelOfAdun", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOStargate", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORoboticsFacility", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSupportBay", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFleetBeacon", 1);
                            }
                            else {
                                if ((EventChatMessage(false) == "original")) {
                                    Wait(0.1, c_timeGame);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "UEDSkins", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "SOKSkins", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "CerebrateSkins", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "OvermindSkins", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimSkins", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KhalaiSkins", 0);
                                    Wait(0.1, c_timeGame);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAdjutant", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMengsk", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORaynor", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOKerrigan", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSCV", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMarine", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFirebat", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMedic", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGhost", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOVulture", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSiegeTank", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGoliath", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOWraith", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODropship", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScienceVessel", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBattlecruiser", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCommandCenter", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsT", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORefinery", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSupplyDepot", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBarracks", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOEngineeringBay", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOBunker", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAcademy", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMissileTurret", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFactory", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOStarport", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArmory", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOvermind", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCerebrate", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOInfestedKerrigan", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODrone", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOverlord", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZergling", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHydralisk", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOLurker", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODefiler", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOInfestedTerran", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOUltralisk", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOQueen", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScourge", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOMutalisk", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGuardian", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODevourer", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHatchery", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsZ", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOExtractor", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSunkenColony", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSporeColony", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOUltraliskCavern", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSpire", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMONydusCanal", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOEvolutionChamber", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArtanis", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZeratul", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOProbe", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOZealot", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODragoon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOHighTemplar", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODarkTemplar", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArchon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMODarkArchon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOShuttle", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOReaver", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOObserver", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOScout", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCorsair", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCarrier", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOArbiter", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMONexus", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOOtherBuildingsP", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOAssimilator", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOPylon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOGateway", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOForge", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCyberneticsCore", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOShieldBattery", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOPhotonCannon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOCitadelOfAdun", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOStargate", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMORoboticsFacility", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOFleetBeacon", 0);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "BWMOSupportBay", 0);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ModelFactionSwapUnits_Init () {
    lib9770F675_gt_ModelFactionSwapUnits = TriggerCreate("lib9770F675_gt_ModelFactionSwapUnits_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "original", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "retro", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "sok", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "ued", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "overmind", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "cerebrate", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "khalai", true);
    TriggerAddEventChatMessage(lib9770F675_gt_ModelFactionSwapUnits, 1, "nerazim", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remix - Secret Soundtracks (All)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton26_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf_TurnOffSecretMusicTriggers();
    if ((lib9770F675_gv_mRMusic.lv_secretMusicOn == true)) {
        lib9770F675_gf_SecretMusicMessageTurnedOff();
    }
    else {
        if ((PlayerRace(1) == "Terr")) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicRemixTerran", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicRemixZerg", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicRemixProtoss", c_soundtrackCueAny, c_soundtrackIndexAny, true);
                }

            }
        }
        lib9770F675_gf_SecretMusicMessageTurnedOn();
    }
    lib9770F675_gf_TurnOnSecretMusicTriggers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton26_Init () {
    lib9770F675_gt_BriefCancelButton26 = TriggerCreate("lib9770F675_gt_BriefCancelButton26_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton26, 1, "remix", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lost Viking - Secret Soundtrack (Terran)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton27_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Terr"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf_TurnOffSecretMusicTriggers();
    if ((lib9770F675_gv_mRMusic.lv_secretMusicOn == true)) {
        lib9770F675_gf_SecretMusicMessageTurnedOff();
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicLostVikings", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        lib9770F675_gf_SecretMusicMessageTurnedOn();
    }
    lib9770F675_gf_TurnOnSecretMusicTriggers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton27_Init () {
    lib9770F675_gt_BriefCancelButton27 = TriggerCreate("lib9770F675_gt_BriefCancelButton27_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton27, 1, "lost viking", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radio Free Zerg - Secret Soundtrack (Zerg)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton28_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf_TurnOffSecretMusicTriggers();
    if ((lib9770F675_gv_mRMusic.lv_secretMusicOn == true)) {
        lib9770F675_gf_SecretMusicMessageTurnedOff();
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicRadioFreeZerg", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        lib9770F675_gf_SecretMusicMessageTurnedOn();
    }
    lib9770F675_gf_TurnOnSecretMusicTriggers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton28_Init () {
    lib9770F675_gt_BriefCancelButton28 = TriggerCreate("lib9770F675_gt_BriefCancelButton28_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton28, 1, "radio free zerg", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: For Aiur - Secret Soundtrack (Protoss)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BriefCancelButton29_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gf_TurnOffSecretMusicTriggers();
    if ((lib9770F675_gv_mRMusic.lv_secretMusicOn == true)) {
        lib9770F675_gf_SecretMusicMessageTurnedOff();
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "SecretMusicForAiur", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        lib9770F675_gf_SecretMusicMessageTurnedOn();
    }
    lib9770F675_gf_TurnOnSecretMusicTriggers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BriefCancelButton29_Init () {
    lib9770F675_gt_BriefCancelButton29 = TriggerCreate("lib9770F675_gt_BriefCancelButton29_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_BriefCancelButton29, 1, "for aiur", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: A1 Achievement - Load Visual
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_A1AchievementLoadVisual_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto74CB5D44_val;
    string autoA0331AC3_val;
    string auto099C7342_val;
    string auto57AE9559_val;
    string auto18804697_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto74CB5D44_val = PlayerDifficulty(1);
    if (auto74CB5D44_val == 1) {
        autoA0331AC3_val = PlayerRace(1);
        if (autoA0331AC3_val == "Terr") {
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_D067B41C"), StringExternal("Param/Value/lib_9770F675_F5A468CD"));
        }
        else if (autoA0331AC3_val == "Prot") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_39D8560B"), StringExternal("Param/Value/lib_9770F675_B5E45BD4"));
        }
        else if (autoA0331AC3_val == "Zerg") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_E7B81998"), StringExternal("Param/Value/lib_9770F675_6B679AD3"));
        }
        else {
        }
    }
    else if (auto74CB5D44_val == 2) {
        auto099C7342_val = PlayerRace(1);
        if (auto099C7342_val == "Terr") {
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_505D3E00"), StringExternal("Param/Value/lib_9770F675_46252DE9"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_813B3435"), StringExternal("Param/Value/lib_9770F675_A9016C00"));
        }
        else if (auto099C7342_val == "Prot") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_3BD1F342"), StringExternal("Param/Value/lib_9770F675_1B3A18EA"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_E5A0F211"), StringExternal("Param/Value/lib_9770F675_497D821D"));
        }
        else if (auto099C7342_val == "Zerg") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_DDD9726D"), StringExternal("Param/Value/lib_9770F675_ED8AB832"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_FAC4C9AB"), StringExternal("Param/Value/lib_9770F675_41B6EC13"));
        }
        else {
        }
    }
    else if (auto74CB5D44_val == 3) {
        auto57AE9559_val = PlayerRace(1);
        if (auto57AE9559_val == "Terr") {
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_D55B5826"), StringExternal("Param/Value/lib_9770F675_55398D4E"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_11CD3AFF"), StringExternal("Param/Value/lib_9770F675_C672341D"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_C388B32D"), StringExternal("Param/Value/lib_9770F675_D01A7181"));
        }
        else if (auto57AE9559_val == "Prot") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_7BC41B41"), StringExternal("Param/Value/lib_9770F675_DC2BE5E4"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_DB985D82"), StringExternal("Param/Value/lib_9770F675_57E8DBA2"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_6504D454"), StringExternal("Param/Value/lib_9770F675_FC89247C"));
        }
        else if (auto57AE9559_val == "Zerg") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_A5963F38"), StringExternal("Param/Value/lib_9770F675_E0103B7F"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_2DADBA22"), StringExternal("Param/Value/lib_9770F675_5A4A94F3"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_B209E582"), StringExternal("Param/Value/lib_9770F675_867D6C3D"));
        }
        else {
        }
    }
    else if (auto74CB5D44_val == 4) {
        auto18804697_val = PlayerRace(1);
        if (auto18804697_val == "Terr") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-tychus-weapons-level5.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_41777D7E"), StringExternal("Param/Value/lib_9770F675_A5A9284D"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_118350F0"), StringExternal("Param/Value/lib_9770F675_B1E5C8C0"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_987B0891"), StringExternal("Param/Value/lib_9770F675_6AFD2036"));
            lib9770F675_gf_CreateAchievement("Assets/Textures/btn-upgrade-terran-infantryweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_C22AB281"), StringExternal("Param/Value/lib_9770F675_DA1D430C"));
        }
        else if (auto18804697_val == "Prot") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-structureovercharge.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_FF539F6D"), StringExternal("Param/Value/lib_9770F675_644C518E"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_B0E8E44A"), StringExternal("Param/Value/lib_9770F675_65EB6E77"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_53B3F825"), StringExternal("Param/Value/lib_9770F675_1037D358"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_8F49D2F7"), StringExternal("Param/Value/lib_9770F675_E1FDB941"));
        }
        else if (auto18804697_val == "Zerg") {
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-dehaka-meleeattacks-level3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_A5E45361"), StringExternal("Param/Value/lib_9770F675_F69BEDDA"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_64A8BF3C"), StringExternal("Param/Value/lib_9770F675_0B73D98F"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_E9298CD3"), StringExternal("Param/Value/lib_9770F675_C871F0C5"));
            lib9770F675_gf_CreateAchievement("Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", GameMapName(), StringExternal("Param/Value/lib_9770F675_CFD0B518"), StringExternal("Param/Value/lib_9770F675_F968DC28"));
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_A1AchievementLoadVisual_Init () {
    lib9770F675_gt_A1AchievementLoadVisual = TriggerCreate("lib9770F675_gt_A1AchievementLoadVisual_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss_Missing_Shields
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Protoss_Missing_Shields1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(1, "ProtossShieldsLevel3", c_techCountCompleteOnly) != 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel2", c_techCountCompleteOnly) != 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel1", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "EredasShieldLevel1", 1);
    TriggerEnable(lib9770F675_gt_Protoss_Missing_Shields1, false);
    TriggerDestroy(lib9770F675_gt_Protoss_Missing_Shields1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Protoss_Missing_Shields1_Init () {
    lib9770F675_gt_Protoss_Missing_Shields1 = TriggerCreate("lib9770F675_gt_Protoss_Missing_Shields1_Func");
    TriggerAddEventUpgradeLevelChanged(lib9770F675_gt_Protoss_Missing_Shields1, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Protoss_Missing_Shields2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(1, "ProtossShieldsLevel3", c_techCountCompleteOnly) != 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel1", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "EredasShieldLevel2", 1);
    TriggerEnable(lib9770F675_gt_Protoss_Missing_Shields2, false);
    TriggerDestroy(lib9770F675_gt_Protoss_Missing_Shields2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Protoss_Missing_Shields2_Init () {
    lib9770F675_gt_Protoss_Missing_Shields2 = TriggerCreate("lib9770F675_gt_Protoss_Missing_Shields2_Func");
    TriggerAddEventUpgradeLevelChanged(lib9770F675_gt_Protoss_Missing_Shields2, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss_Missing_Shields 3
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Protoss_Missing_Shields3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(1, "ProtossShieldsLevel3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel1", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "EredasShieldLevel3", 1);
    TriggerEnable(lib9770F675_gt_Protoss_Missing_Shields3, false);
    TriggerDestroy(lib9770F675_gt_Protoss_Missing_Shields3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Protoss_Missing_Shields3_Init () {
    lib9770F675_gt_Protoss_Missing_Shields3 = TriggerCreate("lib9770F675_gt_Protoss_Missing_Shields3_Func");
    TriggerAddEventUpgradeLevelChanged(lib9770F675_gt_Protoss_Missing_Shields3, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlanetTextCrawlSound
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PlanetTextCrawlSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("UI_Nova_BriefingTextCallout_Open", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.03, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PlanetTextCrawlSound_Init () {
    lib9770F675_gt_PlanetTextCrawlSound = TriggerCreate("lib9770F675_gt_PlanetTextCrawlSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Commander All Power
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaGadgetFlashBangGrenades", 1);
    TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 9), true);
    TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 10), true);
    TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 11), true);
    TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 12), true);
    lib9770F675_gv_flashUpgrade = true;
    lib9770F675_gv_pulseUpgrade = true;
    lib9770F675_gv_hellfireUpgrade = true;
    lib9770F675_gv_lazarusUpgrade = true;
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel6", 1);
    UnitAbilityEnable(lib9770F675_gv_commanderER, "VoodooShield", true);
    UnitAbilityShow(lib9770F675_gv_commanderER, "VoodooShield", true);
    TriggerEnable(lib9770F675_gt_Grenade_Pickup11, true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel6", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TychusStun", 1);
    TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 13), true);
    TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 5), true);
    TechTreeUnitAllow(1, "Marauder", true);
    TechTreeUnitAllow(1, "VikingFighter", true);
    TechTreeUnitAllow(1, "Hellion", true);
    TechTreeUnitAllow(1, "Banshee", true);
    TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 12), true);
    TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 11), true);
    TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 14), true);
    TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 13), true);
    lib9770F675_gv_optionalRescueElite = true;
    lib9770F675_gv_optionalCommanderPlasma5 = true;
    lib9770F675_gv_optionalCommanderPlasma6 = true;
    lib9770F675_gv_optionalCommanderPlasma9 = true;
    lib9770F675_gv_optionalCommanderPlasma10 = true;
    lib9770F675_gv_optionalCommanderPlasma8 = true;
    lib9770F675_gv_optionalCommanderPlasma7 = true;
    lib9770F675_gv_optionalCommanderPlasma2 = true;
    lib9770F675_gv_optionalCommanderPlasma11 = true;
    lib9770F675_gv_optionalCommanderGrenade = true;
    UnitAbilityEnable(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", true);
    UnitAbilityShow(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaGadgetPulseGrenades", 1);
    lib9770F675_gv_optionalCommanderPlasma = true;
    UnitAbilityEnable(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", true);
    UnitAbilityShow(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaWeaponHellfireShotgun", 1);
    TriggerEnable(lib9770F675_gt_Commander_HellfireRestoreSCMR, true);
    lib9770F675_gv_optionalCommanderChrono = true;
    UnitAbilityEnable(lib9770F675_gv_commanderER, "TheMorosDevice", true);
    UnitAbilityShow(lib9770F675_gv_commanderER, "TheMorosDevice", true);
    lib9770F675_gv_optionalCommanderPlasma4 = true;
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaArmorJumpSuit", 1);
    UnitBehaviorAdd(lib9770F675_gv_commanderER, "NovaCliffJump", lib9770F675_gv_commanderER, 1);
    lib9770F675_gv_optionalCommanderPlasma3 = true;
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaHelmetRangefinderOculus", 1);
    UnitBehaviorAdd(lib9770F675_gv_commanderER, "Detector9", lib9770F675_gv_commanderER, 1);
    lib9770F675_gv_optionalCommanderStim = true;
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SuperStimpackNova", 1);
    UnitAbilityEnable(lib9770F675_gv_commanderER, "SuperStimpackNova", true);
    UnitAbilityShow(lib9770F675_gv_commanderER, "SuperStimpackNova", true);
    TechTreeUnitAllow(1, "Diamondback", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ExperimentalFlameThrower", 1);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start5_Init () {
    lib9770F675_gt_Map_Start5 = TriggerCreate("lib9770F675_gt_Map_Start5_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start5, 1, "command and conquer", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Commander Armor/Weapon Level Up
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    if ((lib9770F675_gv_palIrid_CheatLevel == 1) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel1", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel1", c_techCountCompleteOnly) != 1))) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel1", 1);
        lib9770F675_gv_grenade_find9 = 5;
        lib9770F675_gv_grenade_find8 = 5;
    }
    else {
        if ((lib9770F675_gv_palIrid_CheatLevel == 2) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel2", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel2", c_techCountCompleteOnly) != 1))) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel2", 1);
            lib9770F675_gv_grenade_find9 = 10;
            lib9770F675_gv_grenade_find8 = 10;
        }
        else {
            if ((lib9770F675_gv_palIrid_CheatLevel == 3) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel3", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel3", c_techCountCompleteOnly) != 1))) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel3", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel3", 1);
                lib9770F675_gv_grenade_find9 = 15;
                lib9770F675_gv_grenade_find8 = 15;
            }
            else {
                if ((lib9770F675_gv_palIrid_CheatLevel == 4) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel4", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel4", c_techCountCompleteOnly) != 1))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel4", 1);
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel4", 1);
                    lib9770F675_gv_grenade_find9 = 20;
                    lib9770F675_gv_grenade_find8 = 20;
                }
                else {
                    if ((lib9770F675_gv_palIrid_CheatLevel == 5) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel5", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel5", c_techCountCompleteOnly) != 1))) {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel5", 1);
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel5", 1);
                        lib9770F675_gv_grenade_find9 = 25;
                        lib9770F675_gv_grenade_find8 = 25;
                    }
                    else {
                        if ((lib9770F675_gv_palIrid_CheatLevel == 6) && ((TechTreeUpgradeCount(1, "PalladiumUpgradeLevel6", c_techCountCompleteOnly) != 1) || (TechTreeUpgradeCount(1, "IridiumUpgradeLevel6", c_techCountCompleteOnly) != 1))) {
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel6", 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel6", 1);
                            lib9770F675_gv_grenade_find9 = 30;
                            lib9770F675_gv_grenade_find8 = 30;
                            UnitAbilityEnable(lib9770F675_gv_commanderER, "VoodooShield", true);
                            UnitAbilityShow(lib9770F675_gv_commanderER, "VoodooShield", true);
                            TriggerEnable(lib9770F675_gt_Grenade_Pickup11, true);
                            libNtve_gf_SetUpgradeLevelForPlayer(1, "TychusStun", 1);
                        }

                    }
                }
            }
        }
    }
    lib9770F675_gv_palIrid_CheatLevel += 1;
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply2, true, false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start6_Init () {
    lib9770F675_gt_Map_Start6 = TriggerCreate("lib9770F675_gt_Map_Start6_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start6, 1, "all the glittering prizes", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Commander Pal +1
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_grenade_find9 < 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gf_ObjectivePalladiumUpdate();
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start17_Init () {
    lib9770F675_gt_Map_Start17 = TriggerCreate("lib9770F675_gt_Map_Start17_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start17, 1, "pal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Commander Irid +1
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_grenade_find8 < 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gf_ObjectiveIridiumUpdate();
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start18_Init () {
    lib9770F675_gt_Map_Start18 = TriggerCreate("lib9770F675_gt_Map_Start18_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start18, 1, "irid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Zeratul All Power
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto95E52A92_g;
    int auto95E52A92_u;
    unit auto95E52A92_var;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gv_zeratulLevelCurrent = 10;
    lib9770F675_gv_optionalRescueCommander3 = true;
    lib9770F675_gv_optionalRescueCommander5 = true;
    lib9770F675_gv_optionalRescueCommander4 = true;
    lib9770F675_gv_optionalRescueCommander6 = true;
    lib9770F675_gv_optionalRescueCommander7 = true;
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel1", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "KerriganEpilogueDamageAura", lib9770F675_gv_zeratulER, 1);
    Wait(0.1, c_timeReal);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel1", 1);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
    Wait(0.1, c_timeReal);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel1", 1);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulStun", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulStun", true);
    Wait(0.1, c_timeReal);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "Detector9", lib9770F675_gv_zeratulER, 1);
    Wait(0.1, c_timeReal);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel6", 1);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "Domination", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "Domination", true);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_plotCrystalRecovered == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7a", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7b", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
    }
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_plotCrystalRecovered == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel8a", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofAdun", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierence8b", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofNaraza", 1);
        UnitBehaviorAdd(lib9770F675_gv_zeratulER, "SoulAbsorption", lib9770F675_gv_zeratulER, 1);
    }
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_plotCrystalRecovered == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9a", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ShadowBlade", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "ShadowBlade", true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9b", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
    }
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_plotCrystalRecovered == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10a", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10b", 1);
    }
    Wait(0.1, c_timeReal);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel2", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "CloakDistortionField", lib9770F675_gv_zeratulER, 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel3", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "VorazunRegenShield", lib9770F675_gv_zeratulER, 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel3", 1);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimShieldBattery", 1);
    auto95E52A92_g = UnitGroup("ShieldBattery", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto95E52A92_u = UnitGroupCount(auto95E52A92_g, c_unitCountAll);
    for (;; auto95E52A92_u -= 1) {
        auto95E52A92_var = UnitGroupUnitFromEnd(auto95E52A92_g, auto95E52A92_u);
        if (auto95E52A92_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto95E52A92_var, "ShieldBatteryNerazim", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    TechTreeUnitAllow(1, "KhaydarinMonolith", true);
    TechTreeUnitAllow(1, "VoidRay", true);
    TechTreeUnitAllow(1, "Colossus", true);
    TechTreeUnitAllow(1, "Sentry", true);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start8_Init () {
    lib9770F675_gt_Map_Start8 = TriggerCreate("lib9770F675_gt_Map_Start8_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start8, 1, "negative sun", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Zeratul Expierence Level Up
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    if ((lib9770F675_gv_exp_CheatLevel == 1) && (lib9770F675_gv_zeratulLevelCurrent != 2)) {
        lib9770F675_gv_zeratulLevelCurrent = 2;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel1", 1);
        UnitBehaviorAdd(lib9770F675_gv_zeratulER, "KerriganEpilogueDamageAura", lib9770F675_gv_zeratulER, 1);
        TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
        Wait(0.1, c_timeReal);
        lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
    }
    else {
        if ((lib9770F675_gv_exp_CheatLevel == 2) && (lib9770F675_gv_zeratulLevelCurrent != 3)) {
            lib9770F675_gv_zeratulLevelCurrent = 3;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel1", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }
        else {
            if ((lib9770F675_gv_exp_CheatLevel == 3) && (lib9770F675_gv_zeratulLevelCurrent != 4)) {
                lib9770F675_gv_zeratulLevelCurrent = 4;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel4", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel1", 1);
                UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulStun", true);
                UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulStun", true);
                TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                Wait(0.1, c_timeReal);
                lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
            }
            else {
                if ((lib9770F675_gv_exp_CheatLevel == 4) && (lib9770F675_gv_zeratulLevelCurrent != 5)) {
                    lib9770F675_gv_zeratulLevelCurrent = 5;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel5", 1);
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 1);
                    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "Detector9", lib9770F675_gv_zeratulER, 1);
                    TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                    Wait(0.1, c_timeReal);
                    lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                }
                else {
                    if ((lib9770F675_gv_exp_CheatLevel == 5) && (lib9770F675_gv_zeratulLevelCurrent != 6)) {
                        lib9770F675_gv_zeratulLevelCurrent = 6;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel6", 1);
                        UnitAbilityEnable(lib9770F675_gv_zeratulER, "Domination", true);
                        UnitAbilityShow(lib9770F675_gv_zeratulER, "Domination", true);
                        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
                        UnitAbilityShow(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
                        TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                        Wait(0.1, c_timeReal);
                        lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                    }
                    else {
                        if ((lib9770F675_gv_exp_CheatLevel == 6) && (lib9770F675_gv_zeratulLevelCurrent != 7)) {
                            lib9770F675_gv_zeratulLevelCurrent = 7;
                            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7a", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel1", 1);
                                UnitAbilityEnable(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
                                UnitAbilityShow(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
                            }
                            else {
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7b", 1);
                                libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel1", 1);
                                UnitAbilityEnable(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
                                UnitAbilityShow(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
                            }
                            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                            Wait(0.1, c_timeReal);
                            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                        }
                        else {
                            if ((lib9770F675_gv_exp_CheatLevel == 7) && (lib9770F675_gv_zeratulLevelCurrent != 8)) {
                                lib9770F675_gv_zeratulLevelCurrent = 8;
                                if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel8a", 1);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofAdun", 1);
                                }
                                else {
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierence8b", 1);
                                    libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofNaraza", 1);
                                    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "SoulAbsorption", lib9770F675_gv_zeratulER, 1);
                                }
                                TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                                Wait(0.1, c_timeReal);
                                lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                            }
                            else {
                                if ((lib9770F675_gv_exp_CheatLevel == 8) && (lib9770F675_gv_zeratulLevelCurrent != 9)) {
                                    lib9770F675_gv_zeratulLevelCurrent = 9;
                                    if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                                        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9a", 1);
                                        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel1", 1);
                                        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ShadowBlade", true);
                                        UnitAbilityShow(lib9770F675_gv_zeratulER, "ShadowBlade", true);
                                    }
                                    else {
                                        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9b", 1);
                                        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel1", 1);
                                        UnitAbilityEnable(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
                                        UnitAbilityShow(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
                                    }
                                    TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                                    Wait(0.1, c_timeReal);
                                    lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                                }
                                else {
                                    if ((lib9770F675_gv_exp_CheatLevel == 9) && (lib9770F675_gv_zeratulLevelCurrent != 10)) {
                                        lib9770F675_gv_zeratulLevelCurrent = 10;
                                        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10a", 1);
                                        }
                                        else {
                                            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10b", 1);
                                        }
                                    }

                                    TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
                                    Wait(0.1, c_timeReal);
                                    lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    lib9770F675_gv_exp_CheatLevel += 1;
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start7_Init () {
    lib9770F675_gt_Map_Start7 = TriggerCreate("lib9770F675_gt_Map_Start7_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start7, 1, "wax on", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Zeratul Expierence Bonus
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_expCurrentLevelTotal < 1521))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gv_expCurrentLevelTotal += 20;
    lib9770F675_gv_expFound += 20;
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_946555FB"), 20, UnitGetPosition(lib9770F675_gv_zeratulER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply3, false, false);
    TriggerExecute(lib9770F675_gt_ZeratulLevelUpSCMR, false, false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus_Init () {
    lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus = TriggerCreate("lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus, 1, "exp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Zeratul Artifact Bonus
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_artifactCurrentLevelTotal < 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gf_ObjectiveArtifactUpdateSCMR();
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start12_Init () {
    lib9770F675_gt_Map_Start12 = TriggerCreate("lib9770F675_gt_Map_Start12_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start12, 1, "hidden idol", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Kerrigan All Power
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA5D70569_g;
    int autoA5D70569_u;
    unit autoA5D70569_var;
    unitgroup autoE2A01E9A_g;
    int autoE2A01E9A_u;
    unit autoE2A01E9A_var;
    unitgroup auto1217923D_g;
    int auto1217923D_u;
    unit auto1217923D_var;
    unitgroup auto3816242D_g;
    int auto3816242D_u;
    unit auto3816242D_var;
    unitgroup auto13C04434_g;
    int auto13C04434_u;
    unit auto13C04434_var;
    unitgroup auto44ADA7B1_g;
    int auto44ADA7B1_u;
    unit auto44ADA7B1_var;
    unitgroup auto92E7CEAD_g;
    int auto92E7CEAD_u;
    unit auto92E7CEAD_var;
    unitgroup autoC7B41150_g;
    int autoC7B41150_u;
    unit autoC7B41150_var;
    unitgroup autoAC7DB77A_g;
    int autoAC7DB77A_u;
    unit autoAC7DB77A_var;
    unitgroup auto1EE68AA8_g;
    int auto1EE68AA8_u;
    unit auto1EE68AA8_var;
    unitgroup autoA90DC468_g;
    int autoA90DC468_u;
    unit autoA90DC468_var;
    unitgroup auto89FF0852_g;
    int auto89FF0852_u;
    unit auto89FF0852_var;
    unitgroup autoC29D51FC_g;
    int autoC29D51FC_u;
    unit autoC29D51FC_var;
    unitgroup auto592CDB85_g;
    int auto592CDB85_u;
    unit auto592CDB85_var;
    unitgroup auto84BE83C2_g;
    int auto84BE83C2_u;
    unit auto84BE83C2_var;
    unitgroup autoC6F83342_g;
    int autoC6F83342_u;
    unit autoC6F83342_var;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel4", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel5", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5PrimalSlash", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Mend", 1);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "Implosion", true);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "Implosion", true);
    if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CrushingGrip", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "PsionicLift", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "PsionicLift", true);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Leviathan", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5Leviathan", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5Leviathan", true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5WildMutation", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "WildMutation", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "WildMutation", true);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5DropPods", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5DropPods", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5DropPods", true);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Apocalypse", 1);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "Apocalypse", true);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "Apocalypse", true);
    lib9770F675_gv_kerriganDEFLevelCurrent = 5;
    lib9770F675_gv_kerriganSTRLevelCurrent = 5;
    lib9770F675_gv_kerriganPSILevelCurrent = 5;
    Wait(0.1, c_timeGame);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropEnergyPercent, 100.0);
    lib9770F675_gv_DropTimer_Increment6 = false;
    lib9770F675_gv_DropTimer_Increment5 = false;
    lib9770F675_gv_DropTimer_Increment3 = false;
    if ((lib9770F675_gv_optionalBaneling == true)) {
        TechTreeUnitAllow(1, "BanelingNest", true);
    }
    else {
        TechTreeUnitAllow(1, "BanelingNest", false);
        autoA5D70569_g = UnitGroup("Baneling", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA5D70569_u = UnitGroupCount(autoA5D70569_g, c_unitCountAll);
        for (;; autoA5D70569_u -= 1) {
            autoA5D70569_var = UnitGroupUnitFromEnd(autoA5D70569_g, autoA5D70569_u);
            if (autoA5D70569_var == null) { break; }
            UnitRemove(autoA5D70569_var);
        }
        autoE2A01E9A_g = UnitGroup("BanelingNest", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE2A01E9A_u = UnitGroupCount(autoE2A01E9A_g, c_unitCountAll);
        for (;; autoE2A01E9A_u -= 1) {
            autoE2A01E9A_var = UnitGroupUnitFromEnd(autoE2A01E9A_g, autoE2A01E9A_u);
            if (autoE2A01E9A_var == null) { break; }
            UnitRemove(autoE2A01E9A_var);
        }
    }
    if ((lib9770F675_gv_optionalStewartBonus == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "StewartBonus", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "StewartBonus", 0);
    }
    if ((lib9770F675_gv_optionalInfestedMarine == true)) {
        TriggerEnable(lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR, false);
    }
    else {
        if ((lib9770F675_gv_optionalInfestedBomb == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestedTerranBomber", 1);
        }
        else {
            TechTreeAbilityAllow(1, AbilityCommand("InfestedTerrans", 0), false);
        }
    }
    if ((lib9770F675_gv_optionalAberration == true)) {
        TechTreeUnitAllow(1, "InfestedAbomination", true);
        TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), true);
        TechTreeUnitAllow(1, "Brutalisk", false);
        TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
        auto44ADA7B1_g = UnitGroup("Brutalisk", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto44ADA7B1_u = UnitGroupCount(auto44ADA7B1_g, c_unitCountAll);
        for (;; auto44ADA7B1_u -= 1) {
            auto44ADA7B1_var = UnitGroupUnitFromEnd(auto44ADA7B1_g, auto44ADA7B1_u);
            if (auto44ADA7B1_var == null) { break; }
            UnitRemove(auto44ADA7B1_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalBrutalisk == true)) {
            TechTreeUnitAllow(1, "Brutalisk", true);
            TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), true);
            TechTreeUnitAllow(1, "InfestedAbomination", false);
            TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), false);
            auto1217923D_g = UnitGroup("InfestedAbomination", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1217923D_u = UnitGroupCount(auto1217923D_g, c_unitCountAll);
            for (;; auto1217923D_u -= 1) {
                auto1217923D_var = UnitGroupUnitFromEnd(auto1217923D_g, auto1217923D_u);
                if (auto1217923D_var == null) { break; }
                UnitRemove(auto1217923D_var);
            }
        }
        else {
            TechTreeUnitAllow(1, "Brutalisk", false);
            TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
            TechTreeUnitAllow(1, "InfestedAbomination", false);
            TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), false);
            auto3816242D_g = UnitGroup("Brutalisk", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3816242D_u = UnitGroupCount(auto3816242D_g, c_unitCountAll);
            for (;; auto3816242D_u -= 1) {
                auto3816242D_var = UnitGroupUnitFromEnd(auto3816242D_g, auto3816242D_u);
                if (auto3816242D_var == null) { break; }
                UnitRemove(auto3816242D_var);
            }
            auto13C04434_g = UnitGroup("InfestedAbomination", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto13C04434_u = UnitGroupCount(auto13C04434_g, c_unitCountAll);
            for (;; auto13C04434_u -= 1) {
                auto13C04434_var = UnitGroupUnitFromEnd(auto13C04434_g, auto13C04434_u);
                if (auto13C04434_var == null) { break; }
                UnitRemove(auto13C04434_var);
            }
        }
    }
    if ((lib9770F675_gv_optionalRavager == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), true);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), false);
        TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), false);
        auto592CDB85_g = UnitGroup("ImpalerDen", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto592CDB85_u = UnitGroupCount(auto592CDB85_g, c_unitCountAll);
        for (;; auto592CDB85_u -= 1) {
            auto592CDB85_var = UnitGroupUnitFromEnd(auto592CDB85_g, auto592CDB85_u);
            if (auto592CDB85_var == null) { break; }
            UnitRemove(auto592CDB85_var);
        }
        auto84BE83C2_g = UnitGroup("Impaler", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto84BE83C2_u = UnitGroupCount(auto84BE83C2_g, c_unitCountAll);
        for (;; auto84BE83C2_u -= 1) {
            auto84BE83C2_var = UnitGroupUnitFromEnd(auto84BE83C2_g, auto84BE83C2_u);
            if (auto84BE83C2_var == null) { break; }
            UnitRemove(auto84BE83C2_var);
        }
        autoC6F83342_g = UnitGroup("ImpalerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoC6F83342_u = UnitGroupCount(autoC6F83342_g, c_unitCountAll);
        for (;; autoC6F83342_u -= 1) {
            autoC6F83342_var = UnitGroupUnitFromEnd(autoC6F83342_g, autoC6F83342_u);
            if (autoC6F83342_var == null) { break; }
            UnitRemove(autoC6F83342_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalImpaler == true)) {
            TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), true);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), true);
            TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), true);
            auto89FF0852_g = UnitGroup("Ravager", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto89FF0852_u = UnitGroupCount(auto89FF0852_g, c_unitCountAll);
            for (;; auto89FF0852_u -= 1) {
                auto89FF0852_var = UnitGroupUnitFromEnd(auto89FF0852_g, auto89FF0852_u);
                if (auto89FF0852_var == null) { break; }
                UnitRemove(auto89FF0852_var);
            }
            autoC29D51FC_g = UnitGroup("RavagerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoC29D51FC_u = UnitGroupCount(autoC29D51FC_g, c_unitCountAll);
            for (;; autoC29D51FC_u -= 1) {
                autoC29D51FC_var = UnitGroupUnitFromEnd(autoC29D51FC_g, autoC29D51FC_u);
                if (autoC29D51FC_var == null) { break; }
                UnitRemove(autoC29D51FC_var);
            }
        }
        else {
            TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), false);
            TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), false);
            auto92E7CEAD_g = UnitGroup("ImpalerDen", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto92E7CEAD_u = UnitGroupCount(auto92E7CEAD_g, c_unitCountAll);
            for (;; auto92E7CEAD_u -= 1) {
                auto92E7CEAD_var = UnitGroupUnitFromEnd(auto92E7CEAD_g, auto92E7CEAD_u);
                if (auto92E7CEAD_var == null) { break; }
                UnitRemove(auto92E7CEAD_var);
            }
            autoC7B41150_g = UnitGroup("Impaler", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoC7B41150_u = UnitGroupCount(autoC7B41150_g, c_unitCountAll);
            for (;; autoC7B41150_u -= 1) {
                autoC7B41150_var = UnitGroupUnitFromEnd(autoC7B41150_g, autoC7B41150_u);
                if (autoC7B41150_var == null) { break; }
                UnitRemove(autoC7B41150_var);
            }
            autoAC7DB77A_g = UnitGroup("ImpalerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoAC7DB77A_u = UnitGroupCount(autoAC7DB77A_g, c_unitCountAll);
            for (;; autoAC7DB77A_u -= 1) {
                autoAC7DB77A_var = UnitGroupUnitFromEnd(autoAC7DB77A_g, autoAC7DB77A_u);
                if (autoAC7DB77A_var == null) { break; }
                UnitRemove(autoAC7DB77A_var);
            }
            auto1EE68AA8_g = UnitGroup("Ravager", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto1EE68AA8_u = UnitGroupCount(auto1EE68AA8_g, c_unitCountAll);
            for (;; auto1EE68AA8_u -= 1) {
                auto1EE68AA8_var = UnitGroupUnitFromEnd(auto1EE68AA8_g, auto1EE68AA8_u);
                if (auto1EE68AA8_var == null) { break; }
                UnitRemove(auto1EE68AA8_var);
            }
            autoA90DC468_g = UnitGroup("RavagerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoA90DC468_u = UnitGroupCount(autoA90DC468_g, c_unitCountAll);
            for (;; autoA90DC468_u -= 1) {
                autoA90DC468_var = UnitGroupUnitFromEnd(autoA90DC468_g, autoA90DC468_u);
                if (autoA90DC468_var == null) { break; }
                UnitRemove(autoA90DC468_var);
            }
        }
    }
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start10_Init () {
    lib9770F675_gt_Map_Start10 = TriggerCreate("lib9770F675_gt_Map_Start10_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start10, 1, "queen bitch", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Kerrigan Biomass Level Up
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 0)) {
        lib9770F675_gv_kerriganSTRLevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganSTRLevelCurrent == 1)) {
            lib9770F675_gv_kerriganSTRLevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel2", 1);
        }
        else {
            if ((lib9770F675_gv_kerriganSTRLevelCurrent == 2)) {
                lib9770F675_gv_kerriganSTRLevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel3", 1);
            }
            else {
                if ((lib9770F675_gv_kerriganSTRLevelCurrent == 3)) {
                    lib9770F675_gv_kerriganSTRLevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel4", 1);
                }
                else {
                    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 4)) {
                        lib9770F675_gv_kerriganSTRLevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel5", 1);
                    }

                }
            }
        }
    }
    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 0)) {
        lib9770F675_gv_kerriganDEFLevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganDEFLevelCurrent == 1)) {
            lib9770F675_gv_kerriganDEFLevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel2", 1);
        }
        else {
            if ((lib9770F675_gv_kerriganDEFLevelCurrent == 2)) {
                lib9770F675_gv_kerriganDEFLevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel3", 1);
            }
            else {
                if ((lib9770F675_gv_kerriganDEFLevelCurrent == 3)) {
                    lib9770F675_gv_kerriganDEFLevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel4", 1);
                }
                else {
                    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 4)) {
                        lib9770F675_gv_kerriganDEFLevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel5", 1);
                    }

                }
            }
        }
    }
    if ((lib9770F675_gv_kerriganPSILevelCurrent == 0)) {
        lib9770F675_gv_kerriganPSILevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 1)) {
            lib9770F675_gv_kerriganPSILevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel2", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "Implosion", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "Implosion", true);
        }
        else {
            if ((lib9770F675_gv_kerriganPSILevelCurrent == 2)) {
                lib9770F675_gv_kerriganPSILevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel3", 1);
                if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CrushingGrip", 1);
                    UnitAbilityEnable(lib9770F675_gv_kerriganER, "PsionicLift", true);
                    UnitAbilityShow(lib9770F675_gv_kerriganER, "PsionicLift", true);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5WildMutation", 1);
                    UnitAbilityEnable(lib9770F675_gv_kerriganER, "WildMutation", true);
                    UnitAbilityShow(lib9770F675_gv_kerriganER, "WildMutation", true);
                }
            }
            else {
                if ((lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
                    lib9770F675_gv_kerriganPSILevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel4", 1);
                    if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Leviathan", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5Leviathan", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5Leviathan", true);
                    }
                    else {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5DropPods", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5DropPods", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5DropPods", true);
                    }
                }
                else {
                    if ((lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
                        lib9770F675_gv_kerriganPSILevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel5", 1);
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Apocalypse", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "Apocalypse", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "Apocalypse", true);
                    }

                }
            }
        }
    }
    Wait(0.1, c_timeGame);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropEnergyPercent, 100.0);
    lib9770F675_gv_DropTimer_Increment6 = false;
    lib9770F675_gv_DropTimer_Increment5 = false;
    lib9770F675_gv_DropTimer_Increment3 = false;
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply5, false, false);
    SoundPlay(SoundLink("KerriganLevelUpSound", 0), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "LevelUpEffect", lib9770F675_gv_kerriganER);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, true);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, true);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start9_Init () {
    lib9770F675_gt_Map_Start9 = TriggerCreate("lib9770F675_gt_Map_Start9_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start9, 1, "evolution complete", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Kerrigan Psi Bonus
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_psiRemaining != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    lib9770F675_gf_ObjectivePsiUpdateSCMR();
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start13_Init () {
    lib9770F675_gt_Map_Start13 = TriggerCreate("lib9770F675_gt_Map_Start13_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_Map_Start13, 1, "psi", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR-ER Cheat - Kerrigan Biomass Bonus
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_SCMRERCheatKerriganBiomassBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_biomassCurrentLevelTotal <= (lib9770F675_gv_biomassCap + 5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_biomassCurrentLevelTotal += 20;
    lib9770F675_gv_biomassFound += 20;
    Wait(0.01, c_timeGame);
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply, false, false);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_1FEFB923"), 22, UnitGetPosition(lib9770F675_gv_kerriganER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    Wait(4.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_SCMRERCheatKerriganBiomassBonus_Init () {
    lib9770F675_gt_SCMRERCheatKerriganBiomassBonus = TriggerCreate("lib9770F675_gt_SCMRERCheatKerriganBiomassBonus_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, 1, "bio", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Powers SCMR (Run at Start)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF0A1B17F_g;
    int autoF0A1B17F_u;
    unit autoF0A1B17F_var;
    unitgroup auto77B4E713_g;
    int auto77B4E713_u;
    unit auto77B4E713_var;
    unitgroup auto2D354154_g;
    int auto2D354154_u;
    unit auto2D354154_var;
    unitgroup auto27D26342_g;
    int auto27D26342_u;
    unit auto27D26342_var;
    unitgroup auto2103D7F5_g;
    int auto2103D7F5_u;
    unit auto2103D7F5_var;
    unitgroup autoEA468B2B_g;
    int autoEA468B2B_u;
    unit autoEA468B2B_var;
    unitgroup auto4F2A9031_g;
    int auto4F2A9031_u;
    unit auto4F2A9031_var;
    unitgroup autoA20398C0_g;
    int autoA20398C0_u;
    unit autoA20398C0_var;
    unitgroup autoCA30F00E_g;
    int autoCA30F00E_u;
    unit autoCA30F00E_var;
    unitgroup autoA002DACD_g;
    int autoA002DACD_u;
    unit autoA002DACD_var;
    unitgroup autoFB709FDD_g;
    int autoFB709FDD_u;
    unit autoFB709FDD_var;
    unitgroup auto5C646370_g;
    int auto5C646370_u;
    unit auto5C646370_var;
    unitgroup autoAF7D064D_g;
    int autoAF7D064D_u;
    unit autoAF7D064D_var;
    unitgroup autoBE3066BA_g;
    int autoBE3066BA_u;
    unit autoBE3066BA_var;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaGadgetFlashBangGrenades", 1);
    if ((lib9770F675_gv_grenade_find4 >= 3) && (lib9770F675_gv_grenade_find5 >= 3)) {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 9), true);
        lib9770F675_gv_flashUpgrade = true;
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 9), false);
    }
    if ((lib9770F675_gv_grenade_find4 >= 8) && (lib9770F675_gv_grenade_find5 >= 10) && (lib9770F675_gv_optionalCommanderGrenade == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 10), true);
        lib9770F675_gv_pulseUpgrade = true;
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 10), false);
    }
    if ((lib9770F675_gv_grenade_find4 >= 15) && (lib9770F675_gv_grenade_find5 >= 14) && (lib9770F675_gv_optionalCommanderPlasma == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 11), true);
        lib9770F675_gv_hellfireUpgrade = true;
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 11), false);
    }
    if ((lib9770F675_gv_grenade_find4 >= 21) && (lib9770F675_gv_grenade_find5 >= 22)) {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 12), true);
        lib9770F675_gv_lazarusUpgrade = true;
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("EngineeringBayResearch", 12), false);
    }
    if ((lib9770F675_gv_grenade_find4 >= 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel1", 1);
    }

    if ((lib9770F675_gv_grenade_find4 >= 10)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel2", 1);
    }

    if ((lib9770F675_gv_grenade_find4 >= 15)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel3", 1);
    }

    if ((lib9770F675_gv_grenade_find4 >= 20)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel4", 1);
    }

    if ((lib9770F675_gv_grenade_find4 >= 25)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel5", 1);
    }

    if ((lib9770F675_gv_grenade_find4 >= 30)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "PalladiumUpgradeLevel6", 1);
        UnitAbilityEnable(lib9770F675_gv_commanderER, "VoodooShield", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "VoodooShield", true);
        TriggerEnable(lib9770F675_gt_Grenade_Pickup11, true);
    }
    else {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "VoodooShield", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "VoodooShield", false);
    }
    if ((lib9770F675_gv_grenade_find5 >= 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel1", 1);
    }

    if ((lib9770F675_gv_grenade_find5 >= 10)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel2", 1);
    }

    if ((lib9770F675_gv_grenade_find5 >= 15)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel3", 1);
    }

    if ((lib9770F675_gv_grenade_find5 >= 20)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel4", 1);
    }

    if ((lib9770F675_gv_grenade_find5 >= 25)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel5", 1);
    }

    if ((lib9770F675_gv_grenade_find5 >= 30)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "IridiumUpgradeLevel6", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "TychusStun", 1);
    }

    if ((lib9770F675_gv_optionalCommanderPlasma6 == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 5), true);
        auto2103D7F5_g = UnitGroup("PerditionTurret", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2103D7F5_u = UnitGroupCount(auto2103D7F5_g, c_unitCountAll);
        for (;; auto2103D7F5_u -= 1) {
            auto2103D7F5_var = UnitGroupUnitFromEnd(auto2103D7F5_g, auto2103D7F5_u);
            if (auto2103D7F5_var == null) { break; }
            UnitRemove(auto2103D7F5_var);
        }
        autoEA468B2B_g = UnitGroup("PerditionTurretUnderground", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoEA468B2B_u = UnitGroupCount(autoEA468B2B_g, c_unitCountAll);
        for (;; autoEA468B2B_u -= 1) {
            autoEA468B2B_var = UnitGroupUnitFromEnd(autoEA468B2B_g, autoEA468B2B_u);
            if (autoEA468B2B_var == null) { break; }
            UnitRemove(autoEA468B2B_var);
        }
        TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 13), false);
    }
    else {
        if ((lib9770F675_gv_optionalCommanderPlasma5 == true)) {
            TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 13), true);
            auto27D26342_g = UnitGroup("Predator", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto27D26342_u = UnitGroupCount(auto27D26342_g, c_unitCountAll);
            for (;; auto27D26342_u -= 1) {
                auto27D26342_var = UnitGroupUnitFromEnd(auto27D26342_g, auto27D26342_u);
                if (auto27D26342_var == null) { break; }
                UnitRemove(auto27D26342_var);
            }
            TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 5), false);
        }
        else {
            autoF0A1B17F_g = UnitGroup("Predator", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF0A1B17F_u = UnitGroupCount(autoF0A1B17F_g, c_unitCountAll);
            for (;; autoF0A1B17F_u -= 1) {
                autoF0A1B17F_var = UnitGroupUnitFromEnd(autoF0A1B17F_g, autoF0A1B17F_u);
                if (autoF0A1B17F_var == null) { break; }
                UnitRemove(autoF0A1B17F_var);
            }
            auto77B4E713_g = UnitGroup("PerditionTurret", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto77B4E713_u = UnitGroupCount(auto77B4E713_g, c_unitCountAll);
            for (;; auto77B4E713_u -= 1) {
                auto77B4E713_var = UnitGroupUnitFromEnd(auto77B4E713_g, auto77B4E713_u);
                if (auto77B4E713_var == null) { break; }
                UnitRemove(auto77B4E713_var);
            }
            auto2D354154_g = UnitGroup("PerditionTurretUnderground", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto2D354154_u = UnitGroupCount(auto2D354154_g, c_unitCountAll);
            for (;; auto2D354154_u -= 1) {
                auto2D354154_var = UnitGroupUnitFromEnd(auto2D354154_g, auto2D354154_u);
                if (auto2D354154_var == null) { break; }
                UnitRemove(auto2D354154_var);
            }
            TechTreeAbilityAllow(1, AbilityCommand("FactoryTrain", 5), false);
            TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 13), false);
        }
    }
    if ((lib9770F675_gv_optionalCommanderPlasma9 == true)) {
        TechTreeUnitAllow(1, "Marauder", true);
        autoA002DACD_g = UnitGroup("VikingFighter", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA002DACD_u = UnitGroupCount(autoA002DACD_g, c_unitCountAll);
        for (;; autoA002DACD_u -= 1) {
            autoA002DACD_var = UnitGroupUnitFromEnd(autoA002DACD_g, autoA002DACD_u);
            if (autoA002DACD_var == null) { break; }
            UnitRemove(autoA002DACD_var);
        }
        TechTreeUnitAllow(1, "VikingFighter", false);
    }
    else {
        if ((lib9770F675_gv_optionalCommanderPlasma10 == true)) {
            TechTreeUnitAllow(1, "Marauder", false);
            autoCA30F00E_g = UnitGroup("Marauder", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCA30F00E_u = UnitGroupCount(autoCA30F00E_g, c_unitCountAll);
            for (;; autoCA30F00E_u -= 1) {
                autoCA30F00E_var = UnitGroupUnitFromEnd(autoCA30F00E_g, autoCA30F00E_u);
                if (autoCA30F00E_var == null) { break; }
                UnitRemove(autoCA30F00E_var);
            }
            TechTreeUnitAllow(1, "VikingFighter", true);
        }
        else {
            TechTreeUnitAllow(1, "Marauder", false);
            TechTreeUnitAllow(1, "VikingFighter", false);
            auto4F2A9031_g = UnitGroup("VikingFighter", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4F2A9031_u = UnitGroupCount(auto4F2A9031_g, c_unitCountAll);
            for (;; auto4F2A9031_u -= 1) {
                auto4F2A9031_var = UnitGroupUnitFromEnd(auto4F2A9031_g, auto4F2A9031_u);
                if (auto4F2A9031_var == null) { break; }
                UnitRemove(auto4F2A9031_var);
            }
            autoA20398C0_g = UnitGroup("Marauder", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA20398C0_u = UnitGroupCount(autoA20398C0_g, c_unitCountAll);
            for (;; autoA20398C0_u -= 1) {
                autoA20398C0_var = UnitGroupUnitFromEnd(autoA20398C0_g, autoA20398C0_u);
                if (autoA20398C0_var == null) { break; }
                UnitRemove(autoA20398C0_var);
            }
        }
    }
    if ((lib9770F675_gv_optionalCommanderPlasma7 == true)) {
        TechTreeUnitAllow(1, "Banshee", true);
        autoBE3066BA_g = UnitGroup("Hellion", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBE3066BA_u = UnitGroupCount(autoBE3066BA_g, c_unitCountAll);
        for (;; autoBE3066BA_u -= 1) {
            autoBE3066BA_var = UnitGroupUnitFromEnd(autoBE3066BA_g, autoBE3066BA_u);
            if (autoBE3066BA_var == null) { break; }
            UnitRemove(autoBE3066BA_var);
        }
        TechTreeUnitAllow(1, "Hellion", false);
        TechTreeUpgradeAllow(1, "HighCapacityBarrels", false);
    }
    else {
        if ((lib9770F675_gv_optionalCommanderPlasma8 == true)) {
            TechTreeUnitAllow(1, "Banshee", false);
            autoAF7D064D_g = UnitGroup("Banshee", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoAF7D064D_u = UnitGroupCount(autoAF7D064D_g, c_unitCountAll);
            for (;; autoAF7D064D_u -= 1) {
                autoAF7D064D_var = UnitGroupUnitFromEnd(autoAF7D064D_g, autoAF7D064D_u);
                if (autoAF7D064D_var == null) { break; }
                UnitRemove(autoAF7D064D_var);
            }
            TechTreeUnitAllow(1, "Hellion", true);
        }
        else {
            autoFB709FDD_g = UnitGroup("Banshee", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFB709FDD_u = UnitGroupCount(autoFB709FDD_g, c_unitCountAll);
            for (;; autoFB709FDD_u -= 1) {
                autoFB709FDD_var = UnitGroupUnitFromEnd(autoFB709FDD_g, autoFB709FDD_u);
                if (autoFB709FDD_var == null) { break; }
                UnitRemove(autoFB709FDD_var);
            }
            auto5C646370_g = UnitGroup("Hellion", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5C646370_u = UnitGroupCount(auto5C646370_g, c_unitCountAll);
            for (;; auto5C646370_u -= 1) {
                auto5C646370_var = UnitGroupUnitFromEnd(auto5C646370_g, auto5C646370_u);
                if (auto5C646370_var == null) { break; }
                UnitRemove(auto5C646370_var);
            }
            TechTreeUnitAllow(1, "Banshee", false);
            TechTreeUnitAllow(1, "Hellion", false);
            TechTreeUpgradeAllow(1, "HighCapacityBarrels", false);
        }
    }
    if ((lib9770F675_gv_optionalRescueElite == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 12), true);
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 11), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 12), false);
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 11), false);
    }
    if ((lib9770F675_gv_optionalCommanderPlasma2 == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 13), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 13), false);
    }
    if ((lib9770F675_gv_optionalCommanderPlasma11 == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 14), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("SummonKorhalMercenaries", 14), false);
    }
    if ((lib9770F675_gv_optionalCommanderGrenade == true)) {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", true);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaGadgetPulseGrenades", 1);
    }
    else {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "NovaGadgetPulseGrenades", false);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaGadgetPulseGrenades", 0);
    }
    if ((lib9770F675_gv_optionalCommanderPlasma == true)) {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", true);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaWeaponHellfireShotgun", 1);
        TriggerEnable(lib9770F675_gt_Commander_HellfireRestoreSCMR, true);
    }
    else {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "ExperimentalPlasmaGun", false);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaWeaponHellfireShotgun", 0);
    }
    if ((lib9770F675_gv_optionalCommanderPlasma4 == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaArmorJumpSuit", 1);
        UnitBehaviorAdd(lib9770F675_gv_commanderER, "NovaCliffJump", lib9770F675_gv_commanderER, 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaArmorJumpSuit", 0);
    }
    if ((lib9770F675_gv_optionalCommanderChrono == true)) {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "TheMorosDevice", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "TheMorosDevice", true);
    }
    else {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "TheMorosDevice", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "TheMorosDevice", false);
    }
    if ((lib9770F675_gv_optionalCommanderPlasma3 == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaHelmetRangefinderOculus", 1);
        UnitBehaviorAdd(lib9770F675_gv_commanderER, "Detector9", lib9770F675_gv_commanderER, 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaHelmetRangefinderOculus", 0);
    }
    if ((lib9770F675_gv_optionalCommanderStim == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SuperStimpackNova", 1);
        UnitAbilityEnable(lib9770F675_gv_commanderER, "SuperStimpackNova", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "SuperStimpackNova", true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SuperStimpackNova", 0);
        UnitAbilityEnable(lib9770F675_gv_commanderER, "SuperStimpackNova", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "SuperStimpackNova", false);
    }
    if ((lib9770F675_gv_plotCerebrateDead == true)) {
        TechTreeUnitAllow(1, "Diamondback", true);
    }
    else {
        TechTreeUnitAllow(1, "Diamondback", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start4_Init () {
    lib9770F675_gt_Map_Start4 = TriggerCreate("lib9770F675_gt_Map_Start4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Lazarus SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "MercCompound") || (UnitGetType(EventUnit()) == "MercCompound")))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "LazarusProtocol2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lib9770F675_gv_commanderER, "HeroDeathPrevention", lib9770F675_gv_commanderER, 1);
    TriggerEnable(lib9770F675_gt_Grenade_Pickup10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup9_Init () {
    lib9770F675_gt_Grenade_Pickup9 = TriggerCreate("lib9770F675_gt_Grenade_Pickup9_Func");
    TriggerAddEventUnitResearchProgress(lib9770F675_gt_Grenade_Pickup9, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Lazarus_Use SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lib9770F675_gv_commanderER, "HeroDeathPrevention", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "LazarusCooldown", 1);
    Wait(120.0, c_timeGame);
    UnitBehaviorAdd(lib9770F675_gv_commanderER, "HeroDeathPrevention", lib9770F675_gv_commanderER, 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "LazarusCooldown", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup10_Init () {
    lib9770F675_gt_Grenade_Pickup10 = TriggerCreate("lib9770F675_gt_Grenade_Pickup10_Func");
    TriggerEnable(lib9770F675_gt_Grenade_Pickup10, false);
    TriggerAddEventUnitBehaviorChange(lib9770F675_gt_Grenade_Pickup10, UnitRefFromVariable("lib9770F675_gv_commanderER"), "IncapStandUp", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Lazarus_Effect_Start SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lib9770F675_gv_commanderER, "SOARepairBeam", lib9770F675_gv_commanderER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup13_Init () {
    lib9770F675_gt_Grenade_Pickup13 = TriggerCreate("lib9770F675_gt_Grenade_Pickup13_Func");
    TriggerAddEventUnitBehaviorChange(lib9770F675_gt_Grenade_Pickup13, UnitRefFromVariable("lib9770F675_gv_commanderER"), "Incapacitated", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Shield SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "MercCompound") || (UnitGetType(EventUnit()) == "MercCompound")))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "CommanderCombatShield"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(lib9770F675_gv_commanderER), "AnimClear Cover");
    UnitBehaviorAdd(lib9770F675_gv_commanderER, "FenixHardenedShield", lib9770F675_gv_commanderER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup15_Init () {
    lib9770F675_gt_Grenade_Pickup15 = TriggerCreate("lib9770F675_gt_Grenade_Pickup15_Func");
    TriggerAddEventUnitResearchProgress(lib9770F675_gt_Grenade_Pickup15, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Hellfire SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "MercCompound") || (UnitGetType(EventUnit()) == "MercCompound")))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "HellfireBlastUpgrade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib9770F675_gv_hellfire_count = 7;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup18_Init () {
    lib9770F675_gt_Grenade_Pickup18 = TriggerCreate("lib9770F675_gt_Grenade_Pickup18_Func");
    TriggerAddEventUnitResearchProgress(lib9770F675_gt_Grenade_Pickup18, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Turrets SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "MercCompound") || (UnitGetType(EventUnit()) == "MercCompound")))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "HiSecAutoTracking"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "HailstormMissilePods", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup14_Init () {
    lib9770F675_gt_Grenade_Pickup14 = TriggerCreate("lib9770F675_gt_Grenade_Pickup14_Func");
    TriggerAddEventUnitResearchProgress(lib9770F675_gt_Grenade_Pickup14, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_Kinetic SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib9770F675_gv_commanderER != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Zergling") || (UnitGetType(EventUnitDamageSourceUnit()) == "Ultralisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "Omegalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSTorrasque") || (UnitGetType(EventUnitDamageSourceUnit()) == "Drone") || (UnitGetType(EventUnitDamageSourceUnit()) == "Zealot") || (UnitGetType(EventUnitDamageSourceUnit()) == "SCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("Uni_ElectricalArcs", 4), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib9770F675_gv_commanderER), 0.0, 100.0, 0.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, -50.0);
    Wait(10.0, c_timeGame);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup11_Init () {
    lib9770F675_gt_Grenade_Pickup11 = TriggerCreate("lib9770F675_gt_Grenade_Pickup11_Func");
    TriggerEnable(lib9770F675_gt_Grenade_Pickup11, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_Grenade_Pickup11, UnitRefFromVariable("lib9770F675_gv_commanderER"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander_HellfireRestore SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Commander_HellfireRestoreSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitAbilityChargeInfo(lib9770F675_gv_commanderER, AbilityCommand("ExperimentalPlasmaGun", 0), c_unitAbilChargeCountLeft) < 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lib9770F675_gv_commanderER, "RaynorPlasmaGun", -1.0);
    SoundPlayAtPointForPlayer(SoundLink("UI_NovaUT_EquipClick", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib9770F675_gv_commanderER), 0.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_29CF05AA"), 22, UnitGetPosition(lib9770F675_gv_commanderER), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Commander_HellfireRestoreSCMR_Init () {
    lib9770F675_gt_Commander_HellfireRestoreSCMR = TriggerCreate("lib9770F675_gt_Commander_HellfireRestoreSCMR_Func");
    TriggerEnable(lib9770F675_gt_Commander_HellfireRestoreSCMR, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_Commander_HellfireRestoreSCMR, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Testing Trigger
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_TestingTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lib9770F675_gv_sCMRCore.lv_deCheatEnabled);
    if ((lib9770F675_gv_optionalCommanderChrono == true)) {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "TheMorosDevice", true);
        UnitAbilityShow(lib9770F675_gv_commanderER, "TheMorosDevice", true);
    }
    else {
        UnitAbilityEnable(lib9770F675_gv_commanderER, "TheMorosDevice", false);
        UnitAbilityShow(lib9770F675_gv_commanderER, "TheMorosDevice", false);
    }
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_TestingTrigger_Init () {
    lib9770F675_gt_TestingTrigger = TriggerCreate("lib9770F675_gt_TestingTrigger_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_TestingTrigger, 1, "chrono", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Options Display
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_OptionsDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderChrono) + (StringExternal("Param/Value/lib_9770F675_687EB643") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderGrenade) + (StringExternal("Param/Value/lib_9770F675_7FA42B61") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma4) + (StringExternal("Param/Value/lib_9770F675_EAC70C4C") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma) + (StringExternal("Param/Value/lib_9770F675_2A316060") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma3) + (StringExternal("Param/Value/lib_9770F675_DD957C10") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderStim) + (StringExternal("Param/Value/lib_9770F675_3361D96D") + StringExternal("Param/Value/lib_9770F675_FBD1BD64"))))))))))))));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma11) + (StringExternal("Param/Value/lib_9770F675_31EC9C0B") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma2) + (StringExternal("Param/Value/lib_9770F675_A82B28FB") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalRescueElite) + (StringExternal("Param/Value/lib_9770F675_B9B88CAC") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma10) + (StringExternal("Param/Value/lib_9770F675_B7BA2F27") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma9) + (StringExternal("Param/Value/lib_9770F675_35F78678") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma6) + (StringExternal("Param/Value/lib_9770F675_1EF6CC27") + StringExternal("Param/Value/lib_9770F675_9614EF24"))))))))))))));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma5) + (StringExternal("Param/Value/lib_9770F675_044A372A") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma7) + (StringExternal("Param/Value/lib_9770F675_05C694D7") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_plotCerebrateDead) + (StringExternal("Param/Value/lib_9770F675_97E25430") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_plotProtossRescued) + (StringExternal("Param/Value/lib_9770F675_02530C52") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma8) + (StringExternal("Param/Value/lib_9770F675_49E17F79") + (libNtve_gf_ConvertBooleanToText(lib9770F675_gv_optionalCommanderPlasma6) + (StringExternal("Param/Value/lib_9770F675_DA555355") + StringExternal("Param/Value/lib_9770F675_EB294B61"))))))))))))));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_OptionsDisplay_Init () {
    lib9770F675_gt_OptionsDisplay = TriggerCreate("lib9770F675_gt_OptionsDisplay_Func");
    TriggerAddEventChatMessage(lib9770F675_gt_OptionsDisplay, 1, "options_ens", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectivePalladiumComplete
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ObjectivePalladiumComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(lib9770F675_gv_objective_Palladium, c_objectiveStateCompleted);
    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetName(lib9770F675_gv_objective_Palladium, (StringExternal("Param/Value/lib_9770F675_E90A6B5E") + IntToText(lib9770F675_gv_palladiumRemaining) + StringExternal("Param/Value/lib_9770F675_4EA2139C")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ObjectivePalladiumComplete_Init () {
    lib9770F675_gt_ObjectivePalladiumComplete = TriggerCreate("lib9770F675_gt_ObjectivePalladiumComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveIridiumComplete
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ObjectiveIridiumComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(lib9770F675_gv_objective_Iridium, c_objectiveStateCompleted);
    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetName(lib9770F675_gv_objective_Iridium, (StringExternal("Param/Value/lib_9770F675_5E190879") + IntToText(lib9770F675_gv_iridiumRemaining) + StringExternal("Param/Value/lib_9770F675_F9AB17D0")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ObjectiveIridiumComplete_Init () {
    lib9770F675_gt_ObjectiveIridiumComplete = TriggerCreate("lib9770F675_gt_ObjectiveIridiumComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Commander Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_commanderLeaderboard == c_boardNone)) {
        BoardCreate(1, 2, StringExternal("Param/Value/lib_9770F675_CFC6DC04"), Color(0.00, 100.00, 0.00));
        lib9770F675_gv_commanderLeaderboard = BoardLastCreated();
        BoardSetState(lib9770F675_gv_commanderLeaderboard, PlayerGroupAll(), c_boardStateShowTitle, false);
        BoardItemSetText(lib9770F675_gv_commanderLeaderboard, 1, c_boardRowHeader, StringExternal("Param/Value/lib_9770F675_5F13CF33"));
        BoardItemSetText(lib9770F675_gv_commanderLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_D2784539") + (IntToText(lib9770F675_gv_grenade_find9) + (StringExternal("Param/Value/lib_9770F675_39E8FD9B") + (IntToText(lib9770F675_gv_palladiumFound) + (StringExternal("Param/Value/lib_9770F675_4B687F08") + (IntToText(lib9770F675_gv_palladiumNeeded) + StringExternal("Param/Value/lib_9770F675_B98893C2"))))))));
        BoardItemSetIcon(lib9770F675_gv_commanderLeaderboard, 1, 1, "Assets/Textures/btn-tips-biosample.dds", true);
        BoardItemSetText(lib9770F675_gv_commanderLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_AA228978") + (IntToText(lib9770F675_gv_grenade_find8) + (StringExternal("Param/Value/lib_9770F675_B5F49329") + (IntToText(lib9770F675_gv_iridiumFound) + (StringExternal("Param/Value/lib_9770F675_FDC8D205") + (IntToText(lib9770F675_gv_iridiumNeeded) + StringExternal("Param/Value/lib_9770F675_E9617CFF"))))))));
        BoardItemSetIcon(lib9770F675_gv_commanderLeaderboard, 1, 2, "Assets/Textures/btn-tips-droppedterrazine.dds", true);
        BoardMinimizeShow(lib9770F675_gv_commanderLeaderboard, PlayerGroupAll(), true);
        TriggerEnable(lib9770F675_gt_UpdateProtossSupply2, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply6_Init () {
    lib9770F675_gt_UpdateProtossSupply6 = TriggerCreate("lib9770F675_gt_UpdateProtossSupply6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Commander Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(lib9770F675_gv_commanderLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_3DA4F83F") + (IntToText(lib9770F675_gv_grenade_find9) + (StringExternal("Param/Value/lib_9770F675_3313F877") + (IntToText(lib9770F675_gv_palladiumFound) + (StringExternal("Param/Value/lib_9770F675_500927EE") + (IntToText(lib9770F675_gv_palladiumNeeded) + StringExternal("Param/Value/lib_9770F675_D54F0FD1"))))))));
    BoardItemSetText(lib9770F675_gv_commanderLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_CF794756") + (IntToText(lib9770F675_gv_grenade_find8) + (StringExternal("Param/Value/lib_9770F675_BDE72DEC") + (IntToText(lib9770F675_gv_iridiumFound) + (StringExternal("Param/Value/lib_9770F675_B3DD933E") + (IntToText(lib9770F675_gv_iridiumNeeded) + StringExternal("Param/Value/lib_9770F675_CB898258"))))))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply2_Init () {
    lib9770F675_gt_UpdateProtossSupply2 = TriggerCreate("lib9770F675_gt_UpdateProtossSupply2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul_Powers SCMR (Run at Start)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_shrines;

    // Automatic Variable Declarations
    unitgroup auto46845325_g;
    int auto46845325_u;
    unit auto46845325_var;
    unitgroup auto2C3C341B_g;
    int auto2C3C341B_u;
    unit auto2C3C341B_var;
    unitgroup auto3CF2CC19_g;
    int auto3CF2CC19_u;
    unit auto3CF2CC19_var;
    unitgroup auto9942803E_g;
    int auto9942803E_u;
    unit auto9942803E_var;
    unitgroup autoA2B41E6E_g;
    int autoA2B41E6E_u;
    unit autoA2B41E6E_var;
    unitgroup auto26DAF87B_g;
    int auto26DAF87B_u;
    unit auto26DAF87B_var;
    unitgroup auto027209A4_g;
    int auto027209A4_u;
    unit auto027209A4_var;
    unitgroup auto0705EB6A_g;
    int auto0705EB6A_u;
    unit auto0705EB6A_var;
    unitgroup autoB089E00F_g;
    int autoB089E00F_u;
    unit autoB089E00F_var;
    unitgroup auto781E27F6_g;
    int auto781E27F6_u;
    unit auto781E27F6_var;
    unitgroup auto9390BE36_g;
    int auto9390BE36_u;
    unit auto9390BE36_var;
    unitgroup autoE8E03CE2_g;
    int autoE8E03CE2_u;
    unit autoE8E03CE2_var;
    unitgroup autoBB185525_g;
    int autoBB185525_u;
    unit autoBB185525_var;
    unitgroup autoD304E67D_g;
    int autoD304E67D_u;
    unit autoD304E67D_var;

    // Variable Initialization
    lv_shrines = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitXPGainEnable(lib9770F675_gv_zeratulER, null, true);
    auto46845325_g = UnitGroup("DarkShrine", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46845325_u = UnitGroupCount(auto46845325_g, c_unitCountAll);
    for (;; auto46845325_u -= 1) {
        auto46845325_var = UnitGroupUnitFromEnd(auto46845325_g, auto46845325_u);
        if (auto46845325_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_shrines_total_scmr, auto46845325_var);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto46845325_var), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }
    auto2C3C341B_g = UnitGroup("Beacon_Zeratul", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2C3C341B_u = UnitGroupCount(auto2C3C341B_g, c_unitCountAll);
    for (;; auto2C3C341B_u -= 1) {
        auto2C3C341B_var = UnitGroupUnitFromEnd(auto2C3C341B_g, auto2C3C341B_u);
        if (auto2C3C341B_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_shrine_beacons_scmr, auto2C3C341B_var);
    }
    auto3CF2CC19_g = UnitGroup("InvisiblePylon", 11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3CF2CC19_u = UnitGroupCount(auto3CF2CC19_g, c_unitCountAll);
    for (;; auto3CF2CC19_u -= 1) {
        auto3CF2CC19_var = UnitGroupUnitFromEnd(auto3CF2CC19_g, auto3CF2CC19_u);
        if (auto3CF2CC19_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_shrines_pylon_scmr, auto3CF2CC19_var);
    }
    TechTreeUnitAllow(1, "KhaydarinMonolith", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulStun", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulStun", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "Domination", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "Domination", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ReleaseMinion", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ReleaseMinion", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "PrologueVoidArmor", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "PrologueVoidArmor", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ShadowBlade", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ShadowBlade", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "MohandarShadowClone", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "MohandarShadowClone", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "VorazunShadowFury", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "VorazunShadowFury", false);
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_expCurrentLevelTotal >= 50)) {
        lib9770F675_gv_zeratulLevelCurrent = 2;
        Wait(0.1, c_timeReal);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel1", 1);
        UnitBehaviorAdd(lib9770F675_gv_zeratulER, "KerriganEpilogueDamageAura", lib9770F675_gv_zeratulER, 1);
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 125)) {
        lib9770F675_gv_zeratulLevelCurrent = 3;
        Wait(0.1, c_timeReal);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 225)) {
        lib9770F675_gv_zeratulLevelCurrent = 4;
        Wait(0.1, c_timeReal);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel1", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulStun", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulStun", true);
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 350)) {
        lib9770F675_gv_zeratulLevelCurrent = 5;
        Wait(0.1, c_timeReal);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel5", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightDisabled", 0);
        UnitBehaviorAdd(lib9770F675_gv_zeratulER, "Detector9", lib9770F675_gv_zeratulER, 1);
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 550)) {
        lib9770F675_gv_zeratulLevelCurrent = 6;
        Wait(0.1, c_timeReal);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel6", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "Domination", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "Domination", true);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 750)) {
        lib9770F675_gv_zeratulLevelCurrent = 7;
        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel1", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7b", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel1", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
        }
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1000)) {
        lib9770F675_gv_zeratulLevelCurrent = 8;
        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel8a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofAdun", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierence8b", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofNaraza", 1);
            UnitBehaviorAdd(lib9770F675_gv_zeratulER, "SoulAbsorption", lib9770F675_gv_zeratulER, 1);
        }
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1250)) {
        lib9770F675_gv_zeratulLevelCurrent = 9;
        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9a", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel1", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "ShadowBlade", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "ShadowBlade", true);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9b", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel1", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
        }
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_expCurrentLevelTotal >= 1500)) {
        lib9770F675_gv_zeratulLevelCurrent = 10;
        Wait(0.1, c_timeReal);
        if ((lib9770F675_gv_plotCrystalRecovered == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10a", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10b", 1);
        }
        Wait(0.1, c_timeReal);
    }

    if ((lib9770F675_gv_cloakUpgradelvl == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel3", 1);
        UnitBehaviorAdd(lib9770F675_gv_zeratulER, "VorazunRegenShield", lib9770F675_gv_zeratulER, 1);
    }
    else {
        if ((lib9770F675_gv_cloakUpgradelvl == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel2", 1);
            UnitBehaviorAdd(lib9770F675_gv_zeratulER, "CloakDistortionField", lib9770F675_gv_zeratulER, 1);
        }

    }
    if ((lib9770F675_gv_temporalUpgradelvl == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel3", 1);
    }
    else {
        if ((lib9770F675_gv_temporalUpgradelvl == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel2", 1);
        }

    }
    if ((lib9770F675_gv_blinkUpgradelvl == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel3", 1);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
        UnitAbilityEnable(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
        UnitAbilityShow(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
    }
    else {
        if ((lib9770F675_gv_blinkUpgradelvl == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel2", 1);
        }

    }
    if ((lib9770F675_gv_prisonUpgradelvl == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel3", 1);
    }
    else {
        if ((lib9770F675_gv_prisonUpgradelvl == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel2", 1);
        }

    }
    if ((lib9770F675_gv_armorUpgradelvl == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel2", 1);
    }

    if ((lib9770F675_gv_shadowUpgradelvl == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel2", 1);
    }

    if ((lib9770F675_gv_strikeUpgradelvl == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel2", 1);
    }

    if ((lib9770F675_gv_furyUpgradelvl == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel2", 1);
    }

    if ((lib9770F675_gv_optionalRescueCommander3 == true)) {
        TechTreeUnitAllow(1, "KhaydarinMonolith", true);
    }
    else {
        if ((lib9770F675_gv_optionalRescueCommander4 == true)) {
            TechTreeUnitAllow(1, "KhaydarinMonolith", false);
            autoA2B41E6E_g = UnitGroup("KhaydarinMonolith", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoA2B41E6E_u = UnitGroupCount(autoA2B41E6E_g, c_unitCountAll);
            for (;; autoA2B41E6E_u -= 1) {
                autoA2B41E6E_var = UnitGroupUnitFromEnd(autoA2B41E6E_g, autoA2B41E6E_u);
                if (autoA2B41E6E_var == null) { break; }
                UnitRemove(autoA2B41E6E_var);
            }
            libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimShieldBattery", 1);
            auto26DAF87B_g = UnitGroup("ShieldBattery", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto26DAF87B_u = UnitGroupCount(auto26DAF87B_g, c_unitCountAll);
            for (;; auto26DAF87B_u -= 1) {
                auto26DAF87B_var = UnitGroupUnitFromEnd(auto26DAF87B_g, auto26DAF87B_u);
                if (auto26DAF87B_var == null) { break; }
                libNtve_gf_ReplaceUnit(auto26DAF87B_var, "ShieldBatteryNerazim", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
            }
        }
        else {
            TechTreeUnitAllow(1, "KhaydarinMonolith", false);
            auto9942803E_g = UnitGroup("KhaydarinMonolith", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto9942803E_u = UnitGroupCount(auto9942803E_g, c_unitCountAll);
            for (;; auto9942803E_u -= 1) {
                auto9942803E_var = UnitGroupUnitFromEnd(auto9942803E_g, auto9942803E_u);
                if (auto9942803E_var == null) { break; }
                UnitRemove(auto9942803E_var);
            }
        }
    }
    if ((lib9770F675_gv_optionalRescueCommander6 == true)) {
        TechTreeUnitAllow(1, "VoidRay", true);
        TechTreeUnitAllow(1, "Sentry", false);
        auto781E27F6_g = UnitGroup("Sentry", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto781E27F6_u = UnitGroupCount(auto781E27F6_g, c_unitCountAll);
        for (;; auto781E27F6_u -= 1) {
            auto781E27F6_var = UnitGroupUnitFromEnd(auto781E27F6_g, auto781E27F6_u);
            if (auto781E27F6_var == null) { break; }
            UnitRemove(auto781E27F6_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalRescueCommander5 == true)) {
            TechTreeUnitAllow(1, "Sentry", true);
            TechTreeUnitAllow(1, "VoidRay", false);
            autoB089E00F_g = UnitGroup("VoidRay", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoB089E00F_u = UnitGroupCount(autoB089E00F_g, c_unitCountAll);
            for (;; autoB089E00F_u -= 1) {
                autoB089E00F_var = UnitGroupUnitFromEnd(autoB089E00F_g, autoB089E00F_u);
                if (autoB089E00F_var == null) { break; }
                UnitRemove(autoB089E00F_var);
            }
        }
        else {
            TechTreeUnitAllow(1, "Sentry", false);
            TechTreeUnitAllow(1, "VoidRay", false);
            auto027209A4_g = UnitGroup("VoidRay", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto027209A4_u = UnitGroupCount(auto027209A4_g, c_unitCountAll);
            for (;; auto027209A4_u -= 1) {
                auto027209A4_var = UnitGroupUnitFromEnd(auto027209A4_g, auto027209A4_u);
                if (auto027209A4_var == null) { break; }
                UnitRemove(auto027209A4_var);
            }
            auto0705EB6A_g = UnitGroup("Sentry", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto0705EB6A_u = UnitGroupCount(auto0705EB6A_g, c_unitCountAll);
            for (;; auto0705EB6A_u -= 1) {
                auto0705EB6A_var = UnitGroupUnitFromEnd(auto0705EB6A_g, auto0705EB6A_u);
                if (auto0705EB6A_var == null) { break; }
                UnitRemove(auto0705EB6A_var);
            }
        }
    }
    if ((lib9770F675_gv_optionalRescueCommander7 == true)) {
        TechTreeUnitAllow(1, "Colossus", true);
        TechTreeUnitAllow(1, "Sentry", false);
        autoD304E67D_g = UnitGroup("Sentry", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoD304E67D_u = UnitGroupCount(autoD304E67D_g, c_unitCountAll);
        for (;; autoD304E67D_u -= 1) {
            autoD304E67D_var = UnitGroupUnitFromEnd(autoD304E67D_g, autoD304E67D_u);
            if (autoD304E67D_var == null) { break; }
            UnitRemove(autoD304E67D_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalRescueCommander5 == true)) {
            TechTreeUnitAllow(1, "Sentry", true);
            TechTreeUnitAllow(1, "Colossus", false);
            autoBB185525_g = UnitGroup("Colossus", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoBB185525_u = UnitGroupCount(autoBB185525_g, c_unitCountAll);
            for (;; autoBB185525_u -= 1) {
                autoBB185525_var = UnitGroupUnitFromEnd(autoBB185525_g, autoBB185525_u);
                if (autoBB185525_var == null) { break; }
                UnitRemove(autoBB185525_var);
            }
        }
        else {
            TechTreeUnitAllow(1, "Sentry", false);
            TechTreeUnitAllow(1, "Colossus", false);
            auto9390BE36_g = UnitGroup("Colossus", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto9390BE36_u = UnitGroupCount(auto9390BE36_g, c_unitCountAll);
            for (;; auto9390BE36_u -= 1) {
                auto9390BE36_var = UnitGroupUnitFromEnd(auto9390BE36_g, auto9390BE36_u);
                if (auto9390BE36_var == null) { break; }
                UnitRemove(auto9390BE36_var);
            }
            autoE8E03CE2_g = UnitGroup("Sentry", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoE8E03CE2_u = UnitGroupCount(autoE8E03CE2_g, c_unitCountAll);
            for (;; autoE8E03CE2_u -= 1) {
                autoE8E03CE2_var = UnitGroupUnitFromEnd(autoE8E03CE2_g, autoE8E03CE2_u);
                if (autoE8E03CE2_var == null) { break; }
                UnitRemove(autoE8E03CE2_var);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start11_Init () {
    lib9770F675_gt_Map_Start11 = TriggerCreate("lib9770F675_gt_Map_Start11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul_Recall SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup24_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib9770F675_gv_zeratulER != null))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lib9770F675_gv_zeratulER, c_unitPropLife, c_unitPropCurrent) <= 50.0))) {
            return false;
        }

        if (!((lib9770F675_gv_shrine_used_scmr != null))) {
            return false;
        }

        if (!((lib9770F675_gv_shrine_activated_scmr != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib9770F675_gv_shrine_activated_scmr = 0;
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lib9770F675_gv_zeratulER, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    PlayerCreateEffectUnit(1, "MassRecallApplyBehavior", lib9770F675_gv_zeratulER);
    Wait(1.0, c_timeGame);
    UnitSetPosition(lib9770F675_gv_zeratulER, RegionRandomPoint(RegionCircle(UnitGetPosition(lib9770F675_gv_shrine_used_scmr), 3.0)), false);
    UnitIssueOrder(lib9770F675_gv_zeratulER, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitBehaviorRemove(lib9770F675_gv_zeratulER, "GenericDontDie", 1);
    UnitSetPropertyFixed(lib9770F675_gv_zeratulER, c_unitPropLifePercent, 75.0);
    UnitSetPropertyFixed(lib9770F675_gv_zeratulER, c_unitPropShieldsPercent, 75.0);
    UnitSetOwner(lib9770F675_gv_shrine_used_scmr, 0, true);
    UnitSetOwner(lib9770F675_gv_pylon_used_scmr, 11, true);
    libNtve_gf_MakeUnitInvulnerable(lib9770F675_gv_shrine_used_scmr, true);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lib9770F675_gv_zeratulER), 2.0, Color(5.10, 0.00, 100.00));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib9770F675_gv_shrine_used_scmr), c_animNameDefault, "Stand Unpowered Start", 0, c_animTimeDefault);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_C79C3688"));
    Wait(1.5, c_timeReal);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib9770F675_gv_shrine_used_scmr), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.0, c_timeReal);
    lib9770F675_gv_shrine_used_scmr = null;
    Wait(8.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup24_Init () {
    lib9770F675_gt_Grenade_Pickup24 = TriggerCreate("lib9770F675_gt_Grenade_Pickup24_Func");
    TriggerAddEventUnitDamaged(lib9770F675_gt_Grenade_Pickup24, UnitRefFromVariable("lib9770F675_gv_zeratulER"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrine Dies SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_shrines;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_shrines = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib9770F675_gv_shrine_used_scmr != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((lib9770F675_gv_shrine_activated_scmr == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lib9770F675_gv_pylon_used_scmr, 11, true);
    lib9770F675_gv_shrine_activated_scmr = 0;
    lib9770F675_gv_shrine_used_scmr = null;
    lib9770F675_gv_pylon_used_scmr = null;
    UnitBehaviorRemove(lib9770F675_gv_zeratulER, "GenericDontDie", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_D1248CBC"));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup23_Init () {
    lib9770F675_gt_Grenade_Pickup23 = TriggerCreate("lib9770F675_gt_Grenade_Pickup23_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_Grenade_Pickup23, UnitRefFromVariable("lib9770F675_gv_shrine_used_scmr"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul_Spectral_Behavior SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib9770F675_gv_zeratulER != null))) {
            return false;
        }

        if (!((lib9770F675_gv_zeratulLevelCurrent >= 5))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "LevelUpEffect"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "LevelUpEffect3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightDisabled", 1);
    UnitBehaviorRemove(lib9770F675_gv_zeratulER, "Detector9", 1);
    Wait(10.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightDisabled", 0);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "Detector9", lib9770F675_gv_zeratulER, 1);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup16_Init () {
    lib9770F675_gt_Grenade_Pickup16 = TriggerCreate("lib9770F675_gt_Grenade_Pickup16_Func");
    TriggerAddEventUnitDamaged(lib9770F675_gt_Grenade_Pickup16, UnitRefFromVariable("lib9770F675_gv_zeratulER"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_cloakUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_cloakUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_cloakUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "CloakDistortionField", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "CloakDistortionField", lib9770F675_gv_zeratulER, 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_cloakUpgrade1selected_Init () {
    lib9770F675_gt_cloakUpgrade1selected = TriggerCreate("lib9770F675_gt_cloakUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_cloakUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakUpgrade2 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_cloakUpgrade2selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_cloakUpgrade2 == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_cloakUpgradelvl = 2;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NerazimCloakingLevel3", 1);
    UnitBehaviorAdd(lib9770F675_gv_zeratulER, "VorazunRegenShield", lib9770F675_gv_zeratulER, 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_cloakUpgrade2selected_Init () {
    lib9770F675_gt_cloakUpgrade2selected = TriggerCreate("lib9770F675_gt_cloakUpgrade2selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_cloakUpgrade2selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blinkUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_blinkUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_blinkUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_blinkUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_blinkUpgrade1selected_Init () {
    lib9770F675_gt_blinkUpgrade1selected = TriggerCreate("lib9770F675_gt_blinkUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_blinkUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blinkUpgrade2 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_blinkUpgrade2selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_blinkUpgrade2 == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_blinkUpgradelvl = 2;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowWalkLevel3", 1);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", false);
    UnitAbilityEnable(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
    UnitAbilityShow(lib9770F675_gv_zeratulER, "DarkTemplarChampionBlink", true);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_blinkUpgrade2selected_Init () {
    lib9770F675_gt_blinkUpgrade2selected = TriggerCreate("lib9770F675_gt_blinkUpgrade2selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_blinkUpgrade2selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: prisonUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_prisonUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_prisonUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_prisonUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_prisonUpgrade1selected_Init () {
    lib9770F675_gt_prisonUpgrade1selected = TriggerCreate("lib9770F675_gt_prisonUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_prisonUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: prisonUpgrade2 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_prisonUpgrade2selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_prisonUpgrade2 == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_prisonUpgradelvl = 2;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidPrisionLevel3", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_prisonUpgrade2selected_Init () {
    lib9770F675_gt_prisonUpgrade2selected = TriggerCreate("lib9770F675_gt_prisonUpgrade2selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_prisonUpgrade2selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: temporalUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_temporalUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_temporalUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_temporalUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_temporalUpgrade1selected_Init () {
    lib9770F675_gt_temporalUpgrade1selected = TriggerCreate("lib9770F675_gt_temporalUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_temporalUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: temporalUpgrade2 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_temporalUpgrade2selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_temporalUpgrade2 == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_temporalUpgradelvl = 2;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel3", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_temporalUpgrade2selected_Init () {
    lib9770F675_gt_temporalUpgrade2selected = TriggerCreate("lib9770F675_gt_temporalUpgrade2selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_temporalUpgrade2selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: armorUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_armorUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_armorUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_armorUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "VoidArmorLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_armorUpgrade1selected_Init () {
    lib9770F675_gt_armorUpgrade1selected = TriggerCreate("lib9770F675_gt_armorUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_armorUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: shadowUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_shadowUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_shadowUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_shadowUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "DarkShadowLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_shadowUpgrade1selected_Init () {
    lib9770F675_gt_shadowUpgrade1selected = TriggerCreate("lib9770F675_gt_shadowUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_shadowUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: strikeUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_strikeUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_strikeUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_strikeUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowBladeLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_strikeUpgrade1selected_Init () {
    lib9770F675_gt_strikeUpgrade1selected = TriggerCreate("lib9770F675_gt_strikeUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_strikeUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: furyUpgrade1 selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_furyUpgrade1selected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_furyUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_KerriganUpgrades_Enter", 2), PlayerGroupAll(), 100.0, 0.0);
    PlayerCreateEffectUnit(1, "UpgradeZeratulEffect", lib9770F675_gv_zeratulER);
    lib9770F675_gv_furyUpgradelvl = 1;
    DialogDestroyAll();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ShadowFuryLevel2", 1);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_furyUpgrade1selected_Init () {
    lib9770F675_gt_furyUpgrade1selected = TriggerCreate("lib9770F675_gt_furyUpgrade1selected_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_furyUpgrade1selected, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulExperienceUpdate
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ZeratulExperienceUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_zeratulER != null))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == lib9770F675_gv_zeratulER))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Zergling") && (UnitGetType(EventUnit()) == "Broodling") && (UnitGetType(EventUnit()) == "Larva") && (UnitGetType(EventUnit()) == "HotSRaptor") && (UnitGetType(EventUnit()) == "HotSRaptorBurrowed")) {
        lib9770F675_gv_expCurrentLevelTotal += 2;
        lib9770F675_gv_expFound += 2;
        TextTagCreate(StringExternal("Param/Value/lib_9770F675_95FEC5EB"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
    }
    else {
        if ((UnitGetType(EventUnit()) == "Marine") && (UnitGetType(EventUnit()) == "Firebat") && (UnitGetType(EventUnit()) == "Ghost") && (UnitGetType(EventUnit()) == "Medic") && (UnitGetType(EventUnit()) == "Sentry") && (UnitGetType(EventUnit()) == "Monitor") && (UnitGetType(EventUnit()) == "Marauder")) {
            lib9770F675_gv_expCurrentLevelTotal += 3;
            lib9770F675_gv_expFound += 3;
            TextTagCreate(StringExternal("Param/Value/lib_9770F675_8A707D36"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
        }
        else {
            if (((UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestorBurrowed") || (UnitGetType(EventUnit()) == "Vulture") || (UnitGetType(EventUnit()) == "Hellion") || (UnitGetType(EventUnit()) == "Roach") || (UnitGetType(EventUnit()) == "RoachBurrowed") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "HighTemplarTaldarim") || (UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed"))) {
                lib9770F675_gv_expCurrentLevelTotal += 4;
                lib9770F675_gv_expFound += 4;
                TextTagCreate(StringExternal("Param/Value/lib_9770F675_DAFBB8AB"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
            }
            else {
                if (((UnitGetType(EventUnit()) == "Predator") || (UnitGetType(EventUnit()) == "Dragoon") || (UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "Lurker") || (UnitGetType(EventUnit()) == "LurkerBurrowed") || (UnitGetType(EventUnit()) == "DarkTemplar") || (UnitGetType(EventUnit()) == "XelNagaChargedCrystal"))) {
                    lib9770F675_gv_expCurrentLevelTotal += 5;
                    lib9770F675_gv_expFound += 5;
                    TextTagCreate(StringExternal("Param/Value/lib_9770F675_20FB3793"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                }
                else {
                    if (((UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "ImmortalTaldarim") || (UnitGetType(EventUnit()) == "Ravager") || (UnitGetType(EventUnit()) == "Reaver"))) {
                        lib9770F675_gv_expCurrentLevelTotal += 6;
                        lib9770F675_gv_expFound += 6;
                        TextTagCreate(StringExternal("Param/Value/lib_9770F675_F8BC191D"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                    }
                    else {
                        if (((UnitGetType(EventUnit()) == "SiegeTank") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "Goliath") || (UnitGetType(EventUnit()) == "InfestedAbomination") || (UnitGetType(EventUnit()) == "InfestedAbominationBurrowed"))) {
                            lib9770F675_gv_expCurrentLevelTotal += 8;
                            lib9770F675_gv_expFound += 8;
                            TextTagCreate(StringExternal("Param/Value/lib_9770F675_32C71C61"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                        }
                        else {
                            if (((UnitGetType(EventUnit()) == "Diamondback") || (UnitGetType(EventUnit()) == "Reaver") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "ColossusTaldarim"))) {
                                lib9770F675_gv_expCurrentLevelTotal += 10;
                                lib9770F675_gv_expFound += 10;
                                TextTagCreate(StringExternal("Param/Value/lib_9770F675_48DCA365"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                            }
                            else {
                                if (((UnitGetType(EventUnit()) == "Archon") || (UnitGetType(EventUnit()) == "DarkArchon") || (UnitGetType(EventUnit()) == "Archon2") || (UnitGetType(EventUnit()) == "Ultralisk"))) {
                                    lib9770F675_gv_expCurrentLevelTotal += 15;
                                    lib9770F675_gv_expFound += 15;
                                    TextTagCreate(StringExternal("Param/Value/lib_9770F675_83AEBC83"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                                }
                                else {
                                    if (((UnitGetType(EventUnit()) == "Brutalisk") || (UnitGetType(EventUnit()) == "Omegalisk") || (UnitGetType(EventUnit()) == "XelNagaConstruct"))) {
                                        lib9770F675_gv_expCurrentLevelTotal += 20;
                                        lib9770F675_gv_expFound += 20;
                                        TextTagCreate(StringExternal("Param/Value/lib_9770F675_8FC5C19B"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                                    }
                                    else {
                                        lib9770F675_gv_expCurrentLevelTotal += 1;
                                        lib9770F675_gv_expFound += 1;
                                        TextTagCreate(StringExternal("Param/Value/lib_9770F675_FEE4E8BF"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply3, false, false);
    TriggerExecute(lib9770F675_gt_ZeratulLevelUpSCMR, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ZeratulExperienceUpdate_Init () {
    lib9770F675_gt_ZeratulExperienceUpdate = TriggerCreate("lib9770F675_gt_ZeratulExperienceUpdate_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_ZeratulExperienceUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulExperienceCap
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ZeratulExperienceCap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_zeratulER != null))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == lib9770F675_gv_zeratulER))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((lib9770F675_gv_expCurrentLevelTotal >= (lib9770F675_gv_expCap + 20)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib9770F675_gt_ZeratulExperienceUpdate, false);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_41D4C4AD"), 30, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 29.80, 100.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaWarning, StringExternal("Param/Value/lib_9770F675_1979C39B"));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaWarning);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ZeratulExperienceCap_Init () {
    lib9770F675_gt_ZeratulExperienceCap = TriggerCreate("lib9770F675_gt_ZeratulExperienceCap_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_ZeratulExperienceCap, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulLevelUp SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ZeratulLevelUpSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 1)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 50)) {
            lib9770F675_gv_zeratulLevelCurrent = 2;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "TemporalAuraLevel1", 1);
            UnitBehaviorAdd(lib9770F675_gv_zeratulER, "KerriganEpilogueDamageAura", lib9770F675_gv_zeratulER, 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel2", 1);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 2)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 125)) {
            lib9770F675_gv_zeratulLevelCurrent = 3;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel3", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulBlink", true);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 3)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 225)) {
            lib9770F675_gv_zeratulLevelCurrent = 4;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel4", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "ZeratulStun", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "ZeratulStun", true);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 4)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 350)) {
            lib9770F675_gv_zeratulLevelCurrent = 5;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel5", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "SpectralSightEnabled", 1);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 5)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 550)) {
            lib9770F675_gv_zeratulLevelCurrent = 6;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel6", 1);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "Domination", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "Domination", true);
            UnitAbilityEnable(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
            UnitAbilityShow(lib9770F675_gv_zeratulER, "ReleaseMinion", true);
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 6)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 750)) {
            lib9770F675_gv_zeratulLevelCurrent = 7;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7a", 1);
                UnitAbilityEnable(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
                UnitAbilityShow(lib9770F675_gv_zeratulER, "PrologueVoidArmor", true);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel7b", 1);
                UnitAbilityEnable(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
                UnitAbilityShow(lib9770F675_gv_zeratulER, "MohandarShadowClone", true);
            }
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 7)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 1000)) {
            lib9770F675_gv_zeratulLevelCurrent = 8;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel8a", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofAdun", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierence8b", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "EssenceofNaraza", 1);
                UnitBehaviorAdd(lib9770F675_gv_zeratulER, "SoulAbsorption", lib9770F675_gv_zeratulER, 1);
            }
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 8)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 1250)) {
            lib9770F675_gv_zeratulLevelCurrent = 9;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9a", 1);
                UnitAbilityEnable(lib9770F675_gv_zeratulER, "ShadowBlade", true);
                UnitAbilityShow(lib9770F675_gv_zeratulER, "ShadowBlade", true);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel9b", 1);
                UnitAbilityEnable(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
                UnitAbilityShow(lib9770F675_gv_zeratulER, "VorazunShadowFury", true);
            }
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    if ((lib9770F675_gv_zeratulLevelCurrent == 9)) {
        if ((lib9770F675_gv_expCurrentLevelTotal >= 1500)) {
            lib9770F675_gv_zeratulLevelCurrent = 10;
            Wait(0.1, c_timeReal);
            TriggerExecute(lib9770F675_gt_UpdateProtossSupply4, false, false);
            if ((lib9770F675_gv_plotCrystalRecovered == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10a", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ZeratulExpierenceLevel10b", 1);
            }
            Wait(0.1, c_timeReal);
            lib9770F675_gf_Zeratul_Level_UPSCMR(lib9770F675_gv_zeratulER);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ZeratulLevelUpSCMR_Init () {
    lib9770F675_gt_ZeratulLevelUpSCMR = TriggerCreate("lib9770F675_gt_ZeratulLevelUpSCMR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveArtifactComplete SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ObjectiveArtifactCompleteSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(lib9770F675_gv_objective_Artifact, c_objectiveStateCompleted);
    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetName(lib9770F675_gv_objective_Artifact, (StringExternal("Param/Value/lib_9770F675_569F7BB2") + IntToText(lib9770F675_gv_artifactRemaining) + StringExternal("Param/Value/lib_9770F675_38E78C77")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ObjectiveArtifactCompleteSCMR_Init () {
    lib9770F675_gt_ObjectiveArtifactCompleteSCMR = TriggerCreate("lib9770F675_gt_ObjectiveArtifactCompleteSCMR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Zeratul Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ShowProtossSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_zeratulLeaderboard == c_boardNone)) {
        BoardCreate(1, 2, (StringExternal("Param/Value/lib_9770F675_2C79E5EA") + (IntToText(lib9770F675_gv_zeratulLevelCurrent) + StringExternal("Param/Value/lib_9770F675_2671DF74"))), Color(0.00, 100.00, 0.00));
        lib9770F675_gv_zeratulLeaderboard = BoardLastCreated();
        BoardSetState(lib9770F675_gv_zeratulLeaderboard, PlayerGroupAll(), c_boardStateShowTitle, false);
        BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, c_boardRowHeader, (StringExternal("Param/Value/lib_9770F675_96E0537D") + (IntToText(lib9770F675_gv_zeratulLevelCurrent) + StringExternal("Param/Value/lib_9770F675_426C7389"))));
        BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_3DD9C1D3") + (IntToText(lib9770F675_gv_expCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_8CB5E51F") + (IntToText(lib9770F675_gv_expCap) + StringExternal("Param/Value/lib_9770F675_FADA793C"))))));
        BoardItemSetIcon(lib9770F675_gv_zeratulLeaderboard, 1, 1, "Assets/Textures/talent-vorazun-level06-darktemplarresearchbundle.dds", true);
        BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_701D833F") + (IntToText(lib9770F675_gv_artifactCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_A8178A5D") + (IntToText(lib9770F675_gv_artifactFound) + (StringExternal("Param/Value/lib_9770F675_80DAF670") + (IntToText(lib9770F675_gv_artifactNeeded) + StringExternal("Param/Value/lib_9770F675_905B73C1"))))))));
        BoardItemSetIcon(lib9770F675_gv_zeratulLeaderboard, 1, 2, "Assets/Textures/btn-tips-protossrelic.dds", true);
        BoardMinimizeShow(lib9770F675_gv_zeratulLeaderboard, PlayerGroupAll(), true);
        TriggerEnable(lib9770F675_gt_UpdateProtossSupply3, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ShowProtossSupply_Init () {
    lib9770F675_gt_ShowProtossSupply = TriggerCreate("lib9770F675_gt_ShowProtossSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Zeratul Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_012326A9") + (IntToText(lib9770F675_gv_expCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_84E25A87") + (IntToText(lib9770F675_gv_expCap) + StringExternal("Param/Value/lib_9770F675_E6C3E104"))))));
    BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_A4DAAAC4") + (IntToText(lib9770F675_gv_artifactCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_494FFD58") + (IntToText(lib9770F675_gv_artifactFound) + (StringExternal("Param/Value/lib_9770F675_50507B04") + (IntToText(lib9770F675_gv_artifactNeeded) + StringExternal("Param/Value/lib_9770F675_E0333052"))))))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply3_Init () {
    lib9770F675_gt_UpdateProtossSupply3 = TriggerCreate("lib9770F675_gt_UpdateProtossSupply3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Zeratul Level SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(lib9770F675_gv_zeratulLeaderboard, 1, c_boardRowHeader, (StringExternal("Param/Value/lib_9770F675_2C5B3FA3") + (IntToText(lib9770F675_gv_zeratulLevelCurrent) + StringExternal("Param/Value/lib_9770F675_19E99C69"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply4_Init () {
    lib9770F675_gt_UpdateProtossSupply4 = TriggerCreate("lib9770F675_gt_UpdateProtossSupply4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan_Powers SCMR (Run at Start)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Map_Start14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8357AD84_g;
    int auto8357AD84_u;
    unit auto8357AD84_var;
    unitgroup autoBF2A12C9_g;
    int autoBF2A12C9_u;
    unit autoBF2A12C9_var;
    unitgroup autoE2A134A2_g;
    int autoE2A134A2_u;
    unit autoE2A134A2_var;
    unitgroup autoD5E89209_g;
    int autoD5E89209_u;
    unit autoD5E89209_var;
    unitgroup auto3A148461_g;
    int auto3A148461_u;
    unit auto3A148461_var;
    unitgroup auto2E7D85BA_g;
    int auto2E7D85BA_u;
    unit auto2E7D85BA_var;
    unitgroup auto7D01C38E_g;
    int auto7D01C38E_u;
    unit auto7D01C38E_var;
    unitgroup autoD305F2E9_g;
    int autoD305F2E9_u;
    unit autoD305F2E9_var;
    unitgroup autoC1911257_g;
    int autoC1911257_u;
    unit autoC1911257_var;
    unitgroup autoAAC35E56_g;
    int autoAAC35E56_u;
    unit autoAAC35E56_var;
    unitgroup auto3FE1A448_g;
    int auto3FE1A448_u;
    unit auto3FE1A448_var;
    unitgroup autoB22A8F5D_g;
    int autoB22A8F5D_u;
    unit autoB22A8F5D_var;
    unitgroup auto20E1BBDD_g;
    int auto20E1BBDD_u;
    unit auto20E1BBDD_var;
    unitgroup auto7FFD5751_g;
    int auto7FFD5751_u;
    unit auto7FFD5751_var;
    unitgroup auto6B1562C9_g;
    int auto6B1562C9_u;
    unit auto6B1562C9_var;
    unitgroup auto41D85A1D_g;
    int auto41D85A1D_u;
    unit auto41D85A1D_var;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(lib9770F675_gv_kerriganER, "Implosion", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "Implosion", false);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "PsionicLift", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "PsionicLift", false);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "WildMutation", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "WildMutation", false);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5Leviathan", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "K5Leviathan", false);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5DropPods", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "K5DropPods", false);
    UnitAbilityEnable(lib9770F675_gv_kerriganER, "Apocalypse", false);
    UnitAbilityShow(lib9770F675_gv_kerriganER, "Apocalypse", false);
    UnitAbilityReset(lib9770F675_gv_kerriganER, AbilityCommand("Val03QueenOfBladesDeepTunnel", 0), c_spendLocationAll);
    if ((lib9770F675_gv_optionalBaneling == true)) {
        TechTreeUnitAllow(1, "BanelingNest", true);
    }
    else {
        TechTreeUnitAllow(1, "BanelingNest", false);
        auto8357AD84_g = UnitGroup("Baneling", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8357AD84_u = UnitGroupCount(auto8357AD84_g, c_unitCountAll);
        for (;; auto8357AD84_u -= 1) {
            auto8357AD84_var = UnitGroupUnitFromEnd(auto8357AD84_g, auto8357AD84_u);
            if (auto8357AD84_var == null) { break; }
            UnitRemove(auto8357AD84_var);
        }
        autoBF2A12C9_g = UnitGroup("BanelingNest", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBF2A12C9_u = UnitGroupCount(autoBF2A12C9_g, c_unitCountAll);
        for (;; autoBF2A12C9_u -= 1) {
            autoBF2A12C9_var = UnitGroupUnitFromEnd(autoBF2A12C9_g, autoBF2A12C9_u);
            if (autoBF2A12C9_var == null) { break; }
            UnitRemove(autoBF2A12C9_var);
        }
    }
    if ((lib9770F675_gv_optionalStewartBonus == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "StewartBonus", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "StewartBonus", 0);
    }
    if ((lib9770F675_gv_optionalInfestedMarine == true)) {
        TriggerEnable(lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR, false);
    }
    else {
        if ((lib9770F675_gv_optionalInfestedBomb == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestedTerranBomber", 1);
        }
        else {
            TechTreeAbilityAllow(1, AbilityCommand("InfestedTerrans", 0), false);
        }
    }
    if ((lib9770F675_gv_optionalAberration == true)) {
        TechTreeUnitAllow(1, "InfestedAbomination", true);
        TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), true);
        TechTreeUnitAllow(1, "Brutalisk", false);
        TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
        auto2E7D85BA_g = UnitGroup("Brutalisk", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2E7D85BA_u = UnitGroupCount(auto2E7D85BA_g, c_unitCountAll);
        for (;; auto2E7D85BA_u -= 1) {
            auto2E7D85BA_var = UnitGroupUnitFromEnd(auto2E7D85BA_g, auto2E7D85BA_u);
            if (auto2E7D85BA_var == null) { break; }
            UnitRemove(auto2E7D85BA_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalBrutalisk == true)) {
            TechTreeUnitAllow(1, "Brutalisk", true);
            TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), true);
            TechTreeUnitAllow(1, "InfestedAbomination", false);
            TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), false);
            autoE2A134A2_g = UnitGroup("InfestedAbomination", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE2A134A2_u = UnitGroupCount(autoE2A134A2_g, c_unitCountAll);
            for (;; autoE2A134A2_u -= 1) {
                autoE2A134A2_var = UnitGroupUnitFromEnd(autoE2A134A2_g, autoE2A134A2_u);
                if (autoE2A134A2_var == null) { break; }
                UnitRemove(autoE2A134A2_var);
            }
        }
        else {
            TechTreeUnitAllow(1, "Brutalisk", false);
            TechTreeAbilityAllow(1, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
            TechTreeUnitAllow(1, "InfestedAbomination", false);
            TechTreeAbilityAllow(1, AbilityCommand("LarvaTrain", 11), false);
            autoD5E89209_g = UnitGroup("Brutalisk", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD5E89209_u = UnitGroupCount(autoD5E89209_g, c_unitCountAll);
            for (;; autoD5E89209_u -= 1) {
                autoD5E89209_var = UnitGroupUnitFromEnd(autoD5E89209_g, autoD5E89209_u);
                if (autoD5E89209_var == null) { break; }
                UnitRemove(autoD5E89209_var);
            }
            auto3A148461_g = UnitGroup("InfestedAbomination", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3A148461_u = UnitGroupCount(auto3A148461_g, c_unitCountAll);
            for (;; auto3A148461_u -= 1) {
                auto3A148461_var = UnitGroupUnitFromEnd(auto3A148461_g, auto3A148461_u);
                if (auto3A148461_var == null) { break; }
                UnitRemove(auto3A148461_var);
            }
        }
    }
    if ((lib9770F675_gv_optionalRavager == true)) {
        TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), true);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), false);
        TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), false);
        auto7FFD5751_g = UnitGroup("ImpalerDen", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto7FFD5751_u = UnitGroupCount(auto7FFD5751_g, c_unitCountAll);
        for (;; auto7FFD5751_u -= 1) {
            auto7FFD5751_var = UnitGroupUnitFromEnd(auto7FFD5751_g, auto7FFD5751_u);
            if (auto7FFD5751_var == null) { break; }
            UnitRemove(auto7FFD5751_var);
        }
        auto6B1562C9_g = UnitGroup("Impaler", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto6B1562C9_u = UnitGroupCount(auto6B1562C9_g, c_unitCountAll);
        for (;; auto6B1562C9_u -= 1) {
            auto6B1562C9_var = UnitGroupUnitFromEnd(auto6B1562C9_g, auto6B1562C9_u);
            if (auto6B1562C9_var == null) { break; }
            UnitRemove(auto6B1562C9_var);
        }
        auto41D85A1D_g = UnitGroup("ImpalerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto41D85A1D_u = UnitGroupCount(auto41D85A1D_g, c_unitCountAll);
        for (;; auto41D85A1D_u -= 1) {
            auto41D85A1D_var = UnitGroupUnitFromEnd(auto41D85A1D_g, auto41D85A1D_u);
            if (auto41D85A1D_var == null) { break; }
            UnitRemove(auto41D85A1D_var);
        }
    }
    else {
        if ((lib9770F675_gv_optionalImpaler == true)) {
            TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), true);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), true);
            TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), true);
            autoB22A8F5D_g = UnitGroup("Ravager", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoB22A8F5D_u = UnitGroupCount(autoB22A8F5D_g, c_unitCountAll);
            for (;; autoB22A8F5D_u -= 1) {
                autoB22A8F5D_var = UnitGroupUnitFromEnd(autoB22A8F5D_g, autoB22A8F5D_u);
                if (autoB22A8F5D_var == null) { break; }
                UnitRemove(autoB22A8F5D_var);
            }
            auto20E1BBDD_g = UnitGroup("RavagerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto20E1BBDD_u = UnitGroupCount(auto20E1BBDD_g, c_unitCountAll);
            for (;; auto20E1BBDD_u -= 1) {
                auto20E1BBDD_var = UnitGroupUnitFromEnd(auto20E1BBDD_g, auto20E1BBDD_u);
                if (auto20E1BBDD_var == null) { break; }
                UnitRemove(auto20E1BBDD_var);
            }
        }
        else {
            TechTreeAbilityAllow(1, AbilityCommand("MorphToRavager", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 0), false);
            TechTreeAbilityAllow(1, AbilityCommand("UpgradeToImpalerDen", 1), false);
            TechTreeAbilityAllow(1, AbilityCommand("MorphRoachToImpaler", 0), false);
            auto7D01C38E_g = UnitGroup("ImpalerDen", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto7D01C38E_u = UnitGroupCount(auto7D01C38E_g, c_unitCountAll);
            for (;; auto7D01C38E_u -= 1) {
                auto7D01C38E_var = UnitGroupUnitFromEnd(auto7D01C38E_g, auto7D01C38E_u);
                if (auto7D01C38E_var == null) { break; }
                UnitRemove(auto7D01C38E_var);
            }
            autoD305F2E9_g = UnitGroup("Impaler", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoD305F2E9_u = UnitGroupCount(autoD305F2E9_g, c_unitCountAll);
            for (;; autoD305F2E9_u -= 1) {
                autoD305F2E9_var = UnitGroupUnitFromEnd(autoD305F2E9_g, autoD305F2E9_u);
                if (autoD305F2E9_var == null) { break; }
                UnitRemove(autoD305F2E9_var);
            }
            autoC1911257_g = UnitGroup("ImpalerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoC1911257_u = UnitGroupCount(autoC1911257_g, c_unitCountAll);
            for (;; autoC1911257_u -= 1) {
                autoC1911257_var = UnitGroupUnitFromEnd(autoC1911257_g, autoC1911257_u);
                if (autoC1911257_var == null) { break; }
                UnitRemove(autoC1911257_var);
            }
            autoAAC35E56_g = UnitGroup("Ravager", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoAAC35E56_u = UnitGroupCount(autoAAC35E56_g, c_unitCountAll);
            for (;; autoAAC35E56_u -= 1) {
                autoAAC35E56_var = UnitGroupUnitFromEnd(autoAAC35E56_g, autoAAC35E56_u);
                if (autoAAC35E56_var == null) { break; }
                UnitRemove(autoAAC35E56_var);
            }
            auto3FE1A448_g = UnitGroup("RavagerBurrowed", 1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto3FE1A448_u = UnitGroupCount(auto3FE1A448_g, c_unitCountAll);
            for (;; auto3FE1A448_u -= 1) {
                auto3FE1A448_var = UnitGroupUnitFromEnd(auto3FE1A448_g, auto3FE1A448_u);
                if (auto3FE1A448_var == null) { break; }
                UnitRemove(auto3FE1A448_var);
            }
        }
    }
    Wait(0.1, c_timeReal);
    if ((lib9770F675_gv_kerriganSTRLevelCurrent >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel1", 1);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent >= 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel2", 1);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent >= 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel3", 1);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent >= 4)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel4", 1);
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent >= 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel5", 1);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel1", 1);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent >= 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel2", 1);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent >= 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel3", 1);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent >= 4)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel4", 1);
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent >= 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel5", 1);
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5PrimalSlash", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Mend", 1);
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent >= 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel2", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "Implosion", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "Implosion", true);
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent >= 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel3", 1);
        if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CrushingGrip", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "PsionicLift", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "PsionicLift", true);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5WildMutation", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "WildMutation", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "WildMutation", true);
        }
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent >= 4)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel4", 1);
        if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Leviathan", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5Leviathan", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "K5Leviathan", true);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5DropPods", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5DropPods", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "K5DropPods", true);
        }
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent >= 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel5", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Apocalypse", 1);
        UnitAbilityEnable(lib9770F675_gv_kerriganER, "Apocalypse", true);
        UnitAbilityShow(lib9770F675_gv_kerriganER, "Apocalypse", true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Map_Start14_Init () {
    lib9770F675_gt_Map_Start14 = TriggerCreate("lib9770F675_gt_Map_Start14_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stewart_Broodlings SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Stewart_BroodlingsSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_optionalStewartBonus != false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((lib9770F675_gv_stewartER != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "EthanStewart"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "K5InfestBroodlings", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Stewart_BroodlingsSCMR_Init () {
    lib9770F675_gt_Stewart_BroodlingsSCMR = TriggerCreate("lib9770F675_gt_Stewart_BroodlingsSCMR_Func");
    TriggerAddEventUnitDamaged(lib9770F675_gt_Stewart_BroodlingsSCMR, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deep_Tunnel SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Deep_TunnelSCMR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto44E458B0_g;
    int auto44E458B0_u;
    unit auto44E458B0_var;
    unitgroup auto312556E1_g;
    int auto312556E1_u;
    unit auto312556E1_var;
    unitgroup autoD41783A1_g;
    int autoD41783A1_u;
    unit autoD41783A1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((lib9770F675_gv_kerriganER != null))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSelect(lib9770F675_gv_kerriganER, 1, false);
    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateSelectable, false);
    UnitIssueOrder(lib9770F675_gv_kerriganER, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    auto44E458B0_g = UnitGroup("Hatchery", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto44E458B0_u = UnitGroupCount(auto44E458B0_g, c_unitCountAll);
    for (;; auto44E458B0_u -= 1) {
        auto44E458B0_var = UnitGroupUnitFromEnd(auto44E458B0_g, auto44E458B0_u);
        if (auto44E458B0_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_hatchery, auto44E458B0_var);
    }
    auto312556E1_g = UnitGroup("Lair", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto312556E1_u = UnitGroupCount(auto312556E1_g, c_unitCountAll);
    for (;; auto312556E1_u -= 1) {
        auto312556E1_var = UnitGroupUnitFromEnd(auto312556E1_g, auto312556E1_u);
        if (auto312556E1_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_lair, auto312556E1_var);
    }
    autoD41783A1_g = UnitGroup("Hive", 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD41783A1_u = UnitGroupCount(autoD41783A1_g, c_unitCountAll);
    for (;; autoD41783A1_u -= 1) {
        autoD41783A1_var = UnitGroupUnitFromEnd(autoD41783A1_g, autoD41783A1_u);
        if (autoD41783A1_var == null) { break; }
        UnitGroupAdd(lib9770F675_gv_hive, autoD41783A1_var);
    }
    Wait(0.5, c_timeGame);
    if ((UnitGroupCount(lib9770F675_gv_hive, c_unitCountAlive) > 0)) {
        lv_target = UnitGroupClosestToPoint(lib9770F675_gv_hive, UnitGetPosition(lib9770F675_gv_kerriganER));
        UnitIssueOrder(lib9770F675_gv_kerriganER, OrderTargetingPoint(AbilityCommand("Val03QueenOfBladesDeepTunnel", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
    }
    else {
        if ((UnitGroupCount(lib9770F675_gv_lair, c_unitCountAlive) > 0)) {
            lv_target = UnitGroupClosestToPoint(lib9770F675_gv_lair, UnitGetPosition(lib9770F675_gv_kerriganER));
            UnitIssueOrder(lib9770F675_gv_kerriganER, OrderTargetingPoint(AbilityCommand("Val03QueenOfBladesDeepTunnel", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lib9770F675_gv_hatchery, c_unitCountAlive) > 0)) {
                lv_target = UnitGroupClosestToPoint(lib9770F675_gv_hatchery, UnitGetPosition(lib9770F675_gv_kerriganER));
                UnitIssueOrder(lib9770F675_gv_kerriganER, OrderTargetingPoint(AbilityCommand("Val03QueenOfBladesDeepTunnel", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
            }

        }
    }
    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateSelectable, true);
    Wait(1.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9770F675_8549D484"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lib9770F675_gv_kerriganER), 2.0, Color(100.00, 50.20, 0.00));
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Deep_TunnelSCMR_Init () {
    lib9770F675_gt_Deep_TunnelSCMR = TriggerCreate("lib9770F675_gt_Deep_TunnelSCMR_Func");
    TriggerAddEventUnitDamaged(lib9770F675_gt_Deep_TunnelSCMR, UnitRefFromVariable("lib9770F675_gv_kerriganER"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove_Immortal_Behavior SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Remove_Immortal_BehaviorSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((lib9770F675_gv_kerriganER != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    UnitBehaviorRemove(lib9770F675_gv_kerriganER, "GenericDontDie", 1);
    TimerStart(lib9770F675_gv_deep_tunnel_timer, 300.0, false, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Remove_Immortal_BehaviorSCMR_Init () {
    lib9770F675_gt_Remove_Immortal_BehaviorSCMR = TriggerCreate("lib9770F675_gt_Remove_Immortal_BehaviorSCMR_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_Remove_Immortal_BehaviorSCMR, UnitRefFromVariable("lib9770F675_gv_kerriganER"), AbilityCommand("Val03QueenOfBladesDeepTunnel", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Re-Add_Immortal_Behavior SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lib9770F675_gv_kerriganER, "GenericDontDie", lib9770F675_gv_kerriganER, 1);
    TriggerEnable(lib9770F675_gt_Deep_TunnelSCMR, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR_Init () {
    lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR = TriggerCreate("lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR_Func");
    TriggerAddEventTimer(lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR, lib9770F675_gv_deep_tunnel_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor_Eggs - Use Marine Version SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestedTerransEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(14.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", c_unitCreateIgnorePlacement, 1, UnitGetPosition(EventUnit()));
    UnitBehaviorAddPlayer(UnitLastCreated(), "InfestedTerranTimedLife", 1, 1);
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR_Init () {
    lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR = TriggerCreate("lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR_Func");
    TriggerAddEventUnitRegion(lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectivePsiComplete
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ObjectivePsiComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(lib9770F675_gv_objective_Psi, c_objectiveStateCompleted);
    SoundPlay(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetName(lib9770F675_gv_objective_Psi, (StringExternal("Param/Value/lib_9770F675_F37F6C9B") + IntToText(lib9770F675_gv_psiRemaining) + StringExternal("Param/Value/lib_9770F675_4235DB14")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ObjectivePsiComplete_Init () {
    lib9770F675_gt_ObjectivePsiComplete = TriggerCreate("lib9770F675_gt_ObjectivePsiComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Kerrigan Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ShowProtossSupply3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_kerriganLeaderboard == c_boardNone)) {
        BoardCreate(1, 3, StringExternal("Param/Value/lib_9770F675_99F2F71C"), Color(0.00, 100.00, 0.00));
        lib9770F675_gv_kerriganLeaderboard = BoardLastCreated();
        BoardSetState(lib9770F675_gv_kerriganLeaderboard, PlayerGroupAll(), c_boardStateShowTitle, false);
        BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, c_boardRowHeader, (StringExternal("Param/Value/lib_9770F675_AE9E42CD") + (IntToText(lib9770F675_gv_kerriganEvolutionLevel) + StringExternal("Param/Value/lib_9770F675_65F93AD3"))));
        BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_8F4240AE") + (IntToText(lib9770F675_gv_biomassCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_8631B06A") + (IntToText(lib9770F675_gv_biomassCap) + StringExternal("Param/Value/lib_9770F675_567D21A6"))))));
        BoardItemSetIcon(lib9770F675_gv_kerriganLeaderboard, 1, 1, "Assets\\Textures\\btn-icon-biomass.dds", true);
        BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_21F84C7A") + (IntToText(lib9770F675_gv_psiCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_D023A0E8") + (IntToText(lib9770F675_gv_psiFound) + (StringExternal("Param/Value/lib_9770F675_93BC22B3") + (IntToText(lib9770F675_gv_psiNeeded) + StringExternal("Param/Value/lib_9770F675_42FA5017"))))))));
        BoardItemSetIcon(lib9770F675_gv_kerriganLeaderboard, 1, 2, "Assets\\Textures\\btn-upgrade-kerrigan-crushinggripwave.dds", true);
        BoardMinimizeShow(lib9770F675_gv_kerriganLeaderboard, PlayerGroupAll(), true);
        TriggerEnable(lib9770F675_gt_UpdateProtossSupply, true);
        libNtve_gf_DisplayScreenButton(lib9770F675_gv_metamorphButton, StringExternal("Param/Value/lib_9770F675_39F2BB77"), 350, 50, c_anchorTopRight, 65, 175, lib9770F675_gt_KerriganLevelUp);
        DialogControlSetEnabled(libNtve_gf_ScreenButton(lib9770F675_gv_metamorphButton), PlayerGroupAll(), false);
        libNtve_gf_HideScreenButton(true, lib9770F675_gv_metamorphButton);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ShowProtossSupply3_Init () {
    lib9770F675_gt_ShowProtossSupply3 = TriggerCreate("lib9770F675_gt_ShowProtossSupply3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Kerrigan Board SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_6AA3268B") + (IntToText(lib9770F675_gv_biomassCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_BEEE3957") + (IntToText(lib9770F675_gv_biomassCap) + StringExternal("Param/Value/lib_9770F675_710BF42A"))))));
    BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, 2, (StringExternal("Param/Value/lib_9770F675_03740517") + (IntToText(lib9770F675_gv_psiCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_3A058EB7") + (IntToText(lib9770F675_gv_psiFound) + (StringExternal("Param/Value/lib_9770F675_894274DB") + (IntToText(lib9770F675_gv_psiNeeded) + StringExternal("Param/Value/lib_9770F675_7601248C"))))))));
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 50) && (lib9770F675_gv_kerriganSTRLevelCurrent == 0)) {
        lib9770F675_gv_DropTimer_Increment6 = true;
        lib9770F675_gv_strLevelGrow = 1;
        lib9770F675_gv_strLevelBioUsed = 50;
    }
    else {
        if ((lib9770F675_gv_biomassCurrentLevelTotal >= 100) && (lib9770F675_gv_kerriganSTRLevelCurrent == 1)) {
            lib9770F675_gv_DropTimer_Increment6 = true;
            lib9770F675_gv_strLevelGrow = 2;
            lib9770F675_gv_strLevelBioUsed = 100;
        }
        else {
            if ((lib9770F675_gv_biomassCurrentLevelTotal >= 175) && (lib9770F675_gv_kerriganSTRLevelCurrent == 2)) {
                lib9770F675_gv_DropTimer_Increment6 = true;
                lib9770F675_gv_strLevelGrow = 3;
                lib9770F675_gv_strLevelBioUsed = 175;
            }
            else {
                if ((lib9770F675_gv_biomassCurrentLevelTotal >= 225) && (lib9770F675_gv_kerriganSTRLevelCurrent == 3)) {
                    lib9770F675_gv_DropTimer_Increment6 = true;
                    lib9770F675_gv_strLevelGrow = 4;
                    lib9770F675_gv_strLevelBioUsed = 225;
                }
                else {
                    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 300) && (lib9770F675_gv_kerriganSTRLevelCurrent == 4)) {
                        lib9770F675_gv_DropTimer_Increment6 = true;
                        lib9770F675_gv_strLevelGrow = 5;
                        lib9770F675_gv_strLevelBioUsed = 300;
                    }
                    else {
                        if ((lib9770F675_gv_kerriganSTRLevelCurrent == 5)) {
                            lib9770F675_gv_strLevelMax = true;
                        }

                    }
                }
            }
        }
    }
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 50) && (lib9770F675_gv_kerriganDEFLevelCurrent == 0)) {
        lib9770F675_gv_DropTimer_Increment5 = true;
        lib9770F675_gv_defLevelGrow = 1;
        lib9770F675_gv_defLevelBioUsed = 50;
    }
    else {
        if ((lib9770F675_gv_biomassCurrentLevelTotal >= 100) && (lib9770F675_gv_kerriganDEFLevelCurrent == 1)) {
            lib9770F675_gv_DropTimer_Increment5 = true;
            lib9770F675_gv_defLevelGrow = 2;
            lib9770F675_gv_defLevelBioUsed = 100;
        }
        else {
            if ((lib9770F675_gv_biomassCurrentLevelTotal >= 175) && (lib9770F675_gv_kerriganDEFLevelCurrent == 2)) {
                lib9770F675_gv_DropTimer_Increment5 = true;
                lib9770F675_gv_defLevelGrow = 3;
                lib9770F675_gv_defLevelBioUsed = 175;
            }
            else {
                if ((lib9770F675_gv_biomassCurrentLevelTotal >= 225) && (lib9770F675_gv_kerriganDEFLevelCurrent == 3)) {
                    lib9770F675_gv_DropTimer_Increment5 = true;
                    lib9770F675_gv_defLevelGrow = 4;
                    lib9770F675_gv_defLevelBioUsed = 225;
                }
                else {
                    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 300) && (lib9770F675_gv_kerriganDEFLevelCurrent == 4)) {
                        lib9770F675_gv_DropTimer_Increment5 = true;
                        lib9770F675_gv_defLevelGrow = 5;
                        lib9770F675_gv_defLevelBioUsed = 300;
                    }
                    else {
                        if ((lib9770F675_gv_kerriganDEFLevelCurrent == 5)) {
                            lib9770F675_gv_defLevelMax = true;
                        }

                    }
                }
            }
        }
    }
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 100) && (lib9770F675_gv_psiCurrentLevelTotal >= 5) && (lib9770F675_gv_kerriganPSILevelCurrent == 1)) {
        lib9770F675_gv_DropTimer_Increment3 = true;
        lib9770F675_gv_psiLevelGrow = 2;
        lib9770F675_gv_psiLevelBioUsed = 100;
    }
    else {
        if ((lib9770F675_gv_biomassCurrentLevelTotal >= 175) && (lib9770F675_gv_psiCurrentLevelTotal >= 10) && (lib9770F675_gv_kerriganPSILevelCurrent == 2)) {
            lib9770F675_gv_DropTimer_Increment3 = true;
            lib9770F675_gv_psiLevelGrow = 3;
            lib9770F675_gv_psiLevelBioUsed = 175;
        }
        else {
            if ((lib9770F675_gv_biomassCurrentLevelTotal >= 225) && (lib9770F675_gv_psiCurrentLevelTotal >= 15) && (lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
                lib9770F675_gv_DropTimer_Increment3 = true;
                lib9770F675_gv_psiLevelGrow = 4;
                lib9770F675_gv_psiLevelBioUsed = 225;
            }
            else {
                if ((lib9770F675_gv_biomassCurrentLevelTotal >= 300) && (lib9770F675_gv_psiCurrentLevelTotal >= 20) && (lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
                    lib9770F675_gv_DropTimer_Increment3 = true;
                    lib9770F675_gv_psiLevelGrow = 5;
                    lib9770F675_gv_psiLevelBioUsed = 300;
                }
                else {
                    if ((lib9770F675_gv_kerriganPSILevelCurrent == 5)) {
                        lib9770F675_gv_psiLevelMax = true;
                    }

                }
            }
        }
    }
    if (((lib9770F675_gv_DropTimer_Increment6 == true) || (lib9770F675_gv_DropTimer_Increment5 == true) || (lib9770F675_gv_DropTimer_Increment3 == true))) {
        SoundPlay(SoundLink("UI_DropdownSelect", -1), PlayerGroupAll(), 100.0, 0.0);
        DialogControlSetEnabled(libNtve_gf_ScreenButton(lib9770F675_gv_metamorphButton), PlayerGroupAll(), true);
        libNtve_gf_FlashScreenButton(lib9770F675_gv_metamorphButton, 2.0, ColorWithAlpha(100.00, 50.20, 0.00, 0.00), ColorWithAlpha(50.20, 0.00, 100.00, 0.00));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply_Init () {
    lib9770F675_gt_UpdateProtossSupply = TriggerCreate("lib9770F675_gt_UpdateProtossSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Kerrigan Level SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_UpdateProtossSupply5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, c_boardRowHeader, (StringExternal("Param/Value/lib_9770F675_0C344904") + (IntToText(lib9770F675_gv_kerriganEvolutionLevel) + StringExternal("Param/Value/lib_9770F675_62F4FC8C"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_UpdateProtossSupply5_Init () {
    lib9770F675_gt_UpdateProtossSupply5 = TriggerCreate("lib9770F675_gt_UpdateProtossSupply5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerriganCapNote
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KerriganCapNote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_kerriganER != null))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == lib9770F675_gv_kerriganER))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((lib9770F675_gv_biomassCurrentLevelTotal >= (lib9770F675_gv_biomassCap + 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, false);
    TextTagCreate(StringExternal("Param/Value/lib_9770F675_BDFEF11F"), 30, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaWarning, StringExternal("Param/Value/lib_9770F675_E48A682E"));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaWarning);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KerriganCapNote_Init () {
    lib9770F675_gt_KerriganCapNote = TriggerCreate("lib9770F675_gt_KerriganCapNote_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_KerriganCapNote, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerriganBioMassUpdate
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KerriganBioMassUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_kerriganER != null))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == lib9770F675_gv_kerriganER))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((lib9770F675_gv_biomassCurrentLevelTotal <= (lib9770F675_gv_biomassCap + 5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Broodling") || (UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Zergling") || (UnitGetType(EventUnit()) == "ZerglingBurrowed") || (UnitGetType(EventUnit()) == "Drone") || (UnitGetType(EventUnit()) == "DroneBurrowed") || (UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Scourge"))) {
        lib9770F675_gv_biomassCurrentLevelTotal += 1;
        lib9770F675_gv_biomassFound += 1;
        TextTagCreate(StringExternal("Param/Value/lib_9770F675_8452B387"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
    }
    else {
        if (((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "Firebat") || (UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "Medic") || (UnitGetType(EventUnit()) == "Marauder") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "HighTemplarTaldarim") || (UnitGetType(EventUnit()) == "DarkTemplar") || (UnitGetType(EventUnit()) == "Lyote"))) {
            lib9770F675_gv_biomassCurrentLevelTotal += 2;
            lib9770F675_gv_biomassFound += 2;
            TextTagCreate(StringExternal("Param/Value/lib_9770F675_AAD4B30F"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
        }
        else {
            if (((UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "HydraliskBurrowed") || (UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "DefilerMP") || (UnitGetType(EventUnit()) == "DefilerMPBurrowed") || (UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestorBurrowed") || (UnitGetType(EventUnit()) == "Queen") || (UnitGetType(EventUnit()) == "QueenClassic") || (UnitGetType(EventUnit()) == "Bengalaas"))) {
                lib9770F675_gv_biomassCurrentLevelTotal += 3;
                lib9770F675_gv_biomassFound += 3;
                TextTagCreate(StringExternal("Param/Value/lib_9770F675_EC87EAA2"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
            }
            else {
                if (((UnitGetType(EventUnit()) == "Lurker") || (UnitGetType(EventUnit()) == "LurkerBurrowed") || (UnitGetType(EventUnit()) == "Impaler") || (UnitGetType(EventUnit()) == "ImpalerBurrowed") || (UnitGetType(EventUnit()) == "GuardianMP") || (UnitGetType(EventUnit()) == "DevourerMP") || (UnitGetType(EventUnit()) == "Corruptor") || (UnitGetType(EventUnit()) == "OverlordCocoon") || (UnitGetType(EventUnit()) == "BroodLordCocoon") || (UnitGetType(EventUnit()) == "BroodLord"))) {
                    lib9770F675_gv_biomassCurrentLevelTotal += 4;
                    lib9770F675_gv_biomassFound += 4;
                    TextTagCreate(StringExternal("Param/Value/lib_9770F675_4076E5EA"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                }
                else {
                    if (((UnitGetType(EventUnit()) == "Ultralisk") || (UnitGetType(EventUnit()) == "UltraliskBurrowed"))) {
                        lib9770F675_gv_biomassCurrentLevelTotal += 5;
                        lib9770F675_gv_biomassFound += 5;
                        TextTagCreate(StringExternal("Param/Value/lib_9770F675_3E7C7CFC"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                    }
                    else {
                        if (((UnitGetType(EventUnit()) == "UrsadakMaleExotic") || (UnitGetType(EventUnit()) == "HybridBehemoth") || (UnitGetType(EventUnit()) == "HybridReaver") || (UnitGetType(EventUnit()) == "HybridDominator") || (UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "HybridDominatorVoid") || (UnitGetType(EventUnit()) == "HybridGeneral"))) {
                            lib9770F675_gv_biomassCurrentLevelTotal += 10;
                            lib9770F675_gv_biomassFound += 10;
                            TextTagCreate(StringExternal("Param/Value/lib_9770F675_0D5BBBA3"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                        }
                        else {
                            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
                                lib9770F675_gv_biomassCurrentLevelTotal += 1;
                                TextTagCreate(StringExternal("Param/Value/lib_9770F675_1D2B787A"), 20, UnitGetPosition(EventUnit()), 0.4, true, true, PlayerGroupAll());
                            }

                        }
                    }
                }
            }
        }
    }
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KerriganBioMassUpdate_Init () {
    lib9770F675_gt_KerriganBioMassUpdate = TriggerCreate("lib9770F675_gt_KerriganBioMassUpdate_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_KerriganBioMassUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerriganLevelUp
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KerriganLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_strButton;
    int lv_defButton;
    int lv_psiButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_ActionButtonSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, false);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, false);
    UnitPauseAll(true);
    DialogControlSetEnabled(libNtve_gf_ScreenButton(lib9770F675_gv_metamorphButton), PlayerGroupAll(), false);
    libNtve_gf_StopFlashingScreenButton(lib9770F675_gv_metamorphButton);
    if ((lib9770F675_gv_achievement_timer != null)) {
        TimerPause(lib9770F675_gv_achievement_timer, true);
    }

    if ((lib9770F675_gv_achievement_timer2 != null)) {
        TimerPause(lib9770F675_gv_achievement_timer2, true);
    }

    UISetCursorVisible(PlayerGroupAll(), true);
    DialogCreate(900, 400, c_anchorCenter, 0, 0, true);
    lib9770F675_gv_DropTimer_Increment2 = DialogLastCreated();
    DialogSetTitle(lib9770F675_gv_DropTimer_Increment2, StringExternal("Param/Value/lib_9770F675_3E26FCDD"));
    DialogSetVisible(lib9770F675_gv_DropTimer_Increment2, PlayerGroupAll(), true);
    if ((lib9770F675_gv_DropTimer_Increment6 == true)) {
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopLeft, 60, 90, StringToText(""), "Assets\\Textures\\strLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomLeft, 50, 90, (StringExternal("Param/Value/lib_9770F675_3704FF11") + (IntToText(lib9770F675_gv_strLevelGrow) + (StringExternal("Param/Value/lib_9770F675_910AB1B5") + (IntToText(lib9770F675_gv_strLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_FA87B0A2"))))), StringExternal("Param/Value/lib_9770F675_9646E814"), "Assets\\Textures\\strLevel.tga");
        lib9770F675_gv_strUpgrade = DialogControlLastCreated();
        DialogControlSetVisible(lib9770F675_gv_strUpgrade, PlayerGroupAll(), true);
    }
    else {
        if ((lib9770F675_gv_strLevelMax == true)) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopLeft, 60, 90, StringToText(""), "Assets\\Textures\\strLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomLeft, 50, 90, StringExternal("Param/Value/lib_9770F675_1FC49D5A"), StringExternal("Param/Value/lib_9770F675_F9A83358"), "Assets\\Textures\\strLevel.tga");
            lib9770F675_gv_strUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_strUpgradeFail, PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopLeft, 60, 90, StringToText(""), "Assets\\Textures\\strLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomLeft, 50, 90, StringExternal("Param/Value/lib_9770F675_046A209A"), StringExternal("Param/Value/lib_9770F675_0C7C3B3F"), "Assets\\Textures\\strLevel.tga");
            lib9770F675_gv_strUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_strUpgradeFail, PlayerGroupAll(), true);
        }
    }
    if ((lib9770F675_gv_DropTimer_Increment5 == true)) {
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTop, 0, 90, StringToText(""), "Assets\\Textures\\defLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottom, 0, 90, (StringExternal("Param/Value/lib_9770F675_7620F998") + (IntToText(lib9770F675_gv_defLevelGrow) + (StringExternal("Param/Value/lib_9770F675_EB1B2490") + (IntToText(lib9770F675_gv_defLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_BC32AE29"))))), StringExternal("Param/Value/lib_9770F675_FEF75664"), "Assets\\Textures\\defLevel.tga");
        lib9770F675_gv_defUpgrade = DialogControlLastCreated();
        DialogControlSetVisible(lib9770F675_gv_defUpgrade, PlayerGroupAll(), true);
    }
    else {
        if ((lib9770F675_gv_defLevelMax == true)) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTop, 0, 90, StringToText(""), "Assets\\Textures\\defLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottom, 0, 90, StringExternal("Param/Value/lib_9770F675_1F05C20F"), StringExternal("Param/Value/lib_9770F675_126DE8F9"), "Assets\\Textures\\defLevel.tga");
            lib9770F675_gv_defUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_defUpgradeFail, PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTop, 0, 90, StringToText(""), "Assets\\Textures\\defLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottom, 0, 90, StringExternal("Param/Value/lib_9770F675_60E9BD96"), StringExternal("Param/Value/lib_9770F675_0102E8E1"), "Assets\\Textures\\defLevel.tga");
            lib9770F675_gv_defUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_defUpgrade, PlayerGroupAll(), true);
        }
    }
    if ((lib9770F675_gv_DropTimer_Increment3 == true)) {
        libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopRight, 60, 90, StringToText(""), "Assets\\Textures\\psiLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomRight, 50, 90, (StringExternal("Param/Value/lib_9770F675_F9A43374") + (IntToText(lib9770F675_gv_psiLevelGrow) + (StringExternal("Param/Value/lib_9770F675_B08B0329") + (IntToText(lib9770F675_gv_psiLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_30260C8D"))))), StringExternal("Param/Value/lib_9770F675_4498F4A6"), "Assets\\Textures\\psiLevel.tga");
        lib9770F675_gv_psiUpgrade = DialogControlLastCreated();
        DialogControlSetVisible(lib9770F675_gv_psiUpgrade, PlayerGroupAll(), true);
    }
    else {
        if ((lib9770F675_gv_psiLevelMax == true)) {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopRight, 60, 90, StringToText(""), "Assets\\Textures\\psiLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomRight, 50, 90, StringExternal("Param/Value/lib_9770F675_C90C5A84"), StringExternal("Param/Value/lib_9770F675_44FD867B"), "Assets\\Textures\\psiLevel.tga");
            lib9770F675_gv_psiUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_psiUpgradeFail, PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_CreateDialogItemImage(lib9770F675_gv_DropTimer_Increment2, 150, 150, c_anchorTopRight, 60, 90, StringToText(""), "Assets\\Textures\\psiLevel.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottomRight, 50, 90, StringExternal("Param/Value/lib_9770F675_0758400E"), StringExternal("Param/Value/lib_9770F675_9C62F957"), "Assets\\Textures\\psiLevel.tga");
            lib9770F675_gv_psiUpgradeFail = DialogControlLastCreated();
            DialogControlSetVisible(lib9770F675_gv_psiUpgradeFail, PlayerGroupAll(), true);
        }
    }
    libNtve_gf_CreateDialogItemButton(lib9770F675_gv_DropTimer_Increment2, 175, 50, c_anchorBottom, 0, 30, StringExternal("Param/Value/lib_9770F675_BAF09162"), StringExternal("Param/Value/lib_9770F675_04226867"), "Assets/Textures/btn-command-cancel.dds");
    lib9770F675_gv_cancelUpgrade = DialogControlLastCreated();
    DialogControlSetVisible(lib9770F675_gv_cancelUpgrade, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KerriganLevelUp_Init () {
    lib9770F675_gt_KerriganLevelUp = TriggerCreate("lib9770F675_gt_KerriganLevelUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: cancelEvolution
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_cancelEvolution_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((lib9770F675_gv_cancelUpgrade == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, true);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, true);
    DialogDestroy(lib9770F675_gv_DropTimer_Increment2);
    UnitPauseAll(false);
    if ((lib9770F675_gv_achievement_timer != null)) {
        TimerPause(lib9770F675_gv_achievement_timer, false);
    }

    if ((lib9770F675_gv_achievement_timer2 != null)) {
        TimerPause(lib9770F675_gv_achievement_timer2, false);
    }

    DialogControlSetEnabled(libNtve_gf_ScreenButton(lib9770F675_gv_metamorphButton), PlayerGroupAll(), true);
    libNtve_gf_FlashScreenButton(lib9770F675_gv_metamorphButton, 2.0, ColorWithAlpha(100.00, 50.20, 0.00, 0.00), ColorWithAlpha(50.20, 0.00, 100.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_cancelEvolution_Init () {
    lib9770F675_gt_cancelEvolution = TriggerCreate("lib9770F675_gt_cancelEvolution_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_cancelEvolution, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fail_sound
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_fail_sound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((lib9770F675_gv_strUpgradeFail == EventDialogControl()) || (lib9770F675_gv_defUpgradeFail == EventDialogControl()) || (lib9770F675_gv_psiUpgradeFail == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_fail_sound_Init () {
    lib9770F675_gt_fail_sound = TriggerCreate("lib9770F675_gt_fail_sound_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_fail_sound, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: evolve_NOW
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_evolve_NOW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!(((lib9770F675_gv_strUpgrade == EventDialogControl()) || (lib9770F675_gv_defUpgrade == EventDialogControl()) || (lib9770F675_gv_psiUpgrade == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_strUpgrade == EventDialogControl())) {
        lib9770F675_gv_DropTimer_Increment6 = false;
        lib9770F675_gv_biomassCurrentLevelTotal = (lib9770F675_gv_biomassCurrentLevelTotal - lib9770F675_gv_strLevelBioUsed);
    }
    else {
        if ((lib9770F675_gv_defUpgrade == EventDialogControl())) {
            lib9770F675_gv_DropTimer_Increment5 = false;
            lib9770F675_gv_biomassCurrentLevelTotal = (lib9770F675_gv_biomassCurrentLevelTotal - lib9770F675_gv_defLevelBioUsed);
        }
        else {
            if ((lib9770F675_gv_psiUpgrade == EventDialogControl())) {
                lib9770F675_gv_DropTimer_Increment3 = false;
                lib9770F675_gv_biomassCurrentLevelTotal = (lib9770F675_gv_biomassCurrentLevelTotal - lib9770F675_gv_psiLevelBioUsed);
            }

        }
    }
    Wait(0.1, c_timeGame);
    BoardItemSetText(lib9770F675_gv_kerriganLeaderboard, 1, 1, (StringExternal("Param/Value/lib_9770F675_EC768CC3") + (IntToText(lib9770F675_gv_biomassCurrentLevelTotal) + (StringExternal("Param/Value/lib_9770F675_70E065AC") + (IntToText(lib9770F675_gv_biomassCap) + StringExternal("Param/Value/lib_9770F675_330099D5"))))));
    Wait(0.1, c_timeGame);
    DialogDestroy(lib9770F675_gv_DropTimer_Increment2);
    UnitPauseAll(false);
    if ((lib9770F675_gv_achievement_timer != null)) {
        TimerPause(lib9770F675_gv_achievement_timer, false);
    }

    if ((lib9770F675_gv_achievement_timer2 != null)) {
        TimerPause(lib9770F675_gv_achievement_timer2, false);
    }

    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateHighlightable, false);
    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateSelectable, false);
    UnitSelect(lib9770F675_gv_kerriganER, 1, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lib9770F675_gv_kerriganER), c_animNameDefault, "Stand Morph", 0, c_animTimeDefault);
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, 1, UnitGetPosition(lib9770F675_gv_kerriganER));
    lib9770F675_gv_DropTimer_Increment4 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lib9770F675_gv_kerriganER, true);
    libNtve_gf_ShowHideUnit(lib9770F675_gv_kerriganER, false);
    libNtve_gf_PauseUnit(lib9770F675_gv_kerriganER, true);
    TriggerEnable(lib9770F675_gt_KerriganCocoonDiesDefeatSCMR, true);
    if ((lib9770F675_gv_strUpgrade == EventDialogControl())) {
        TextTagCreate((StringExternal("Param/Value/lib_9770F675_D3D38AAF") + (IntToText(lib9770F675_gv_strLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_2214441E"))), 22, UnitGetPosition(lib9770F675_gv_DropTimer_Increment4), 0.4, true, true, PlayerGroupAll());
    }
    else {
        if ((lib9770F675_gv_defUpgrade == EventDialogControl())) {
            TextTagCreate((StringExternal("Param/Value/lib_9770F675_182A3C38") + (IntToText(lib9770F675_gv_defLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_04F23AAC"))), 22, UnitGetPosition(lib9770F675_gv_DropTimer_Increment4), 0.4, true, true, PlayerGroupAll());
        }
        else {
            if ((lib9770F675_gv_psiUpgrade == EventDialogControl())) {
                TextTagCreate((StringExternal("Param/Value/lib_9770F675_57266252") + (IntToText(lib9770F675_gv_psiLevelBioUsed) + StringExternal("Param/Value/lib_9770F675_4D6A0A83"))), 22, UnitGetPosition(lib9770F675_gv_DropTimer_Increment4), 0.4, true, true, PlayerGroupAll());
            }

        }
    }
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 51.76, 21.57));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    Wait(4.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    Wait(56.3, c_timeGame);
    TriggerEnable(lib9770F675_gt_KerriganCocoonDiesDefeatSCMR, false);
    Wait(0.1, c_timeGame);
    UnitKill(lib9770F675_gv_DropTimer_Increment4);
    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateHighlightable, true);
    UnitSetState(lib9770F675_gv_kerriganER, c_unitStateSelectable, true);
    libNtve_gf_PauseUnit(lib9770F675_gv_kerriganER, false);
    libNtve_gf_ShowHideUnit(lib9770F675_gv_kerriganER, true);
    libNtve_gf_MakeUnitInvulnerable(lib9770F675_gv_kerriganER, false);
    lib9770F675_gv_kerriganEvolutionLevel = (lib9770F675_gv_kerriganEvolutionLevel + 1);
    Wait(0.1, c_timeGame);
    if ((lib9770F675_gv_strUpgrade == EventDialogControl())) {
        TriggerExecute(lib9770F675_gt_strUpgradeselected, false, false);
    }
    else {
        if ((lib9770F675_gv_defUpgrade == EventDialogControl())) {
            TriggerExecute(lib9770F675_gt_defUpgradeselected, false, false);
        }
        else {
            if ((lib9770F675_gv_psiUpgrade == EventDialogControl())) {
                TriggerExecute(lib9770F675_gt_psiUpgradeselected, false, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_evolve_NOW_Init () {
    lib9770F675_gt_evolve_NOW = TriggerCreate("lib9770F675_gt_evolve_NOW_Func");
    TriggerAddEventDialogControl(lib9770F675_gt_evolve_NOW, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: strUpgrade selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_strUpgradeselected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 0)) {
        lib9770F675_gv_kerriganSTRLevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganSTRLevelCurrent == 1)) {
            lib9770F675_gv_kerriganSTRLevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel2", 1);
        }
        else {
            if ((lib9770F675_gv_kerriganSTRLevelCurrent == 2)) {
                lib9770F675_gv_kerriganSTRLevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel3", 1);
            }
            else {
                if ((lib9770F675_gv_kerriganSTRLevelCurrent == 3)) {
                    lib9770F675_gv_kerriganSTRLevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel4", 1);
                }
                else {
                    if ((lib9770F675_gv_kerriganSTRLevelCurrent == 4)) {
                        lib9770F675_gv_kerriganSTRLevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganSTRLevel5", 1);
                    }

                }
            }
        }
    }
    Wait(0.1, c_timeGame);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropEnergyPercent, 100.0);
    lib9770F675_gv_DropTimer_Increment6 = false;
    lib9770F675_gv_DropTimer_Increment5 = false;
    lib9770F675_gv_DropTimer_Increment3 = false;
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply5, false, false);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, true);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, true);
    lib9770F675_gf_Kerrigan_Level_UP_STR(lib9770F675_gv_kerriganER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_strUpgradeselected_Init () {
    lib9770F675_gt_strUpgradeselected = TriggerCreate("lib9770F675_gt_strUpgradeselected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: defUpgrade selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_defUpgradeselected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 0)) {
        lib9770F675_gv_kerriganDEFLevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganDEFLevelCurrent == 1)) {
            lib9770F675_gv_kerriganDEFLevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel2", 1);
        }
        else {
            if ((lib9770F675_gv_kerriganDEFLevelCurrent == 2)) {
                lib9770F675_gv_kerriganDEFLevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel3", 1);
            }
            else {
                if ((lib9770F675_gv_kerriganDEFLevelCurrent == 3)) {
                    lib9770F675_gv_kerriganDEFLevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel4", 1);
                }
                else {
                    if ((lib9770F675_gv_kerriganDEFLevelCurrent == 4)) {
                        lib9770F675_gv_kerriganDEFLevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganDEFLevel5", 1);
                    }

                }
            }
        }
    }
    Wait(0.1, c_timeGame);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropEnergyPercent, 100.0);
    lib9770F675_gv_DropTimer_Increment6 = false;
    lib9770F675_gv_DropTimer_Increment5 = false;
    lib9770F675_gv_DropTimer_Increment3 = false;
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply5, false, false);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, true);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, true);
    lib9770F675_gf_Kerrigan_Level_UP_DEF(lib9770F675_gv_kerriganER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_defUpgradeselected_Init () {
    lib9770F675_gt_defUpgradeselected = TriggerCreate("lib9770F675_gt_defUpgradeselected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: psiUpgrade selected
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_psiUpgradeselected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_kerriganPSILevelCurrent == 0)) {
        lib9770F675_gv_kerriganPSILevelCurrent = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel1", 1);
    }
    else {
        if ((lib9770F675_gv_kerriganPSILevelCurrent == 1)) {
            lib9770F675_gv_kerriganPSILevelCurrent = 2;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel2", 1);
            UnitAbilityEnable(lib9770F675_gv_kerriganER, "Implosion", true);
            UnitAbilityShow(lib9770F675_gv_kerriganER, "Implosion", true);
        }
        else {
            if ((lib9770F675_gv_kerriganPSILevelCurrent == 2)) {
                lib9770F675_gv_kerriganPSILevelCurrent = 3;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel3", 1);
                if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CrushingGrip", 1);
                    UnitAbilityEnable(lib9770F675_gv_kerriganER, "PsionicLift", true);
                    UnitAbilityShow(lib9770F675_gv_kerriganER, "PsionicLift", true);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "K5WildMutation", 1);
                    UnitAbilityEnable(lib9770F675_gv_kerriganER, "WildMutation", true);
                    UnitAbilityShow(lib9770F675_gv_kerriganER, "WildMutation", true);
                }
            }
            else {
                if ((lib9770F675_gv_kerriganPSILevelCurrent == 3)) {
                    lib9770F675_gv_kerriganPSILevelCurrent = 4;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel4", 1);
                    if ((lib9770F675_gv_plotSchezarDestroyed2 == true)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Leviathan", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5Leviathan", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5Leviathan", true);
                    }
                    else {
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5DropPods", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "K5DropPods", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "K5DropPods", true);
                    }
                }
                else {
                    if ((lib9770F675_gv_kerriganPSILevelCurrent == 4)) {
                        lib9770F675_gv_kerriganPSILevelCurrent = 5;
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "KerriganPSILevel5", 1);
                        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5Apocalypse", 1);
                        UnitAbilityEnable(lib9770F675_gv_kerriganER, "Apocalypse", true);
                        UnitAbilityShow(lib9770F675_gv_kerriganER, "Apocalypse", true);
                    }

                }
            }
        }
    }
    Wait(0.1, c_timeGame);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib9770F675_gv_kerriganER, c_unitPropEnergyPercent, 100.0);
    lib9770F675_gv_DropTimer_Increment6 = false;
    lib9770F675_gv_DropTimer_Increment5 = false;
    lib9770F675_gv_DropTimer_Increment3 = false;
    TriggerExecute(lib9770F675_gt_UpdateProtossSupply5, false, false);
    TriggerEnable(lib9770F675_gt_KerriganBioMassUpdate, true);
    TriggerEnable(lib9770F675_gt_SCMRERCheatKerriganBiomassBonus, true);
    lib9770F675_gf_Kerrigan_Level_UP_PSI(lib9770F675_gv_kerriganER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_psiUpgradeselected_Init () {
    lib9770F675_gt_psiUpgradeselected = TriggerCreate("lib9770F675_gt_psiUpgradeselected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerriganCocoonDiesDefeat SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_KerriganCocoonDiesDefeatSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((lib9770F675_gv_DropTimer_Increment4 != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraLockInput(1, true);
    ObjectiveSetState(DataTableGetObjective(true, "obj2"), c_objectiveStateFailed);
    SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraPan(1, UnitGetPosition(EventUnit()), 1.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundPlay(SoundLink("BWPdefeat", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_580236CD"));
    Wait(3.0, c_timeReal);
    lib9770F675_gf_Defeat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_KerriganCocoonDiesDefeatSCMR_Init () {
    lib9770F675_gt_KerriganCocoonDiesDefeatSCMR = TriggerCreate("lib9770F675_gt_KerriganCocoonDiesDefeatSCMR_Func");
    TriggerEnable(lib9770F675_gt_KerriganCocoonDiesDefeatSCMR, false);
    TriggerAddEventUnitDied(lib9770F675_gt_KerriganCocoonDiesDefeatSCMR, UnitRefFromVariable("lib9770F675_gv_DropTimer_Increment4"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: BioMassBonus SCMR
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_BioMassBonusSCMR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 125)) {
        if ((lib9770F675_gv__125_Dialog_Read == false)) {
            lib9770F675_gv__125_Dialog_Read = true;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5ImprovedOverlords", 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_1A03BB3A"));
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(10.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5ImprovedOverlords", 0);
        lib9770F675_gv__125_Dialog_Read = false;
    }
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 250)) {
        if ((lib9770F675_gv__250_Dialog_Read == false)) {
            lib9770F675_gv__250_Dialog_Read = true;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CreepBonuses", 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_3726FBBB"));
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(10.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5CreepBonuses", 0);
        lib9770F675_gv__250_Dialog_Read = false;
    }
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 375)) {
        if ((lib9770F675_gv__375_Dialog_Read == false)) {
            lib9770F675_gv__375_Dialog_Read = true;
            libNtve_gf_SetUpgradeLevelForPlayer(1, "K5TwoDrones", 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_94DE84EE"));
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(10.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "K5TwoDrones", 0);
        lib9770F675_gv__375_Dialog_Read = false;
    }
    if ((lib9770F675_gv_biomassCurrentLevelTotal >= 500)) {
        if ((lib9770F675_gv__500_Dialog_Read == false)) {
            lib9770F675_gv__500_Dialog_Read = true;
            TechTreeAbilityAllow(1, AbilityCommand("BuildGreaterNydusWorm", 0), true);
            TechTreeUnitAllow(1, "GreaterNydusWorm", true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_9770F675_9AC93A31"));
            SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(10.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("BuildGreaterNydusWorm", 0), false);
        TechTreeUnitAllow(1, "GreaterNydusWorm", false);
        lib9770F675_gv__500_Dialog_Read = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_BioMassBonusSCMR_Init () {
    lib9770F675_gt_BioMassBonusSCMR = TriggerCreate("lib9770F675_gt_BioMassBonusSCMR_Func");
    TriggerEnable(lib9770F675_gt_BioMassBonusSCMR, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_BioMassBonusSCMR, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GreaterNydusWorm
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_GreaterNydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;
    int lv_random_spawn;

    // Automatic Variable Declarations
    unitgroup autoB99A377F_g;
    int autoB99A377F_u;
    unit autoB99A377F_var;
    unitgroup auto426D2A4C_g;
    int auto426D2A4C_u;
    unit auto426D2A4C_var;
    unitgroup auto41F64616_g;
    int auto41F64616_u;
    unit auto41F64616_var;

    // Variable Initialization
    lv_random_spawn = 1;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GreaterNydusWorm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB99A377F_g = UnitGroup("Hatchery", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB99A377F_u = UnitGroupCount(autoB99A377F_g, c_unitCountAll);
    for (;; autoB99A377F_u -= 1) {
        autoB99A377F_var = UnitGroupUnitFromEnd(autoB99A377F_g, autoB99A377F_u);
        if (autoB99A377F_var == null) { break; }
        UnitAbilitySpendExplicit(autoB99A377F_var, AbilityCommand("BuildGreaterNydusWorm", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    auto426D2A4C_g = UnitGroup("Lair", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto426D2A4C_u = UnitGroupCount(auto426D2A4C_g, c_unitCountAll);
    for (;; auto426D2A4C_u -= 1) {
        auto426D2A4C_var = UnitGroupUnitFromEnd(auto426D2A4C_g, auto426D2A4C_u);
        if (auto426D2A4C_var == null) { break; }
        UnitAbilitySpendExplicit(auto426D2A4C_var, AbilityCommand("BuildGreaterNydusWorm", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    auto41F64616_g = UnitGroup("Hive", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto41F64616_u = UnitGroupCount(auto41F64616_g, c_unitCountAll);
    for (;; auto41F64616_u -= 1) {
        auto41F64616_var = UnitGroupUnitFromEnd(auto41F64616_g, auto41F64616_u);
        if (auto41F64616_var == null) { break; }
        UnitAbilitySpendExplicit(auto41F64616_var, AbilityCommand("BuildGreaterNydusWorm", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    lv_nydusWorm = EventUnit();
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 10.0), CameraGetTarget(1)) == true)) {
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth 01", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", 0), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 0.0, 100.0, 0.0);
    VisRevealArea(1, RegionCircle(UnitGetPosition(lv_nydusWorm), 4.0), 4.0, false);
    Wait(8.0, c_timeReal);
    if ((UnitIsAlive(lv_nydusWorm) == true)) {
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(8, 6, 6, 6), "Zergling", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(6, 4, 4, 4), "Hydralisk", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 2, 2, 2), "Roach", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 1, 1, 1), "Ultralisk", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
    }

    Wait(10.0, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_nydusWorm) == true)) {
            lv_random_spawn = RandomInt(1, 4);
            Wait(0.1, c_timeGame);
            if ((lv_random_spawn == 1)) {
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(4, 3, 3, 3), "Zergling", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
            }

            if ((lv_random_spawn == 2)) {
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(3, 2, 2, 2), "Hydralisk", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
            }

            if ((lv_random_spawn == 3)) {
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 1, 1, 1), "Roach", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
            }

            if ((lv_random_spawn == 4)) {
                SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 1.0, 100.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(1, 0, 0, 0), "Ultralisk", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Hydralisk", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(0, 1, 1, 1), "Roach", 0, 1, PointWithOffsetPolar(UnitGetPosition(lv_nydusWorm), 0.5, 270.0));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_nydusWorm), 5.0))), c_orderQueueReplace);
            }

        }
        else {
            break;
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_GreaterNydusWorm_Init () {
    lib9770F675_gt_GreaterNydusWorm = TriggerCreate("lib9770F675_gt_GreaterNydusWorm_Func");
    TriggerAddEventUnitRegion(lib9770F675_gt_GreaterNydusWorm, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GreaterNydusWorm_TimerExpire
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_GreaterNydusWorm_TimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2BBBFF36_g;
    int auto2BBBFF36_u;
    unit auto2BBBFF36_var;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BBBFF36_g = UnitGroup("GreaterNydusWorm", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2BBBFF36_u = UnitGroupCount(auto2BBBFF36_g, c_unitCountAll);
    for (;; auto2BBBFF36_u -= 1) {
        auto2BBBFF36_var = UnitGroupUnitFromEnd(auto2BBBFF36_g, auto2BBBFF36_u);
        if (auto2BBBFF36_var == null) { break; }
        UnitKill(auto2BBBFF36_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_GreaterNydusWorm_TimerExpire_Init () {
    lib9770F675_gt_GreaterNydusWorm_TimerExpire = TriggerCreate("lib9770F675_gt_GreaterNydusWorm_TimerExpire_Func");
    TriggerAddEventUnitBehaviorChange(lib9770F675_gt_GreaterNydusWorm_TimerExpire, null, "CocoonReviveTimerDehaka", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib9770F675_gt_GreaterNydusWorm_TimerExpire, null, "CocoonReviveTimerDehaka", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LoadBank_ENS (SCMR)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_LoadBank_ENS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("ENS", 1);
    Wait(0.2, c_timeReal);
    lib9770F675_gv_eNS_SCMR = BankLastCreated();
    BankWait(lib9770F675_gv_eNS_SCMR);
    lib9770F675_gv_grenade_find4 = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", "palladiumTotal");
    lib9770F675_gv_grenade_find5 = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", "iridiumTotal");
    lib9770F675_gv_grenade_find9 = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", "palladiumTotal");
    lib9770F675_gv_grenade_find8 = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "terran", "iridiumTotal");
    lib9770F675_gv_optionalRescueElite = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "RescueElite");
    lib9770F675_gv_optionalCommanderGrenade = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderGrenade");
    lib9770F675_gv_optionalCommanderPlasma = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderPlasma");
    lib9770F675_gv_optionalCommanderPlasma4 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderJetPack");
    lib9770F675_gv_optionalCommanderChrono = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderChrono");
    lib9770F675_gv_optionalCommanderPlasma3 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderRange");
    lib9770F675_gv_optionalCommanderStim = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderStim");
    lib9770F675_gv_optionalCommanderPlasma5 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "SaveScientist");
    lib9770F675_gv_optionalCommanderPlasma6 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "KillScientist");
    lib9770F675_gv_optionalCommanderPlasma9 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "SavePrisoners");
    lib9770F675_gv_optionalCommanderPlasma10 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "KillPrisoners");
    lib9770F675_gv_optionalCommanderPlasma7 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "SaveProtoss");
    lib9770F675_gv_optionalCommanderPlasma8 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "LeaveProtoss");
    lib9770F675_gv_optionalCommanderPlasma11 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderDragoon");
    lib9770F675_gv_optionalCommanderPlasma2 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "terran", "CommanderRed");
    lib9770F675_gv_plotProtossRescued = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "ProtossRescued");
    lib9770F675_gv_plotCerebrateDead = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "CerebrateDead");
    Wait(0.2, c_timeReal);
    lib9770F675_gv_expTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "expTotal");
    lib9770F675_gv_expCurrentLevelTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "expTotal");
    lib9770F675_gv_artifactTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "artifactTotal");
    lib9770F675_gv_artifactCurrentLevelTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "artifactTotal");
    lib9770F675_gv_blinkUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "blinkUpgradelvl");
    lib9770F675_gv_cloakUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "cloakUpgradelvl");
    lib9770F675_gv_prisonUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "prisonUpgradelvl");
    lib9770F675_gv_temporalUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "temporalUpgradelvl");
    lib9770F675_gv_armorUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "armorUpgradelvl");
    lib9770F675_gv_shadowUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "shadowUpgradelvl");
    lib9770F675_gv_strikeUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "strikeUpgradelvl");
    lib9770F675_gv_furyUpgradelvl = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "protoss", "furyUpgradelvl");
    lib9770F675_gv_optionalRescueCommander3 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalTower");
    lib9770F675_gv_optionalRescueCommander4 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalBattery");
    lib9770F675_gv_optionalRescueCommander5 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalSentry");
    lib9770F675_gv_optionalRescueCommander6 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalRay");
    lib9770F675_gv_optionalRescueCommander7 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "optionalCol");
    lib9770F675_gv_optionalRescueCommander = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "protoss", "RescueCommander");
    lib9770F675_gv_plotCrystalRecovered = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "CrystalRecovered");
    lib9770F675_gv_plotSchezarDestroyed = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "SchezarDestroyed");
    Wait(0.2, c_timeReal);
    lib9770F675_gv_psiTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "psiTotal");
    lib9770F675_gv_psiCurrentLevelTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "psiTotal");
    lib9770F675_gv_biomassTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "biomassTotal");
    lib9770F675_gv_biomassCurrentLevelTotal = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "biomassTotal");
    lib9770F675_gv_kerriganEvolutionLevel = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "evolutionLevel");
    lib9770F675_gv_kerriganSTRLevelCurrent = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganStr");
    lib9770F675_gv_kerriganDEFLevelCurrent = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganDef");
    lib9770F675_gv_kerriganPSILevelCurrent = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "zerg", "kerriganPsi");
    lib9770F675_gv_optionalBaneling = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalBaneling");
    lib9770F675_gv_optionalStewartBonus = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "StewartBonus");
    lib9770F675_gv_optionalInfestedBomb = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalInfestedBomb");
    lib9770F675_gv_optionalInfestedMarine = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalInfestedMarine");
    lib9770F675_gv_optionalRavager = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalRavager");
    lib9770F675_gv_optionalImpaler = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalImpaler");
    lib9770F675_gv_optionalAberration = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalAberration");
    lib9770F675_gv_optionalBrutalisk = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "zerg", "optionalBrutalisk");
    lib9770F675_gv_plotSchezarDestroyed2 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "UlrezajWeakened");
    lib9770F675_gv_plotSchezarDestroyed6 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "plot", "RamseyAttack");
    Wait(0.2, c_timeReal);
    lib9770F675_gv_achievement_total = BankValueGetAsInt(lib9770F675_gv_eNS_SCMR, "achievements", "achievement_total");
    lib9770F675_gv_sCMRA1_Easy = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A1_Easy_" + lib9770F675_gv_introTxt4));
    lib9770F675_gv_sCMRA1_Norm = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A1_Norm_" + lib9770F675_gv_introTxt4));
    lib9770F675_gv_sCMRA1_Hard = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A1_Hard_" + lib9770F675_gv_introTxt4));
    lib9770F675_gv_sCMRA1_Brutal = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A1_Brutal_" + lib9770F675_gv_introTxt4));
    lib9770F675_gv_sCMRA2_15 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A2_" + lib9770F675_gv_introTxt4));
    lib9770F675_gv_sCMRA3_20 = BankValueGetAsFlag(lib9770F675_gv_eNS_SCMR, "achievements", ("A3_" + lib9770F675_gv_introTxt4));
    Wait(0.2, c_timeReal);
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "maplast", (lib9770F675_gv_iniLastMap + lib9770F675_gv_iniLastMapNr));
    BankValueSetFromString(lib9770F675_gv_eNS_SCMR, "mapdata", "mapnext", (lib9770F675_gv_iniNextMap + lib9770F675_gv_iniNextMapNr));
    Wait(0.2, c_timeReal);
    BankSave(lib9770F675_gv_eNS_SCMR);
    Wait(0.2, c_timeReal);
    TriggerExecute(lib9770F675_gt_ini2, true, false);
    lib9770F675_gf_Pickup_CheckSCMRRuninBank();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_LoadBank_ENS_Init () {
    lib9770F675_gt_LoadBank_ENS = TriggerCreate("lib9770F675_gt_LoadBank_ENS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enslavers Redux - Upgrade Research SCMR (Run in Bank)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_ini2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_simple_command;
    int lv_food_feasts;
    int lv_upgrade_bonus;

    // Automatic Variable Declarations
    const int autoBB9951E9_ae = 8;
    const int autoBB9951E9_ai = 1;
    const int auto8A9DFF44_ae = 8;
    const int auto8A9DFF44_ai = 1;
    const int autoF32E1CFF_ae = 8;
    const int autoF32E1CFF_ai = 1;
    int auto3F1358CD_val;

    // Variable Initialization
    lv_simple_command = 1;
    lv_food_feasts = 2;
    lv_upgrade_bonus = 2;

    // Conditions
    if (testConds) {
        if (!((lib9770F675_gv_iniEpisode == 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_simple_command = 1;
    for ( ; ( (autoBB9951E9_ai >= 0 && lv_simple_command <= autoBB9951E9_ae) || (autoBB9951E9_ai < 0 && lv_simple_command >= autoBB9951E9_ae) ) ; lv_simple_command += autoBB9951E9_ai ) {
        PlayerOptionOverride(lv_simple_command, "simplecommandcard", "0");
    }
    lv_food_feasts = 2;
    for ( ; ( (auto8A9DFF44_ai >= 0 && lv_food_feasts <= auto8A9DFF44_ae) || (auto8A9DFF44_ai < 0 && lv_food_feasts >= auto8A9DFF44_ae) ) ; lv_food_feasts += auto8A9DFF44_ai ) {
        TechTreeUnitAllow(lv_food_feasts, "Food1000", true);
    }
    lv_upgrade_bonus = 2;
    for ( ; ( (autoF32E1CFF_ai >= 0 && lv_upgrade_bonus <= autoF32E1CFF_ae) || (autoF32E1CFF_ai < 0 && lv_upgrade_bonus >= autoF32E1CFF_ae) ) ; lv_upgrade_bonus += autoF32E1CFF_ai ) {
        auto3F1358CD_val = PlayerDifficulty(lv_simple_command);
        if (auto3F1358CD_val == 1) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchDisruptionWeb", 1);
        }
        else if (auto3F1358CD_val == 2) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GlialReconstitution", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InterceptorLimit6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ObserverGraviticBooster", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SensorArray", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticDrive", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel1", 1);
        }
        else if (auto3F1358CD_val == 3) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GlialReconstitution", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TunnelingClaws", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InterceptorLimit6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScarabDamage", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IncreasedReaverCapacity", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ObserverGraviticBooster", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SensorArray", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticDrive", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel1", 1);
        }
        else if (auto3F1358CD_val == 4) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BansheeCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "RavenCorvidReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "DurableMaterials", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GlialReconstitution", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TunnelingClaws", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "CentrificalHooks", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "NeuralParasite", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InterceptorLimit6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScarabDamage", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IncreasedReaverCapacity", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ObserverGraviticBooster", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SensorArray", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticDrive", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BlinkTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel2", 1);
        }
        else if (auto3F1358CD_val == 5) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Stimpack", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Lockdown", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OcularImplants2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GhostMoebiusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Restoration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "OpticalFlare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MedicCaduceusReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchSpiderMines", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IonThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SiegeTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AresClassWeaponsSystem", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "WraithApolloReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchIrradiate", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchEMPShockwave", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScienceVesselTitanReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BattlecruiserBehemothReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BansheeCloak", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "RavenCorvidReactor", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "DurableMaterials", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Burrow", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "hydraliskspeed2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ChitinousPlating", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "AnabolicSynthesis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveEnsnare", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveSpawnBroodling", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InfestorEnergyUpgrade", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolveConsume", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "EvolvePlague", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchMetasynapticNode", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GlialReconstitution", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TunnelingClaws", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "CentrificalHooks", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "NeuralParasite", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Charge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SingularityCharge", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "haltech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "PsiStormTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "HighTemplarKhaydarinAmulet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "Maelstrom", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "MindControl", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusTalisman", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ApialSensors", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticThrusters", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "InterceptorLimit6", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchStasis", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "KhaydarinCore", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ScarabDamage", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "IncreasedReaverCapacity", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ObserverGraviticBooster", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "SensorArray", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "GraviticDrive", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ResearchDisruptionWeb", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ArgusJewel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "BlinkTech", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ExtendedThermalLance", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranInfantryArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranVehicleArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "TerranShipArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMeleeWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergMissileWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ZergFlyerArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossGroundArmorsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossShieldsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirWeaponsLevel3", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_food_feasts, "ProtossAirArmorsLevel3", 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_ini2_Init () {
    lib9770F675_gt_ini2 = TriggerCreate("lib9770F675_gt_ini2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickups!
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Grenade_Pickup4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("PickupPalladium", 0))) {
        lib9770F675_gf_ObjectivePalladiumUpdate();
    }

    if ((EventUnitAbility() == AbilityCommand("PickupIridium", 0))) {
        lib9770F675_gf_ObjectiveIridiumUpdate();
    }

    if ((EventUnitAbility() == AbilityCommand("PickupArtifact", 0))) {
        lib9770F675_gf_ObjectiveArtifactUpdateSCMR();
    }

    if ((EventUnitAbility() == AbilityCommand("PickupBiomass", 0))) {
        lib9770F675_gf_ObjectiveBiomassUpdateSCMR();
    }

    if ((EventUnitAbility() == AbilityCommand("PickupPsi", 0))) {
        lib9770F675_gf_ObjectivePsiUpdateSCMR();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Grenade_Pickup4_Init () {
    lib9770F675_gt_Grenade_Pickup4 = TriggerCreate("lib9770F675_gt_Grenade_Pickup4_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_Grenade_Pickup4, null, AbilityCommand("PickupPalladium", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_Grenade_Pickup4, null, AbilityCommand("PickupIridium", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_Grenade_Pickup4, null, AbilityCommand("PickupArtifact", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_Grenade_Pickup4, null, AbilityCommand("PickupBiomass", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_Grenade_Pickup4, null, AbilityCommand("PickupPsi", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Attack 3
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_NydusWormAttack3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    Wait(2.5, c_timeGame);
    Wait(2.5, c_timeGame);
    Wait(2.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_NydusWormAttack3_Init () {
    lib9770F675_gt_NydusWormAttack3 = TriggerCreate("lib9770F675_gt_NydusWormAttack3_Func");
    TriggerEnable(lib9770F675_gt_NydusWormAttack3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Spawning Trigger (Zerglings)
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_NydusSpawningTriggerZerglings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region = lib9770F675_gv_nydusSpawnRegion;
    Wait(3.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lv_region), 10.0), CameraGetTarget(1)) == true)) {
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.02, 2.0, 100.0, 3.0);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, 3, RegionGetCenter(lv_region));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(200.0, 200.0, 400.0, 500.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    lv_unit = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("NydusWorm_Birth", 0), PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    VisRevealArea(1, RegionCircle(UnitGetPosition(UnitLastCreated()), 4.0), 4.0, false);
    Wait(3.7, c_timeGame);
    if ((UnitGroupCount(UnitGroup(null, 3, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) && (UnitIsAlive(lv_unit) == true)) {
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsAtPoint2(libNtve_gf_DifficultyValueInt(2, 2, 3, 4), "Zergling", 0, 3, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
    }

    Wait(lib9770F675_gv_nydusSpawnDelay, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_unit) == false)) {
            break;
        }

        if ((UnitGroupCount(UnitGroup(null, 3, RegionCircle(UnitGetPosition(lv_unit), 9.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1)) {
            SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lv_unit), 1.0, 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_unit), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            libNtve_gf_CreateUnitsAtPoint2(2, "Zergling", 0, 3, PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.5, 270.0));
        }

        Wait(lib9770F675_gv_nydusSpawnDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_NydusSpawningTriggerZerglings_Init () {
    lib9770F675_gt_NydusSpawningTriggerZerglings = TriggerCreate("lib9770F675_gt_NydusSpawningTriggerZerglings_Func");
}

void lib9770F675_InitTriggers () {
    lib9770F675_gt_CinematicINI_Init();
    lib9770F675_gt_CinematicPlay_Init();
    lib9770F675_gt_CinematicPause_Init();
    lib9770F675_gt_CinematicStop_Init();
    lib9770F675_gt_CinematicININewGettysburg_Init();
    lib9770F675_gt_CinematicINIZeratul_ER_Init();
    lib9770F675_gt_CinematicINIBWIntro_Init();
    lib9770F675_gt_CinematicPlayNewGettysburg_Init();
    lib9770F675_gt_CinematicPlayZeratul_ER_Init();
    lib9770F675_gt_CinematicPlayBWIntro_Init();
    lib9770F675_gt_KeyPressedInterstitials_Init();
    lib9770F675_gt_MouseClickedInterstitials_Init();
    lib9770F675_gt_KeyPressedInterstitials_Image_Init();
    lib9770F675_gt_iniEpisode_Init();
    lib9770F675_gt_ReturnToLauncherButton_Init();
    lib9770F675_gt_ReturnGameButton_Init();
    lib9770F675_gt_SetPlayerNameOnMouseover_Init();
    lib9770F675_gt_BriefingMusic_Init();
    lib9770F675_gt_BriefingStop_Init();
    lib9770F675_gt_Mapstart_Init();
    lib9770F675_gt_BriefCancelButton21_Init();
    lib9770F675_gt_BriefCancelButton22_Init();
    lib9770F675_gt_ReplayButton_Init();
    lib9770F675_gt_BriefCancelButton_Init();
    lib9770F675_gt_BriefDifficultySelection_Init();
    lib9770F675_gt_BriefAnimation_Init();
    lib9770F675_gt_BriefAnimationButton_Init();
    lib9770F675_gt_BriefAnimationButtonunHoverStart_Init();
    lib9770F675_gt_BriefAnimationButtonHover_Init();
    lib9770F675_gt_BriefAnimationButtonunHover_Init();
    lib9770F675_gt_BriefEndAll_Init();
    lib9770F675_gt_BriefStaticAll_Init();
    lib9770F675_gt_TESTING_TRIGGER1_Init();
    lib9770F675_gt_TESTING_TRIGGER2_Init();
    lib9770F675_gt_TESTING_TRIGGER3_Init();
    lib9770F675_gt_TESTING_TRIGGER4_Init();
    lib9770F675_gt_TESTING_TRIGGER5_Init();
    lib9770F675_gt_TESTING_TRIGGER6_Init();
    lib9770F675_gt_TESTING_TRIGGER7_Init();
    lib9770F675_gt_TESTING_TRIGGER8_Init();
    lib9770F675_gt_TESTING_TRIGGER9_Init();
    lib9770F675_gt_TESTING_TRIGGER10_Init();
    lib9770F675_gt_DISTORT_ANIM_Init();
    lib9770F675_gt_DISTORT_ANIM2_Init();
    lib9770F675_gt_BriefScrollOn_Init();
    lib9770F675_gt_BriefScrollOff_Init();
    lib9770F675_gt_BriefScrollMouseCoordStart_Init();
    lib9770F675_gt_BriefScrollMouseMoving_Init();
    lib9770F675_gt_BriefScrollUpDown_Init();
    lib9770F675_gt_EndBriefing_Init();
    lib9770F675_gt_NoAnimationMouth_Init();
    lib9770F675_gt_showRaynorBriefingPortrait_Init();
    lib9770F675_gt_showRaynorMarineBriefingPortrait_Init();
    lib9770F675_gt_showCollinsBriefingPortrait_Init();
    lib9770F675_gt_showCerberusBriefingPortrait_Init();
    lib9770F675_gt_showAdjutantBriefing_Init();
    lib9770F675_gt_showConfederateAdjutantBriefing_Init();
    lib9770F675_gt_showDukeBriefing_Init();
    lib9770F675_gt_showDugalleBriefingPortrait_Init();
    lib9770F675_gt_showDuranBriefingPortrait_Init();
    lib9770F675_gt_showInfestedDuranBriefingPortrait_Init();
    lib9770F675_gt_showXelnagaDuranBriefingPortrait_Init();
    lib9770F675_gt_showStukovBriefingPortrait_Init();
    lib9770F675_gt_showSarahBriefingPortrait_Init();
    lib9770F675_gt_showMengskBriefingPortrait_Init();
    lib9770F675_gt_showInfestedKerriganBriefingPortrait_Init();
    lib9770F675_gt_showRazBriefingPortrait_Init();
    lib9770F675_gt_showConfederateAdjutantPortrait_Init();
    lib9770F675_gt_showRaynorPortrait_Init();
    lib9770F675_gt_showRaynorMarinePortrait_Init();
    lib9770F675_gt_showCollinsPortrait_Init();
    lib9770F675_gt_showCerberusPortrait_Init();
    lib9770F675_gt_showAdjutantPortrait_Init();
    lib9770F675_gt_showBattlecruiserPortrait_Init();
    lib9770F675_gt_showSCVPortrait_Init();
    lib9770F675_gt_showDukePortrait_Init();
    lib9770F675_gt_showMarinePortrait_Init();
    lib9770F675_gt_showMarineUEDPortrait_Init();
    lib9770F675_gt_showDugallePortrait_Init();
    lib9770F675_gt_showDuranPortrait_Init();
    lib9770F675_gt_showInfestedDuranPortrait_Init();
    lib9770F675_gt_showXelnagaDuranPortrait_Init();
    lib9770F675_gt_showStukovPortrait_Init();
    lib9770F675_gt_showSarahPortrait_Init();
    lib9770F675_gt_showMengskPortrait_Init();
    lib9770F675_gt_showInfestedKerriganPortrait_Init();
    lib9770F675_gt_showCivilianPortrait_Init();
    lib9770F675_gt_showMedicPortrait_Init();
    lib9770F675_gt_showVulturePortrait_Init();
    lib9770F675_gt_showDropshipPortrait_Init();
    lib9770F675_gt_showSiegeTankPortrait_Init();
    lib9770F675_gt_showRazPortrait_Init();
    lib9770F675_gt_EndBriefingER_Init();
    lib9770F675_gt_NoAnimationMouthER_Init();
    lib9770F675_gt_showAdjutantBriefingER_Init();
    lib9770F675_gt_showMengskBriefingPortraitER_Init();
    lib9770F675_gt_showMarineBriefingPortraitER_Init();
    lib9770F675_gt_showDugalleBriefingPortraitER_Init();
    lib9770F675_gt_showDuranBriefingPortraitER_Init();
    lib9770F675_gt_showInfestedKerriganBriefingPortraitER_Init();
    lib9770F675_gt_showZeratulBriefingPortraitER_Init();
    lib9770F675_gt_showArtanisBriefingPortraitER_Init();
    lib9770F675_gt_showStukovBriefingPortraitER_Init();
    lib9770F675_gt_showRaynorBriefingPortraitER_Init();
    lib9770F675_gt_showSelendisBriefingPortraitER_Init();
    lib9770F675_gt_showWarfieldBriefingPortraitER_Init();
    lib9770F675_gt_showZagaraBriefingPortraitER_Init();
    lib9770F675_gt_showAbathurBriefingPortraitER_Init();
    lib9770F675_gt_showIzshaBriefingPortraitER_Init();
    lib9770F675_gt_showStewartBriefingPortraitER_Init();
    lib9770F675_gt_showInfestedStukovBriefingPortraitER_Init();
    lib9770F675_gt_showCaptainBuzanBriefingPortraitSS_Init();
    lib9770F675_gt_showAbathurPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showAdjutantPortrait_TEXT_Init();
    lib9770F675_gt_showDropshipPortrait_TEXT_Init();
    lib9770F675_gt_showMarinePortrait_TEXT_Init();
    lib9770F675_gt_showWarfieldPortrait_TEXT_Init();
    lib9770F675_gt_showSCVPortrait_TEXT_Init();
    lib9770F675_gt_showCivilianPortrait_TEXT_Init();
    lib9770F675_gt_showSchezarPortrait_TEXT_Init();
    lib9770F675_gt_showMercPortrait_TEXT_Init();
    lib9770F675_gt_showDuranPortrait_TEXT_Init();
    lib9770F675_gt_showUlrezajPortrait_TEXT3_Init();
    lib9770F675_gt_showStewartPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showIzshaPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showZagaraPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showDahlPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showRamseyPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showZamaraPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_showAlarakPortrait_TEXTSCMRER_Init();
    lib9770F675_gt_KeyPressed_Init();
    lib9770F675_gt_LoadBank_Init();
    lib9770F675_gt_OptionsGameSpeed_Init();
    lib9770F675_gt_IntroSkip_Init();
    lib9770F675_gt_Failsafe_Init();
    lib9770F675_gt_AIAttackWaveSent_Init();
    lib9770F675_gt_AIRetreat_Init();
    lib9770F675_gt_AIResources_Init();
    lib9770F675_gt_AITURNEVERYTHINGON_Init();
    lib9770F675_gt_AITURNEVERYTHINGOFF_Init();
    lib9770F675_gt_AIUnlimitedFoodLEAVEON_Init();
    lib9770F675_gt_Briefing2_Init();
    lib9770F675_gt_GeneralMicro_Init();
    lib9770F675_gt_AITerranComsatAddtoGroup_Init();
    lib9770F675_gt_AITerranComsat_Init();
    lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Init();
    lib9770F675_gt_AITerranMedicOpticalFlareResponse_Init();
    lib9770F675_gt_AITerranMedicRestoreDefense_Init();
    lib9770F675_gt_AITerranMarineFirebatStimResponse_Init();
    lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Init();
    lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Init();
    lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Init();
    lib9770F675_gt_AITerranScienceVesselEMPResponse_Init();
    lib9770F675_gt_AITerranLaunchNuke_Init();
    lib9770F675_gt_AITerranRebuildNukes_Init();
    lib9770F675_gt_AITerranGhostCloakResponse_Init();
    lib9770F675_gt_AITerranGhostLockdownResponse_Init();
    lib9770F675_gt_AITerranWraithCloakResponse_Init();
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Init();
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Init();
    lib9770F675_gt_AITerranDefensiveMatrixRemoveBehaviorAlwaysleaveactive_Init();
    lib9770F675_gt_ATTerranRaynorMineRequirementDisableAlwaysleaveactive_Init();
    lib9770F675_gt_ATTerranRaynorMineRequirementRenableAlwaysleaveactive_Init();
    lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Init();
    lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Init();
    lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Init();
    lib9770F675_gt_AIZergDefilerPlagueResponse_Init();
    lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Init();
    lib9770F675_gt_AIZergInfestorFungalGrowth_Init();
    lib9770F675_gt_DarkSwarm3_Init();
    lib9770F675_gt_AIZergCorruptorCorruption_Init();
    lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init();
    lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Init();
    lib9770F675_gt_ProtossMindControlTechAlwaysleaveactive_Init();
    lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Init();
    lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Init();
    lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Init();
    lib9770F675_gt_AIProtossReaverScarabBuild_Init();
    lib9770F675_gt_AIProtossCarrierInterceptorBuild_Init();
    lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Init();
    lib9770F675_gt_AIProtossArbiterStasisHarass_Init();
    lib9770F675_gt_AIProtossArbiterRecallDefense_Init();
    lib9770F675_gt_AIProtossStalkerBlink_Init();
    lib9770F675_gt_PsiStorm8_Init();
    lib9770F675_gt_Autosave_Init();
    lib9770F675_gt_RescueSoundEffect_Init();
    lib9770F675_gt_TextCrawlSound_Init();
    lib9770F675_gt_HeroDamageWarning_Init();
    lib9770F675_gt_IntelNotify_Init();
    lib9770F675_gt_IntelHeaderRemove_Init();
    lib9770F675_gt_KillCountHideWhenZero_Init();
    lib9770F675_gt_KillCountShow_Init();
    lib9770F675_gt_DropAnimBandaidFix_Init();
    lib9770F675_gt_Nukes_Init();
    lib9770F675_gt_DestroyedStructures_Init();
    lib9770F675_gt_DestroyedVehicles_Init();
    lib9770F675_gt_ImplosionERVersion_Init();
    lib9770F675_gt_ImplosionDamageVersionRequired_Init();
    lib9770F675_gt_PurificationBeamExpireRequired_Init();
    lib9770F675_gt__ZergDropPod_Init();
    lib9770F675_gt__TerranDropPod_Init();
    lib9770F675_gt_DisableScoreScreen_Init();
    lib9770F675_gt_InitialUnits_Init();
    lib9770F675_gt_StartingResources_Init();
    lib9770F675_gt_KillsDeaths_Init();
    lib9770F675_gt_Units_Init();
    lib9770F675_gt_VictoryMusic_Init();
    lib9770F675_gt_DefeatMusic_Init();
    lib9770F675_gt_LoadNextMap_Init();
    lib9770F675_gt_Restart_Init();
    lib9770F675_gt_Quit_Init();
    lib9770F675_gt_ScoreScreenFailSafeVictory_Init();
    lib9770F675_gt_ScoreScreenFailSafeDefeat_Init();
    lib9770F675_gt_LoadNextMapERONLY_Init();
    lib9770F675_gt_RestartERONLY_Init();
    lib9770F675_gt_QuitERONLY_Init();
    lib9770F675_gt_CHEATDETECTION_Init();
    lib9770F675_gt_BlackSheepWallRevealMap_Init();
    lib9770F675_gt_BreatheDeep500Gas_Init();
    lib9770F675_gt_WhatsMineisMine500Minerals_Init();
    lib9770F675_gt_FoodforThoughtNoSupplyLimit_Init();
    lib9770F675_gt_GameOverManDefeat_Init();
    lib9770F675_gt_MedievalManEnableAllAbilities_Init();
    lib9770F675_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Init();
    lib9770F675_gt_NoGluesNoPsionics_Init();
    lib9770F675_gt_OperationCWALFasterBuildingProduction_Init();
    lib9770F675_gt_OpheliaEnableLevelSkip_Init();
    lib9770F675_gt_OpheliaraceMissionNumberLevelSkip_Init();
    lib9770F675_gt_PowerOverwhelmingGodMode_Init();
    lib9770F675_gt_PowerOverwhelmingGodModeGive_Init();
    lib9770F675_gt_PowerOverwhelmingGodModeGive2_Init();
    lib9770F675_gt_ShowMetheMoney10000MineralsGas_Init();
    lib9770F675_gt_SomethingForNothingFreeUpgrades_Init();
    lib9770F675_gt_SomethingForNothingFreeUpgrades2_Init();
    lib9770F675_gt_SomethingForNothingFreeUpgrades3_Init();
    lib9770F675_gt_StayingAliveDisableScoreScreen_Init();
    lib9770F675_gt_TheGatheringAbilitiesDontConsumeEnergy_Init();
    lib9770F675_gt_WarAintWhatItUsedtobeDisableFOW_Init();
    lib9770F675_gt_BriefCancelButton10_Init();
    lib9770F675_gt_BriefCancelButton11_Init();
    lib9770F675_gt_BriefCancelButton14_Init();
    lib9770F675_gt_BriefCancelButton12_Init();
    lib9770F675_gt_BriefCancelButton13_Init();
    lib9770F675_gt_BriefCancelButton16_Init();
    lib9770F675_gt_BriefCancelButton18_Init();
    lib9770F675_gt_BriefCancelButton23_Init();
    lib9770F675_gt_BriefCancelButton24_Init();
    lib9770F675_gt_BriefCancelButton25_Init();
    lib9770F675_gt_BriefCancelButton2_Init();
    lib9770F675_gt_CinematicTest_Init();
    lib9770F675_gt_BriefCancelButton3_Init();
    lib9770F675_gt_BriefCancelButton4_Init();
    lib9770F675_gt_BriefCancelButton19_Init();
    lib9770F675_gt_BriefCancelButton5_Init();
    lib9770F675_gt_BriefCancelButton17_Init();
    lib9770F675_gt_BriefCancelButton20_Init();
    lib9770F675_gt_BriefCancelButton15_Init();
    lib9770F675_gt_ModelFactionSwapUnits_Init();
    lib9770F675_gt_BriefCancelButton26_Init();
    lib9770F675_gt_BriefCancelButton27_Init();
    lib9770F675_gt_BriefCancelButton28_Init();
    lib9770F675_gt_BriefCancelButton29_Init();
    lib9770F675_gt_A1AchievementLoadVisual_Init();
    lib9770F675_gt_Protoss_Missing_Shields1_Init();
    lib9770F675_gt_Protoss_Missing_Shields2_Init();
    lib9770F675_gt_Protoss_Missing_Shields3_Init();
    lib9770F675_gt_PlanetTextCrawlSound_Init();
    lib9770F675_gt_Map_Start5_Init();
    lib9770F675_gt_Map_Start6_Init();
    lib9770F675_gt_Map_Start17_Init();
    lib9770F675_gt_Map_Start18_Init();
    lib9770F675_gt_Map_Start8_Init();
    lib9770F675_gt_Map_Start7_Init();
    lib9770F675_gt_SCMRERCheatZeratulExpierenceBonus_Init();
    lib9770F675_gt_Map_Start12_Init();
    lib9770F675_gt_Map_Start10_Init();
    lib9770F675_gt_Map_Start9_Init();
    lib9770F675_gt_Map_Start13_Init();
    lib9770F675_gt_SCMRERCheatKerriganBiomassBonus_Init();
    lib9770F675_gt_Map_Start4_Init();
    lib9770F675_gt_Grenade_Pickup9_Init();
    lib9770F675_gt_Grenade_Pickup10_Init();
    lib9770F675_gt_Grenade_Pickup13_Init();
    lib9770F675_gt_Grenade_Pickup15_Init();
    lib9770F675_gt_Grenade_Pickup18_Init();
    lib9770F675_gt_Grenade_Pickup14_Init();
    lib9770F675_gt_Grenade_Pickup11_Init();
    lib9770F675_gt_Commander_HellfireRestoreSCMR_Init();
    lib9770F675_gt_TestingTrigger_Init();
    lib9770F675_gt_OptionsDisplay_Init();
    lib9770F675_gt_ObjectivePalladiumComplete_Init();
    lib9770F675_gt_ObjectiveIridiumComplete_Init();
    lib9770F675_gt_UpdateProtossSupply6_Init();
    lib9770F675_gt_UpdateProtossSupply2_Init();
    lib9770F675_gt_Map_Start11_Init();
    lib9770F675_gt_Grenade_Pickup24_Init();
    lib9770F675_gt_Grenade_Pickup23_Init();
    lib9770F675_gt_Grenade_Pickup16_Init();
    lib9770F675_gt_cloakUpgrade1selected_Init();
    lib9770F675_gt_cloakUpgrade2selected_Init();
    lib9770F675_gt_blinkUpgrade1selected_Init();
    lib9770F675_gt_blinkUpgrade2selected_Init();
    lib9770F675_gt_prisonUpgrade1selected_Init();
    lib9770F675_gt_prisonUpgrade2selected_Init();
    lib9770F675_gt_temporalUpgrade1selected_Init();
    lib9770F675_gt_temporalUpgrade2selected_Init();
    lib9770F675_gt_armorUpgrade1selected_Init();
    lib9770F675_gt_shadowUpgrade1selected_Init();
    lib9770F675_gt_strikeUpgrade1selected_Init();
    lib9770F675_gt_furyUpgrade1selected_Init();
    lib9770F675_gt_ZeratulExperienceUpdate_Init();
    lib9770F675_gt_ZeratulExperienceCap_Init();
    lib9770F675_gt_ZeratulLevelUpSCMR_Init();
    lib9770F675_gt_ObjectiveArtifactCompleteSCMR_Init();
    lib9770F675_gt_ShowProtossSupply_Init();
    lib9770F675_gt_UpdateProtossSupply3_Init();
    lib9770F675_gt_UpdateProtossSupply4_Init();
    lib9770F675_gt_Map_Start14_Init();
    lib9770F675_gt_Stewart_BroodlingsSCMR_Init();
    lib9770F675_gt_Deep_TunnelSCMR_Init();
    lib9770F675_gt_Remove_Immortal_BehaviorSCMR_Init();
    lib9770F675_gt_ReAdd_Immortal_BehaviorSCMR_Init();
    lib9770F675_gt_Infestor_EggsUseMarineVersionSCMR_Init();
    lib9770F675_gt_ObjectivePsiComplete_Init();
    lib9770F675_gt_ShowProtossSupply3_Init();
    lib9770F675_gt_UpdateProtossSupply_Init();
    lib9770F675_gt_UpdateProtossSupply5_Init();
    lib9770F675_gt_KerriganCapNote_Init();
    lib9770F675_gt_KerriganBioMassUpdate_Init();
    lib9770F675_gt_KerriganLevelUp_Init();
    lib9770F675_gt_cancelEvolution_Init();
    lib9770F675_gt_fail_sound_Init();
    lib9770F675_gt_evolve_NOW_Init();
    lib9770F675_gt_strUpgradeselected_Init();
    lib9770F675_gt_defUpgradeselected_Init();
    lib9770F675_gt_psiUpgradeselected_Init();
    lib9770F675_gt_KerriganCocoonDiesDefeatSCMR_Init();
    lib9770F675_gt_BioMassBonusSCMR_Init();
    lib9770F675_gt_GreaterNydusWorm_Init();
    lib9770F675_gt_GreaterNydusWorm_TimerExpire_Init();
    lib9770F675_gt_LoadBank_ENS_Init();
    lib9770F675_gt_ini2_Init();
    lib9770F675_gt_Grenade_Pickup4_Init();
    lib9770F675_gt_NydusWormAttack3_Init();
    lib9770F675_gt_NydusSpawningTriggerZerglings_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib9770F675_InitLib_completed = false;

void lib9770F675_InitLib () {
    if (lib9770F675_InitLib_completed) {
        return;
    }

    lib9770F675_InitLib_completed = true;

    lib9770F675_InitLibraries();
    lib9770F675_InitVariables();
    lib9770F675_InitTriggers();
}

