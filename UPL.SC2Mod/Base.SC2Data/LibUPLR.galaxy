include "TriggerLibs/NativeLib"

include "LibUPLR_h"

//--------------------------------------------------------------------------------------------------
// Library: UPL
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUPLR_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libUPLR_InitVariables_completed = false;

void libUPLR_InitVariables () {
    if (libUPLR_InitVariables_completed) {
        return;
    }

    libUPLR_InitVariables_completed = true;

    libUPLR_gv_khalaPerceptionTimeScaleBefore = 1.0;
    libUPLR_gv_khalaPerceptionGameSpeedBefore = 1.0;
    libUPLR_gv_khalaPerceptionUIOverlay = c_invalidDialogControlId;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: RangeValueToRange
//--------------------------------------------------------------------------------------------------
fixed data_RangeValueToRange (fixed value, fixed newMin, fixed newMax, fixed oldMin, fixed oldMax) {
    return ((((value - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Artillery Strike Visual Handler
//--------------------------------------------------------------------------------------------------
static const string effect = "WillliamGravesArtilleryStrike@SearchDamage";
trigger LotC_ArtilleryStrikeVisual;
bool LotC_ArtilleryStrikeVisual_Func(bool a, bool b){
    int player = EventPlayer();
    point effectpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    point camerapoint = CameraGetTarget(player);
    if(RegionContainsPoint(RegionCircle(effectpoint, 10.0), camerapoint)){
        CameraShake(player, "Medium", "Tremor", 0.0, 1.0, 1.0);
    }
    return true;
}
void LotC_ArtilleryStrikeVisualHandler_Init(){
    LotC_ArtilleryStrikeVisual = TriggerCreate("LotC_ArtilleryStrikeVisual_Func");
    TriggerAddEventPlayerEffectUsed(
        LotC_ArtilleryStrikeVisual,
        c_playerAny,
        effect
    );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Color Handler
//--------------------------------------------------------------------------------------------------
fixed HueToRGB(fixed t1, fixed t2, int hue){
    if (hue < 0){ hue += 6;}
    if (hue >= 6){ hue -= 6;}
    if (hue < 1){ return (t2 - t1) * hue + t1;}
    else if(hue < 3){ return t2;}
    else if(hue < 4){ return (t2 - t1) * (4 - hue) + t1;}
    else {return t1;}
}
const int c_minHue = 0;
const int c_maxHue = 360;
color HSLToColor(int hue, fixed sat, fixed light) {
    fixed t1;
    fixed t2;
    fixed r;
    fixed g;
    fixed b;
    hue = hue / 60;
    if ( light <= 0.5 ) {
      t2 = light * (sat + 1);
    } else {
      t2 = light + sat - (light * sat);
    }
    t1 = light * 2 - t2;
    r = HueToRGB(t1, t2, hue + 2) * 255;
    g = HueToRGB(t1, t2, hue) * 255;
    b = HueToRGB(t1, t2, hue - 2) * 255;
    return Color(r,g,b);
  }
  void SetUnitRandomTC(unit u){
    int hue = RandomInt(0,360); 
    fixed sat = RandomFixed(0.0,1.0); 
    fixed light = RandomFixed(0.0,1.0); 
    color c = HSLToColor(hue, sat, light);
    string teamcolor = libNtve_gf_SetTeamColor(c,c);
  }

//--------------------------------------------------------------------------------------------------
// Custom Script: TargetingHandler
//--------------------------------------------------------------------------------------------------
//static trigger LOTC_Targeting_gt_ForceOff;
//static trigger LOTC_Targeting_gt_Deactivated;
//static trigger LOTC_Targeting_gt_PointChosen;
//static trigger LOTC_Targeting_gt_DirectionChosen;
//static trigger LOTC_Targeting_gt_EffectFired;
//static trigger LOTC_Targeting_gt_Cancel;
//static trigger LOTC_Targeting_gt_CancelFromUI;
//static trigger LOTC_Targeting_gt_CameraShake;
//static int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesSpent;
//static int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesTotal;
//static unit[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoACasterUnit;
//static unitgroup[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoACasterGroup;
//
//
//static const int libCOMI_gv_cMC_SOATARGETCOUNTMAX = 5;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingBehavior;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActivateAbility;
//static abilcmd[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingExecuteCommand;
//static text[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsPrimary;
//static text[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsSecondary;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingCooldown;
//static order[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingOrder;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingModel;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnitType;
//static unit[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnit;
//static actor[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActors;
//
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingTransitioning;
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnrefundableStageEntered;
//static bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingAlreadyCanceled;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingModel;
//static string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnitType;
trigger LOTC_Targeting_gt_Activated;
trigger LOTC_Targeting_gt_ForceOff;
trigger LOTC_Targeting_gt_Deactivated;
trigger LOTC_Targeting_gt_PointChosen;
trigger LOTC_Targeting_gt_DirectionChosen;
trigger LOTC_Targeting_gt_EffectFired;
trigger LOTC_Targeting_gt_Cancel;
trigger LOTC_Targeting_gt_CancelFromUI;
trigger LOTC_Targeting_gt_CameraShake;
const int c_TargetingPhaseType_None = 0;
const int c_TargetingPhaseType_Location = 1;
const int c_TargetingPhaseType_Direction = 2;
static const int c_TARGETCOUNTMAX = 5;
struct LOTC_TargetingStruct{
	int lv_ChargesSpent;
	int lv_ChargesTotal;
	int lv_UsageCount;
	int lv_Phase;
	bool lv_Transitioning;
	bool lv_UnrefundableStageEntered;
	bool lv_AlreadyCanceled;
	string lv_Model;
	string lv_UnitType;
	unit[c_TARGETCOUNTMAX + 1] lv_Unit;
	actor[c_TARGETCOUNTMAX + 1] lv_Actors;
	string lv_Behavior;
	string lv_ActivateAbility;
	abilcmd lv_ExecuteCommand;
	text lv_InstructionsPrimary;
	text lv_InstructionsSecondary;
	string lv_Cooldown;
	order lv_Order;
	unitgroup lv_DirectionGroup;
	bool lv_Cycling;
	bool lv_ExitInstantly;
	unit lv_CasterUnit;
	unitgroup lv_CasterGroup;
};
typedef structref<LOTC_TargetingStruct> LOTC_TargetingStructRef;
LOTC_TargetingStruct[c_maxPlayers] LOTC_TargetingGlobal;
void LOTC_Targeting_ModeEnter (int lp_player) {
	int lv_count;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	Targeting.lv_UnrefundableStageEntered = false;
	Targeting.lv_AlreadyCanceled = false;
	Targeting.lv_Transitioning = false;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	//if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
	//	return ;
	//}
	TriggerEnable(LOTC_Targeting_gt_Cancel, true);
	Targeting.lv_ExitInstantly = false;
	Targeting.lv_UsageCount += 1;
	Targeting.lv_ChargesSpent = 0;
	////libCOUI_gf_CU_TargetingSetCharges(Targeting.lv_ChargesTotal, Targeting.lv_ChargesTotal, lp_player);
	if ((Targeting.lv_Order != null)) {
		TriggerEnable(LOTC_Targeting_gt_PointChosen, true);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, true);
		UISetTargetingOrder(PlayerGroupSingle(lp_player), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	else {
		Targeting.lv_Phase = c_TargetingPhaseType_None;
	}
	Targeting.lv_Transitioning = true;
	//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
	//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lp_player);
	//libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
	CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
	CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
	CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
	Targeting.lv_Transitioning = false;
	Targeting.lv_Cycling = false;
}
void LOTC_Targeting_ModeExit (int lp_player) {
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	Targeting.lv_Phase = c_TargetingPhaseType_None;
	while (!((Targeting.lv_Transitioning == false))) {
		Wait(0.0625, c_timeGame);
	}
	Targeting.lv_Transitioning = true;
	if ((Targeting.lv_ExitInstantly == true)) {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
	}
	else {
		CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
		CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
	}
	CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
	if ((Targeting.lv_ExitInstantly == true)) {
		VisResetFoWAlpha(lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
	}
	else {
		//libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
		//libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
	}
	libNtve_gf_RestoreUnitSelection(lp_player);
	Targeting.lv_ActivateAbility = null;
	Targeting.lv_Transitioning = false;
	Targeting.lv_UsageCount -= 1;
	if ((Targeting.lv_UsageCount == 0)) {
		TriggerEnable(LOTC_Targeting_gt_Cancel, false);
		TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
		TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	}
}
void LOTC_Targeting_CleanupActorsAndUnits (int lp_player) {
	int lv_i;
	const int lv_count = c_TARGETCOUNTMAX;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	for (lv_i = 1; (lv_i <= lv_count); lv_i += 1 ) {
		if ((Targeting.lv_Actors[lv_i] != null)) {
			ActorSend(Targeting.lv_Actors[lv_i], "Signal Destroy");
			Targeting.lv_Actors[lv_i] = null;
		}
		if ((Targeting.lv_Unit[lv_i] != null)) {
			UnitRemove(Targeting.lv_Unit[lv_i]);
			Targeting.lv_Unit[lv_i] = null;
		}
	}
}
void LOTC_Targeting_Cancel (int lp_player) {
	string lv_cost;
	string lv_costField;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lp_player];
	lv_cost = "";
	lv_costField = "";
	// Implementation
	UnitIssueOrder(Targeting.lv_CasterUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
	Targeting.lv_AlreadyCanceled = true;
	LOTC_Targeting_CleanupActorsAndUnits(lp_player);
	if ((Targeting.lv_UnitType != null) && (Targeting.lv_Phase == c_TargetingPhaseType_Direction)) {
		Targeting.lv_ChargesSpent -= 1;
	}
	if ((Targeting.lv_ChargesSpent == 0) && (Targeting.lv_UnrefundableStageEntered == false)) {
		libNtve_gf_UnitAbilityRemoveCooldown(Targeting.lv_CasterUnit, Targeting.lv_ActivateAbility, Targeting.lv_Cooldown);
		lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
		lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, Targeting.lv_ActivateAbility, (lv_costField), lp_player);
		UnitSetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, (UnitGetPropertyFixed(Targeting.lv_CasterUnit, c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
	}
	UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
	Targeting.lv_UnrefundableStageEntered = true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_EffectFired
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_EffectFired_Func (bool testConds, bool runActions) {
	// Automatic Variable Declarations
	// Actions
	if (!runActions) {
		return true;
	}
	LOTC_Targeting_CleanupActorsAndUnits(EventPlayer());
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_Deactivated
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_Deactivated_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = UnitGetOwner(EventUnit());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (!runActions) {
		return true;
	}
	UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, null, false);
	Targeting.lv_ChargesSpent = 0;
	LOTC_Targeting_ModeExit(lv_casterPlayer);
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingForceOff
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingForceOff_Func (bool testConds, bool runActions) {
	// Variable Declarations
	int lv_indexPlayer = 0;
	LOTC_TargetingStructRef Targeting;// = LOTC_TargetingGlobal[lv_indexPlayer];
	// Automatic Variable Declarations
	playergroup pg;
	// Variable Initialization
	// Actions
	if (!runActions) {
		return true;
	}
	TriggerEnable(LOTC_Targeting_gt_Cancel, false);
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	pg = PlayerGroupActive();//libCOOC_gf_CommanderPlayers();
	lv_indexPlayer = -1;
	while (true) {
		lv_indexPlayer = PlayerGroupNextPlayer(pg, lv_indexPlayer);
		if (lv_indexPlayer < 0) { break; }
		Targeting = LOTC_TargetingGlobal[lv_indexPlayer];
		Targeting.lv_ExitInstantly = true;
		if ((Targeting.lv_Phase != c_TargetingPhaseType_None)) {
			Targeting.lv_Transitioning = false;
			UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), Targeting.lv_CasterGroup, null, false);
			LOTC_Targeting_Cancel(lv_indexPlayer);
		}
	}
	Targeting.lv_UsageCount = 0;
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_TargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_TargetingPointChosen_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (testConds) {
		if (!(Targeting.lv_Phase == c_TargetingPhaseType_Location)) {
			return false;
		}
		if (!(Targeting.lv_ChargesSpent < Targeting.lv_ChargesTotal)) {
			return false;
		}
	}
	// Actions
	if (!runActions) {
		return true;
	}
	lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
	lv_casterPlayer = EventPlayer();
	if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
		return true;
	}
	Targeting.lv_Cycling = true;
	Targeting.lv_ChargesSpent += 1;
	libNtve_gf_CreateActorAtPoint(Targeting.lv_Model, lv_targetPoint);
	Targeting.lv_Actors[Targeting.lv_ChargesSpent] = libNtve_gf_ActorLastCreated();
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	if ((Targeting.lv_UnitType == null)) {
		UnitIssueOrder(Targeting.lv_CasterUnit, OrderTargetingPoint(Targeting.lv_ExecuteCommand, lv_targetPoint), c_orderQueueAddToEnd);
		////libCOUI_gf_CU_TargetingSetCharges((Targeting.lv_ChargesTotal-Targeting.lv_ChargesSpent), Targeting.lv_ChargesTotal, lv_casterPlayer);
		if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
			Wait(0.125, c_timeGame);
			UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		}
		else {
			Wait(0.1, c_timeGame);
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}
	}
	else {
		libNtve_gf_CreateUnitsWithDefaultFacing(1, Targeting.lv_UnitType, 0, lv_casterPlayer, lv_targetPoint);
		Targeting.lv_Unit[Targeting.lv_ChargesSpent] = UnitLastCreated();
		UnitSetState(Targeting.lv_Unit[Targeting.lv_ChargesSpent], c_unitStateTooltipable, false);
		Targeting.lv_DirectionGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_Unit[Targeting.lv_ChargesSpent]);
		Wait(0.1, c_timeGame);
		if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == true)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_DirectionGroup, OrderTargetingPoint(Targeting.lv_ExecuteCommand, UnitGetPosition(Targeting.lv_Unit[Targeting.lv_ChargesSpent])), false);
			//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsSecondary, lv_casterPlayer);
			Targeting.lv_Phase = c_TargetingPhaseType_Direction;
		}
	}
	Targeting.lv_Cycling = false;
	return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: LOTC_Targeting_DirectionChosen
//--------------------------------------------------------------------------------------------------
bool LOTC_Targeting_DirectionChosen_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	if (testConds) {
		if (!((Targeting.lv_Phase == c_TargetingPhaseType_Direction))) {
			return false;
		}
	}
	Targeting.lv_Cycling = true;
	Targeting.lv_UnrefundableStageEntered = true;
	libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
	ActorSend(Targeting.lv_Actors[Targeting.lv_ChargesSpent], "Signal Destroy");
	if ((UnitIsValid(Targeting.lv_Unit[Targeting.lv_ChargesSpent]) == false)) {
		return true;
	}
	libNtve_gf_MakeUnitFacePoint(Targeting.lv_Unit[Targeting.lv_ChargesSpent], lv_targetPoint, 0.0);
	////libCOUI_gf_CU_TargetingSetCharges((Targeting.lv_ChargesTotal-Targeting.lv_ChargesSpent), Targeting.lv_ChargesTotal, lv_casterPlayer);
	if ((Targeting.lv_ChargesSpent == Targeting.lv_ChargesTotal)) {
		UnitBehaviorRemove(Targeting.lv_CasterUnit, Targeting.lv_Behavior, 1);
		Wait(0.1, c_timeGame);
	}
	else {
		//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lv_casterPlayer);
		Wait(0.1, c_timeGame);
		if ((Targeting.lv_AlreadyCanceled == false)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), Targeting.lv_CasterGroup, Targeting.lv_Order, false);
		}
		Targeting.lv_Phase = c_TargetingPhaseType_Location;
	}
	Targeting.lv_Cycling = false;
	return true;
}
bool LOTC_Targeting_Activated_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	int lv_casterPlayer = 1;//UnitGetOwner(lv_caster);
	string UDType = "LotC_Targetable";
	string UDInstance = "Test_HornerAirFleet";
	string BehaviorActivated = EventUnitBehavior();
	int lv_HornerAirFleet_Cost;
	LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	Targeting.lv_CasterUnit = EventUnit();
	Targeting.lv_CasterGroup = libNtve_gf_ConvertUnitToUnitGroup(Targeting.lv_CasterUnit);
	Targeting.lv_ActivateAbility = UserDataGetGameLink(UDType,UDInstance,"ActivateAbility",1); //"HornerAirFleetActivate";
	Targeting.lv_ExecuteCommand = UserDataGetAbilCmd(UDType,UDInstance,"ExecuteCommand",1);//AbilityCommand("HornerAirFleetExecute", 0);
	Targeting.lv_Cooldown = UserDataGetString(UDType,UDInstance,"Cooldown",1);//"Abil/HornerAirFleetActivate";
	Targeting.lv_Behavior = UserDataGetGameLink(UDType,UDInstance,"Behavior",1);//"HornerAirFleetActivate";
	Targeting.lv_Model = UserDataGetGameLink(UDType,UDInstance,"Model",1);//"HornerAirFleetTargetingModel";
	Targeting.lv_Order = OrderTargetingPoint(UserDataGetAbilCmd(UDType,UDInstance,"Order",1), UnitGetPosition(Targeting.lv_CasterUnit));//"HornerAirFleetTargetingDummy"
	Targeting.lv_UnitType = UserDataGetGameLink(UDType,UDInstance,"UnitType",1);//"HornerAirFleetTargeter";
	Targeting.lv_ChargesTotal = UserDataGetInt(UDType,UDInstance,"ChargesTotal",1);//1;
	Targeting.lv_InstructionsPrimary = UserDataGetText(UDType,UDInstance,"InstructionsPrimary",1);//StringExternal("Param/Value/lib_COMI_BE46DBD9");//Fleet Starting Location
	Targeting.lv_InstructionsSecondary = UserDataGetText(UDType,UDInstance,"InstructionsSecondary",1);//StringExternal("Param/Value/lib_COMI_A3DA54C0");//Choose Fleet Direction
	lv_HornerAirFleet_Cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, Targeting.lv_ActivateAbility, "Cost[0].Resource[0]", lv_casterPlayer);
	//Targeting.lv_ActivateAbility = "SOAOrbitalStrikeActivate";
	//Targeting.lv_ExecuteCommand = AbilityCommand("SOAOrbitalStrikeExecute", 0);
	//Targeting.lv_Cooldown = "Abil/SOAOrbitalStrikeActivate";
	//Targeting.lv_Behavior = "SOAOrbitalStrikeActivate";
	//Targeting.lv_Model = "SOAOrbitalStrikeTargetModel";
	//Targeting.lv_Order = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(Targeting.lv_CasterUnit));
	//Targeting.lv_UnitType = null;
	//Targeting.lv_ChargesTotal = 5;
	//Targeting.lv_InstructionsPrimary = StringExternal("Param/Value/lib_COMI_84BC1D9B");
	//Targeting.lv_InstructionsSecondary = null;
	LOTC_Targeting_ModeEnter(lv_casterPlayer);
	return true;
}
void LOTC_Targeting_Init(){
	trigger t;
	string ActivateBehavior = "Test_HornerAirFleetActivate";
	//LOTC_Targeting_gt_Cancel;
	//LOTC_Targeting_gt_CancelFromUI;
	//LOTC_Targeting_gt_CameraShake;
	LOTC_Targeting_gt_Activated = TriggerCreate("LOTC_Targeting_Activated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Activated, null, ActivateBehavior, c_unitBehaviorChangeActivate);
	LOTC_Targeting_gt_Deactivated = TriggerCreate("LOTC_Targeting_Deactivated_Func");
	TriggerAddEventUnitBehaviorChange(LOTC_Targeting_gt_Deactivated, null, ActivateBehavior, c_unitBehaviorChangeDeactivate);
	LOTC_Targeting_gt_PointChosen = TriggerCreate("LOTC_Targeting_TargetingPointChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_PointChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_PointChosen, null, AbilityCommand("Test_HornerAirFleetTargetingDummy", 0));
	LOTC_Targeting_gt_DirectionChosen = TriggerCreate("LOTC_Targeting_DirectionChosen_Func");
	TriggerEnable(LOTC_Targeting_gt_DirectionChosen, false);
	TriggerAddEventUnitOrder(LOTC_Targeting_gt_DirectionChosen, null, AbilityCommand("Test_HornerAirFleetExecute", 0));
	LOTC_Targeting_gt_ForceOff = TriggerCreate("LOTC_Targeting_TargetingForceOff_Func");
	TriggerAddEventGeneric(LOTC_Targeting_gt_ForceOff, "CinematicModeOn");
	LOTC_Targeting_gt_EffectFired = TriggerCreate("LOTC_Targeting_EffectFired_Func");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAOrbitalStrikeCP");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MiningWorkerHandler
//--------------------------------------------------------------------------------------------------
trigger LotC_MiningWorkerConstructionDeath;
trigger LotC_MiningWorkerConstructionComplete;
bool LotC_MiningWorkerConstructionDeathHandler(bool a, bool b){
    bool trigRan = true;
    unit building = EventUnit();
    int buildingTag = UnitGetTag(building);
    unit worker;
    if(DataTableValueExists(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker")){
        worker= DataTableGetUnit(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
        DataTableValueRemove(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
        UnitKill(worker);
    }
    else{trigRan=false;}
    return trigRan;
}
bool LotC_MiningWorkerClearBuilder(bool a, bool b){
    bool trigRan = true;
    unit worker = EventUnit();
    unit building = EventUnitProgressUnit();
    int buildingTag = UnitGetTag(building);
    if(DataTableValueExists(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker")){
        DataTableValueRemove(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker");
    }
    else{trigRan=false;}    
    return trigRan;
}
bool LotC_MiningWorkerTrackBuilder(bool a, bool b){
    bool trigRan = true;
    unit worker = EventUnit();
    unit building = EventUnitProgressUnit();
    int buildingTag = UnitGetTag(building);
    if(UnitGetType(worker)=="MiningDrone"){
        DataTableSetUnit(true,"LotC_MiningWorkerTrackBuilder.Building."+IntToString(buildingTag)+".Worker",worker);
        TriggerAddEventUnitDied(LotC_MiningWorkerConstructionDeath, UnitRefFromUnit(building));
        TriggerAddEventUnitConstructProgress(LotC_MiningWorkerConstructionComplete, UnitRefFromUnit(worker), c_unitProgressStageComplete);
        TriggerAddEventUnitConstructProgress(LotC_MiningWorkerConstructionComplete, UnitRefFromUnit(worker), c_unitProgressStageCancel);
    }
    else{trigRan=false;}
    return trigRan;
}
void LotC_MiningWorker_Init(){
    trigger t;
    t= TriggerCreate("LotC_MiningWorkerTrackBuilder");
    TriggerAddEventUnitConstructProgress(t, null, c_unitProgressStageStart);
    LotC_MiningWorkerConstructionDeath = TriggerCreate("LotC_MiningWorkerConstructionDeathHandler");
    LotC_MiningWorkerConstructionComplete = TriggerCreate("LotC_MiningWorkerClearBuilder");
    //TriggerAddEventUnitDied(t, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SpecOpsClaymoreHandler
//--------------------------------------------------------------------------------------------------
const string KEY_PREFIX = "LotC_SpecOpsClaymoreHandler";
static trigger gt_Activated;
static trigger gt_ForceOff;
static trigger gt_Deactivated;
static trigger gt_PointChosen;
static trigger gt_DirectionChosen;
static trigger gt_EffectFired;
static trigger gt_Cancel;
static trigger gt_CancelFromUI;
static trigger gt_CameraShake;
static trigger gt_ExecuteAction;
static trigger gt_OrderMine;
static string KeyBase(string unitTag, string abilInstance){
	return KEY_PREFIX + "["+unitTag+","+abilInstance+"]";
}
static string Key(string base, string suffix){
	return base+"."+suffix;
}
static string KeyFull(string unitTag, string abilInstance, string suffix){
	return Key(KeyBase(unitTag,abilInstance),suffix);
}
point LotC_SpecOpsClaymoreHandler_EventPoint(){
	return DataTableGetPoint(false, TriggerEventParamName(EventGenericName(), "Point"));
	
}
point LotC_SpecOpsClaymoreHandler_EventDirection(){
	return DataTableGetPoint(false, TriggerEventParamName(EventGenericName(), "Direction"));
	
}
unit LotC_SpecOpsClaymoreHandler_EventCaster(){
	return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "Caster"));
}
string LotC_SpecOpsClaymoreHandler_EventName(){
	return KEY_PREFIX+"ExecuteAction";
}
void LotC_SpecOpsClaymoreHandler_SendTriggerEvent(string lp_unitTag, string lp_abil){
	string lv_keyBase = KeyBase(lp_unitTag,lp_abil);
	string event = KEY_PREFIX+"ExecuteAction";
	int i = 0;
	string key;
	int lv_ChargesTotal = DataTableGetInt(true,Key(lv_keyBase,"ChargesTotal"));
	point lv_point = DataTableGetPoint(true,Key(lv_keyBase,"Point["+IntToString(lv_ChargesTotal)+"]"));
	point lv_direction = DataTableGetPoint(true,Key(lv_keyBase,"Direction["+IntToString(lv_ChargesTotal)+"]"));
	unit lv_caster = DataTableGetUnit(true,Key(lv_keyBase,"CasterUnit"));
	bool keyexists = false;
	for(i=1;i<=lv_ChargesTotal;i+=1){
		keyexists = false;
		
		key = "Point["+IntToString(i)+"]";
		if(DataTableValueExists(true,Key(lv_keyBase,key))){
			lv_point = DataTableGetPoint(true,Key(lv_keyBase,key));
			DataTableSetPoint(false, TriggerEventParamName(event, "Point"), lv_point);
			keyexists = true;
		}
		key = "Direction["+IntToString(i)+"]";
		if(DataTableValueExists(true,Key(lv_keyBase,key))){
			lv_direction = DataTableGetPoint(true,Key(lv_keyBase,key));
			DataTableSetPoint(false, TriggerEventParamName(event, "Direction"), lv_direction);
			keyexists = true;
		}
		if(keyexists){
			lv_caster = DataTableGetUnit(true,Key(lv_keyBase,"CasterUnit"));
			DataTableSetUnit(false, TriggerEventParamName(event, "Caster"), lv_caster);
			TriggerSendEvent(event);
		}
	}
}
void LotC_SpecOpsClaymoreHandler_ClearDataTable(string lp_unitTag, string lp_abil){
	string lv_keyBase = KeyBase(lp_unitTag,lp_abil);
	
	DataTableValueRemove(true,Key(lv_keyBase,"CasterUnit"));
	DataTableValueRemove(true,Key(lv_keyBase,"CasterGroup"));
	DataTableValueRemove(true,Key(lv_keyBase,"ActivateAbility"));
	DataTableValueRemove(true,Key(lv_keyBase,"ExecuteCommand"));
	DataTableValueRemove(true,Key(lv_keyBase,"Cooldown"));
	DataTableValueRemove(true,Key(lv_keyBase,"Behavior"));
	DataTableValueRemove(true,Key(lv_keyBase,"Model"));
	DataTableValueRemove(true,Key(lv_keyBase,"Order"));
	DataTableValueRemove(true,Key(lv_keyBase,"UnitType"));
	DataTableValueRemove(true,Key(lv_keyBase,"ChargesTotal"));
	DataTableValueRemove(true,Key(lv_keyBase,"InstructionsPrimary"));
	DataTableValueRemove(true,Key(lv_keyBase,"InstructionsSecondary"));
	//lv_HornerAirFleet_Cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ActivateAbility, "Cost[0].Resource[0]", lv_casterPlayer);
	DataTableValueRemove(true,Key(lv_keyBase,"ChargesSpent"));
	DataTableValueRemove(true,Key(lv_keyBase,"UsageCount"));
	DataTableValueRemove(true,Key(lv_keyBase,"Phase"));
	DataTableValueRemove(true,Key(lv_keyBase,"Transitioning"));
	DataTableValueRemove(true,Key(lv_keyBase,"UnrefundableStageEntered"));
	DataTableValueRemove(true,Key(lv_keyBase,"AlreadyCanceled"));
	DataTableValueRemove(true,Key(lv_keyBase,"Unit[]"));
	DataTableValueRemove(true,Key(lv_keyBase,"Actors[]"));
	DataTableValueRemove(true,Key(lv_keyBase,"DirectionGroup"));
	DataTableValueRemove(true,Key(lv_keyBase,"Cycling"));
	DataTableValueRemove(true,Key(lv_keyBase,"ExitInstantly"));
}
void LotC_SpecOpsClaymoreHandler_InitDataTableFromUserData(string lp_unitTag, string lp_abil){
	string lv_keyBase = KeyBase(lp_unitTag,lp_abil);
	string lv_user = "LotC_Targetable";
	DataTableSetString(true,Key(lv_keyBase,"ActivateAbility"),UserDataGetGameLink(lv_user,lp_abil,"ActivateAbility",1));//HornerAirFleetActivate
	DataTableSetAbilCmd(true,Key(lv_keyBase,"ExecuteCommand"),UserDataGetAbilCmd(lv_user,lp_abil,"ExecuteCommand",1));
	DataTableSetString(true,Key(lv_keyBase,"Cooldown"),UserDataGetString(lv_user,lp_abil,"Cooldown",1));
	DataTableSetString(true,Key(lv_keyBase,"Behavior"),UserDataGetGameLink(lv_user,lp_abil,"Behavior",1));
	DataTableSetString(true,Key(lv_keyBase,"Model"),UserDataGetGameLink(lv_user,lp_abil,"Model",1));
	//DataTableSetOrder(true,Key(lv_keyBase,"Order"),OrderTargetingPoint(UserDataGetAbilCmd(lv_user,lp_abil,"Order",1), UnitGetPosition(lv_caster)));
	DataTableSetString(true,Key(lv_keyBase,"UnitType"),UserDataGetGameLink(lv_user,lp_abil,"UnitType",1));
	DataTableSetInt(true,Key(lv_keyBase,"ChargesTotal"),UserDataGetInt(lv_user,lp_abil,"ChargesTotal",1));
	DataTableSetText(true,Key(lv_keyBase,"InstructionsPrimary"),UserDataGetText(lv_user,lp_abil,"InstructionsPrimary",1));
	DataTableSetText(true,Key(lv_keyBase,"InstructionsSecondary"),UserDataGetText(lv_user,lp_abil,"InstructionsSecondary",1));
	
	
}
void LotC_SpecOpsClaymoreHandler_ModeEnter (int lp_player,unit lp_caster, string lp_abil) {
	int lv_count;
	string lv_unitTag = IntToString(UnitGetTag(lp_caster));
	string lv_keyBase = KeyBase(lv_unitTag,lp_abil);
	int lv_UsageCount = DataTableGetInt(true,Key(lv_keyBase,"UsageCount"));
	order lv_order = DataTableGetOrder(true,Key(lv_keyBase,"Order"));
	unitgroup lv_casterGroup = DataTableGetUnitGroup(true,Key(lv_keyBase,"CasterGroup"));
	TriggerDebugOutput(1,StringToText("LotC_SpecOpsClaymoreHandler_ModeEnter"),true);
	DataTableSetBool(true,Key(lv_keyBase,"UnrefundableStageEntered"),false);
	DataTableSetBool(true,Key(lv_keyBase,"AlreadyCanceled"),false);
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),false);
	while (!((DataTableGetBool(true,Key(lv_keyBase,"Transitioning")) == false))) {
		Wait(0.0625, c_timeGame);
	}
	TriggerEnable(gt_Cancel, true);
	DataTableSetInt(true,Key(lv_keyBase,"UsageCount"),lv_UsageCount+1);
	DataTableSetBool(true,Key(lv_keyBase,"ExitInstantly"),false);
	DataTableSetInt(true,Key(lv_keyBase,"ChargesSpent"),0);
	if ((lv_order != null)) {
		TriggerEnable(gt_PointChosen, true);
		TriggerEnable(gt_DirectionChosen, true);
		UISetTargetingOrder(PlayerGroupSingle(lp_player), lv_casterGroup, lv_order, false);
		DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_Location);
	}
	else {
		DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_None);
	}
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),true);
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),false);
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),true);
	
}
void LotC_SpecOpsClaymoreHandler_ModeExit (int lp_player,unit lp_caster, string lp_abil) {
	string lv_unitTag = IntToString(UnitGetTag(lp_caster));
	string lv_keyBase = KeyBase(lv_unitTag,lp_abil);
	int lv_UsageCount = DataTableGetInt(true,Key(lv_keyBase,"UsageCount"));
	TriggerDebugOutput(1,StringToText("LotC_SpecOpsClaymoreHandler_ModeExit"),true);
	LotC_SpecOpsClaymoreHandler_SendTriggerEvent(lv_unitTag,lp_abil);
	DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_None);
	while (!((DataTableGetBool(true,Key(lv_keyBase,"Transitioning")) == false))) {
		Wait(0.0625, c_timeGame);
	}
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),true);
	if ((DataTableGetBool(true,Key(lv_keyBase,"ExitInstantly")) == true)) {}
	else {}
	if ((DataTableGetBool(true,Key(lv_keyBase,"ExitInstantly")) == true)) {
		VisResetFoWAlpha(lp_player);
	}
	else {}
	//libNtve_gf_RestoreUnitSelection(lp_player);
	DataTableSetString(true,Key(lv_keyBase,"ActivateAbility"),null);
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),false);
	lv_UsageCount -= 1;
	DataTableSetInt(true,Key(lv_keyBase,"UsageCount"),lv_UsageCount);
	if ((lv_UsageCount == 0)) {
		TriggerEnable(gt_Cancel, false);
		TriggerEnable(gt_PointChosen, false);
		TriggerEnable(gt_DirectionChosen, false);
	}
}
bool LotC_SpecOpsClaymoreHandler_OrderMine_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	string lv_unitTag = IntToString(UnitGetTag(lv_caster));
	unit u = EventUnitCreatedUnit();
	string abil = EventUnitCreatedAbil();
	point lv_direction = DataTableGetPoint(true,KEY_PREFIX+"SetDirection:"+lv_unitTag+":"+abil);
	order o = OrderTargetingPoint(AbilityCommand("ClaymoreMineLookAtPoint",0),lv_direction);
	
	UnitIssueOrder(u,o,c_orderQueueReplace);
	return true;
}
bool LotC_SpecOpsClaymoreHandler_ExecuteAction_Func (bool testConds, bool runActions) {
	point lv_point = LotC_SpecOpsClaymoreHandler_EventPoint();
	point lv_direction = LotC_SpecOpsClaymoreHandler_EventDirection();
	unit u = LotC_SpecOpsClaymoreHandler_EventCaster();
	string lv_unitTag = IntToString(UnitGetTag(u));
	string abil = "ClaymoreMinePlace";
	order o = OrderTargetingPoint(AbilityCommand(abil,0),lv_point);
	
	DataTableSetPoint(true,KEY_PREFIX+"SetDirection:"+lv_unitTag+":"+abil,lv_direction);
	TriggerAddEventUnitCreated(gt_OrderMine,UnitRefFromUnit(u),abil,"");
	UnitIssueOrder(u,o,c_orderQueueReplace);
	return true;
}
bool LotC_SpecOpsClaymoreHandler_DirectionChosen_Func (bool testConds, bool runActions) {
	string lv_abil = "ClaymoreMinePlace";
	string lv_unitTag = IntToString(UnitGetTag(EventUnit()));
	unit lv_caster = DataTableGetUnit(true,Key(KEY_PREFIX,"TargeterParent["+lv_unitTag+"]"));
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	
	string lv_keyBase = KeyBase(IntToString(UnitGetTag(lv_caster)),lv_abil);
	int lv_ChargesSpent = DataTableGetInt(true,Key(lv_keyBase,"ChargesSpent"));
	int lv_ChargesTotal = DataTableGetInt(true,Key(lv_keyBase,"ChargesTotal"));
	order lv_order = DataTableGetOrder(true,Key(lv_keyBase,"Order"));
	unit u = DataTableGetUnit(true,Key(lv_keyBase,"Units["+IntToString(lv_ChargesSpent)+"]"));
	//LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	TriggerDebugOutput(1,StringToText(TriggerGetFunction(EventTrigger())),true);
	if (testConds) {
		if (!((DataTableGetInt(true,Key(lv_keyBase,"Phase")) == c_TargetingPhaseType_Direction))) {
			return false;
		}
	}
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),true);
	DataTableSetBool(true,Key(lv_keyBase,"UnrefundableStageEntered"),true);
	libNtve_gf_CreateActorAtPoint(DataTableGetString(true,Key(lv_keyBase,"ConfirmationSound")), lv_targetPoint);
	DataTableSetPoint(true,Key(lv_keyBase,"Direction["+IntToString(lv_ChargesSpent)+"]"),lv_targetPoint);
	ActorSend(DataTableGetActor(true,Key(lv_keyBase,"Actors["+IntToString(lv_ChargesSpent)+"]")), "Signal Destroy");
	if ((UnitIsValid(u) == false)) {
		return true;
	}
	libNtve_gf_MakeUnitFacePoint(u, lv_targetPoint, 0.0);
	////libCOUI_gf_CU_TargetingSetCharges((Targeting.lv_ChargesTotal-Targeting.lv_ChargesSpent), Targeting.lv_ChargesTotal, lv_casterPlayer);
	if ((lv_ChargesSpent == lv_ChargesTotal)) {
		UnitBehaviorRemove(lv_caster, DataTableGetString(true,Key(lv_keyBase,"Behavior")), 1);
		Wait(0.1, c_timeGame);
		
	}
	else {
		//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsPrimary, lv_casterPlayer);
		Wait(0.1, c_timeGame);
		
		if ((DataTableGetBool(true,Key(lv_keyBase,"AlreadyCanceled")) == false)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), DataTableGetUnitGroup(true,Key(lv_keyBase,"CasterGroup")), lv_order, false);
		}
		DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_Location);
	}
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),false);
	return true;
}
bool LotC_SpecOpsClaymoreHandler_PointChosen_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	int lv_casterPlayer = EventPlayer();
	point lv_targetPoint= OrderGetTargetPoint(EventUnitOrder());
	string lv_unitTag = IntToString(UnitGetTag(lv_caster));
	string lv_abil = "ClaymoreMinePlace";
	string lv_keyBase = KeyBase(lv_unitTag,lv_abil);
	int lv_ChargesSpent = DataTableGetInt(true,Key(lv_keyBase,"ChargesSpent"));
	int lv_ChargesTotal = DataTableGetInt(true,Key(lv_keyBase,"ChargesTotal"));
	string lv_UnitType = DataTableGetString(true,Key(lv_keyBase,"UnitType"));
	order lv_order = DataTableGetOrder(true,Key(lv_keyBase,"Order"));
	abilcmd lv_executeCommand = DataTableGetAbilCmd(true,Key(lv_keyBase,"ExecuteCommand"));
	unit u;
	//LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	TriggerDebugOutput(1,StringToText(TriggerGetFunction(EventTrigger())),true);
	if (testConds) {
		if (!(DataTableGetInt(true,Key(lv_keyBase,"Phase")) == c_TargetingPhaseType_Location)) {
			return false;
		}
		if (!(lv_ChargesSpent < lv_ChargesTotal)) {
			return false;
		}
	}
	if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
		return true;
	}
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),true);
	lv_ChargesSpent += 1;
	DataTableSetInt(true,Key(lv_keyBase,"ChargesSpent"),lv_ChargesSpent);
	libNtve_gf_CreateActorAtPoint(DataTableGetString(true,Key(lv_keyBase,"Model")), lv_targetPoint);
	DataTableSetActor(true,Key(lv_keyBase,"Actors["+IntToString(lv_ChargesSpent)+"]"),libNtve_gf_ActorLastCreated());
	DataTableSetPoint(true,Key(lv_keyBase,"Point["+IntToString(lv_ChargesSpent)+"]"),lv_targetPoint);
	libNtve_gf_CreateActorAtPoint(DataTableGetString(true,Key(lv_keyBase,"ConfirmationSound")), lv_targetPoint);
	if ((lv_UnitType == null)) {
		UnitIssueOrder(lv_caster, OrderTargetingPoint(lv_executeCommand, lv_targetPoint), c_orderQueueAddToEnd);
		if ((lv_ChargesSpent == lv_ChargesTotal)) {
			Wait(0.125, c_timeGame);
			UnitBehaviorRemove(lv_caster, DataTableGetString(true,Key(lv_keyBase,"Behavior")), 1);
		}
		else {
			Wait(0.1, c_timeGame);
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), DataTableGetUnitGroup(true,Key(lv_keyBase,"CasterGroup")), lv_order, false);
		}
	}
	else {
		libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_UnitType, 0, lv_casterPlayer, lv_targetPoint);
		u = UnitLastCreated();
		DataTableSetUnit(true,Key(KEY_PREFIX,"TargeterParent["+IntToString(UnitGetTag(u))+"]"),lv_caster);
		DataTableSetUnit(true,Key(lv_keyBase,"Units["+IntToString(lv_ChargesSpent)+"]"),u);
		UnitSetState(u, c_unitStateTooltipable, false);
		DataTableSetUnitGroup(true,Key(lv_keyBase,"DirectionGroup"),libNtve_gf_ConvertUnitToUnitGroup(u));
		Wait(0.1, c_timeGame);
		if ((UnitIsValid(u) == true)) {
			UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), DataTableGetUnitGroup(true,Key(lv_keyBase,"DirectionGroup")), OrderTargetingPoint(lv_executeCommand, UnitGetPosition(u)), false);
			//libCOUI_gf_CU_TargetingSetInstructionText(Targeting.lv_InstructionsSecondary, lv_casterPlayer);
			DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_Direction);
		}
	}
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),false);
	return true;
}
bool LotC_SpecOpsClaymoreHandler_Deactivated_Func (bool testConds, bool runActions) {
	int lv_casterPlayer = UnitGetOwner(EventUnit());
	string lv_abil = "ClaymoreMinePlace";
	unit lv_caster = EventUnit();
	string lv_unitTag = IntToString(UnitGetTag(lv_caster));
	
	string lv_keyBase = KeyBase(lv_unitTag,lv_abil);
	//LOTC_TargetingStructRef Targeting = LOTC_TargetingGlobal[lv_casterPlayer];
	TriggerDebugOutput(1,StringToText(TriggerGetFunction(EventTrigger())),true);
	if (!runActions) {
		return true;
	}
	UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), DataTableGetUnitGroup(true,Key(lv_keyBase,"CasterGroup")), null, false);
	DataTableSetInt(true,Key(lv_keyBase,"ChargesSpent"),0);
	LotC_SpecOpsClaymoreHandler_ModeExit(lv_casterPlayer,lv_caster,lv_abil);
	return true;
}
bool LotC_SpecOpsClaymoreHandler_Activated_Func (bool testConds, bool runActions) {
	unit lv_caster = EventUnit();
	string lv_unitTag = IntToString(UnitGetTag(lv_caster));
	int lv_casterPlayer = 1;//UnitGetOwner(lv_caster);
	string lv_user = "LotC_Targetable";
	string BehaviorActivated = EventUnitBehavior();
	string lv_abil = "ClaymoreMinePlace";
	int lv_HornerAirFleet_Cost;
	string lv_keyBase = KeyBase(lv_unitTag,lv_abil);
	
	//order lv_Order = ;//"HornerAirFleetTargetingDummy"
	TriggerDebugOutput(1,StringToText(TriggerGetFunction(EventTrigger())),true);
	DataTableSetUnit(true,Key(lv_keyBase,"CasterUnit"),lv_caster);
	DataTableSetUnit(true,Key(lv_keyBase,"Targeter"),lv_caster);
	DataTableSetUnitGroup(true,Key(lv_keyBase,"CasterGroup"),libNtve_gf_ConvertUnitToUnitGroup(lv_caster));
	LotC_SpecOpsClaymoreHandler_InitDataTableFromUserData(lv_unitTag,lv_abil);
	DataTableSetOrder(true,Key(lv_keyBase,"Order"),OrderTargetingPoint(UserDataGetAbilCmd(lv_user,lv_abil,"Order",1), UnitGetPosition(lv_caster)));
	DataTableSetInt(true,Key(lv_keyBase,"ChargesSpent"),0);
	DataTableSetInt(true,Key(lv_keyBase,"UsageCount"),0);
	DataTableSetInt(true,Key(lv_keyBase,"Phase"),c_TargetingPhaseType_None);
	DataTableSetBool(true,Key(lv_keyBase,"Transitioning"),false);
	DataTableSetBool(true,Key(lv_keyBase,"UnrefundableStageEntered"),false);
	DataTableSetBool(true,Key(lv_keyBase,"AlreadyCanceled"),false);
	DataTableSetUnit(true,Key(lv_keyBase,"Unit[]"),null);
	DataTableSetActor(true,Key(lv_keyBase,"Actors[]"),null);
	DataTableSetUnitGroup(true,Key(lv_keyBase,"DirectionGroup"),UnitGroupEmpty());
	DataTableSetBool(true,Key(lv_keyBase,"Cycling"),false);
	DataTableSetBool(true,Key(lv_keyBase,"ExitInstantly"),false);
	DataTableSetString(true,Key(lv_keyBase,"ConfirmationSound"),"SOATargetingModeConfirmationSound");
	//lv_HornerAirFleet_Cost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ActivateAbility, "Cost[0].Resource[0]", lv_casterPlayer);
	DataTableSetUnit(true,Key(KEY_PREFIX,"TargeterParent["+lv_unitTag+"]"),lv_caster);
	LotC_SpecOpsClaymoreHandler_ModeEnter(lv_casterPlayer, lv_caster,lv_abil);
	return true;
	
}
void LotC_SpecOpsClaymoreHandler_Init(){
	trigger t;
	string lv_user = "LotC_Targetable";
	string lv_abil = "ClaymoreMinePlace";
	string ActivateBehavior = "ClaymoreMinePlaceActivate";
	//LOTC_Targeting_gt_Cancel;
	//LOTC_Targeting_gt_CancelFromUI;
	//LOTC_Targeting_gt_CameraShake;
	gt_Activated = TriggerCreate("LotC_SpecOpsClaymoreHandler_Activated_Func");
	TriggerAddEventUnitBehaviorChange(gt_Activated, null, ActivateBehavior, c_unitBehaviorChangeActivate);
	gt_Deactivated = TriggerCreate("LotC_SpecOpsClaymoreHandler_Deactivated_Func");
	TriggerAddEventUnitBehaviorChange(gt_Deactivated, null, ActivateBehavior, c_unitBehaviorChangeDeactivate);
	gt_PointChosen = TriggerCreate("LotC_SpecOpsClaymoreHandler_PointChosen_Func");
	TriggerEnable(gt_PointChosen, false);
	UserDataGetAbilCmd(lv_user,lv_abil,"Order",1);
	TriggerAddEventUnitOrder(gt_PointChosen, null, AbilityCommand("ClaymoreMinePlaceTargetingDummy", 0));
	gt_DirectionChosen = TriggerCreate("LotC_SpecOpsClaymoreHandler_DirectionChosen_Func");
	TriggerEnable(gt_DirectionChosen, false);
	TriggerAddEventUnitOrder(gt_DirectionChosen, null, AbilityCommand("ClaymoreMinePlaceExecute", 0));
	gt_ForceOff = TriggerCreate("LOTC_Targeting_TargetingForceOff_Func");
	//TriggerAddEventGeneric(LOTC_Targeting_gt_ForceOff, "CinematicModeOn");
	gt_EffectFired = TriggerCreate("LOTC_Targeting_EffectFired_Func");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAOrbitalStrikeCP");
	//TriggerAddEventPlayerEffectUsed(LOTC_Targeting_gt_EffectFired, c_playerAny, "SOAGravitonBombLM");
	gt_ExecuteAction =TriggerCreate("LotC_SpecOpsClaymoreHandler_ExecuteAction_Func");
	TriggerAddEventGeneric(gt_ExecuteAction,LotC_SpecOpsClaymoreHandler_EventName());
	
	gt_OrderMine= TriggerCreate("LotC_SpecOpsClaymoreHandler_OrderMine_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Speed Ribbon
//--------------------------------------------------------------------------------------------------
trigger LotC_SpeedRibbonController; 
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Speed Ribbon Controller
//--------------------------------------------------------------------------------------------------
bool LotC_SpeedRibbonController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeHeroic) == true))) {
            return false;
        }
        if (!((EventUnitBehaviorChange() != c_unitBehaviorChangeCreate))) {
            return false;
        }
        if (!((EventUnitBehaviorChange() != c_unitBehaviorChangeDestroy))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal SpeedRibbonCheckStart");
    return true;
}
//--------------------------------------------------------------------------------------------------
void LotC_SpeedRibbonController_Init () {
    LotC_SpeedRibbonController = TriggerCreate("LotC_SpeedRibbonController_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(LotC_SpeedRibbonController, null, c_behaviorCategoryFast, c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChangeFromCategory(LotC_SpeedRibbonController, null, c_behaviorCategorySlow, c_unitBehaviorChangeAny);
}

void libUPLR_InitCustomScript () {
    LotC_ArtilleryStrikeVisualHandler_Init();
    LOTC_Targeting_Init();
    LotC_MiningWorker_Init();
    LotC_SpecOpsClaymoreHandler_Init();
}

// Functions
void libUPLR_gf_KhalaPerceptionTimeScale (fixed lp_startTimeScale, fixed lp_endTimeScale, fixed lp_over, int lp_timeType) {
    // Variable Declarations
    fixed lv_r;
    const fixed lv_waitTime = 0.0625;
    fixed lv_step;
    int lv_owner;
    fixed lv_timeScaleUnit;
    fixed lv_min;
    fixed lv_max;
    int lv_steps;
    const fixed lv_newMin = 1.0;
    fixed lv_newMax;

    // Automatic Variable Declarations
    int auto528C919F_n;
    int auto528C919F_i;

    // Variable Initialization
    lv_r = lp_startTimeScale;
    lv_owner = libUPLR_gv_khalaPerceptionCasterOwner;
    lv_min = 0.001;
    lv_max = 1.0;
    lv_newMax = 3.0;

    // Implementation
    GameSetGlobalTimeScale(lp_startTimeScale);
    if ((lv_waitTime > 0)) {
        lv_steps = FixedToInt((lp_over / lv_waitTime));
    }

    if ((lp_startTimeScale > lp_endTimeScale)) {
        lv_min = lp_endTimeScale;
        lv_max = lp_startTimeScale;
        if ((lv_steps > 0)) {
            lv_step = ((lv_max - lv_min) / lv_steps);
        }
        else {
            lv_step = 0.0;
        }
        lv_step = (lv_step * -1.0);
    }
    else {
        lv_min = lp_startTimeScale;
        lv_max = lp_endTimeScale;
        if ((lv_steps > 0)) {
            lv_step = ((lv_max - lv_min) / lv_steps);
        }
        else {
            lv_step = 0.0;
        }
    }
    auto528C919F_n = lv_steps;
    for (auto528C919F_i = 1; auto528C919F_i <= auto528C919F_n; auto528C919F_i += 1) {
        Wait(lv_waitTime, lp_timeType);
        if ((libUPLR_gv_khalaPerceptionActive == false)) {
            break;
        }

        lv_r += lv_step;
        lv_timeScaleUnit = libNtve_gf_ArithmeticRealClamp(data_RangeValueToRange (lv_r, lv_newMax, lv_newMin, lv_min, lv_max), lv_newMin, lv_newMax);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.TimeScale", lv_owner, lv_timeScaleUnit);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.AttackSpeedMultiplier", lv_owner, lv_timeScaleUnit);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.MoveSpeedMultiplier", lv_owner, lv_timeScaleUnit);
        GameSetGlobalTimeScale(libNtve_gf_ArithmeticRealClamp(lv_r, lv_min, lv_max));
    }
    GameSetGlobalTimeScale(lp_endTimeScale);
}

trigger auto_libUPLR_gf_KhalaPerceptionGameSpeed_Trigger = null;
fixed auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_startGameSpeed;
fixed auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_endGameSpeed;
fixed auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_over;
int auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_timeType;

void libUPLR_gf_KhalaPerceptionGameSpeed (fixed lp_startGameSpeed, fixed lp_endGameSpeed, fixed lp_over, int lp_timeType) {
    auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_startGameSpeed = lp_startGameSpeed;
    auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_endGameSpeed = lp_endGameSpeed;
    auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_over = lp_over;
    auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_timeType = lp_timeType;

    if (auto_libUPLR_gf_KhalaPerceptionGameSpeed_Trigger == null) {
        auto_libUPLR_gf_KhalaPerceptionGameSpeed_Trigger = TriggerCreate("auto_libUPLR_gf_KhalaPerceptionGameSpeed_TriggerFunc");
    }

    TriggerExecute(auto_libUPLR_gf_KhalaPerceptionGameSpeed_Trigger, false, false);
}

bool auto_libUPLR_gf_KhalaPerceptionGameSpeed_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_startGameSpeed = auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_startGameSpeed;
    fixed lp_endGameSpeed = auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_endGameSpeed;
    fixed lp_over = auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_over;
    int lp_timeType = auto_libUPLR_gf_KhalaPerceptionGameSpeed_lp_timeType;

    // Variable Declarations
    fixed lv_r;
    const fixed lv_waitTime = 0.0625;
    fixed lv_step;
    fixed lv_min;
    fixed lv_max;
    int lv_steps;

    // Automatic Variable Declarations
    int autoFDE317EA_n;
    int autoFDE317EA_i;

    // Variable Initialization
    lv_r = lp_startGameSpeed;
    lv_min = 0.001;
    lv_max = 1.0;

    // Implementation
    ConsoleCommand(("Speed " + FixedToString(lp_startGameSpeed, c_fixedPrecisionAny)), true, true);
    if ((lv_waitTime > 0)) {
        lv_steps = FixedToInt((lp_over / lv_waitTime));
    }

    if ((lp_startGameSpeed > lp_endGameSpeed)) {
        lv_min = lp_endGameSpeed;
        lv_max = lp_startGameSpeed;
        if ((lv_steps > 0)) {
            lv_step = ((lv_max - lv_min) / lv_steps);
        }
        else {
            lv_step = 0.0;
        }
        lv_step = (lv_step * -1.0);
    }
    else {
        lv_min = lp_startGameSpeed;
        lv_max = lp_endGameSpeed;
        if ((lv_steps > 0)) {
            lv_step = ((lv_max - lv_min) / lv_steps);
        }
        else {
            lv_step = 0.0;
        }
    }
    autoFDE317EA_n = lv_steps;
    for (autoFDE317EA_i = 1; autoFDE317EA_i <= autoFDE317EA_n; autoFDE317EA_i += 1) {
        Wait(lv_waitTime, lp_timeType);
        if ((libUPLR_gv_khalaPerceptionActive == false)) {
            break;
        }

        lv_r += lv_step;
        ConsoleCommand(("Speed " + FixedToString(libNtve_gf_ArithmeticRealClamp(lv_r, lv_min, lv_max), c_fixedPrecisionAny)), true, true);
    }
    ConsoleCommand(("Speed " + FixedToString(lp_endGameSpeed, c_fixedPrecisionAny)), true, true);
    return true;
}

void libUPLR_gf_ActivateKhalaPerception (bool lp_activateDeactivate) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_activateDeactivate == true)) {
        libUPLR_gv_khalaPerceptionActive = true;
        libUPLR_gv_khalaPerceptionTimeScaleBefore = GameGetGlobalTimeScale();
        libUPLR_gv_khalaPerceptionGameSpeedBefore = GameGetSpeed();
        if ((libUPLR_gv_khalaPerceptionUIOverlay != c_invalidDialogControlId)) {
            DialogControlDestroy(libUPLR_gv_khalaPerceptionUIOverlay);
        }

        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotC_UIOverlays/KhalaPerceptionOverlayTemplate");
        libUPLR_gv_khalaPerceptionUIOverlay = DialogControlLastCreated();
        DialogControlSetVisible(libUPLR_gv_khalaPerceptionUIOverlay, PlayerGroupAll(), true);

        libUPLR_gf_KhalaPerceptionGameSpeed(libUPLR_gv_khalaPerceptionGameSpeedBefore, libUPLR_gv_khalaPerceptionGameSpeed, 2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Mallock_KhalaPerception_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libUPLR_gv_khalaPerceptionSound = SoundLastPlayed();
        TriggerEnable(libUPLR_gt_KhalaPerceptionMissileLaunch, true);
        TriggerEnable(libUPLR_gt_KhalaPerceptionMiss3, true);
        libUPLR_gf_KhalaPerceptionTimeScale(libUPLR_gv_khalaPerceptionTimeScaleBefore, libUPLR_gv_khalaPerceptionTimeScale, 2.0, c_timeReal);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MallockPsiBladesBurst", "PeriodicPeriodArray[" + IntToString(1) + "]", libUPLR_gv_khalaPerceptionCasterOwner, 0.13);
    }
    else {
        libUPLR_gf_KhalaPerceptionGameSpeed(libUPLR_gv_khalaPerceptionGameSpeed, libUPLR_gv_khalaPerceptionGameSpeedBefore, 4.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Mallock_KhalaPerception_Stop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((libUPLR_gv_khalaPerceptionUIOverlay != c_invalidDialogControlId)) {
            DialogControlSendAnimationEvent(libUPLR_gv_khalaPerceptionUIOverlay, PlayerGroupAll(), "Hide");
        }

        libUPLR_gf_KhalaPerceptionTimeScale(libUPLR_gv_khalaPerceptionTimeScale, libUPLR_gv_khalaPerceptionTimeScaleBefore, 4.0, c_timeReal);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MallockPsiBladesBurst", "PeriodicPeriodArray[" + IntToString(1) + "]", libUPLR_gv_khalaPerceptionCasterOwner, 0.26);
        if ((UnitIsValid(libUPLR_gv_khalaPerceptionCaster) == true)) {
            UnitBehaviorRemove(libUPLR_gv_khalaPerceptionCaster, "MallockKhalaPerception", 1);
        }

        libUPLR_gv_khalaPerceptionActive = false;
        TriggerEnable(libUPLR_gt_KhalaPerceptionMiss3, false);
        DialogControlDestroy(libUPLR_gv_khalaPerceptionUIOverlay);
    }
}

void libUPLR_gf_TurnTurnOffKhalaPerception (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libUPLR_gt_KhalaPerception, lp_onOff);
    TriggerEnable(libUPLR_gt_KhalaPerceptionMissileLaunch, lp_onOff);
}

void libUPLR_gf_StopKhalaPerception () {
    // Variable Declarations
    const fixed lv__1 = 1.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libUPLR_gv_khalaPerceptionActive == true)) {
        TriggerStop(libUPLR_gt_KhalaPerception);
        SoundStop(libUPLR_gv_khalaPerceptionSound, true);
        libUPLR_gf_KhalaPerceptionGameSpeed(libUPLR_gv_khalaPerceptionGameSpeed, libUPLR_gv_khalaPerceptionGameSpeedBefore, 0.0, c_timeReal);
        libUPLR_gf_KhalaPerceptionTimeScale(libUPLR_gv_khalaPerceptionTimeScale, libUPLR_gv_khalaPerceptionTimeScaleBefore, 0.0, c_timeReal);
        DialogControlDestroy(libUPLR_gv_khalaPerceptionUIOverlay);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.TimeScale", libUPLR_gv_khalaPerceptionCasterOwner, lv__1);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.AttackSpeedMultiplier", libUPLR_gv_khalaPerceptionCasterOwner, lv__1);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "MallockKhalaPerception", "Modification.MoveSpeedMultiplier", libUPLR_gv_khalaPerceptionCasterOwner, lv__1);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MallockPsiBladesBurst", "PeriodicPeriodArray[" + IntToString(1) + "]", libUPLR_gv_khalaPerceptionCasterOwner, 0.26);
        if ((UnitIsValid(libUPLR_gv_khalaPerceptionCaster) == true)) {
            UnitBehaviorRemove(libUPLR_gv_khalaPerceptionCaster, "MallockKhalaPerception", 1);
        }

        libUPLR_gv_khalaPerceptionActive = false;
        TriggerEnable(libUPLR_gt_KhalaPerceptionMiss3, false);
    }

}

bool libUPLR_gf_GetKhalaPerceptionActive () {
    // Automatic Variable Declarations
    // Implementation
    return libUPLR_gv_khalaPerceptionActive;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UPL Race
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_InitializeUPLRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8A7C6E27_g;
    int auto8A7C6E27_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8A7C6E27_g = PlayerGroupAll();
    auto8A7C6E27_var = -1;
    while (true) {
        auto8A7C6E27_var = PlayerGroupNextPlayer(auto8A7C6E27_g, auto8A7C6E27_var);
        if (auto8A7C6E27_var < 0) { break; }
        if ((PlayerRace(auto8A7C6E27_var) == "UPL")) {
            PlayerApplySkin(auto8A7C6E27_var, "UPLAnnouncer", true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_InitializeUPLRace_Init () {
    libUPLR_gt_InitializeUPLRace = TriggerCreate("libUPLR_gt_InitializeUPLRace_Func");
    TriggerAddEventMapInit(libUPLR_gt_InitializeUPLRace);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infantry Mortar Launch
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_InfantryMortarLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitIsValid(lv_target) == true)) {
        UnitCreateEffectUnit(lv_caster, "InfantryMortarLaunchSwitch", lv_target);
    }
    else {
        UnitCreateEffectPoint(lv_caster, "InfantryMortarLaunch", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_InfantryMortarLaunch_Init () {
    libUPLR_gt_InfantryMortarLaunch = TriggerCreate("libUPLR_gt_InfantryMortarLaunch_Func");
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_InfantryMortarLaunch, c_playerAny, "InfantryMortarLaunchDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMinePlaceDummy
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_ClaymoreMinePlaceDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_queued;
    unitgroup lv_ug;
    unit lv_caster;
    unit lv_claymorePH;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_queued = OrderGetFlag(EventUnitOrder(), c_cmdQueued);
    lv_ug = UnitGroupEmpty();
    lv_caster = EventUnit();
    lv_player = 1;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_queued == true)) {
        UnitBehaviorAdd(lv_caster, "ClaymoreMineQueued", lv_caster, 1);
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitCreateEffectPoint(lv_caster, "ClaymoreMineMakeDummy", OrderGetTargetPosition(EventUnitOrder()));
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    if ((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true)) {
        lv_ug = UnitGetTrackedUnitGroup(lv_caster, "ClaymoreMineTracker");
        if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
            lv_claymorePH = UnitGroupUnit(lv_ug, UnitGroupCount(lv_ug, c_unitCountAlive));
            if ((lv_queued == true)) {
                UnitBehaviorAdd(lv_claymorePH, "ClaymoreMineQueued", lv_caster, 1);
            }

            lv_ug = libNtve_gf_ConvertUnitToUnitGroup(lv_claymorePH);
            if ((UnitIsValid(lv_caster) == true) && (UnitIsValid(lv_claymorePH) == true)) {
                UISetTargetingOrder(PlayerGroupSingle(lv_player), lv_ug, OrderTargetingPoint(AbilityCommand("ClaymoreMineSetDirection", 0), UnitGetPosition(lv_claymorePH)), false);
                while ((UnitIsValid(lv_caster) == true) && (UnitIsValid(lv_claymorePH) == true)) {
                    Wait(0.0625, c_timeGame);
                }
            }

        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UPLR_1F1EC273"), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_ClaymoreMinePlaceDummy_Init () {
    libUPLR_gt_ClaymoreMinePlaceDummy = TriggerCreate("libUPLR_gt_ClaymoreMinePlaceDummy_Func");
    TriggerAddEventUnitOrder(libUPLR_gt_ClaymoreMinePlaceDummy, null, AbilityCommand("ClaymoreMineDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMineSetDirection
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_ClaymoreMineSetDirection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unitgroup lv_ug;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGetTrackedUnitGroup(EventUnit(), "ClaymoreMineTracker");
    if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
        lv_caster = UnitGroupUnit(lv_ug, 1);
        if ((UnitIsValid(lv_caster) == true)) {
            UnitCreateEffectUnit(EventUnit(), "ClaymoreMineSignalReady", lv_caster);
            if ((UnitHasBehavior2(EventUnit(), "ClaymoreMineQueued") == true)) {
                lv_ug = UnitGroupSelected(lv_player);
                UISetTargetingOrder(PlayerGroupSingle(lv_player), lv_ug, OrderTargetingPoint(AbilityCommand("ClaymoreMineDummy", 0), UnitGetPosition(lv_caster)), false);
                Wait(30.0, c_timeReal);
                return true;
            }

        }

    }

    UISetTargetingOrder(PlayerGroupSingle(lv_player), libNtve_gf_ConvertUnitToUnitGroup(EventUnit()), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_ClaymoreMineSetDirection_Init () {
    libUPLR_gt_ClaymoreMineSetDirection = TriggerCreate("libUPLR_gt_ClaymoreMineSetDirection_Func");
    TriggerAddEventUnitOrder(libUPLR_gt_ClaymoreMineSetDirection, null, AbilityCommand("ClaymoreMineSetDirection", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClaymoreMineSetDirectionCancel
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_ClaymoreMineSetDirectionCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto1DED529D_g;
    int auto1DED529D_u;
    unit auto1DED529D_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1DED529D_g = UnitGroupSelected(lv_player);
    auto1DED529D_u = UnitGroupCount(auto1DED529D_g, c_unitCountAll);
    for (;; auto1DED529D_u -= 1) {
        auto1DED529D_var = UnitGroupUnitFromEnd(auto1DED529D_g, auto1DED529D_u);
        if (auto1DED529D_var == null) { break; }
        PlayerCreateEffectUnit(lv_player, "ClaymoreMineCancelChannelOrder", auto1DED529D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_ClaymoreMineSetDirectionCancel_Init () {
    libUPLR_gt_ClaymoreMineSetDirectionCancel = TriggerCreate("libUPLR_gt_ClaymoreMineSetDirectionCancel_Func");
    TriggerAddEventTargetModeUpdate(libUPLR_gt_ClaymoreMineSetDirectionCancel, c_playerAny, AbilityCommand("ClaymoreMineSetDirection", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VaeregothPsionicProjectionManageHeight
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_VaeregothPsionicProjectionManageHeight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_caster, "VaeregothPsiProjectionTracker"), 1);
    if ((UnitIsValid(lv_u) == true)) {
        UnitSetHeight(lv_u, UnitGetHeight(lv_target), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_VaeregothPsionicProjectionManageHeight_Init () {
    libUPLR_gt_VaeregothPsionicProjectionManageHeight = TriggerCreate("libUPLR_gt_VaeregothPsionicProjectionManageHeight_Func");
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_VaeregothPsionicProjectionManageHeight, c_playerAny, "VaeregothPsiProjectionNewTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VaeregothPsionicProjectionNewTarget
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_VaeregothPsionicProjectionNewTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(UnitGroupUnit(UnitGetTrackedUnitGroup(lv_caster, "VaeregothPsiProjectionTracker"), 1), "VaeregothPsiProjectionNewTarget", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_VaeregothPsionicProjectionNewTarget_Init () {
    libUPLR_gt_VaeregothPsionicProjectionNewTarget = TriggerCreate("libUPLR_gt_VaeregothPsionicProjectionNewTarget_Func");
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_VaeregothPsionicProjectionNewTarget, c_playerAny, "VaeregothPsiProjectionBeam");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VaeregothPsionicProjectionRedirectDamage
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_VaeregothPsionicProjectionRedirectDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_target, "VaeregothPsiProjectionEnum", UnitGroupUnit(UnitGetTrackedUnitGroup(lv_caster, "VaeregothPsiProjectionTracker"), 1));
    libUPLR_gv_vaeregothPsionicProjectionTarget = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_caster, "VaeregothPsiProjectionTargetTracker"), 1);
    libUPLR_gv_vaeregothPsionicProjectionCaster = lv_caster;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_VaeregothPsionicProjectionRedirectDamage_Init () {
    libUPLR_gt_VaeregothPsionicProjectionRedirectDamage = TriggerCreate("libUPLR_gt_VaeregothPsionicProjectionRedirectDamage_Func");
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_VaeregothPsionicProjectionRedirectDamage, c_playerAny, "VaeregothPsiProjectionSourceDummySpawn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VaeregothPsionicProjectionRedirectDamage2
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libUPLR_gv_vaeregothPsionicProjectionCaster, "VaeregothPsiProjectionImpact", libUPLR_gv_vaeregothPsionicProjectionTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2_Init () {
    libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2 = TriggerCreate("libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2_Func");
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2, c_playerAny, "VaeregothPsiProjectionDummyDMG");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KhalaPerceptionMissileLaunch
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_KhalaPerceptionMissileLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_missile;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto55E49096_g;
    int auto55E49096_u;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_caster = EventPlayerEffectUsedUnitLaunch();
    lv_target = EventPlayerEffectUsedUnitImpact();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_target) == "Mallock"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup(null, UnitGetOwner(lv_caster), RegionCircle(UnitGetPosition(lv_caster), 0.25), UnitFilter((1 << c_targetFilterMissile), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), (1 << (c_targetFilterDead - 32))), 0);
    auto55E49096_g = lv_ug;
    auto55E49096_u = UnitGroupCount(auto55E49096_g, c_unitCountAll);
    for (;; auto55E49096_u -= 1) {
        lv_missile = UnitGroupUnitFromEnd(auto55E49096_g, auto55E49096_u);
        if (lv_missile == null) { break; }
        if ((UnitHasBehavior2(lv_missile, "MissileTargetTracker") == false)) {
            if ((UnitGetOriginalCaster(lv_missile) == lv_caster)) {
                UnitCreateEffectUnit(lv_missile, "MissileTargetTrackerSet", lv_target);
                break;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_KhalaPerceptionMissileLaunch_Init () {
    libUPLR_gt_KhalaPerceptionMissileLaunch = TriggerCreate("libUPLR_gt_KhalaPerceptionMissileLaunch_Func");
    TriggerEnable(libUPLR_gt_KhalaPerceptionMissileLaunch, false);
    TriggerAddEventPlayerEffectUsedFromScope(libUPLR_gt_KhalaPerceptionMissileLaunch, c_playerAny, "CEffectLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KhalaPerceptionAttackerAttacks
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_KhalaPerceptionMiss3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weapon;
    fixed lv_cooldown;
    int lv_i;

    // Automatic Variable Declarations
    int auto028CC15F_ae;
    const int auto028CC15F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitTarget()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_weapon = EventUnitGetWeapon();
    auto028CC15F_ae = UnitWeaponCount(EventUnitTarget());
    lv_i = 1;
    for ( ; ( (auto028CC15F_ai >= 0 && lv_i <= auto028CC15F_ae) || (auto028CC15F_ai < 0 && lv_i >= auto028CC15F_ae) ) ; lv_i += auto028CC15F_ai ) {
        if ((UnitWeaponGet(EventUnitTarget(), lv_i) == lv_weapon)) {
            lv_cooldown = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, lv_weapon, "Period", UnitGetOwner(EventUnitTarget())) * 0.85);
            UnitModifyCooldown(EventUnitTarget(), "AttackerCanAttack", lv_cooldown, c_cooldownOperationSet);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_KhalaPerceptionMiss3_Init () {
    libUPLR_gt_KhalaPerceptionMiss3 = TriggerCreate("libUPLR_gt_KhalaPerceptionMiss3_Func");
    TriggerEnable(libUPLR_gt_KhalaPerceptionMiss3, false);
    TriggerAddEventUnitAttacked2(libUPLR_gt_KhalaPerceptionMiss3, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KhalaPerception
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_KhalaPerception_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUPLR_gv_khalaPerceptionActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUPLR_gv_khalaPerceptionCaster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    libUPLR_gv_khalaPerceptionCasterOwner = UnitGetOwner(libUPLR_gv_khalaPerceptionCaster);
    libUPLR_gf_ActivateKhalaPerception(true);
    Wait(24.0, c_timeReal);
    libUPLR_gf_ActivateKhalaPerception(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_KhalaPerception_Init () {
    libUPLR_gt_KhalaPerception = TriggerCreate("libUPLR_gt_KhalaPerception_Func");
    TriggerEnable(libUPLR_gt_KhalaPerception, false);
    TriggerAddEventPlayerEffectUsed(libUPLR_gt_KhalaPerception, 1, "MallockKhalaPerception");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastOn
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_SelfCastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUPLR_gv_selfCasting = true;
    TriggerEnable(libUPLR_gt_SelfCastMyraHeal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_SelfCastOn_Init () {
    libUPLR_gt_SelfCastOn = TriggerCreate("libUPLR_gt_SelfCastOn_Func");
    TriggerAddEventHotkeyPressed(libUPLR_gt_SelfCastOn, c_playerAny, c_hotkeyHeroCharacterSheetPanel, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastOff
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_SelfCastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUPLR_gv_selfCasting = false;
    TriggerEnable(libUPLR_gt_SelfCastMyraHeal, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_SelfCastOff_Init () {
    libUPLR_gt_SelfCastOff = TriggerCreate("libUPLR_gt_SelfCastOff_Func");
    TriggerAddEventHotkeyPressed(libUPLR_gt_SelfCastOff, c_playerAny, c_hotkeyHeroCharacterSheetPanel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SelfCastMyraHeal
//--------------------------------------------------------------------------------------------------
bool libUPLR_gt_SelfCastMyraHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    order lv_order;

    // Automatic Variable Declarations
    unitgroup auto24040CE4_g;
    int auto24040CE4_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libUPLR_gv_selfCasting == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24040CE4_g = UnitGroupSelected(EventPlayer());
    auto24040CE4_u = UnitGroupCount(auto24040CE4_g, c_unitCountAll);
    for (;; auto24040CE4_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto24040CE4_g, auto24040CE4_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == "MyraDavisOfficer") || (UnitGetType(lv_u) == "MyraDavisRiotOfficer") || (UnitGetType(lv_u) == "RusellPeters"))) {
            if ((UnitGetPropertyFixed(lv_u, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
                if ((TechTreeAbilityIsAllowed(EventPlayer(), AbilityCommand("MyraDavisHealingPatch", 0)) == true) && (UnitAbilityCheck(lv_u, "MyraDavisHealingPatch", true) == true) && (UnitAbilityGetCooldown(lv_u, "MyraDavisHealingPatch", "Abil/MyraDavisHealingPatch") == 0.0)) {
                    UnitIssueOrder(lv_u, OrderTargetingUnit(AbilityCommand("MyraDavisHealingPatch", 0), lv_u), c_orderQueueAddToFront);
                    break;
                }

            }

        }

    }
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), null, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUPLR_gt_SelfCastMyraHeal_Init () {
    libUPLR_gt_SelfCastMyraHeal = TriggerCreate("libUPLR_gt_SelfCastMyraHeal_Func");
    TriggerEnable(libUPLR_gt_SelfCastMyraHeal, false);
    TriggerAddEventTargetModeUpdate(libUPLR_gt_SelfCastMyraHeal, c_playerAny, AbilityCommand("MyraDavisHealingPatch", 0), c_targetModeStateOn);
}

void libUPLR_InitTriggers () {
    libUPLR_gt_InitializeUPLRace_Init();
    libUPLR_gt_InfantryMortarLaunch_Init();
    libUPLR_gt_ClaymoreMinePlaceDummy_Init();
    libUPLR_gt_ClaymoreMineSetDirection_Init();
    libUPLR_gt_ClaymoreMineSetDirectionCancel_Init();
    libUPLR_gt_VaeregothPsionicProjectionManageHeight_Init();
    libUPLR_gt_VaeregothPsionicProjectionNewTarget_Init();
    libUPLR_gt_VaeregothPsionicProjectionRedirectDamage_Init();
    libUPLR_gt_VaeregothPsionicProjectionRedirectDamage2_Init();
    libUPLR_gt_KhalaPerceptionMissileLaunch_Init();
    libUPLR_gt_KhalaPerceptionMiss3_Init();
    libUPLR_gt_KhalaPerception_Init();
    libUPLR_gt_SelfCastOn_Init();
    libUPLR_gt_SelfCastOff_Init();
    libUPLR_gt_SelfCastMyraHeal_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUPLR_InitLib_completed = false;

void libUPLR_InitLib () {
    if (libUPLR_InitLib_completed) {
        return;
    }

    libUPLR_InitLib_completed = true;

    libUPLR_InitLibraries();
    libUPLR_InitVariables();
    libUPLR_InitCustomScript();
    libUPLR_InitTriggers();
}

