include "TriggerLibs/NativeLib"

include "Lib10327208_h"

//--------------------------------------------------------------------------------------------------
// Library: Cheats
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib10327208_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib10327208_InitVariables_completed = false;

void lib10327208_InitVariables () {
    if (lib10327208_InitVariables_completed) {
        return;
    }

    lib10327208_InitVariables_completed = true;

    lib10327208_gv_tuneup = 1;
    lib10327208_gv_evolve = 1;
    lib10327208_gv_forge = 1;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib10327208_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 1) || (UnitGetOwner(EventUnitProgressUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastConstruction_Init () {
    lib10327208_gt_UT_FastConstruction = TriggerCreate("lib10327208_gt_UT_FastConstruction_Func");
    TriggerEnable(lib10327208_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(lib10327208_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib10327208_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastTrain_Init () {
    lib10327208_gt_UT_FastTrain = TriggerCreate("lib10327208_gt_UT_FastTrain_Func");
    TriggerEnable(lib10327208_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(lib10327208_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib10327208_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastResearch_Init () {
    lib10327208_gt_UT_FastResearch = TriggerCreate("lib10327208_gt_UT_FastResearch_Func");
    TriggerEnable(lib10327208_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(lib10327208_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib10327208_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastArrm_Init () {
    lib10327208_gt_UT_FastArrm = TriggerCreate("lib10327208_gt_UT_FastArrm_Func");
    TriggerEnable(lib10327208_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(lib10327208_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib10327208_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastRevive_Init () {
    lib10327208_gt_UT_FastRevive = TriggerCreate("lib10327208_gt_UT_FastRevive_Func");
    TriggerEnable(lib10327208_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(lib10327208_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_uT_FastBuildCheat == false)) {
        lib10327208_gv_uT_FastBuildCheat = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_10327208_59E0BC9D"));
        TriggerEnable(lib10327208_gt_UT_FastArrm, true);
        TriggerEnable(lib10327208_gt_UT_FastConstruction, true);
        TriggerEnable(lib10327208_gt_UT_FastResearch, true);
        TriggerEnable(lib10327208_gt_UT_FastRevive, true);
        TriggerEnable(lib10327208_gt_UT_FastTrain, true);
    }
    else {
        lib10327208_gv_uT_FastBuildCheat = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_10327208_6E5BDE95"));
        TriggerEnable(lib10327208_gt_UT_FastArrm, false);
        TriggerEnable(lib10327208_gt_UT_FastConstruction, false);
        TriggerEnable(lib10327208_gt_UT_FastResearch, false);
        TriggerEnable(lib10327208_gt_UT_FastRevive, false);
        TriggerEnable(lib10327208_gt_UT_FastTrain, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_UT_FastBuild_Init () {
    lib10327208_gt_UT_FastBuild = TriggerCreate("lib10327208_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(lib10327208_gt_UT_FastBuild, c_playerAny, "operation cwal", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CHEAT DETECTION
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_CHEATDETECTION_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_CHEATDETECTION_Init () {
    lib10327208_gt_CHEATDETECTION = TriggerCreate("lib10327208_gt_CHEATDETECTION_Func");
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "black sheep wall", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "breathe deep", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "whats mine is mine", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "food for thought", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "game over man", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "medieval man", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "modify the phase variance", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "noglues", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "operation cwal", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "ophelia", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "power overwhelming", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "show me the money", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "something for nothing", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "staying alive", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "the gathering", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "war aint what it used to be", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "there is no cow level", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "what is dead may never die", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "for the horde", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "if he be worthy", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "throw down with the best of them", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "hello beastie", true);
    TriggerAddEventChatMessage(lib10327208_gt_CHEATDETECTION, 1, "feed me", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Sheep Wall - Reveal Map
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BlackSheepWallRevealMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_revealMap == false)) {
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
        lib10327208_gv_revealMap = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_revealMap == true)) {
            VisEnable(c_visTypeMask, true);
            VisEnable(c_visTypeFog, true);
            lib10327208_gv_revealMap = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BlackSheepWallRevealMap_Init () {
    lib10327208_gt_BlackSheepWallRevealMap = TriggerCreate("lib10327208_gt_BlackSheepWallRevealMap_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BlackSheepWallRevealMap, 1, "black sheep wall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breathe Deep - 500 Gas
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BreatheDeep500Gas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, 500);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BreatheDeep500Gas_Init () {
    lib10327208_gt_BreatheDeep500Gas = TriggerCreate("lib10327208_gt_BreatheDeep500Gas_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BreatheDeep500Gas, 1, "breathe deep", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whats Mine is Mine - 500 Minerals
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_WhatsMineisMine500Minerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, 500);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_WhatsMineisMine500Minerals_Init () {
    lib10327208_gt_WhatsMineisMine500Minerals = TriggerCreate("lib10327208_gt_WhatsMineisMine500Minerals_Func");
    TriggerAddEventChatMessage(lib10327208_gt_WhatsMineisMine500Minerals, 1, "whats mine is mine", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food for Thought - No Supply Limit
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_FoodforThoughtNoSupplyLimit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_foodforthought == false)) {
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        lib10327208_gv_foodforthought = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_foodforthought == true)) {
            lib10327208_gv_foodforthought_supplies = PlayerGetPropertyInt(1, c_playerPropSuppliesMade);
            Wait(0.1, c_timeReal);
            PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, lib10327208_gv_foodforthought_supplies);
            lib10327208_gv_foodforthought = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_FoodforThoughtNoSupplyLimit_Init () {
    lib10327208_gt_FoodforThoughtNoSupplyLimit = TriggerCreate("lib10327208_gt_FoodforThoughtNoSupplyLimit_Func");
    TriggerAddEventChatMessage(lib10327208_gt_FoodforThoughtNoSupplyLimit, 1, "food for thought", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Man - Defeat
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_GameOverManDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(EventPlayer(), c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_GameOverManDefeat_Init () {
    lib10327208_gt_GameOverManDefeat = TriggerCreate("lib10327208_gt_GameOverManDefeat_Func");
    TriggerAddEventChatMessage(lib10327208_gt_GameOverManDefeat, 1, "game over man", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medieval Man - Enable All Abilities
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_MedievalManEnableAllAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_toggle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_medievalMan == false)) {
        lv_toggle = 1;
    }
    else {
        if ((lib10327208_gv_medievalMan == true)) {
            lv_toggle = 0;
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchStasis", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchRecall", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "KhaydarinCore", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BattlecruiserBehemothReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BattlecruiserEnableSpecializations", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Burrow", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InterceptorLimit6", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ArgusJewel", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchDisruptionWeb", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ArgusTalisman", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Maelstrom", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MindControl", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveConsume", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchMetasynapticNode", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolvePlague", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SingularityCharge", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Lockdown", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GhostMoebiusReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OcularImplants2", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PersonalCloaking", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "AresClassWeaponsSystem", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "haltech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HighTemplarKhaydarinAmulet", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PsiStormTech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveLurkerAspect", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "hydraliskspeed2", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "U238Shells", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Stimpack", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MedicCaduceusReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OpticalFlare", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Restoration", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ObserverGraviticBooster", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SensorArray", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Antennae", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "overlordtransport", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveEnsnare", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "InfestorEnergyUpgrade", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "EvolveSpawnBroodling", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IncreasedReaverCapacity", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ScarabDamage", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchEMPShockwave", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchIrradiate", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ScienceVesselTitanReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ApialSensors", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GraviticThrusters", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "GraviticDrive", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SiegeTech", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "AnabolicSynthesis", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ChitinousPlating", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "IonThrusters", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ResearchSpiderMines", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "WraithApolloReactor", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "WraithCloak", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Charge", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingattackspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "zerglingmovementspeed", lv_toggle);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ObverseIncubation", lv_toggle);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_MedievalManEnableAllAbilities_Init () {
    lib10327208_gt_MedievalManEnableAllAbilities = TriggerCreate("lib10327208_gt_MedievalManEnableAllAbilities_Func");
    TriggerAddEventChatMessage(lib10327208_gt_MedievalManEnableAllAbilities, 1, "medieval man", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify the Phase Variance - Disable all Building Requirements
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_phase_active == false)) {
        lib10327208_gv_phase_active = true;
        TechTreeRequirementsEnable(1, false);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_phase_active == true)) {
            lib10327208_gv_phase_active = false;
            TechTreeRequirementsEnable(1, true);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Init () {
    lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements = TriggerCreate("lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Func");
    TriggerAddEventChatMessage(lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements, 1, "modify the phase variance", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode Give
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_PowerOverwhelmingGodModeGive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), UnitGetOwner(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(EventUnitProgressUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(EventUnitProgressUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_PowerOverwhelmingGodModeGive_Init () {
    lib10327208_gt_PowerOverwhelmingGodModeGive = TriggerCreate("lib10327208_gt_PowerOverwhelmingGodModeGive_Func");
    TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive, false);
    TriggerAddEventUnitTrainProgress(lib10327208_gt_PowerOverwhelmingGodModeGive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Glues - No Psionics
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_NoGluesNoPsionics_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    const int autoD4A1C90A_ae = 9;
    const int autoD4A1C90A_ai = 1;
    const int auto2E392063_ae = 9;
    const int auto2E392063_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_glues_active == false)) {
        lib10327208_gv_glues_active = true;
        lv_n = 2;
        for ( ; ( (auto2E392063_ai >= 0 && lv_n <= auto2E392063_ae) || (auto2E392063_ai < 0 && lv_n >= auto2E392063_ae) ) ; lv_n += auto2E392063_ai ) {
            TechTreeAbilityAllow(lv_n, AbilityCommand("PsiStorm", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Hallucination", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DisruptionWeb", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("MassRecall", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("StasisField", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Plague", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DarkSwarm", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Ensnare", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Parasite", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("SpawnBroodling", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Irradiate", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("EMP", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("DefensiveMatrix2", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Lockdown", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("GhostCloak", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("MengskWraithCloak", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Yamato", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("OpticalFlare", 0), false);
            TechTreeAbilityAllow(lv_n, AbilityCommand("Restoration", 0), false);
        }
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_glues_active == true)) {
            lib10327208_gv_glues_active = false;
            lv_n = 2;
            for ( ; ( (autoD4A1C90A_ai >= 0 && lv_n <= autoD4A1C90A_ae) || (autoD4A1C90A_ai < 0 && lv_n >= autoD4A1C90A_ae) ) ; lv_n += autoD4A1C90A_ai ) {
                TechTreeAbilityAllow(lv_n, AbilityCommand("PsiStorm", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Hallucination", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DisruptionWeb", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("MassRecall", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("StasisField", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Plague", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DarkSwarm", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Ensnare", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Parasite", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("SpawnBroodling", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Irradiate", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("EMP", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("DefensiveMatrix2", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Lockdown", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("GhostCloak", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("MengskWraithCloak", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Yamato", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("OpticalFlare", 0), true);
                TechTreeAbilityAllow(lv_n, AbilityCommand("Restoration", 0), true);
            }
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_NoGluesNoPsionics_Init () {
    lib10327208_gt_NoGluesNoPsionics = TriggerCreate("lib10327208_gt_NoGluesNoPsionics_Func");
    TriggerAddEventChatMessage(lib10327208_gt_NoGluesNoPsionics, 1, "noglues", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Operation CWAL - Faster Building Production
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_OperationCWALFasterBuildingProduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD92E7D9_g;
    int autoCD92E7D9_var;
    playergroup auto62D246AC_g;
    int auto62D246AC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_operationCWAL == false)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALTerran", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALZerg", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALProtoss", 1);
        autoCD92E7D9_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
        autoCD92E7D9_var = -1;
        while (true) {
            autoCD92E7D9_var = PlayerGroupNextPlayer(autoCD92E7D9_g, autoCD92E7D9_var);
            if (autoCD92E7D9_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoCD92E7D9_var, "CheatOperationCWALTerran", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoCD92E7D9_var, "CheatOperationCWALZerg", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoCD92E7D9_var, "CheatOperationCWALProtoss", 1);
        }
        lib10327208_gv_operationCWAL = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_operationCWAL == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALTerran", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALZerg", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "CheatOperationCWALProtoss", 0);
            auto62D246AC_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
            auto62D246AC_var = -1;
            while (true) {
                auto62D246AC_var = PlayerGroupNextPlayer(auto62D246AC_g, auto62D246AC_var);
                if (auto62D246AC_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto62D246AC_var, "CheatOperationCWALTerran", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(auto62D246AC_var, "CheatOperationCWALZerg", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(auto62D246AC_var, "CheatOperationCWALProtoss", 0);
            }
            lib10327208_gv_operationCWAL = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_OperationCWALFasterBuildingProduction_Init () {
    lib10327208_gt_OperationCWALFasterBuildingProduction = TriggerCreate("lib10327208_gt_OperationCWALFasterBuildingProduction_Func");
    TriggerAddEventChatMessage(lib10327208_gt_OperationCWALFasterBuildingProduction, 1, "operation cwal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_PowerOverwhelmingGodMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    unitgroup autoCA9C9DDD_g;
    int autoCA9C9DDD_u;
    unit autoCA9C9DDD_var;
    unitgroup auto6EDC8A28_g;
    int auto6EDC8A28_u;
    unit auto6EDC8A28_var;
    const int auto5484E5CA_ae = 8;
    const int auto5484E5CA_ai = 1;
    unitgroup auto41D65547_g;
    int auto41D65547_u;
    unit auto41D65547_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_godMode == false)) {
        lib10327208_gv_godMode = true;
        TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive, true);
        TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive2, true);
        auto6EDC8A28_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6EDC8A28_u = UnitGroupCount(auto6EDC8A28_g, c_unitCountAll);
        for (;; auto6EDC8A28_u -= 1) {
            auto6EDC8A28_var = UnitGroupUnitFromEnd(auto6EDC8A28_g, auto6EDC8A28_u);
            if (auto6EDC8A28_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto6EDC8A28_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(auto6EDC8A28_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        }
        lv_n = 2;
        for ( ; ( (auto5484E5CA_ai >= 0 && lv_n <= auto5484E5CA_ae) || (auto5484E5CA_ai < 0 && lv_n >= auto5484E5CA_ae) ) ; lv_n += auto5484E5CA_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), lv_n) == true)) {
                auto41D65547_g = UnitGroup(null, lv_n, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto41D65547_u = UnitGroupCount(auto41D65547_g, c_unitCountAll);
                for (;; auto41D65547_u -= 1) {
                    auto41D65547_var = UnitGroupUnitFromEnd(auto41D65547_g, auto41D65547_u);
                    if (auto41D65547_var == null) { break; }
                    libNtve_gf_ChangeUnitDamage(auto41D65547_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                    libNtve_gf_ChangeUnitDamage(auto41D65547_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
                }
            }

        }
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_godMode == true)) {
            lib10327208_gv_godMode = false;
            TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive, false);
            TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive2, false);
            autoCA9C9DDD_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCA9C9DDD_u = UnitGroupCount(autoCA9C9DDD_g, c_unitCountAll);
            for (;; autoCA9C9DDD_u -= 1) {
                autoCA9C9DDD_var = UnitGroupUnitFromEnd(autoCA9C9DDD_g, autoCA9C9DDD_u);
                if (autoCA9C9DDD_var == null) { break; }
                libNtve_gf_ChangeUnitDamage(autoCA9C9DDD_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                libNtve_gf_ChangeUnitDamage(autoCA9C9DDD_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
            }
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_PowerOverwhelmingGodMode_Init () {
    lib10327208_gt_PowerOverwhelmingGodMode = TriggerCreate("lib10327208_gt_PowerOverwhelmingGodMode_Func");
    TriggerAddEventChatMessage(lib10327208_gt_PowerOverwhelmingGodMode, 1, "power overwhelming", true);
    TriggerAddEventChatMessage(lib10327208_gt_PowerOverwhelmingGodMode, 1, "omega123", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Overwhelming - God Mode Give 2
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_PowerOverwhelmingGodModeGive2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitOwnerNew() == 1) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, 1), EventUnitOwnerNew()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_PowerOverwhelmingGodModeGive2_Init () {
    lib10327208_gt_PowerOverwhelmingGodModeGive2 = TriggerCreate("lib10327208_gt_PowerOverwhelmingGodModeGive2_Func");
    TriggerEnable(lib10327208_gt_PowerOverwhelmingGodModeGive2, false);
    TriggerAddEventUnitChangeOwner(lib10327208_gt_PowerOverwhelmingGodModeGive2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Me the Money - 10000 Minerals & Gas
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_ShowMetheMoney10000MineralsGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 10000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 10000);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_ShowMetheMoney10000MineralsGas_Init () {
    lib10327208_gt_ShowMetheMoney10000MineralsGas = TriggerCreate("lib10327208_gt_ShowMetheMoney10000MineralsGas_Func");
    TriggerAddEventChatMessage(lib10327208_gt_ShowMetheMoney10000MineralsGas, c_playerAny, "show me the money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_SomethingForNothingFreeUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel1", 1);
    TriggerEnable(lib10327208_gt_SomethingForNothingFreeUpgrades2, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_SomethingForNothingFreeUpgrades_Init () {
    lib10327208_gt_SomethingForNothingFreeUpgrades = TriggerCreate("lib10327208_gt_SomethingForNothingFreeUpgrades_Func");
    TriggerAddEventChatMessage(lib10327208_gt_SomethingForNothingFreeUpgrades, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades 2
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_SomethingForNothingFreeUpgrades2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel2", 1);
    TriggerEnable(lib10327208_gt_SomethingForNothingFreeUpgrades3, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_SomethingForNothingFreeUpgrades2_Init () {
    lib10327208_gt_SomethingForNothingFreeUpgrades2 = TriggerCreate("lib10327208_gt_SomethingForNothingFreeUpgrades2_Func");
    TriggerEnable(lib10327208_gt_SomethingForNothingFreeUpgrades2, false);
    TriggerAddEventChatMessage(lib10327208_gt_SomethingForNothingFreeUpgrades2, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something For Nothing - Free Upgrades 3
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_SomethingForNothingFreeUpgrades3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossAirWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergFlyerArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMissileWeaponsLevel3", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_SomethingForNothingFreeUpgrades3_Init () {
    lib10327208_gt_SomethingForNothingFreeUpgrades3 = TriggerCreate("lib10327208_gt_SomethingForNothingFreeUpgrades3_Func");
    TriggerEnable(lib10327208_gt_SomethingForNothingFreeUpgrades3, false);
    TriggerAddEventChatMessage(lib10327208_gt_SomethingForNothingFreeUpgrades3, 1, "something for nothing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Staying Alive - Disable ScoreScreen
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_StayingAliveDisableScoreScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_stayingalive == false)) {
        lib10327208_gv_stayingalive = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_stayingalive == true)) {
            lib10327208_gv_stayingalive = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_StayingAliveDisableScoreScreen_Init () {
    lib10327208_gt_StayingAliveDisableScoreScreen = TriggerCreate("lib10327208_gt_StayingAliveDisableScoreScreen_Func");
    TriggerAddEventChatMessage(lib10327208_gt_StayingAliveDisableScoreScreen, 1, "staying alive", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Gathering - Abilities Don't Consume Energy
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_thegathering == false)) {
        lib10327208_gv_thegathering = true;
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MassRecall,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPRecall,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,StasisField,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPStasisField,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Yamato,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,HyperionYamatoSpecial,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeYamato,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeMissilePods,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MissilePods,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,ScannerSweep,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DisruptionWeb,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,CorsairMPDisruptionWeb,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonConfusion,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Feedback,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Maelstrom,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonMindControl,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,MindControl2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Plague,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Behavior,GhostCloak,Modification.VitalRegenArray[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Snipe,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Hallucination,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,PsiStorm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,PsionicLift,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Effect,heal,DrainVitalCostFactor", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,OpticalFlare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Restoration,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPEnsnare,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPSpawnBroodlings,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenClassicParasite,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Parasite,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,SpawnBroodling,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,EMP,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Irradiate,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Effect,NanoRepair,DrainVitalCostFactor", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,DevastatingShot,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,WraithCloak,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Behavior,WraithCloak,Modification.VitalRegenArray[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,OmegaStorm,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Implosion,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare2,Cost[0].Vital[Energy]", 1, 0.0);
        libNtve_gf_CatalogReferenceSetAsReal("Abil,Tychus03OmegaStorm,Cost[0].Vital[Energy]", 1, 0.0);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_thegathering == true)) {
            lib10327208_gv_thegathering = false;
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeYamato,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DukesRevengeMissilePods,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,CorsairMPDisruptionWeb,Cost[0].Vital[Energy]", 1, 125.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPEnsnare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,QueenMPSpawnBroodlings,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MassRecall,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPRecall,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,StasisField,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ArbiterMPStasisField,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Yamato,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MissilePods,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,ScannerSweep,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DisruptionWeb,Cost[0].Vital[Energy]", 1, 125.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonConfusion,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Feedback,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Maelstrom,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkArchonMindControl,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,MindControl2,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPDarkSwarm,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Plague,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefilerMPPlague,Cost[0].Vital[Energy]", 1, 0.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown,Cost[0].Vital[Energy]", 1, 0.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Behavior,GhostCloak,Modification.VitalRegenArray[Energy]", 1, -1.4765);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Snipe,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Hallucination,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,PsiStorm,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,PsionicLift,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Effect,heal,DrainVitalCostFactor", 1, 0.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,OpticalFlare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Restoration,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Parasite,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,SpawnBroodling,Cost[0].Vital[Energy]", 1, 150.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,GhostCloak2,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Lockdown2,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DefensiveMatrix2,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,EMP,Cost[0].Vital[Energy]", 1, 100.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Irradiate,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Effect,NanoRepair,DrainVitalCostFactor", 1, 0.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,DevastatingShot,Cost[0].Vital[Energy]", 1, 50.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,WraithCloak,Cost[0].Vital[Energy]", 1, 25.0);
            libNtve_gf_CatalogReferenceSetAsReal("Behavior,WraithCloak,Modification.VitalRegenArray[Energy]", 1, -1.5);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,OmegaStorm,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Implosion,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Ensnare2,Cost[0].Vital[Energy]", 1, 75.0);
            libNtve_gf_CatalogReferenceSetAsReal("Abil,Tychus03OmegaStorm,Cost[0].Vital[Energy]", 1, 75.0);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy_Init () {
    lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy = TriggerCreate("lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy_Func");
    TriggerAddEventChatMessage(lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy, 1, "the gathering", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: War Aint What It Used to be - Disable FOW
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_WarAintWhatItUsedtobeDisableFOW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib10327208_gv_waraintwhatitusedtobe == false)) {
        VisEnable(c_visTypeFog, false);
        lib10327208_gv_waraintwhatitusedtobe = true;
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((lib10327208_gv_waraintwhatitusedtobe == true)) {
            VisEnable(c_visTypeFog, true);
            lib10327208_gv_waraintwhatitusedtobe = false;
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_WarAintWhatItUsedtobeDisableFOW_Init () {
    lib10327208_gt_WarAintWhatItUsedtobeDisableFOW = TriggerCreate("lib10327208_gt_WarAintWhatItUsedtobeDisableFOW_Func");
    TriggerAddEventChatMessage(lib10327208_gt_WarAintWhatItUsedtobeDisableFOW, 1, "war aint what it used to be", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: There is no Cow Level - Instant Win
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_ThereisnoCowLevelInstantWin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_players;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_players = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, 1));
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CameraLockInput(1, true);
    UnitPauseAll(true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIAlertClear(1);
    GameOver(1, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_ThereisnoCowLevelInstantWin_Init () {
    lib10327208_gt_ThereisnoCowLevelInstantWin = TriggerCreate("lib10327208_gt_ThereisnoCowLevelInstantWin_Func");
    TriggerAddEventChatMessage(lib10327208_gt_ThereisnoCowLevelInstantWin, 1, "there is no cow level", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feed Me - Unlimited Food
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BriefCancelButton18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib10327208_gv_feedme == true)) {
        lib10327208_gv_feedme = false;
        PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        Wait(0.1, c_timeReal);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, PlayerGetPropertyInt(1, c_playerPropSuppliesMade));
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        lib10327208_gv_feedme = true;
        PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
        PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BriefCancelButton18_Init () {
    lib10327208_gt_BriefCancelButton18 = TriggerCreate("lib10327208_gt_BriefCancelButton18_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BriefCancelButton18, 1, "feed me", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tune Up - Terran Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BriefCancelButton23_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Terr"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib10327208_gv_tuneup == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_80DDC635"));
        PlayerSetConsoleSkin(1, "ConsoleTerran_Classic");
        lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib10327208_gv_tuneup == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_11A55149"));
            PlayerSetConsoleSkin(1, "ConsoleTerran_Horner");
            lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib10327208_gv_tuneup == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_5A13846C"));
                PlayerSetConsoleSkin(1, "ConsoleTerran_Swann");
                lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib10327208_gv_tuneup == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_BB05F295"));
                    PlayerSetConsoleSkin(1, "ConsoleTerran_CovertOps");
                    lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib10327208_gv_tuneup == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_55B1D676"));
                        PlayerSetConsoleSkin(1, "ConsoleTerran_XelNaga");
                        lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib10327208_gv_tuneup == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_9435E6AF"));
                            PlayerSetConsoleSkin(1, "ConsoleTerran_ArcadePurple");
                            lib10327208_gv_tuneup = (lib10327208_gv_tuneup + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib10327208_gv_tuneup == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_CE43EA36"));
                                PlayerSetConsoleSkin(1, "ConsoleTerran_Default");
                                lib10327208_gv_tuneup = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BriefCancelButton23_Init () {
    lib10327208_gt_BriefCancelButton23 = TriggerCreate("lib10327208_gt_BriefCancelButton23_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BriefCancelButton23, 1, "tune up", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evolve - Zerg Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BriefCancelButton24_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Zerg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib10327208_gv_evolve == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_AC832CAC"));
        PlayerSetConsoleSkin(1, "ConsoleZerg_Classic");
        lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib10327208_gv_evolve == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_7549E35B"));
            PlayerSetConsoleSkin(1, "ConsoleZerg_Abathur");
            lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib10327208_gv_evolve == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_466A7844"));
                PlayerSetConsoleSkin(1, "ConsoleZerg_Dehaka");
                lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib10327208_gv_evolve == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_0588388C"));
                    PlayerSetConsoleSkin(1, "ConsoleZerg_Mecha");
                    lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib10327208_gv_evolve == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_D0B714E2"));
                        PlayerSetConsoleSkin(1, "ConsoleZerg_XelNaga");
                        lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib10327208_gv_evolve == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_BE577184"));
                            PlayerSetConsoleSkin(1, "ConsoleZerg_ArcadePurple");
                            lib10327208_gv_evolve = (lib10327208_gv_evolve + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib10327208_gv_evolve == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_F290A2EE"));
                                PlayerSetConsoleSkin(1, "ConsoleZerg_Default");
                                lib10327208_gv_evolve = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BriefCancelButton24_Init () {
    lib10327208_gt_BriefCancelButton24 = TriggerCreate("lib10327208_gt_BriefCancelButton24_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BriefCancelButton24, 1, "evolve", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forge - Protoss Swap Consoles
//--------------------------------------------------------------------------------------------------
bool lib10327208_gt_BriefCancelButton25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((PlayerRace(1) == "Prot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib10327208_gv_forge == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_B3438768"));
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
        lib10327208_gv_forge = (lib10327208_gv_forge + 1);
        Wait(4.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        if ((lib10327208_gv_forge == 2)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_7547A509"));
            PlayerSetConsoleSkin(1, "ConsoleProtoss_Fenix");
            lib10327208_gv_forge = (lib10327208_gv_forge + 1);
            Wait(4.0, c_timeReal);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((lib10327208_gv_forge == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_71F798F2"));
                PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
                lib10327208_gv_forge = (lib10327208_gv_forge + 1);
                Wait(4.0, c_timeReal);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                if ((lib10327208_gv_forge == 4)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_C02D7BC8"));
                    PlayerSetConsoleSkin(1, "ConsoleProtoss_Forged");
                    lib10327208_gv_forge = (lib10327208_gv_forge + 1);
                    Wait(4.0, c_timeReal);
                    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((lib10327208_gv_forge == 5)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_D2181FCF"));
                        PlayerSetConsoleSkin(1, "ConsoleProtoss_XelNaga");
                        lib10327208_gv_forge = (lib10327208_gv_forge + 1);
                        Wait(4.0, c_timeReal);
                        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                        TriggerEnable(TriggerGetCurrent(), true);
                    }
                    else {
                        if ((lib10327208_gv_forge == 6)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_87A5BEBE"));
                            PlayerSetConsoleSkin(1, "ConsoleProtoss_ArcadePurple");
                            lib10327208_gv_forge = (lib10327208_gv_forge + 1);
                            Wait(4.0, c_timeReal);
                            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                            TriggerEnable(TriggerGetCurrent(), true);
                        }
                        else {
                            if ((lib10327208_gv_forge == 7)) {
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_10327208_ADEA6618"));
                                PlayerSetConsoleSkin(1, "ConsoleProtoss_Default");
                                lib10327208_gv_forge = 1;
                                Wait(4.0, c_timeReal);
                                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                                TriggerEnable(TriggerGetCurrent(), true);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib10327208_gt_BriefCancelButton25_Init () {
    lib10327208_gt_BriefCancelButton25 = TriggerCreate("lib10327208_gt_BriefCancelButton25_Func");
    TriggerAddEventChatMessage(lib10327208_gt_BriefCancelButton25, 1, "forge", true);
}

void lib10327208_InitTriggers () {
    lib10327208_gt_UT_FastConstruction_Init();
    lib10327208_gt_UT_FastTrain_Init();
    lib10327208_gt_UT_FastResearch_Init();
    lib10327208_gt_UT_FastArrm_Init();
    lib10327208_gt_UT_FastRevive_Init();
    lib10327208_gt_UT_FastBuild_Init();
    lib10327208_gt_CHEATDETECTION_Init();
    lib10327208_gt_BlackSheepWallRevealMap_Init();
    lib10327208_gt_BreatheDeep500Gas_Init();
    lib10327208_gt_WhatsMineisMine500Minerals_Init();
    lib10327208_gt_FoodforThoughtNoSupplyLimit_Init();
    lib10327208_gt_GameOverManDefeat_Init();
    lib10327208_gt_MedievalManEnableAllAbilities_Init();
    lib10327208_gt_ModifythePhaseVarianceDisableallBuildingRequirements_Init();
    lib10327208_gt_PowerOverwhelmingGodModeGive_Init();
    lib10327208_gt_NoGluesNoPsionics_Init();
    lib10327208_gt_OperationCWALFasterBuildingProduction_Init();
    lib10327208_gt_PowerOverwhelmingGodMode_Init();
    lib10327208_gt_PowerOverwhelmingGodModeGive2_Init();
    lib10327208_gt_ShowMetheMoney10000MineralsGas_Init();
    lib10327208_gt_SomethingForNothingFreeUpgrades_Init();
    lib10327208_gt_SomethingForNothingFreeUpgrades2_Init();
    lib10327208_gt_SomethingForNothingFreeUpgrades3_Init();
    lib10327208_gt_StayingAliveDisableScoreScreen_Init();
    lib10327208_gt_TheGatheringAbilitiesDontConsumeEnergy_Init();
    lib10327208_gt_WarAintWhatItUsedtobeDisableFOW_Init();
    lib10327208_gt_ThereisnoCowLevelInstantWin_Init();
    lib10327208_gt_BriefCancelButton18_Init();
    lib10327208_gt_BriefCancelButton23_Init();
    lib10327208_gt_BriefCancelButton24_Init();
    lib10327208_gt_BriefCancelButton25_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib10327208_InitLib_completed = false;

void lib10327208_InitLib () {
    if (lib10327208_InitLib_completed) {
        return;
    }

    lib10327208_InitLib_completed = true;

    lib10327208_InitLibraries();
    lib10327208_InitVariables();
    lib10327208_InitTriggers();
}

